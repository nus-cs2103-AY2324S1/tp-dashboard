[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"[![CI Status](https://github.com/AY2324S1-CS2103T-T12-4/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2324S1-CS2103T-T12-4/tp/actions)","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"[![codecov](https://codecov.io/gh/AY2324S1-CS2103T-T12-4/tp/graph/badge.svg?token\u003dXRD2EIUJ8H)](https://codecov.io/gh/AY2324S1-CS2103T-T12-4/tp)","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"- This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"- It is named MedBook, a brownfield project from the AddressBook-Level3.","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"- It can:","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"  - streamline patient management for healthcare professionals","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"  - simplify the process of accessing patients\u0027 contact information and medical records","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"- To access the User Guide, click [here](/docs/UserGuide.md)","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"- To access the Developer Guide, click [here](/docs/DeveloperGuide.md)","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"Darren159":9,"hjoneweek":1,"-":2}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-07-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"    archiveFileName \u003d \u0027medbook.jar\u0027","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"run {","lastModifiedDate":"2023-10-23"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-10-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"Darren159":3,"-":73}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"About Us\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"# About Us","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"You can reach us at the email `low.darren[at]u.nus.edu`","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"### Darren Low","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"\u003cimg src\u003d\"images/darren159.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"[[github](https://github.com/Darren159)]","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"[[portfolio](team/darren159.md)]","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"* Role: Developer","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"### Kim Hanjoo","lastModifiedDate":"2023-10-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"\u003cimg src\u003d\"images/hjoneweek.png\" width \u003d \"200px\"\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"[[github](https://github.com/hjoneweek)]","lastModifiedDate":"2023-10-04"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"[[portfolio](team/hjoneweek.md)]","lastModifiedDate":"2023-10-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"### Adam Ang Zi Jun","lastModifiedDate":"2023-10-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"\u003cimg src\u003d\"images/adammangzijun.png\" width \u003d \"200px\"\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"[[github](https://github.com/adammangzijun)]","lastModifiedDate":"2023-10-04"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"[[portfolio](team/adammangzijun.md)]","lastModifiedDate":"2023-10-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2023-10-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"Clin-lyx"},"content":"### Lin Yuxiang","lastModifiedDate":"2023-10-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"Clin-lyx"},"content":"\u003cimg src\u003d\"images/clin-lyx.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"Clin-lyx"},"content":"[[github](http://github.com/Clin-lyx)]","lastModifiedDate":"2023-10-04"},{"lineNumber":44,"author":{"gitId":"Clin-lyx"},"content":"[[portfolio](team/clin-lyx.md)]","lastModifiedDate":"2023-10-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2023-10-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* Responsibilities: UI","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"ryanongwx"},"content":"### Ryan Ong Wei Xian","lastModifiedDate":"2023-10-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"ryanongwx"},"content":"\u003cimg src\u003d\"images/ryanongwx.png\" width \u003d \"200px\"\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"ryanongwx"},"content":"[[github](https://github.com/ryanongwx)]","lastModifiedDate":"2023-10-05"},{"lineNumber":54,"author":{"gitId":"ryanongwx"},"content":"[[portfolio](team/ryanongwx.md)]","lastModifiedDate":"2023-10-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2023-10-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"Darren159":7,"hjoneweek":3,"Clin-lyx":4,"-":34,"adammangzijun":4,"ryanongwx":4}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Developer Guide\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"# MedBook Developer Guide","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"ryanongwx"},"content":"## Acknowledgements","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"ryanongwx"},"content":"This project has not used any third-party libraries.","lastModifiedDate":"2023-11-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"---","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"ryanongwx"},"content":"## Setting up and Getting Started","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"ryanongwx"},"content":"For initial setup and getting started with the development, please refer to the guide: [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"---","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"ryanongwx"},"content":"## Design Overview","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"ryanongwx"},"content":"\u003cpuml src\u003d\"diagrams/ArchitectureDiagram.puml\" width\u003d\"280\" alt\u003d\"Architecture Diagram\"/\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"ryanongwx"},"content":"The **_Architecture Diagram_** above provides a high-level design overview of the application.","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"ryanongwx"},"content":"Below is a quick overview of the main components and their interactions:","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"ryanongwx"},"content":"#### Main Components:","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"ryanongwx"},"content":"- **`Main`**: Responsible for initializing other components in the correct sequence upon application launch, and ensures proper shut down procedures are followed. It consists of [`Main`](https://github.com/AY2324S1-CS2103T-T12-4/tp/blob/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2324S1-CS2103T-T12-4/tp/blob/master/src/main/java/seedu/address/MainApp.java) classes.","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"ryanongwx"},"content":"- **`UI`** ([Details](#ui-component)): Manages the User Interface of the app.","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ryanongwx"},"content":"- **`Logic`** ([Details](#logic-component)): Handles command execution.","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"ryanongwx"},"content":"- **`Model`** ([Details](#model-component)): Manages in-memory data.","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"ryanongwx"},"content":"- **`Storage`** ([Details](#storage-component)): Handles reading from and writing to the hard disk.","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"ryanongwx"},"content":"- **`Commons`**: A collection of classes used by multiple components.","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"ryanongwx"},"content":"#### Component Interactions:","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"ryanongwx"},"content":"The sequence diagram below shows the interactions between components for the `delete 1` command:","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"ryanongwx"},"content":"\u003cpuml src\u003d\"diagrams/ArchitectureSequenceDiagram.puml\" width\u003d\"574\" alt\u003d\"Architecture Sequence Diagram\" /\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"ryanongwx"},"content":"Each of the four main components:","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"ryanongwx"},"content":"- Defines its API in an interface named after the component.","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"ryanongwx"},"content":"- Implements its functionality using a `{Component Name}Manager` class, following the corresponding API interface.","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"ryanongwx"},"content":"For example, the `Logic` component\u0027s API is defined in `Logic.java`, and its functionality is implemented in `LogicManager.java`.","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":54,"author":{"gitId":"ryanongwx"},"content":"#### Detailed Component Descriptions:","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"ryanongwx"},"content":"[More details about each component are provided in the subsequent sections.](#detailed-component-descriptions)","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"ryanongwx"},"content":"---","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"ryanongwx"},"content":"### Detailed Component Descriptions","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"ryanongwx"},"content":"#### UI Component","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"ryanongwx"},"content":"- **API**: [`Ui.java`](https://github.com/AY2324S1-CS2103T-T12-4/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2023-11-02"},{"lineNumber":65,"author":{"gitId":"ryanongwx"},"content":"- The UI component is responsible for handling all user interface operations.","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"ryanongwx"},"content":"\u003cdetails\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":68,"author":{"gitId":"ryanongwx"},"content":"\u003csummary\u003eClick to expand details\u003c/summary\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UiClassDiagram.puml\" alt\u003d\"Structure of the UI Component\"/\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"ryanongwx"},"content":"The UI is composed of various components such as `MainWindow`, `CommandBox`, `ResultDisplay`, `PersonListPanel`, and `StatusBarFooter`, all of which inherit from the `UiPart` class.","lastModifiedDate":"2023-11-02"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"ryanongwx"},"content":"The UI layouts are defined in corresponding `.fxml` files located in the `src/main/resources/view` folder.","lastModifiedDate":"2023-11-02"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"ryanongwx"},"content":"Key responsibilities include:","lastModifiedDate":"2023-11-02"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"ryanongwx"},"content":"- Executing user commands via the `Logic` component.","lastModifiedDate":"2023-11-02"},{"lineNumber":79,"author":{"gitId":"ryanongwx"},"content":"- Listening for data changes in the `Model` and updating the UI accordingly.","lastModifiedDate":"2023-11-02"},{"lineNumber":80,"author":{"gitId":"ryanongwx"},"content":"- Maintaining a reference to the `Logic` component for command execution.","lastModifiedDate":"2023-11-02"},{"lineNumber":81,"author":{"gitId":"ryanongwx"},"content":"- Depending on certain `Model` classes to display `Person` objects.","lastModifiedDate":"2023-11-02"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"ryanongwx"},"content":"\u003c/details\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"ryanongwx"},"content":"---","lastModifiedDate":"2023-11-02"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"ryanongwx"},"content":"#### Logic Component","lastModifiedDate":"2023-11-02"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"ryanongwx"},"content":"- **API**: [`Logic.java`](https://github.com/AY2324S1-CS2103T-T12-4/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2023-11-02"},{"lineNumber":90,"author":{"gitId":"ryanongwx"},"content":"- The Logic component is responsible for interpreting and executing user commands.","lastModifiedDate":"2023-11-02"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":92,"author":{"gitId":"ryanongwx"},"content":"\u003cdetails\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":93,"author":{"gitId":"ryanongwx"},"content":"\u003csummary\u003eClick to expand details\u003c/summary\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"ryanongwx"},"content":"Here\u0027s a partial class diagram of the `Logic` component:","lastModifiedDate":"2023-11-02"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"ryanongwx"},"content":"\u003cpuml src\u003d\"diagrams/LogicClassDiagram.puml\" width\u003d\"550\" alt\u003d\"Logic Component Class Diagram\"/\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":99,"author":{"gitId":"ryanongwx"},"content":"Key functionalities include:","lastModifiedDate":"2023-11-02"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":101,"author":{"gitId":"ryanongwx"},"content":"- Interpreting user input and generating the corresponding `Command` object.","lastModifiedDate":"2023-11-02"},{"lineNumber":102,"author":{"gitId":"ryanongwx"},"content":"- Executing the command and generating a `CommandResult` object.","lastModifiedDate":"2023-11-02"},{"lineNumber":103,"author":{"gitId":"ryanongwx"},"content":"- Depending on the `Model` component to perform data operations.","lastModifiedDate":"2023-11-02"},{"lineNumber":104,"author":{"gitId":"ryanongwx"},"content":"- Managing various command parsers to handle specific command formats.","lastModifiedDate":"2023-11-02"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":106,"author":{"gitId":"ryanongwx"},"content":"\u003c/details\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"ryanongwx"},"content":"---","lastModifiedDate":"2023-11-02"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":110,"author":{"gitId":"ryanongwx"},"content":"#### Model Component","lastModifiedDate":"2023-11-02"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"ryanongwx"},"content":"- **API**: [`Model.java`](https://github.com/AY2324S1-CS2103T-T12-4/tp/blob/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2023-11-02"},{"lineNumber":113,"author":{"gitId":"ryanongwx"},"content":"- The Model component manages the application\u0027s in-memory data.","lastModifiedDate":"2023-11-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":115,"author":{"gitId":"ryanongwx"},"content":"\u003cdetails\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":116,"author":{"gitId":"ryanongwx"},"content":"\u003csummary\u003eClick to expand details\u003c/summary\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"ryanongwx"},"content":"\u003cpuml src\u003d\"diagrams/ModelClassDiagram.puml\" width\u003d\"450\" alt\u003d\"Model Component Class Diagram\"/\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"ryanongwx"},"content":"Key responsibilities include:","lastModifiedDate":"2023-11-02"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"ryanongwx"},"content":"- Storing address book data and selected `Person` objects.","lastModifiedDate":"2023-11-02"},{"lineNumber":123,"author":{"gitId":"ryanongwx"},"content":"- Managing user preferences.","lastModifiedDate":"2023-11-02"},{"lineNumber":124,"author":{"gitId":"ryanongwx"},"content":"- Providing an unmodifiable view of lists of `Person` objects for UI binding.","lastModifiedDate":"2023-11-02"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"ryanongwx"},"content":"\u003c/details\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":128,"author":{"gitId":"ryanongwx"},"content":"---","lastModifiedDate":"2023-11-02"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"ryanongwx"},"content":"#### Storage Component","lastModifiedDate":"2023-11-02"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"ryanongwx"},"content":"- **API**: [`Storage.java`](https://github.com/AY2324S1-CS2103T-T12-4/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2023-11-02"},{"lineNumber":133,"author":{"gitId":"ryanongwx"},"content":"- The Storage component manages data persistence.","lastModifiedDate":"2023-11-02"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"ryanongwx"},"content":"\u003cdetails\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":136,"author":{"gitId":"ryanongwx"},"content":"\u003csummary\u003eClick to expand details\u003c/summary\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"ryanongwx"},"content":"\u003cpuml src\u003d\"diagrams/StorageClassDiagram.puml\" width\u003d\"550\" alt\u003d\"Storage Component Class Diagram\"/\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"ryanongwx"},"content":"Key functionalities include:","lastModifiedDate":"2023-11-02"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"ryanongwx"},"content":"- Saving and retrieving address book data and user preferences in JSON format.","lastModifiedDate":"2023-11-02"},{"lineNumber":143,"author":{"gitId":"ryanongwx"},"content":"- Implementing both `AddressBookStorage` and `UserPrefStorage` for flexibility.","lastModifiedDate":"2023-11-02"},{"lineNumber":144,"author":{"gitId":"ryanongwx"},"content":"- Depending on certain `Model` classes for data object definitions.","lastModifiedDate":"2023-11-02"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":146,"author":{"gitId":"ryanongwx"},"content":"\u003c/details\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"ryanongwx"},"content":"---","lastModifiedDate":"2023-11-02"},{"lineNumber":149,"author":{"gitId":"ryanongwx"},"content":"## Common Classes","lastModifiedDate":"2023-11-02"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"ryanongwx"},"content":"Classes used by multiple components are housed in the `seedu.addressbook.commons` package.","lastModifiedDate":"2023-11-02"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"Darren159"},"content":"---","lastModifiedDate":"2023-10-26"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"ryanongwx"},"content":"## Implementation","lastModifiedDate":"2023-11-02"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"ryanongwx"},"content":"This section delves into the implementation details of various noteworthy features.","lastModifiedDate":"2023-11-02"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"ryanongwx"},"content":"### Records Feature","lastModifiedDate":"2023-11-02"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":161,"author":{"gitId":"hjoneweek"},"content":"#### General Implementation Details","lastModifiedDate":"2023-10-27"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":163,"author":{"gitId":"hjoneweek"},"content":"\u003cpuml src\u003d\"diagrams/RecordClassDiagram.puml\"/\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":165,"author":{"gitId":"ryanongwx"},"content":"A `Record` object encapsulates various attributes:","lastModifiedDate":"2023-11-02"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":167,"author":{"gitId":"ryanongwx"},"content":"- `DateTime`: Date and time of the patient\u0027s clinic visit","lastModifiedDate":"2023-11-02"},{"lineNumber":168,"author":{"gitId":"ryanongwx"},"content":"- `List\u003cCondition\u003e`: Patient\u0027s health conditions","lastModifiedDate":"2023-11-02"},{"lineNumber":169,"author":{"gitId":"ryanongwx"},"content":"- `List\u003cMedication\u003e`: Medications prescribed to the patient","lastModifiedDate":"2023-11-02"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":171,"author":{"gitId":"ryanongwx"},"content":"Uniqueness of records is maintained through the `UniqueRecordList`.","lastModifiedDate":"2023-11-02"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":173,"author":{"gitId":"ryanongwx"},"content":"#### Adding a Record","lastModifiedDate":"2023-11-02"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":175,"author":{"gitId":"hjoneweek"},"content":"##### Overview","lastModifiedDate":"2023-10-27"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":177,"author":{"gitId":"ryanongwx"},"content":"The `addrecord` command integrates a new `Record` object with the patient\u0027s details in MedBook.","lastModifiedDate":"2023-11-02"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":179,"author":{"gitId":"ryanongwx"},"content":"#### Implementation Steps","lastModifiedDate":"2023-11-02"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":181,"author":{"gitId":"ryanongwx"},"content":"1. **Parse User Input**: `AddRecordCommandParser` checks for necessary parameters and their validity.","lastModifiedDate":"2023-11-02"},{"lineNumber":182,"author":{"gitId":"ryanongwx"},"content":"2. **Create Record Object**: A `Record` object is instantiated and handed over to the `AddRecordCommand`.","lastModifiedDate":"2023-11-02"},{"lineNumber":183,"author":{"gitId":"ryanongwx"},"content":"3. **Execute Command**: `AddRecordCommand#execute()` adds the new `Record` to the patient\u0027s `UniqueRecordList`.","lastModifiedDate":"2023-11-02"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":185,"author":{"gitId":"hjoneweek"},"content":"\u003cpuml src\u003d\"diagrams/AddRecordSequenceDiagram.puml\" width\u003d\"450\" /\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":187,"author":{"gitId":"ryanongwx"},"content":"#### Design Considerations","lastModifiedDate":"2023-11-02"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":189,"author":{"gitId":"ryanongwx"},"content":"**Aspect: Structure of the Appointment class:**","lastModifiedDate":"2023-11-02"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":191,"author":{"gitId":"ryanongwx"},"content":"- **Alternative 1 (Current Choice)**: Each `Person` object holds a `UniqueRecordList`.","lastModifiedDate":"2023-11-02"},{"lineNumber":192,"author":{"gitId":"ryanongwx"},"content":"   - *Pros*: Simplifies the retrieval of a person\u0027s records.","lastModifiedDate":"2023-11-02"},{"lineNumber":193,"author":{"gitId":"ryanongwx"},"content":"   - *Cons*: Fetching records across all individuals can be cumbersome.","lastModifiedDate":"2023-11-02"},{"lineNumber":194,"author":{"gitId":"ryanongwx"},"content":"- **Alternative 2**: The `Model` holds a `UniqueRecordList` for records of all patients.","lastModifiedDate":"2023-11-02"},{"lineNumber":195,"author":{"gitId":"ryanongwx"},"content":"   - *Pros*: Convenient for displaying all records.","lastModifiedDate":"2023-11-02"},{"lineNumber":196,"author":{"gitId":"ryanongwx"},"content":"   - *Cons*: Hard to fetch records associated with a specific `Person`.","lastModifiedDate":"2023-11-02"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":198,"author":{"gitId":"ryanongwx"},"content":"### Edit Patient Feature","lastModifiedDate":"2023-11-02"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":200,"author":{"gitId":"ryanongwx"},"content":"The `editpatient` mechanism is primarily handled by `EditCommand`.","lastModifiedDate":"2023-11-02"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":202,"author":{"gitId":"ryanongwx"},"content":"#### Workflow","lastModifiedDate":"2023-11-02"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":204,"author":{"gitId":"ryanongwx"},"content":"1. **Initialization**: On startup, the `AddressBook` is populated with sample data.","lastModifiedDate":"2023-11-02"},{"lineNumber":205,"author":{"gitId":"ryanongwx"},"content":"2. **Execution**: The user modifies a patient’s details using the `editpatient` command, triggering updates in the `Model` and `AddressBook`.","lastModifiedDate":"2023-11-02"},{"lineNumber":206,"author":{"gitId":"ryanongwx"},"content":"3. **Update**: The patient’s details are updated and the new AddressBook is displayed.","lastModifiedDate":"2023-11-02"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":208,"author":{"gitId":"ryanongwx"},"content":"**Related Classes and Methods:**","lastModifiedDate":"2023-11-02"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":210,"author":{"gitId":"ryanongwx"},"content":"- `EditCommandParser`: Parses command input.","lastModifiedDate":"2023-11-02"},{"lineNumber":211,"author":{"gitId":"ryanongwx"},"content":"- `EditPersonDescriptor`: Holds editable patient details.","lastModifiedDate":"2023-11-02"},{"lineNumber":212,"author":{"gitId":"ryanongwx"},"content":"- `ModelManager#setPerson(Person,Person)`, `AddressBook#SetPerson(Person,Person)`, `UniquePersonList#setPerson(Person,Person)`: Updates patient details.","lastModifiedDate":"2023-11-02"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":214,"author":{"gitId":"ryanongwx"},"content":"**Sequence Diagram**: *Pending Implementation*","lastModifiedDate":"2023-11-02"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":216,"author":{"gitId":"ryanongwx"},"content":"#### Design Considerations","lastModifiedDate":"2023-11-02"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":218,"author":{"gitId":"ryanongwx"},"content":"**Aspect: Edit Patient Execution:**","lastModifiedDate":"2023-11-02"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":220,"author":{"gitId":"ryanongwx"},"content":"- **Alternative 1 (Current Choice)**: Create a copy of the `Person`, edit, then replace.","lastModifiedDate":"2023-11-02"},{"lineNumber":221,"author":{"gitId":"ryanongwx"},"content":"   - *Pros*: Future-proof, maintains data integrity.","lastModifiedDate":"2023-11-02"},{"lineNumber":222,"author":{"gitId":"ryanongwx"},"content":"   - *Cons*: Adds complexity, potential performance issues.","lastModifiedDate":"2023-11-02"},{"lineNumber":223,"author":{"gitId":"ryanongwx"},"content":"- **Alternative 2**: Directly edit the `Person` in the AddressBook.","lastModifiedDate":"2023-11-02"},{"lineNumber":224,"author":{"gitId":"ryanongwx"},"content":"   - *Pros*: Straightforward.","lastModifiedDate":"2023-11-02"},{"lineNumber":225,"author":{"gitId":"ryanongwx"},"content":"   - *Cons*: Limits future functionalities, potential data integrity issues.","lastModifiedDate":"2023-11-02"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":227,"author":{"gitId":"ryanongwx"},"content":"### Appointments Feature","lastModifiedDate":"2023-11-02"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":229,"author":{"gitId":"Darren159"},"content":"#### General Implementation Details","lastModifiedDate":"2023-10-26"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":231,"author":{"gitId":"Darren159"},"content":"\u003cpuml src\u003d\"diagrams/AppointmentClassDiagram.puml\"/\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":233,"author":{"gitId":"ryanongwx"},"content":"An `Appointment` is comprised of:","lastModifiedDate":"2023-11-02"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":235,"author":{"gitId":"ryanongwx"},"content":"- `Name`: Appointment’s title.","lastModifiedDate":"2023-11-02"},{"lineNumber":236,"author":{"gitId":"ryanongwx"},"content":"- `DateTime`: Scheduling details.","lastModifiedDate":"2023-11-02"},{"lineNumber":237,"author":{"gitId":"ryanongwx"},"content":"- `Person`: The patient involved.","lastModifiedDate":"2023-11-02"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":239,"author":{"gitId":"ryanongwx"},"content":"Uniqueness is enforced through a `UniqueAppointmentList`.","lastModifiedDate":"2023-11-02"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":241,"author":{"gitId":"ryanongwx"},"content":"#### Adding an Appointment","lastModifiedDate":"2023-11-02"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":243,"author":{"gitId":"Darren159"},"content":"##### Overview","lastModifiedDate":"2023-10-26"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":245,"author":{"gitId":"ryanongwx"},"content":"`addappointment` adds a new `Appointment` to MedBook.","lastModifiedDate":"2023-11-02"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":247,"author":{"gitId":"ryanongwx"},"content":"#### Implementation Steps","lastModifiedDate":"2023-11-02"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":249,"author":{"gitId":"ryanongwx"},"content":"1. **Parse User Input**: Utilize `AddAppointmentCommandParser` for attribute validation.","lastModifiedDate":"2023-11-02"},{"lineNumber":250,"author":{"gitId":"ryanongwx"},"content":"2. **Create and Execute**: Instantiate an `Appointment` and execute `AddAppointmentCommand`.","lastModifiedDate":"2023-11-02"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":252,"author":{"gitId":"Darren159"},"content":"\u003cpuml src\u003d\"diagrams/AddAppointmentSequenceDiagram.puml\" width\u003d\"450\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":254,"author":{"gitId":"ryanongwx"},"content":"#### Design Considerations","lastModifiedDate":"2023-11-02"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"ryanongwx"},"content":"**Aspect: Structure of the Appointment class:**","lastModifiedDate":"2023-11-02"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":258,"author":{"gitId":"ryanongwx"},"content":"- **Alternative 1 (Current Choice)**: `Model` holds a `UniqueAppointmentList`, each `Appointment` has a `Person`’s NRIC.","lastModifiedDate":"2023-11-02"},{"lineNumber":259,"author":{"gitId":"ryanongwx"},"content":"   - *Pros*: Simplifies displaying all appointments.","lastModifiedDate":"2023-11-02"},{"lineNumber":260,"author":{"gitId":"ryanongwx"},"content":"   - *Cons*: Hard to fetch a specific `Person`’s appointments, issues with NRIC updates.","lastModifiedDate":"2023-11-02"},{"lineNumber":261,"author":{"gitId":"ryanongwx"},"content":"- **Alternative 2**: Each `Person` holds their `UniqueAppointmentList`.","lastModifiedDate":"2023-11-02"},{"lineNumber":262,"author":{"gitId":"ryanongwx"},"content":"   - *Pros*: Easy to retrieve a person\u0027s appointments.","lastModifiedDate":"2023-11-02"},{"lineNumber":263,"author":{"gitId":"ryanongwx"},"content":"   - *Cons*: Fetching all appointments can be complex.","lastModifiedDate":"2023-11-02"},{"lineNumber":264,"author":{"gitId":"ryanongwx"},"content":"## View Feature","lastModifiedDate":"2023-11-02"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":266,"author":{"gitId":"ryanongwx"},"content":"### Implementation","lastModifiedDate":"2023-11-02"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":268,"author":{"gitId":"ryanongwx"},"content":"The view mechanism is facilitated through `ViewCommand`, which takes a `PATIENTINDEX` as input and updates the `records` and `personBeingViewed` attributes in `AddressBook`. ","lastModifiedDate":"2023-11-02"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":270,"author":{"gitId":"ryanongwx"},"content":"Key components implemented include:","lastModifiedDate":"2023-11-02"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":272,"author":{"gitId":"ryanongwx"},"content":"- `ViewCommandParser`: Parses command input to create a `ViewCommand` with the specified `PATIENTINDEX`.","lastModifiedDate":"2023-11-02"},{"lineNumber":273,"author":{"gitId":"ryanongwx"},"content":"- `AddressBook`: Contains methods such as `setRecords(Person)`, `getRecordList()`, and `getPersonBeingViewed()`.","lastModifiedDate":"2023-11-02"},{"lineNumber":274,"author":{"gitId":"ryanongwx"},"content":"- `RecordCard`: A UI component displaying a single record’s information.","lastModifiedDate":"2023-11-02"},{"lineNumber":275,"author":{"gitId":"ryanongwx"},"content":"- `RecordListPanel`: A UI component housing a list of `RecordCard`s.","lastModifiedDate":"2023-11-02"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":277,"author":{"gitId":"ryanongwx"},"content":"These methods in `AddressBook` are exposed via the `Model` interface (`updateRecords(Person)`, `getRecordList()`, `getPersonBeingViewed()`), and their get variants are also available through the `Logic` interface.","lastModifiedDate":"2023-11-02"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":279,"author":{"gitId":"ryanongwx"},"content":"### Usage Scenario","lastModifiedDate":"2023-11-02"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":281,"author":{"gitId":"ryanongwx"},"content":"1. **Initialization**: Upon launch, `AddressBook` is populated with sample data. `MainWindow` invokes `getRecordList()` and `getPersonBeingViewed()` to initialize the `recordListPanel` and `personBeingViewedPanel`.","lastModifiedDate":"2023-11-02"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":283,"author":{"gitId":"ryanongwx"},"content":"2. **View Command**: User executes `view 1`, initiating a `Model#updateRecords(Person)` call. ","lastModifiedDate":"2023-11-02"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":285,"author":{"gitId":"ryanongwx"},"content":"   \u003e **Note**: A failed command will not trigger a `Model#updateRecords(Person)` call, preventing any updates to `records` and `personBeingViewed`.","lastModifiedDate":"2023-11-02"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":287,"author":{"gitId":"ryanongwx"},"content":"3. **Update and Display**: `Model` updates `AddressBook`’s variables, displaying the patient\u0027s medical records and personal card in their respective UI panels.","lastModifiedDate":"2023-11-02"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":289,"author":{"gitId":"ryanongwx"},"content":"The following sequence diagram shows how the view operation works:","lastModifiedDate":"2023-11-02"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":291,"author":{"gitId":"Clin-lyx"},"content":"\u003cpuml src\u003d\"diagrams/ViewSequenceDiagram.puml\" alt\u003d\"ViewSequenceDiagram\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":293,"author":{"gitId":"ryanongwx"},"content":"### Design Considerations","lastModifiedDate":"2023-11-02"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":295,"author":{"gitId":"ryanongwx"},"content":"#### How View Executes","lastModifiedDate":"2023-11-02"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"ryanongwx"},"content":"- **Alternative 1**: (Chosen) Utilize `UniqueRecordList` for `records` and `UniquePersonList` for `personBeingViewed`.","lastModifiedDate":"2023-11-02"},{"lineNumber":298,"author":{"gitId":"ryanongwx"},"content":"  - _Pros_: Simpler implementation.","lastModifiedDate":"2023-11-02"},{"lineNumber":299,"author":{"gitId":"ryanongwx"},"content":"  - _Cons_: Potential memory usage issues.","lastModifiedDate":"2023-11-02"},{"lineNumber":300,"author":{"gitId":"ryanongwx"},"content":"- **Alternative 2**: Utilize `UniqueRecordList` for `records` and `Person` for `personBeingViewed`.","lastModifiedDate":"2023-11-02"},{"lineNumber":301,"author":{"gitId":"ryanongwx"},"content":"  - _Pros_: Reduced memory usage.","lastModifiedDate":"2023-11-02"},{"lineNumber":302,"author":{"gitId":"ryanongwx"},"content":"  - _Cons_: Increased complexity and required additional object manipulations.","lastModifiedDate":"2023-11-02"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":304,"author":{"gitId":"ryanongwx"},"content":"---","lastModifiedDate":"2023-10-27"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":306,"author":{"gitId":"ryanongwx"},"content":"## Attach Files to Patient Records","lastModifiedDate":"2023-11-02"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":308,"author":{"gitId":"ryanongwx"},"content":"### Implementation Details","lastModifiedDate":"2023-11-02"},{"lineNumber":309,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":310,"author":{"gitId":"ryanongwx"},"content":"This feature extends the `Record` class to include a `filePath`, allowing file attachments to patient records.","lastModifiedDate":"2023-11-02"},{"lineNumber":311,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":312,"author":{"gitId":"ryanongwx"},"content":"#### Record Class","lastModifiedDate":"2023-11-02"},{"lineNumber":313,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":314,"author":{"gitId":"ryanongwx"},"content":"```java","lastModifiedDate":"2023-10-27"},{"lineNumber":315,"author":{"gitId":"ryanongwx"},"content":"public class Record {","lastModifiedDate":"2023-10-27"},{"lineNumber":316,"author":{"gitId":"ryanongwx"},"content":"    // Additional filepath field","lastModifiedDate":"2023-11-02"},{"lineNumber":317,"author":{"gitId":"ryanongwx"},"content":"    private String filePath;","lastModifiedDate":"2023-10-27"},{"lineNumber":318,"author":{"gitId":"ryanongwx"},"content":"}","lastModifiedDate":"2023-10-27"},{"lineNumber":319,"author":{"gitId":"ryanongwx"},"content":"```","lastModifiedDate":"2023-10-27"},{"lineNumber":320,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":321,"author":{"gitId":"ryanongwx"},"content":"#### User Interface","lastModifiedDate":"2023-11-02"},{"lineNumber":322,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":323,"author":{"gitId":"ryanongwx"},"content":"- **Attach File**: Users can attach files through a button click, which opens a file explorer for file selection. The `filePath` in `Record` gets updated accordingly.","lastModifiedDate":"2023-11-02"},{"lineNumber":324,"author":{"gitId":"ryanongwx"},"content":"- **Opening Attached Files**: Clicking the file path attempts to open the file with the default associated program.","lastModifiedDate":"2023-11-02"},{"lineNumber":325,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":326,"author":{"gitId":"ryanongwx"},"content":"### Design Considerations","lastModifiedDate":"2023-11-02"},{"lineNumber":327,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":328,"author":{"gitId":"ryanongwx"},"content":"- **Current Implementation**: Using GUI for file attachments.","lastModifiedDate":"2023-11-02"},{"lineNumber":329,"author":{"gitId":"ryanongwx"},"content":"  - _Pros_: User-friendly, especially for non-CLI users.","lastModifiedDate":"2023-11-02"},{"lineNumber":330,"author":{"gitId":"ryanongwx"},"content":"  - _Cons_: May be slower for users proficient with CLI.","lastModifiedDate":"2023-11-02"},{"lineNumber":331,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":332,"author":{"gitId":"Darren159"},"content":"---","lastModifiedDate":"2023-10-26"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":334,"author":{"gitId":"ryanongwx"},"content":"### User Stories","lastModifiedDate":"2023-11-02"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":336,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":338,"author":{"gitId":"-"},"content":"| Priority | As a …​     | I want to …​                                                                                               | So that I can…​                                                   |","lastModifiedDate":"2020-05-23"},{"lineNumber":339,"author":{"gitId":"Darren159"},"content":"| -------- | ----------- | ---------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------- |","lastModifiedDate":"2023-10-26"},{"lineNumber":340,"author":{"gitId":"Darren159"},"content":"| `* * *`  | user        | _add_ a patient’s medical records and contact details                                                      | keep track of them efficiently                                    |","lastModifiedDate":"2023-10-26"},{"lineNumber":341,"author":{"gitId":"Darren159"},"content":"| `* * *`  | user        | _view_ a list of all the patients in the app                                                               | quickly see all my patients at once                               |","lastModifiedDate":"2023-10-26"},{"lineNumber":342,"author":{"gitId":"Darren159"},"content":"| `* * *`  | user        | _delete_ a specific patient’s details from the ap                                                          | remove patients that are no longer relevant or needed             |","lastModifiedDate":"2023-10-26"},{"lineNumber":343,"author":{"gitId":"Darren159"},"content":"| `* * *`  | user        | _edit_ an existing patient’s details in the app                                                            | keep the information accurate and up-to-date                      |","lastModifiedDate":"2023-10-26"},{"lineNumber":344,"author":{"gitId":"Darren159"},"content":"| `* * *`  | user        | _search_ for specific patients using keywords such as patient’s name or medical record                     | easily search for and locate specific patients in the app         |","lastModifiedDate":"2023-10-26"},{"lineNumber":345,"author":{"gitId":"adammangzijun"},"content":"| `* * *`  | user        | see the app populated with sample data                                                                     | easily see how the app will look when it is in use                |","lastModifiedDate":"2023-10-04"},{"lineNumber":346,"author":{"gitId":"adammangzijun"},"content":"| `* * *`  | new user    | access a “help” page to view the app’s functionalities                                                     | learn how to use the application effectively                      |","lastModifiedDate":"2023-10-04"},{"lineNumber":347,"author":{"gitId":"Darren159"},"content":"| `* * *`  | new user    | _clear all_ current data                                                                                   | get rid of sample/experimental data I used for exploring the app  |","lastModifiedDate":"2023-10-26"},{"lineNumber":348,"author":{"gitId":"adammangzijun"},"content":"| `* * *`  | user        | exit the application and save the address book automatically                                               |                                                                   |","lastModifiedDate":"2023-10-04"},{"lineNumber":349,"author":{"gitId":"Darren159"},"content":"| `* *`    | busy user   | _pin_ a specific patient                                                                                   | remember to contact them                                          |","lastModifiedDate":"2023-10-26"},{"lineNumber":350,"author":{"gitId":"adammangzijun"},"content":"| `* *`    | user        | import my patient details into the app                                                                     | efficiently manage my existing patient information                |","lastModifiedDate":"2023-10-04"},{"lineNumber":351,"author":{"gitId":"adammangzijun"},"content":"| `* * `   | user        | reorganize the address book in terms of appointment date/time and/or alphabetical order of patients’ names | have a sorted list to for other purposes                          |","lastModifiedDate":"2023-10-04"},{"lineNumber":352,"author":{"gitId":"adammangzijun"},"content":"| `* *`    | user        | receive regular updates and bug fixes for the app                                                          | ensure that it remains functional and bug-free                    |","lastModifiedDate":"2023-10-04"},{"lineNumber":353,"author":{"gitId":"adammangzijun"},"content":"| `* *`    | user        | attach files such as lab reports and prescription images to a patient\u0027s profile                            | maintain a comprehensive record of all patient information        |","lastModifiedDate":"2023-10-04"},{"lineNumber":354,"author":{"gitId":"adammangzijun"},"content":"| `* *`    | user        | view a history log of all the changes made to a patient\u0027s record                                           | track updates and maintain a reliable record                      |","lastModifiedDate":"2023-10-04"},{"lineNumber":355,"author":{"gitId":"adammangzijun"},"content":"| `* *`    | expert user | separate my patients into different categories                                                             | easily filter out my patients accordingly                         |","lastModifiedDate":"2023-10-04"},{"lineNumber":356,"author":{"gitId":"adammangzijun"},"content":"| `* *`    | busy user   | clear the contacts related to a specific patient                                                           | remove them all at one go                                         |","lastModifiedDate":"2023-10-04"},{"lineNumber":357,"author":{"gitId":"adammangzijun"},"content":"| `*`      | user        | view a daily schedule of patient appointments within the app                                               | prepare for my daily patient consultations                        |","lastModifiedDate":"2023-10-04"},{"lineNumber":358,"author":{"gitId":"adammangzijun"},"content":"| `*`      | user        | reschedule or cancel appointments within the app                                                           | have flexibility in appointment dates                             |","lastModifiedDate":"2023-10-04"},{"lineNumber":359,"author":{"gitId":"adammangzijun"},"content":"| `*`      | user        | set access permissions(password protected)                                                                 | allow only authorized personnel to view or modify patient details |","lastModifiedDate":"2023-10-04"},{"lineNumber":360,"author":{"gitId":"adammangzijun"},"content":"| `*`      | user        | print a patient’s medical record directly from the app                                                     | facilitate physical record keeping and sharing of information     |","lastModifiedDate":"2023-10-04"},{"lineNumber":361,"author":{"gitId":"adammangzijun"},"content":"| `*`      | expert user | create reminders for my patients to follow up                                                              | make sure that patients remember their follow up appointment      |","lastModifiedDate":"2023-10-04"},{"lineNumber":362,"author":{"gitId":"adammangzijun"},"content":"| `*`      | expert user | record patients who didn’t show up                                                                         | to keep track of patients who tend to miss appointment dates      |","lastModifiedDate":"2023-10-04"},{"lineNumber":363,"author":{"gitId":"adammangzijun"},"content":"| `*`      | expert user | export patient data to a CSV file or other common formats                                                  | easily share or transfer data between different systems           |","lastModifiedDate":"2023-10-04"},{"lineNumber":364,"author":{"gitId":"adammangzijun"},"content":"| `*`      | busy user   | reminders for upcoming patient appointments                                                                | remember to attend all the consultations                          |","lastModifiedDate":"2023-10-04"},{"lineNumber":365,"author":{"gitId":"adammangzijun"},"content":"| `*`      | busy user   | blacklist certain patients                                                                                 | remove absurd patients                                            |","lastModifiedDate":"2023-10-04"},{"lineNumber":366,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":367,"author":{"gitId":"ryanongwx"},"content":"## Use Cases","lastModifiedDate":"2023-11-02"},{"lineNumber":368,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":369,"author":{"gitId":"ryanongwx"},"content":"### UC01 - Viewing Help","lastModifiedDate":"2023-11-02"},{"lineNumber":370,"author":{"gitId":"ryanongwx"},"content":"- **Actor**: User","lastModifiedDate":"2023-11-02"},{"lineNumber":371,"author":{"gitId":"ryanongwx"},"content":"- **System**: MedBook","lastModifiedDate":"2023-11-02"},{"lineNumber":372,"author":{"gitId":"ryanongwx"},"content":"- **Main Success Scenario (MSS)**:","lastModifiedDate":"2023-11-02"},{"lineNumber":373,"author":{"gitId":"ryanongwx"},"content":"  - User requests for help.","lastModifiedDate":"2023-11-02"},{"lineNumber":374,"author":{"gitId":"ryanongwx"},"content":"  - MedBook displays help information.","lastModifiedDate":"2023-11-02"},{"lineNumber":375,"author":{"gitId":"ryanongwx"},"content":"  - Use case ends.","lastModifiedDate":"2023-11-02"},{"lineNumber":376,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":377,"author":{"gitId":"ryanongwx"},"content":"### UC02 - Adding a Patient","lastModifiedDate":"2023-11-02"},{"lineNumber":378,"author":{"gitId":"ryanongwx"},"content":"- **Actor**: User","lastModifiedDate":"2023-11-02"},{"lineNumber":379,"author":{"gitId":"ryanongwx"},"content":"- **System**: MedBook","lastModifiedDate":"2023-11-02"},{"lineNumber":380,"author":{"gitId":"ryanongwx"},"content":"- **Main Success Scenario (MSS)**:","lastModifiedDate":"2023-11-02"},{"lineNumber":381,"author":{"gitId":"ryanongwx"},"content":"  1. User selects the option to add a new patient.","lastModifiedDate":"2023-11-02"},{"lineNumber":382,"author":{"gitId":"ryanongwx"},"content":"  2. MedBook prompts the user to enter the patient\u0027s details.","lastModifiedDate":"2023-11-02"},{"lineNumber":383,"author":{"gitId":"ryanongwx"},"content":"  3. User enters the patient\u0027s details.","lastModifiedDate":"2023-11-02"},{"lineNumber":384,"author":{"gitId":"ryanongwx"},"content":"  4. MedBook validates the input and adds the patient to the list.","lastModifiedDate":"2023-11-02"},{"lineNumber":385,"author":{"gitId":"ryanongwx"},"content":"  5. MedBook confirms the addition to the user.","lastModifiedDate":"2023-11-02"},{"lineNumber":386,"author":{"gitId":"ryanongwx"},"content":"- **Extensions**:","lastModifiedDate":"2023-11-02"},{"lineNumber":387,"author":{"gitId":"ryanongwx"},"content":"  - 3a. User enters invalid patient details.","lastModifiedDate":"2023-11-02"},{"lineNumber":388,"author":{"gitId":"ryanongwx"},"content":"    - 3a1. MedBook shows an error message and prompts the user to enter the details again.","lastModifiedDate":"2023-11-02"},{"lineNumber":389,"author":{"gitId":"ryanongwx"},"content":"    - Use case resumes at step 3.","lastModifiedDate":"2023-11-02"},{"lineNumber":390,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":391,"author":{"gitId":"ryanongwx"},"content":"### UC03 - Listing All Patients","lastModifiedDate":"2023-11-02"},{"lineNumber":392,"author":{"gitId":"ryanongwx"},"content":"- **Actors**: User (typically a healthcare professional)","lastModifiedDate":"2023-11-02"},{"lineNumber":393,"author":{"gitId":"ryanongwx"},"content":"- **Preconditions**: Patient list is displayed and has at least one patient entry.","lastModifiedDate":"2023-11-02"},{"lineNumber":394,"author":{"gitId":"ryanongwx"},"content":"- **Main Success Scenario (MSS)**:","lastModifiedDate":"2023-11-02"},{"lineNumber":395,"author":{"gitId":"Clin-lyx"},"content":"  1. User requests to list patients.","lastModifiedDate":"2023-10-15"},{"lineNumber":396,"author":{"gitId":"ryanongwx"},"content":"  2. MedBook shows a list of patients.","lastModifiedDate":"2023-11-02"},{"lineNumber":397,"author":{"gitId":"ryanongwx"},"content":"- **Extensions**:","lastModifiedDate":"2023-11-02"},{"lineNumber":398,"author":{"gitId":"ryanongwx"},"content":"  - 2a. The list is empty.","lastModifiedDate":"2023-11-02"},{"lineNumber":399,"author":{"gitId":"ryanongwx"},"content":"    - 2a1. MedBook informs the user that the list is empty.","lastModifiedDate":"2023-11-02"},{"lineNumber":400,"author":{"gitId":"ryanongwx"},"content":"    - Use case ends.","lastModifiedDate":"2023-11-02"},{"lineNumber":401,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":402,"author":{"gitId":"ryanongwx"},"content":"### UC04 - Editing a Patient","lastModifiedDate":"2023-11-02"},{"lineNumber":403,"author":{"gitId":"ryanongwx"},"content":"- **Actor**: User","lastModifiedDate":"2023-11-02"},{"lineNumber":404,"author":{"gitId":"ryanongwx"},"content":"- **System**: MedBook","lastModifiedDate":"2023-11-02"},{"lineNumber":405,"author":{"gitId":"ryanongwx"},"content":"- **Main Success Scenario (MSS)**:","lastModifiedDate":"2023-11-02"},{"lineNumber":406,"author":{"gitId":"ryanongwx"},"content":"  1. User lists all patients (UC03).","lastModifiedDate":"2023-11-02"},{"lineNumber":407,"author":{"gitId":"ryanongwx"},"content":"  2. User provides patient ID, detail field, and updated patient details.","lastModifiedDate":"2023-11-02"},{"lineNumber":408,"author":{"gitId":"ryanongwx"},"content":"  3. MedBook updates the patient entry.","lastModifiedDate":"2023-11-02"},{"lineNumber":409,"author":{"gitId":"ryanongwx"},"content":"  4. MedBook shows successful edit details.","lastModifiedDate":"2023-11-02"},{"lineNumber":410,"author":{"gitId":"ryanongwx"},"content":"- **Extensions**:","lastModifiedDate":"2023-11-02"},{"lineNumber":411,"author":{"gitId":"ryanongwx"},"content":"  - 2a. User gives an invalid input in any field.","lastModifiedDate":"2023-11-02"},{"lineNumber":412,"author":{"gitId":"ryanongwx"},"content":"    - 2a1. MedBook shows an error message.","lastModifiedDate":"2023-11-02"},{"lineNumber":413,"author":{"gitId":"ryanongwx"},"content":"    - Use case ends.","lastModifiedDate":"2023-11-02"},{"lineNumber":414,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":415,"author":{"gitId":"ryanongwx"},"content":"### UC05 - Locating a Specific Patient","lastModifiedDate":"2023-11-02"},{"lineNumber":416,"author":{"gitId":"ryanongwx"},"content":"- **Actor**: User","lastModifiedDate":"2023-11-02"},{"lineNumber":417,"author":{"gitId":"ryanongwx"},"content":"- **System**: MedBook","lastModifiedDate":"2023-11-02"},{"lineNumber":418,"author":{"gitId":"ryanongwx"},"content":"- **Main Success Scenario (MSS)**:","lastModifiedDate":"2023-11-02"},{"lineNumber":419,"author":{"gitId":"ryanongwx"},"content":"  1. User requests to search for a patient.","lastModifiedDate":"2023-11-02"},{"lineNumber":420,"author":{"gitId":"ryanongwx"},"content":"  2. MedBook prompts the user to enter search criteria.","lastModifiedDate":"2023-11-02"},{"lineNumber":421,"author":{"gitId":"ryanongwx"},"content":"  3. User enters search criteria.","lastModifiedDate":"2023-11-02"},{"lineNumber":422,"author":{"gitId":"ryanongwx"},"content":"  4. MedBook performs a search and displays matching patients.","lastModifiedDate":"2023-11-02"},{"lineNumber":423,"author":{"gitId":"ryanongwx"},"content":"- **Extensions**:","lastModifiedDate":"2023-11-02"},{"lineNumber":424,"author":{"gitId":"ryanongwx"},"content":"  - 4a. No matches found.","lastModifiedDate":"2023-11-02"},{"lineNumber":425,"author":{"gitId":"ryanongwx"},"content":"    - 4a1. MedBook informs the user that there were no matches.","lastModifiedDate":"2023-11-02"},{"lineNumber":426,"author":{"gitId":"ryanongwx"},"content":"    - Use case ends.","lastModifiedDate":"2023-11-02"},{"lineNumber":427,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":428,"author":{"gitId":"ryanongwx"},"content":"### UC06 - Delete a Patient","lastModifiedDate":"2023-11-02"},{"lineNumber":429,"author":{"gitId":"ryanongwx"},"content":"- **Actor**: User","lastModifiedDate":"2023-11-02"},{"lineNumber":430,"author":{"gitId":"ryanongwx"},"content":"- **System**: MedBook","lastModifiedDate":"2023-11-02"},{"lineNumber":431,"author":{"gitId":"ryanongwx"},"content":"- **Main Success Scenario (MSS)**:","lastModifiedDate":"2023-11-02"},{"lineNumber":432,"author":{"gitId":"ryanongwx"},"content":"  1. User lists all patients (UC03).","lastModifiedDate":"2023-11-02"},{"lineNumber":433,"author":{"gitId":"ryanongwx"},"content":"  2. User requests to delete a specific patient.","lastModifiedDate":"2023-11-02"},{"lineNumber":434,"author":{"gitId":"ryanongwx"},"content":"  3. MedBook confirms deletion with the user.","lastModifiedDate":"2023-11-02"},{"lineNumber":435,"author":{"gitId":"ryanongwx"},"content":"  4. User confirms.","lastModifiedDate":"2023-11-02"},{"lineNumber":436,"author":{"gitId":"ryanongwx"},"content":"  5. MedBook deletes the patient and informs the user.","lastModifiedDate":"2023-11-02"},{"lineNumber":437,"author":{"gitId":"ryanongwx"},"content":"- **Extensions**:","lastModifiedDate":"2023-11-02"},{"lineNumber":438,"author":{"gitId":"ryanongwx"},"content":"  - 2a. Given ID is invalid.","lastModifiedDate":"2023-11-02"},{"lineNumber":439,"author":{"gitId":"ryanongwx"},"content":"    - 2a1. MedBook shows an error message.","lastModifiedDate":"2023-11-02"},{"lineNumber":440,"author":{"gitId":"ryanongwx"},"content":"    - Use case ends.","lastModifiedDate":"2023-11-02"},{"lineNumber":441,"author":{"gitId":"ryanongwx"},"content":"  - 3a. User cancels the deletion.","lastModifiedDate":"2023-11-02"},{"lineNumber":442,"author":{"gitId":"ryanongwx"},"content":"    - Use case ends.","lastModifiedDate":"2023-11-02"},{"lineNumber":443,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":444,"author":{"gitId":"ryanongwx"},"content":"### UC07 - Pin a Patient","lastModifiedDate":"2023-11-02"},{"lineNumber":445,"author":{"gitId":"ryanongwx"},"content":"- **Actor**: User","lastModifiedDate":"2023-11-02"},{"lineNumber":446,"author":{"gitId":"ryanongwx"},"content":"- **System**: MedBook","lastModifiedDate":"2023-11-02"},{"lineNumber":447,"author":{"gitId":"ryanongwx"},"content":"- **Main Success Scenario (MSS)**:","lastModifiedDate":"2023-11-02"},{"lineNumber":448,"author":{"gitId":"ryanongwx"},"content":"  1. User lists all patients (UC03).","lastModifiedDate":"2023-11-02"},{"lineNumber":449,"author":{"gitId":"ryanongwx"},"content":"  2. User requests to pin a specific patient.","lastModifiedDate":"2023-11-02"},{"lineNumber":450,"author":{"gitId":"ryanongwx"},"content":"  3. MedBook pins the patient and informs the user.","lastModifiedDate":"2023-11-02"},{"lineNumber":451,"author":{"gitId":"ryanongwx"},"content":"- **Extensions**:","lastModifiedDate":"2023-11-02"},{"lineNumber":452,"author":{"gitId":"ryanongwx"},"content":"  - 2a. Given ID is invalid.","lastModifiedDate":"2023-11-02"},{"lineNumber":453,"author":{"gitId":"ryanongwx"},"content":"    - 2a1. MedBook shows an error message.","lastModifiedDate":"2023-11-02"},{"lineNumber":454,"author":{"gitId":"ryanongwx"},"content":"    - Use case ends.","lastModifiedDate":"2023-11-02"},{"lineNumber":455,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":456,"author":{"gitId":"ryanongwx"},"content":"### UC08 - Searching for Patients","lastModifiedDate":"2023-11-02"},{"lineNumber":457,"author":{"gitId":"ryanongwx"},"content":"- **Actor**: User","lastModifiedDate":"2023-11-02"},{"lineNumber":458,"author":{"gitId":"ryanongwx"},"content":"- **System**: MedBook","lastModifiedDate":"2023-11-02"},{"lineNumber":459,"author":{"gitId":"ryanongwx"},"content":"- **Main Success Scenario (MSS)**:","lastModifiedDate":"2023-11-02"},{"lineNumber":460,"author":{"gitId":"ryanongwx"},"content":"  1. User initiates a patient search using specific keywords.","lastModifiedDate":"2023-11-02"},{"lineNumber":461,"author":{"gitId":"ryanongwx"},"content":"  2. MedBook performs a case-insensitive search.","lastModifiedDate":"2023-11-02"},{"lineNumber":462,"author":{"gitId":"ryanongwx"},"content":"  3. MedBook returns a list of matching patients.","lastModifiedDate":"2023-11-02"},{"lineNumber":463,"author":{"gitId":"ryanongwx"},"content":"  4. User views the list.","lastModifiedDate":"2023-11-02"},{"lineNumber":464,"author":{"gitId":"ryanongwx"},"content":"- **Extensions**:","lastModifiedDate":"2023-11-02"},{"lineNumber":465,"author":{"gitId":"ryanongwx"},"content":"  - 3a. No matches found.","lastModifiedDate":"2023-11-02"},{"lineNumber":466,"author":{"gitId":"ryanongwx"},"content":"    - 3a1. MedBook displays a message: \"No matches found.\"","lastModifiedDate":"2023-11-02"},{"lineNumber":467,"author":{"gitId":"ryanongwx"},"content":"    - Use case ends.","lastModifiedDate":"2023-11-02"},{"lineNumber":468,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":469,"author":{"gitId":"ryanongwx"},"content":"---","lastModifiedDate":"2023-11-02"},{"lineNumber":470,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":471,"author":{"gitId":"ryanongwx"},"content":"## Non-Functional Requirements","lastModifiedDate":"2023-11-02"},{"lineNumber":472,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":473,"author":{"gitId":"ryanongwx"},"content":"1. Should work on any mainstream OS with Java 11 or above.","lastModifiedDate":"2023-11-02"},{"lineNumber":474,"author":{"gitId":"ryanongwx"},"content":"   - Rationale: Ensures accessibility for users on different platforms.","lastModifiedDate":"2023-11-02"},{"lineNumber":475,"author":{"gitId":"ryanongwx"},"content":"   - Metric: Application functions correctly on Windows, macOS, and Linux.","lastModifiedDate":"2023-11-02"},{"lineNumber":476,"author":{"gitId":"ryanongwx"},"content":"2. Supports up to 1000 patients without performance issues.","lastModifiedDate":"2023-11-02"},{"lineNumber":477,"author":{"gitId":"ryanongwx"},"content":"   - Rationale: Ensures scalability for clinics and hospitals.","lastModifiedDate":"2023-11-02"},{"lineNumber":478,"author":{"gitId":"ryanongwx"},"content":"   - Metric: Application performs smoothly with a database of 1000 patients.","lastModifiedDate":"2023-11-02"},{"lineNumber":479,"author":{"gitId":"ryanongwx"},"content":"3. Faster operation with commands than mouse for proficient typists.","lastModifiedDate":"2023-11-02"},{"lineNumber":480,"author":{"gitId":"ryanongwx"},"content":"   - Rationale: Enhances productivity for users familiar with the command line.","lastModifiedDate":"2023-11-02"},{"lineNumber":481,"author":{"gitId":"ryanongwx"},"content":"   - Metric: Common tasks are completed faster using keyboard shortcuts than GUI.","lastModifiedDate":"2023-11-02"},{"lineNumber":482,"author":{"gitId":"ryanongwx"},"content":"4. Backward compatible with data from previous versions.","lastModifiedDate":"2023-11-02"},{"lineNumber":483,"author":{"gitId":"ryanongwx"},"content":"   - Rationale: Ensures smooth transition for existing users upgrading to a new version.","lastModifiedDate":"2023-11-02"},{"lineNumber":484,"author":{"gitId":"ryanongwx"},"content":"   - Metric: Users can open and interact with data files from previous versions without issues.","lastModifiedDate":"2023-11-02"},{"lineNumber":485,"author":{"gitId":"ryanongwx"},"content":"5. Usable by novices.","lastModifiedDate":"2023-11-02"},{"lineNumber":486,"author":{"gitId":"ryanongwx"},"content":"   - Rationale: Ensures the application is accessible to new users.","lastModifiedDate":"2023-11-02"},{"lineNumber":487,"author":{"gitId":"ryanongwx"},"content":"   - Metric: New users can perform basic tasks without referring to the user manual.","lastModifiedDate":"2023-11-02"},{"lineNumber":488,"author":{"gitId":"ryanongwx"},"content":"6. Ensures data integrity and security.","lastModifiedDate":"2023-11-02"},{"lineNumber":489,"author":{"gitId":"ryanongwx"},"content":"   - Rationale: Protects patient data from corruption and unauthorized access.","lastModifiedDate":"2023-11-02"},{"lineNumber":490,"author":{"gitId":"ryanongwx"},"content":"   - Metric: Application employs data validation, encryption, and access controls.","lastModifiedDate":"2023-11-02"},{"lineNumber":491,"author":{"gitId":"ryanongwx"},"content":"7. Provides comprehensive error messages and guidance for recovery.","lastModifiedDate":"2023-11-02"},{"lineNumber":492,"author":{"gitId":"ryanongwx"},"content":"   - Rationale: Helps users understand what went wrong and how to fix it.","lastModifiedDate":"2023-11-02"},{"lineNumber":493,"author":{"gitId":"ryanongwx"},"content":"   - Metric: Error messages include a description of the issue and steps for resolution.","lastModifiedDate":"2023-11-02"},{"lineNumber":494,"author":{"gitId":"ryanongwx"},"content":"8. Responsive design that adjusts to different screen sizes and resolutions.","lastModifiedDate":"2023-11-02"},{"lineNumber":495,"author":{"gitId":"ryanongwx"},"content":"   - Rationale: Ensures usability across various devices.","lastModifiedDate":"2023-11-02"},{"lineNumber":496,"author":{"gitId":"ryanongwx"},"content":"   - Metric: UI elements are usable and aesthetically pleasing on screens ranging from 13\" laptops to 27\" monitors.","lastModifiedDate":"2023-11-02"},{"lineNumber":497,"author":{"gitId":"ryanongwx"},"content":"9. Regular updates and maintenance.","lastModifiedDate":"2023-11-02"},{"lineNumber":498,"author":{"gitId":"ryanongwx"},"content":"   - Rationale: Ensures the application stays up-to-date with the latest features and security patches.","lastModifiedDate":"2023-11-02"},{"lineNumber":499,"author":{"gitId":"ryanongwx"},"content":"   - Metric: Application receives updates at least once every three months.","lastModifiedDate":"2023-11-02"},{"lineNumber":500,"author":{"gitId":"ryanongwx"},"content":"10. Comprehensive documentation and user guides available.","lastModifiedDate":"2023-11-02"},{"lineNumber":501,"author":{"gitId":"ryanongwx"},"content":"    - Rationale: Provides users with resources to understand and use the application effectively.","lastModifiedDate":"2023-11-02"},{"lineNumber":502,"author":{"gitId":"ryanongwx"},"content":"    - Metric: Documentation covers all features, includes screenshots, and is easy to navigate.","lastModifiedDate":"2023-11-02"},{"lineNumber":503,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":504,"author":{"gitId":"ryanongwx"},"content":"---","lastModifiedDate":"2023-11-02"},{"lineNumber":505,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":506,"author":{"gitId":"ryanongwx"},"content":"## Glossary","lastModifiedDate":"2023-11-02"},{"lineNumber":507,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":508,"author":{"gitId":"ryanongwx"},"content":"- **Mainstream OS**: Popular operating systems such as Windows, Linux, Unix, and OS-X.","lastModifiedDate":"2023-11-02"},{"lineNumber":509,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":510,"author":{"gitId":"ryanongwx"},"content":"- **Private Contact Detail**: Any contact-related information that is meant to remain confidential and not be disclosed to unauthorized individuals.","lastModifiedDate":"2023-11-02"},{"lineNumber":511,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":512,"author":{"gitId":"ryanongwx"},"content":"- **CLI (Command Line Interface)**: A user interface that allows users to interact with the software using text commands via a console or terminal.","lastModifiedDate":"2023-11-02"},{"lineNumber":513,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":514,"author":{"gitId":"ryanongwx"},"content":"- **GUI (Graphical User Interface)**: A user interface that allows users to interact with the software through graphical icons and visual indicators, as opposed to text-based interfaces.","lastModifiedDate":"2023-11-02"},{"lineNumber":515,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":516,"author":{"gitId":"ryanongwx"},"content":"- **Patient ID**: A unique identifier assigned to each patient for quick and error-free retrieval of their records.","lastModifiedDate":"2023-11-02"},{"lineNumber":517,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":518,"author":{"gitId":"ryanongwx"},"content":"- **Streamlined Workflow**: A smooth, efficient workflow designed to minimize unnecessary steps and optimize productivity.","lastModifiedDate":"2023-11-02"},{"lineNumber":519,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":520,"author":{"gitId":"ryanongwx"},"content":"- **Backward Compatibility**: The ability of the system to work with data and interfaces from earlier versions of the software.","lastModifiedDate":"2023-11-02"},{"lineNumber":521,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":522,"author":{"gitId":"ryanongwx"},"content":"- **Healthcare Professional**: An individual who provides healthcare services, such as doctors, nurses, and medical staff.","lastModifiedDate":"2023-11-02"},{"lineNumber":523,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":524,"author":{"gitId":"ryanongwx"},"content":"- **Typical Usage**: The standard or most common way that the software is utilized by the end-users.","lastModifiedDate":"2023-11-02"},{"lineNumber":525,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":526,"author":{"gitId":"ryanongwx"},"content":"- **Usability**: The ease with which users can learn to use the software and the efficiency they can achieve.","lastModifiedDate":"2023-11-02"},{"lineNumber":527,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":528,"author":{"gitId":"ryanongwx"},"content":"- **Performance Issues**: Any lag, delay, or inefficiency in the software’s response or processing time, especially noticeable when handling a large amount of data.","lastModifiedDate":"2023-11-02"},{"lineNumber":529,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":530,"author":{"gitId":"ryanongwx"},"content":"- **Search Algorithm**: The method used by the software to search for and retrieve patient information based on input keywords or parameters.","lastModifiedDate":"2023-11-02"},{"lineNumber":531,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":532,"author":{"gitId":"ryanongwx"},"content":"- **Error Message**: A notification displayed by the software to inform the user that an error has occurred, often accompanied by information on how to resolve the issue.","lastModifiedDate":"2023-11-02"},{"lineNumber":533,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":534,"author":{"gitId":"ryanongwx"},"content":"- **User**: An individual who interacts with the software, typically a healthcare professional in this context.","lastModifiedDate":"2023-11-02"},{"lineNumber":535,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":536,"author":{"gitId":"ryanongwx"},"content":"- **Patient Information**: Data related to a patient, including but not limited to their personal details, medical history, contact information, and any other relevant information.","lastModifiedDate":"2023-11-02"},{"lineNumber":537,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":538,"author":{"gitId":"ryanongwx"},"content":"- **Case-Insensitive Search**: A type of search that does not differentiate between uppercase and lowercase letters, ensuring that results are returned regardless of the case used in the search query.","lastModifiedDate":"2023-11-02"},{"lineNumber":539,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":540,"author":{"gitId":"ryanongwx"},"content":"- **Data Compatibility**: The ability of the software to properly read, interpret, and use data formatted or created in other versions or different configurations.","lastModifiedDate":"2023-11-02"},{"lineNumber":541,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":542,"author":{"gitId":"ryanongwx"},"content":"- **Novice User**: A user with limited experience and knowledge of the software or similar applications.","lastModifiedDate":"2023-11-02"},{"lineNumber":543,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":544,"author":{"gitId":"ryanongwx"},"content":"Adding to the glossary ensures that all potential users, regardless of their level of expertise, have a resource to refer to when they come across terms they are unfamiliar with. This helps in making the software more accessible and user-friendly.","lastModifiedDate":"2023-11-02"},{"lineNumber":545,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":546,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":547,"author":{"gitId":"ryanongwx"},"content":"---","lastModifiedDate":"2023-11-02"},{"lineNumber":548,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":549,"author":{"gitId":"ryanongwx"},"content":"## Documentation, Logging, Testing, Configuration, Dev-Ops","lastModifiedDate":"2023-11-02"},{"lineNumber":550,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":551,"author":{"gitId":"ryanongwx"},"content":"- [Documentation guide](Documentation.md)","lastModifiedDate":"2023-11-02"},{"lineNumber":552,"author":{"gitId":"ryanongwx"},"content":"- [Testing guide](Testing.md)","lastModifiedDate":"2023-11-02"},{"lineNumber":553,"author":{"gitId":"ryanongwx"},"content":"- [Logging guide](Logging.md)","lastModifiedDate":"2023-11-02"},{"lineNumber":554,"author":{"gitId":"ryanongwx"},"content":"- [Configuration guide](Configuration.md)","lastModifiedDate":"2023-11-02"},{"lineNumber":555,"author":{"gitId":"ryanongwx"},"content":"- [DevOps guide](DevOps.md)","lastModifiedDate":"2023-11-02"},{"lineNumber":556,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":557,"author":{"gitId":"ryanongwx"},"content":"---","lastModifiedDate":"2023-11-02"},{"lineNumber":558,"author":{"gitId":"ryanongwx"},"content":"## Appendix: Requirements","lastModifiedDate":"2023-11-02"},{"lineNumber":559,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":560,"author":{"gitId":"ryanongwx"},"content":"### Product Scope","lastModifiedDate":"2023-11-02"},{"lineNumber":561,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":562,"author":{"gitId":"ryanongwx"},"content":"**Target User Profile**:","lastModifiedDate":"2023-11-02"},{"lineNumber":563,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":564,"author":{"gitId":"ryanongwx"},"content":"- **Primary Users**: Doctors and healthcare professionals who handle a substantial number of patients on a regular basis.","lastModifiedDate":"2023-11-02"},{"lineNumber":565,"author":{"gitId":"ryanongwx"},"content":"- **Platform Preference**: Has a strong inclination towards using desktop applications, particularly those that support command line interfaces (CLI).","lastModifiedDate":"2023-11-02"},{"lineNumber":566,"author":{"gitId":"ryanongwx"},"content":"- **Technical Proficiency**: Is adept at utilizing CLI applications and prefers them for their speed and efficiency.","lastModifiedDate":"2023-11-02"},{"lineNumber":567,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":568,"author":{"gitId":"ryanongwx"},"content":"**Value Proposition**:","lastModifiedDate":"2023-11-02"},{"lineNumber":569,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":570,"author":{"gitId":"ryanongwx"},"content":"- **Efficient Patient Management**: Provides a streamlined and efficient solution for managing patient information, ensuring that healthcare professionals can access and modify patient data quickly.","lastModifiedDate":"2023-11-02"},{"lineNumber":571,"author":{"gitId":"ryanongwx"},"content":"- **Speed and Accessibility**: Designed to be significantly faster than conventional GUI applications, allowing users to execute commands and retrieve patient information in a matter of seconds.","lastModifiedDate":"2023-11-02"},{"lineNumber":572,"author":{"gitId":"ryanongwx"},"content":"- **Command Line Efficiency**: Leverages the power of CLI to offer advanced users the ability to perform tasks in a more direct and efficient manner, while still maintaining accessibility for those who prefer graphical interfaces.","lastModifiedDate":"2023-11-02"},{"lineNumber":573,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":574,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":575,"author":{"gitId":"ryanongwx"},"content":"## Appendix: Instructions for Manual Testing","lastModifiedDate":"2023-11-02"},{"lineNumber":576,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":577,"author":{"gitId":"ryanongwx"},"content":"### Launch and Shutdown","lastModifiedDate":"2023-11-02"},{"lineNumber":578,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":579,"author":{"gitId":"ryanongwx"},"content":"#### Initial Launch","lastModifiedDate":"2023-11-02"},{"lineNumber":580,"author":{"gitId":"ryanongwx"},"content":"1. Download and place the jar file in an empty folder.","lastModifiedDate":"2023-11-02"},{"lineNumber":581,"author":{"gitId":"ryanongwx"},"content":"2. Double-click the jar file.","lastModifiedDate":"2023-11-02"},{"lineNumber":582,"author":{"gitId":"ryanongwx"},"content":"   - Expected: GUI opens with sample contacts.","lastModifiedDate":"2023-11-02"},{"lineNumber":583,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":584,"author":{"gitId":"ryanongwx"},"content":"#### Saving Window Preferences","lastModifiedDate":"2023-11-02"},{"lineNumber":585,"author":{"gitId":"ryanongwx"},"content":"1. Resize and reposition the window, then close it.","lastModifiedDate":"2023-11-02"},{"lineNumber":586,"author":{"gitId":"ryanongwx"},"content":"2. Reopen the application.","lastModifiedDate":"2023-11-02"},{"lineNumber":587,"author":{"gitId":"ryanongwx"},"content":"   - Expected: Window retains its size and position.","lastModifiedDate":"2023-11-02"},{"lineNumber":588,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":589,"author":{"gitId":"ryanongwx"},"content":"---","lastModifiedDate":"2023-11-02"},{"lineNumber":590,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":591,"author":{"gitId":"ryanongwx"},"content":"### Deleting a Person","lastModifiedDate":"2023-11-02"},{"lineNumber":592,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":593,"author":{"gitId":"ryanongwx"},"content":"#### When All Persons are Shown","lastModifiedDate":"2023-11-02"},{"lineNumber":594,"author":{"gitId":"ryanongwx"},"content":"1. Prerequisites: Use `list` to show all persons.","lastModifiedDate":"2023-11-02"},{"lineNumber":595,"author":{"gitId":"ryanongwx"},"content":"2. Test Case: `delete 1`","lastModifiedDate":"2023-11-02"},{"lineNumber":596,"author":{"gitId":"ryanongwx"},"content":"   - Expected: First contact deleted, details shown in status message.","lastModifiedDate":"2023-11-02"},{"lineNumber":597,"author":{"gitId":"ryanongwx"},"content":"3. Test Case: `delete 0`","lastModifiedDate":"2023-11-02"},{"lineNumber":598,"author":{"gitId":"ryanongwx"},"content":"   - Expected: Error message displayed, status bar unchanged.","lastModifiedDate":"2023-11-02"},{"lineNumber":599,"author":{"gitId":"ryanongwx"},"content":"4. Other Test Cases: `delete`, `delete x` (where x \u003e list size)","lastModifiedDate":"2023-11-02"},{"lineNumber":600,"author":{"gitId":"ryanongwx"},"content":"   - Expected: Error message displayed, status bar unchanged.","lastModifiedDate":"2023-11-02"},{"lineNumber":601,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":602,"author":{"gitId":"ryanongwx"},"content":"---","lastModifiedDate":"2023-11-02"},{"lineNumber":603,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":604,"author":{"gitId":"ryanongwx"},"content":"### Saving Data","lastModifiedDate":"2023-11-02"},{"lineNumber":605,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":606,"author":{"gitId":"ryanongwx"},"content":"#### Dealing with Missing/Corrupted Data Files","lastModifiedDate":"2023-11-02"},{"lineNumber":607,"author":{"gitId":"ryanongwx"},"content":"1. _[Provide instructions and expected behavior]_","lastModifiedDate":"2023-11-02"},{"lineNumber":608,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":609,"author":{"gitId":"ryanongwx"},"content":"---","lastModifiedDate":"2023-11-02"},{"lineNumber":610,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":611,"author":{"gitId":"ryanongwx"},"content":"### Adding a New Patient","lastModifiedDate":"2023-11-02"},{"lineNumber":612,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":613,"author":{"gitId":"ryanongwx"},"content":"#### Standard Procedure","lastModifiedDate":"2023-11-02"},{"lineNumber":614,"author":{"gitId":"ryanongwx"},"content":"1. Test Case: `add John Doe; Age: 30; Address: 123 Main St`","lastModifiedDate":"2023-11-02"},{"lineNumber":615,"author":{"gitId":"ryanongwx"},"content":"   - Expected: New patient \"John Doe\" is added to the list, details are shown in status message.","lastModifiedDate":"2023-11-02"},{"lineNumber":616,"author":{"gitId":"ryanongwx"},"content":"2. Test Case: `add; Age: 30; Address: 123 Main St`","lastModifiedDate":"2023-11-02"},{"lineNumber":617,"author":{"gitId":"ryanongwx"},"content":"   - Expected: Error message displayed, patient not added.","lastModifiedDate":"2023-11-02"},{"lineNumber":618,"author":{"gitId":"ryanongwx"},"content":"3. Test Case: `add John Doe; Age: thirty; Address: 123 Main St`","lastModifiedDate":"2023-11-02"},{"lineNumber":619,"author":{"gitId":"ryanongwx"},"content":"   - Expected: Error message displayed, patient not added.","lastModifiedDate":"2023-11-02"},{"lineNumber":620,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":621,"author":{"gitId":"ryanongwx"},"content":"---","lastModifiedDate":"2023-11-02"},{"lineNumber":622,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":623,"author":{"gitId":"ryanongwx"},"content":"### Editing a Patient\u0027s Details","lastModifiedDate":"2023-11-02"},{"lineNumber":624,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":625,"author":{"gitId":"ryanongwx"},"content":"#### When the Patient Exists","lastModifiedDate":"2023-11-02"},{"lineNumber":626,"author":{"gitId":"ryanongwx"},"content":"1. Prerequisites: Ensure the patient list is displayed and contains the entry you wish to edit.","lastModifiedDate":"2023-11-02"},{"lineNumber":627,"author":{"gitId":"ryanongwx"},"content":"2. Test Case: `edit 1; Age: 35`","lastModifiedDate":"2023-11-02"},{"lineNumber":628,"author":{"gitId":"ryanongwx"},"content":"   - Expected: Patient at index 1 has their age updated to 35. Details shown in status message.","lastModifiedDate":"2023-11-02"},{"lineNumber":629,"author":{"gitId":"ryanongwx"},"content":"3. Test Case: `edit x; Age: 35` (where x \u003e list size)","lastModifiedDate":"2023-11-02"},{"lineNumber":630,"author":{"gitId":"ryanongwx"},"content":"   - Expected: Error message displayed, patient\u0027s details unchanged.","lastModifiedDate":"2023-11-02"},{"lineNumber":631,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":632,"author":{"gitId":"ryanongwx"},"content":"---","lastModifiedDate":"2023-11-02"},{"lineNumber":633,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":634,"author":{"gitId":"ryanongwx"},"content":"### Searching for Patients","lastModifiedDate":"2023-11-02"},{"lineNumber":635,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":636,"author":{"gitId":"ryanongwx"},"content":"#### When There Are Matching Entries","lastModifiedDate":"2023-11-02"},{"lineNumber":637,"author":{"gitId":"ryanongwx"},"content":"1. Prerequisites: Ensure the patient list contains entries that will match your search term.","lastModifiedDate":"2023-11-02"},{"lineNumber":638,"author":{"gitId":"ryanongwx"},"content":"2. Test Case: `search John`","lastModifiedDate":"2023-11-02"},{"lineNumber":639,"author":{"gitId":"ryanongwx"},"content":"   - Expected: List of patients with \"John\" in their name or details is displayed.","lastModifiedDate":"2023-11-02"},{"lineNumber":640,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":641,"author":{"gitId":"ryanongwx"},"content":"---","lastModifiedDate":"2023-11-02"},{"lineNumber":642,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":643,"author":{"gitId":"ryanongwx"},"content":"### Verifying Patient Data Integrity","lastModifiedDate":"2023-11-02"},{"lineNumber":644,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":645,"author":{"gitId":"ryanongwx"},"content":"#### After Operations","lastModifiedDate":"2023-11-02"},{"lineNumber":646,"author":{"gitId":"ryanongwx"},"content":"1. Prerequisites: Perform operations like adding, deleting, and editing patients.","lastModifiedDate":"2023-11-02"},{"lineNumber":647,"author":{"gitId":"ryanongwx"},"content":"2. Navigate to the folder where data is stored and open the data file.","lastModifiedDate":"2023-11-02"},{"lineNumber":648,"author":{"gitId":"ryanongwx"},"content":"   - Expected: All changes should be accurately reflected in the data file.","lastModifiedDate":"2023-11-02"},{"lineNumber":649,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":650,"author":{"gitId":"ryanongwx"},"content":"---","lastModifiedDate":"2023-11-02"},{"lineNumber":651,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":652,"author":{"gitId":"ryanongwx"},"content":"### Handling Invalid Commands","lastModifiedDate":"2023-11-02"},{"lineNumber":653,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":654,"author":{"gitId":"ryanongwx"},"content":"#### Input Mistakes","lastModifiedDate":"2023-11-02"},{"lineNumber":655,"author":{"gitId":"ryanongwx"},"content":"1. Test Case: `ad John Doe; Age: 30; Address: 123 Main St`","lastModifiedDate":"2023-11-02"},{"lineNumber":656,"author":{"gitId":"ryanongwx"},"content":"   - Expected: Error message displayed, suggesting the correct command format.","lastModifiedDate":"2023-11-02"},{"lineNumber":657,"author":{"gitId":"ryanongwx"},"content":"2. Test Case: `delet 1`","lastModifiedDate":"2023-11-02"},{"lineNumber":658,"author":{"gitId":"ryanongwx"},"content":"   - Expected: Error message displayed, suggesting the correct command format.","lastModifiedDate":"2023-11-02"},{"lineNumber":659,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":660,"author":{"gitId":"ryanongwx"},"content":"---","lastModifiedDate":"2023-11-02"},{"lineNumber":661,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":662,"author":{"gitId":"ryanongwx"},"content":"These additional sections aim to cover more aspects of the application, providing a thorough guideline for manual testing. Each section outlines the prerequisites, the test cases, and the expected outcomes to guide testers through the process.","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"Darren159":19,"hjoneweek":4,"Clin-lyx":7,"-":193,"ryanongwx":419,"adammangzijun":20}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"User Guide\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"# User Guide","lastModifiedDate":"2023-10-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"Clin-lyx"},"content":"## Streamline Patient Management and Medical Records with Just a Few Taps!","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":11,"author":{"gitId":"Clin-lyx"},"content":"Medbook is a **desktop application** crafted specifically for **doctors** and **medical administrative assistants** of private clinics to manage patient details and medical records.","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"Clin-lyx"},"content":"Medbook provides a streamlined and user-friendly interface that empowers doctors and medical administrative assistants to effortlessly track patient details and medical records. This ensures that critical information is well-organized, easily accessible, and fully secure for your peace of mind.","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"Clin-lyx"},"content":"Here\u0027s how Medbook can streamline your tasks:","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"Clin-lyx"},"content":"- Quickly save, edit, and remove patient details.","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"Clin-lyx"},"content":"- Effortlessly handle patient appointments and records.","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"Clin-lyx"},"content":"- Search for specific information in a snap.","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"Clin-lyx"},"content":"- Get a comprehensive view of patient data, medical records, and appointments at a glance.","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"Clin-lyx"},"content":"Discover the power of Medbook:","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"Clin-lyx"},"content":"- **Digitalize Your Clinic**: Effortlessly transition to a digital clinic with our user-friendly features.","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"Clin-lyx"},"content":"- **Optimized for Speed**: Medbook offers both a Command Line Interface (CLI) and an intuitive Graphical User Interface, making it ideal for fast typists like you.","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ryanongwx"},"content":"- **QuickStart**: New to Medbook? Click [here](#quick-start) to start your journey.","lastModifiedDate":"2023-11-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"\u003cpage-nav-print /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"---","lastModifiedDate":"2023-10-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"## How to Navigate the User Guide","lastModifiedDate":"2023-10-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":36,"author":{"gitId":"Clin-lyx"},"content":"Welcome to the Medbook User Guide! Our goal is to empower you with the knowledge and confidence to make the most of Medbook\u0027s features.","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"Clin-lyx"},"content":"- **Effortless Navigation**: Use the table of contents for seamless navigation between sections.","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"ryanongwx"},"content":"- **Quick Start for New Users**: If you\u0027re new to Medbook, start with the [Quick Start](#quick-start) section to get up and running.","lastModifiedDate":"2023-11-08"},{"lineNumber":40,"author":{"gitId":"Clin-lyx"},"content":"- **Explore Features**: For those who have already set up Medbook, dive into the [Features](#features) section to discover all that our application has to offer.","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":42,"author":{"gitId":"Clin-lyx"},"content":"We\u0027re here to make your experience as user-friendly as possible. Let\u0027s get started!","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"## Quick start ","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"   - [How do I check my version of Java?](#faq)","lastModifiedDate":"2023-10-25"},{"lineNumber":48,"author":{"gitId":"Clin-lyx"},"content":"1. Download the latest jar file (`medbook.jar`) from our [github release](https://github.com/AY2324S1-CS2103T-T12-4/tp/releases).","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"Clin-lyx"},"content":"1. Move the jar file to the folder you want to store the data of the patients.","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"Clin-lyx"},"content":"    - Create a folder with your preferred name (you can call it Medbook) where you would like to house the application.","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"Clin-lyx"},"content":"    - Move the downloaded jar file to the folder as shown below.","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"Clin-lyx"},"content":"      - For Mac users:![Ui](images/MacUserDir.png)","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"Clin-lyx"},"content":"      - For Windows users:![Ui](images/WinUserDir.png)","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":57,"author":{"gitId":"Clin-lyx"},"content":"1. Run Medbook application","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"Clin-lyx"},"content":"    - **On Windows**:","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"Clin-lyx"},"content":"      - Double-click medbook.jar to run the application.","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"Clin-lyx"},"content":"      - If the GUI doesn\u0027t show up, try the following operations.","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"Clin-lyx"},"content":"      - **Open PowerShell**: Search for \"Powershell\" in the Windows search bar and open it.","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"Clin-lyx"},"content":"      - Navigate to the folder where you have stored the jar file using the cd command.","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"Clin-lyx"},"content":"      - Enter java -jar medbook.jar and press Enter. This command will execute the application.\u003cbr\u003e ","lastModifiedDate":"2023-11-02"},{"lineNumber":65,"author":{"gitId":"Clin-lyx"},"content":"      \u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"hjoneweek"},"content":"        Please note that for Windows users, you can navigate to the folder where you house Medbook. In the file address bar, click on the path to the current folder to highlight it. Type powershell and press enter. This will open a PowerShell window with the current folder as the working directory.","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"Clin-lyx"},"content":"      \u003c/box\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":68,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"Clin-lyx"},"content":"    - **On Mac**:","lastModifiedDate":"2023-11-02"},{"lineNumber":70,"author":{"gitId":"Clin-lyx"},"content":"      - **Open Terminal**: You can find Terminal in the \"Utilities\" folder within the \"Applications\" folder. Or, you can use Spotlight Search by pressing Command + Spacebar and typing \"Terminal.\"","lastModifiedDate":"2023-11-02"},{"lineNumber":71,"author":{"gitId":"Clin-lyx"},"content":"      - Navigate to the folder where you have stored the jar file using the cd command","lastModifiedDate":"2023-11-02"},{"lineNumber":72,"author":{"gitId":"Clin-lyx"},"content":"      - Run the Application: Enter java -jar medbook.jar and press Enter. This command will execute the application.\u003cbr\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":73,"author":{"gitId":"Clin-lyx"},"content":"      \u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":74,"author":{"gitId":"Clin-lyx"},"content":"        Please note that for Mac users,  in the Terminal on a Mac, you can also drag and drop the \"medbook.jar\" file directly into the Terminal window after typing `java -jar` to auto-fill the file path.","lastModifiedDate":"2023-11-02"},{"lineNumber":75,"author":{"gitId":"Clin-lyx"},"content":"      \u003c/box\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"Darren159"},"content":"The application should open up similar to the image below.","lastModifiedDate":"2023-10-25"},{"lineNumber":78,"author":{"gitId":"Clin-lyx"},"content":"![Ui](images/MedBookUi.png)","lastModifiedDate":"2023-10-24"},{"lineNumber":79,"author":{"gitId":"Clin-lyx"},"content":"1. Learn more about navigating the GUI [here](#navigating-the-graphical-user-interface-gui).","lastModifiedDate":"2023-11-02"},{"lineNumber":80,"author":{"gitId":"Clin-lyx"},"content":"2. For new users, learn how to use Medbook [here](#medbook-tutorial).","lastModifiedDate":"2023-11-02"},{"lineNumber":81,"author":{"gitId":"Clin-lyx"},"content":"3. For advanced users, view all the available features [here](#features).","lastModifiedDate":"2023-11-02"},{"lineNumber":82,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":83,"author":{"gitId":"Clin-lyx"},"content":"## Glossary","lastModifiedDate":"2023-11-02"},{"lineNumber":84,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":85,"author":{"gitId":"Clin-lyx"},"content":"### Definitions","lastModifiedDate":"2023-11-02"},{"lineNumber":86,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":87,"author":{"gitId":"Clin-lyx"},"content":"Here are some description of the terms used throughout this user guide.","lastModifiedDate":"2023-11-02"},{"lineNumber":88,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":89,"author":{"gitId":"Clin-lyx"},"content":"| **Term**      | **Definition**                                                                                                                                                                  |","lastModifiedDate":"2023-11-02"},{"lineNumber":90,"author":{"gitId":"Clin-lyx"},"content":"|---------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-11-02"},{"lineNumber":91,"author":{"gitId":"Clin-lyx"},"content":"| Parameter     | A parameter allow you to customize the behavior of the command by providing specific values                                                                                     |","lastModifiedDate":"2023-11-02"},{"lineNumber":92,"author":{"gitId":"Clin-lyx"},"content":"| Command       | A command is a textual input that users type into the command-line interface to communicate with the application                                                                |","lastModifiedDate":"2023-11-02"},{"lineNumber":93,"author":{"gitId":"Clin-lyx"},"content":"| GUI           | GUI is graphical user interface. It manages the interaction between user and the application and also gives a visual display of Medbook.                                        |","lastModifiedDate":"2023-11-02"},{"lineNumber":94,"author":{"gitId":"Clin-lyx"},"content":"| GUI component | GUI components are the interactive parts of the application that you can see and interact with. For more information of different GUI components. Please refer to below section |","lastModifiedDate":"2023-11-02"},{"lineNumber":95,"author":{"gitId":"Clin-lyx"},"content":"| CLI           | CLI or Command Line Interface,  is a text-based way to interact with the application.                                                                                           |","lastModifiedDate":"2023-11-02"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"Clin-lyx"},"content":"## Navigating the Graphical User Interface (GUI)","lastModifiedDate":"2023-11-02"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"Clin-lyx"},"content":"![Ui Component](images/UiComponent.png)","lastModifiedDate":"2023-11-02"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"Clin-lyx"},"content":"Here is a brief summary of GUI component of the main window of Medbook.","lastModifiedDate":"2023-11-02"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"Clin-lyx"},"content":"| **Name of component**    | **Description**                                                                                             |","lastModifiedDate":"2023-11-02"},{"lineNumber":104,"author":{"gitId":"Clin-lyx"},"content":"|--------------------------|-------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-11-02"},{"lineNumber":105,"author":{"gitId":"Clin-lyx"},"content":"| Menu Bar                 | Contains the help and file drop down menu for Medbook                                                       |","lastModifiedDate":"2023-11-02"},{"lineNumber":106,"author":{"gitId":"Clin-lyx"},"content":"| Message Display Box      | Display the message of every command. Either can be an error message or success message                     |","lastModifiedDate":"2023-11-02"},{"lineNumber":107,"author":{"gitId":"Clin-lyx"},"content":"| Patient List             | Contains all the Patient cards stored in Medbook                                                            |","lastModifiedDate":"2023-11-02"},{"lineNumber":108,"author":{"gitId":"Clin-lyx"},"content":"| Patient Information card | Contains information of the Patient including age, blood type, gender, contact information and allergies    |","lastModifiedDate":"2023-11-08"},{"lineNumber":109,"author":{"gitId":"Clin-lyx"},"content":"| Patient Being viewed     | Contains the patient card of currently being viewed patient                                                 |","lastModifiedDate":"2023-11-08"},{"lineNumber":110,"author":{"gitId":"Clin-lyx"},"content":"| Medical Record List      | Contains all the Record card of the patient currently being viewed                                          |","lastModifiedDate":"2023-11-08"},{"lineNumber":111,"author":{"gitId":"Clin-lyx"},"content":"| Record Card              | Contains information of the medical record including appointment date, condition, and prescribed medication |","lastModifiedDate":"2023-11-08"},{"lineNumber":112,"author":{"gitId":"Clin-lyx"},"content":"| Pinned Patient List      | Contains all the patient cards after command pin                                                            |","lastModifiedDate":"2023-11-02"},{"lineNumber":113,"author":{"gitId":"Clin-lyx"},"content":"| Command Input Box        | Allow users to input commands                                                                               |","lastModifiedDate":"2023-11-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"Clin-lyx"},"content":"![Appointment Window](images/ViewAppointmentWindow.png)","lastModifiedDate":"2023-11-02"},{"lineNumber":117,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":118,"author":{"gitId":"Clin-lyx"},"content":"| **Name of component** | **Description**                                                           |","lastModifiedDate":"2023-11-02"},{"lineNumber":119,"author":{"gitId":"Clin-lyx"},"content":"|-----------------------|---------------------------------------------------------------------------|","lastModifiedDate":"2023-11-02"},{"lineNumber":120,"author":{"gitId":"Clin-lyx"},"content":"| Appointment Card      | Contains information of appointments including name, date and NRIC number |","lastModifiedDate":"2023-11-08"},{"lineNumber":121,"author":{"gitId":"Clin-lyx"},"content":"| Appointment List      | Holds a list of Appointment card                                          |","lastModifiedDate":"2023-11-08"},{"lineNumber":122,"author":{"gitId":"Clin-lyx"},"content":"| Calendar              | A calendar that displays appointments at certain date                     |","lastModifiedDate":"2023-11-02"},{"lineNumber":123,"author":{"gitId":"Clin-lyx"},"content":"| Previous Button       | Shift the month shown in the calendar to previous month                   |","lastModifiedDate":"2023-11-02"},{"lineNumber":124,"author":{"gitId":"Clin-lyx"},"content":"| Next Button           | Shift the month shown in the calendar to next month                       |","lastModifiedDate":"2023-11-02"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"Clin-lyx"},"content":"## Medbook Tutorial","lastModifiedDate":"2023-11-02"},{"lineNumber":127,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":128,"author":{"gitId":"ryanongwx"},"content":"1. Launch the Medbook application. You may refer to [here](#quick-start).","lastModifiedDate":"2023-11-08"},{"lineNumber":129,"author":{"gitId":"Clin-lyx"},"content":"   - Note on launch, Medbook will populate some sample data.","lastModifiedDate":"2023-11-02"},{"lineNumber":130,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":131,"author":{"gitId":"Clin-lyx"},"content":"2. Let us try invoking the help window. Type help in the command box and press Enter to execute it. ","lastModifiedDate":"2023-11-02"},{"lineNumber":132,"author":{"gitId":"Clin-lyx"},"content":"Please refer to the first section of [feature](#features) to have a more clear understanding of requirements of the parameters. ","lastModifiedDate":"2023-11-02"},{"lineNumber":133,"author":{"gitId":"Clin-lyx"},"content":"A similar help box as below should pop up.\u003cbr\u003e \u003cimg src\u003d\"images/HelpWindow.png\" width\u003d\"500\"/\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":134,"author":{"gitId":"Clin-lyx"},"content":"3. Now, let us try adding a new patient. In the command box, type in `addpatient n/John Doe e/johndoe@gmail.com p/12345678 g/M a/26 bt/AB+ al/Penicillin` and press Enter. ","lastModifiedDate":"2023-11-02"},{"lineNumber":135,"author":{"gitId":"Clin-lyx"},"content":"A success message should be displayed.\u003cbr\u003e\u003cimg src\u003d\"images/AddPatientSuccess.png\" width\u003d\"800\"/\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":136,"author":{"gitId":"Clin-lyx"},"content":"4. Try adding a few more patient to Medbook by yourself!","lastModifiedDate":"2023-11-02"},{"lineNumber":137,"author":{"gitId":"Clin-lyx"},"content":"5. Now, let us try adding a record to a patient. In the command box, type in `addrecord 3 d/18-09-2023 1800 c/Fever m/Paracetamol` and press Enter. ","lastModifiedDate":"2023-11-02"},{"lineNumber":138,"author":{"gitId":"Clin-lyx"},"content":"This will create a new medical record to the third patient shown in the middle column. ","lastModifiedDate":"2023-11-02"},{"lineNumber":139,"author":{"gitId":"Clin-lyx"},"content":"A similar message output should be shown in the Message Display Box.\u003cbr\u003e \u003cimg src\u003d\"images/AddRecordSuccess.png\" width\u003d\"800\"\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":140,"author":{"gitId":"Clin-lyx"},"content":"6. Try adding a few more records to patients in the Medbook by yourself!","lastModifiedDate":"2023-11-02"},{"lineNumber":141,"author":{"gitId":"Clin-lyx"},"content":"7. Let us view medical records of the first patient. Key in `view 1` to see all the records of the first patient.","lastModifiedDate":"2023-11-02"},{"lineNumber":142,"author":{"gitId":"Clin-lyx"},"content":"If you haven\u0027t added any medical records to the first patient, a similar **Record List** should be shown. ","lastModifiedDate":"2023-11-02"},{"lineNumber":143,"author":{"gitId":"Clin-lyx"},"content":"\u003cbr\u003e\u003cimg src\u003d\"images/View.png\" height\u003d\"500\"/\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":144,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":145,"author":{"gitId":"Clin-lyx"},"content":"You may now have a basic understanding of this software. Try out the features in the following section on your own and explore the potential of Medbook!","lastModifiedDate":"2023-11-02"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"Clin-lyx"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":148,"author":{"gitId":"Clin-lyx"},"content":"    Take a moment to review these notes on the command format, and it will help you navigate and use Medbook more smoothly!","lastModifiedDate":"2023-11-02"},{"lineNumber":149,"author":{"gitId":"Clin-lyx"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"Darren159"},"content":"---","lastModifiedDate":"2023-10-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"**Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"Darren159"},"content":"- Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2023-10-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"Darren159"},"content":"- Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2023-10-23"},{"lineNumber":164,"author":{"gitId":"Darren159"},"content":"  e.g `n/NAME [al/ALLERGIES]` can be used as `n/John Doe al/Pencillin` or as `n/John Doe`.","lastModifiedDate":"2023-10-25"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"Darren159"},"content":"- Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2023-10-23"},{"lineNumber":167,"author":{"gitId":"Darren159"},"content":"  e.g. `[al/ALLERGIES]…​` can be used as ` ` (i.e. 0 times), `al/Pencillin`, `al/Pollen al/Dust` etc.","lastModifiedDate":"2023-10-25"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"Darren159"},"content":"- Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2023-10-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"Darren159"},"content":"- Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2023-10-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":175,"author":{"gitId":"adammangzijun"},"content":"- **PATIENTID**: refers to the unique patient ID shown in the displayed patients list. The ID **must be a positive integer** 1, 2, 3, …​ \u003cbr\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":176,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":177,"author":{"gitId":"adammangzijun"},"content":"- **RECORDID**: refers to the unique record ID shown in the displayed **RECORDS** list of a specific patient. The ID **must be a positive integer** 1, 2, 3, …​ \u003cbr\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":178,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":179,"author":{"gitId":"adammangzijun"},"content":"- **APPOINTMENTID**: refers to the unique appointment ID shown in the displayed **APPOINTMENTS** list. The ID **must be a positive integer** 1, 2, 3, …​ \u003cbr\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":180,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":181,"author":{"gitId":"adammangzijun"},"content":"- **PINNEDID**: refers to the unique ID shown in the displayed **PINNED PATIENT** list. The ID **must be a positive integer** 1, 2, 3, …​ \u003cbr\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":182,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":183,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":185,"author":{"gitId":"adammangzijun"},"content":"### PARAMETERS","lastModifiedDate":"2023-11-02"},{"lineNumber":186,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":187,"author":{"gitId":"adammangzijun"},"content":"| FIELD        | PREFIX | CONSTRAINTS                                                                                                   |","lastModifiedDate":"2023-11-02"},{"lineNumber":188,"author":{"gitId":"Clin-lyx"},"content":"|--------------|--------|---------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-11-08"},{"lineNumber":189,"author":{"gitId":"adammangzijun"},"content":"| **NAME**     | n      | Up to 256 alphanumeric characters                                                                             |","lastModifiedDate":"2023-11-02"},{"lineNumber":190,"author":{"gitId":"adammangzijun"},"content":"| **NRIC**     | i      | Starts with a letter, followed by seven digits, and ends with another letter (letters are not case-sensitive) |","lastModifiedDate":"2023-11-02"},{"lineNumber":191,"author":{"gitId":"Clin-lyx"},"content":"| **EMAIL**    | e      | Valid email format: **email@domain.com**                                                                      |","lastModifiedDate":"2023-11-02"},{"lineNumber":192,"author":{"gitId":"Clin-lyx"},"content":"| **GENDER**   | g      | Either **M** or **F**                                                                                         |","lastModifiedDate":"2023-11-02"},{"lineNumber":193,"author":{"gitId":"Clin-lyx"},"content":"| **PHONE**    | p      | Must be 8 digits                                                                                              |","lastModifiedDate":"2023-11-02"},{"lineNumber":194,"author":{"gitId":"Clin-lyx"},"content":"| **AGE**      | a      | Must be a non-negative integer                                                                                |","lastModifiedDate":"2023-11-08"},{"lineNumber":195,"author":{"gitId":"adammangzijun"},"content":"| **BLOODTYPE**| bt     | Must be one of **A-**, **A+**, **B-**, **B+**, **AB-**, **AB+**, **O-**, **O+**                               |","lastModifiedDate":"2023-11-02"},{"lineNumber":196,"author":{"gitId":"adammangzijun"},"content":"| **ALLERGY**  | al     | Up to 256 alphanumeric characters                                                                             |","lastModifiedDate":"2023-11-02"},{"lineNumber":197,"author":{"gitId":"adammangzijun"},"content":"| **DATE**     | d      | Must be in the form of \u0027dd-MM-yyyy HHmm\u0027                                                                      |","lastModifiedDate":"2023-11-02"},{"lineNumber":198,"author":{"gitId":"adammangzijun"},"content":"| **CONDITION**| c      | Up to 256 alphanumeric characters                                                                             |","lastModifiedDate":"2023-11-02"},{"lineNumber":199,"author":{"gitId":"adammangzijun"},"content":"| **MEDICATION**| m     | Up to 256 alphanumeric characters                                                                             |","lastModifiedDate":"2023-11-02"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":201,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"Clin-lyx"},"content":"Shows a message explaining how to access the help page.","lastModifiedDate":"2023-11-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"hjoneweek"},"content":"### Adding a patient: `addpatient`","lastModifiedDate":"2023-10-04"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"hjoneweek"},"content":"Adds a patient\u0027s contact and medical details.","lastModifiedDate":"2023-10-04"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"adammangzijun"},"content":"Format: `addpatient n/NAME e/EMAIL p/PHONE g/GENDER a/AGE bt/BLOODTYPE [al/ALLERGY]...`","lastModifiedDate":"2023-11-02"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"adammangzijun"},"content":"- Adds a patient with information including: **NAME**, **NRIC**, **EMAIL**, **GENDER**, **PHONE**, **AGE**, **BLOODTYPE**, **ALLERGY**.","lastModifiedDate":"2023-11-02"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":215,"author":{"gitId":"hjoneweek"},"content":"Examples:","lastModifiedDate":"2023-10-24"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":217,"author":{"gitId":"adammangzijun"},"content":"`addpatient n/John Doe i/T1234567A e/johndoe@gmail.com p/12345678 g/M a/26 bt/AB+ al/Penicillin`","lastModifiedDate":"2023-11-01"},{"lineNumber":218,"author":{"gitId":"adammangzijun"},"content":"Adds a **Male** patient named **John Doe** whose NRIC is **T1234567A** , **26** years old, has **AB+** Blood Type, and is allergic to **Penicillin**.","lastModifiedDate":"2023-11-01"},{"lineNumber":219,"author":{"gitId":"adammangzijun"},"content":"His email and phone number is **johndoe@gmail.com** and **12345678**, respectively.","lastModifiedDate":"2023-11-01"},{"lineNumber":220,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":221,"author":{"gitId":"Darren159"},"content":"### Adding Medical Records : `addrecord`","lastModifiedDate":"2023-10-23"},{"lineNumber":222,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":223,"author":{"gitId":"Darren159"},"content":"Adds a patient\u0027s medical record.","lastModifiedDate":"2023-10-25"},{"lineNumber":224,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":225,"author":{"gitId":"hjoneweek"},"content":"Format: `addrecord PATIENTID d/DATETIME c/CONDITIONS... m/MEDICATIONS...`","lastModifiedDate":"2023-11-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"adammangzijun"},"content":"- Adds a medical record to the patient with the corresponding **PATIENTID**. \u003cbr\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":228,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":229,"author":{"gitId":"Clin-lyx"},"content":"- Constraints of each field are as stated in the **CONSTRAINTS** section above. \u003cbr\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":230,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":231,"author":{"gitId":"hjoneweek"},"content":"- Duplicate entries for **CONDITIONS** and **MEDICATIONS** will be considered as one entry ","lastModifiedDate":"2023-11-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2023-10-24"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":235,"author":{"gitId":"Darren159"},"content":"- `addrecord 3 d/18-09-2023 1800 c/Fever m/Paracetamol`","lastModifiedDate":"2023-10-25"},{"lineNumber":236,"author":{"gitId":"adammangzijun"},"content":"  Adds a record to the patient with the **PATIENTID** of **3**.","lastModifiedDate":"2023-11-02"},{"lineNumber":237,"author":{"gitId":"adammangzijun"},"content":"  The record says that the patient visited the clinic on **September 18th, 2023** at **6PM** with a **Fever** and was prescribed **Paracetamol**.","lastModifiedDate":"2023-11-02"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"adammangzijun"},"content":"### Adding an Appointment : `addappointment`","lastModifiedDate":"2023-11-02"},{"lineNumber":240,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":241,"author":{"gitId":"adammangzijun"},"content":"Adds an appointment.","lastModifiedDate":"2023-11-02"},{"lineNumber":242,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":243,"author":{"gitId":"adammangzijun"},"content":"Format: `addappointment PATIENTID n/NAME d/DATETIME`","lastModifiedDate":"2023-11-02"},{"lineNumber":244,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":245,"author":{"gitId":"adammangzijun"},"content":"- Adds an appointment to the patient with the corresponding **PATIENTID**.","lastModifiedDate":"2023-11-02"},{"lineNumber":246,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":247,"author":{"gitId":"adammangzijun"},"content":"-The appointment will then appear in the **APPOINTMENTS** list with patient\u0027s **NRIC**. \u003cbr\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"adammangzijun"},"content":"- Constraints of each fied are as stated in the **CONSTRAINTS** section above. \u003cbr\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":250,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":251,"author":{"gitId":"adammangzijun"},"content":"Examples:","lastModifiedDate":"2023-11-02"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":253,"author":{"gitId":"adammangzijun"},"content":"- `addappointment 2 n/Eye Examination d/10-10-2023 1800` adds an **Eye Examination** to the **2nd patient** in the patients list. The appointment is set on **10th October 2023** at **6:00pm**.","lastModifiedDate":"2023-11-02"},{"lineNumber":254,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":255,"author":{"gitId":"adammangzijun"},"content":"### Listing all patients : `list`","lastModifiedDate":"2023-11-01"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"Clin-lyx"},"content":"Shows a list of all patients in the Medbook.","lastModifiedDate":"2023-10-04"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"Format: `list`","lastModifiedDate":"2023-10-15"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"Clin-lyx"},"content":"- **All** patients in the Medbook will always be visible on the screen in the **Patient List**.","lastModifiedDate":"2023-11-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"Clin-lyx"},"content":"Examples:","lastModifiedDate":"2023-10-24"},{"lineNumber":264,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":265,"author":{"gitId":"Clin-lyx"},"content":"- `list` lists all the patients in the **Patient List**.","lastModifiedDate":"2023-11-08"},{"lineNumber":266,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":267,"author":{"gitId":"Clin-lyx"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":268,"author":{"gitId":"Clin-lyx"},"content":"    The `list` command allows you to easily view all the patients in the Patient List. For instance, after you\u0027ve used the `search` command to find specific patients using keywords, you can use the `list` command to gather all the patients conveniently! ","lastModifiedDate":"2023-11-08"},{"lineNumber":269,"author":{"gitId":"Clin-lyx"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":270,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":271,"author":{"gitId":"Clin-lyx"},"content":"### View patient records : `view`","lastModifiedDate":"2023-10-24"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":273,"author":{"gitId":"Clin-lyx"},"content":"Displays the medical records of the specified patient in the **Medical Record List**.","lastModifiedDate":"2023-11-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":275,"author":{"gitId":"Clin-lyx"},"content":"Format: `view PATIENTID`","lastModifiedDate":"2023-10-24"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":277,"author":{"gitId":"Clin-lyx"},"content":"- The medical records of the patient with the corresponding `PATIENTID` will be displayed on screen in the **Medical Record List**. \u003cbr\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":278,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":279,"author":{"gitId":"adammangzijun"},"content":"- Information about the patient will be displayed in the **PATIENT BEING VIEWED** section. \u003cbr\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":281,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2023-10-24"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":283,"author":{"gitId":"adammangzijun"},"content":"- `view 2` displays the medical records of the **2nd patient** in the patients list. The displayed records will be in the **RECORDS** list and patient information will be in the **PATIENT BEING VIEWED** section.","lastModifiedDate":"2023-11-02"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"Clin-lyx"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":286,"author":{"gitId":"Clin-lyx"},"content":"    The PATIENT INDEX in the Patient Being Viewed section remains consistent after using the `find`, `list` or `delete` command. ","lastModifiedDate":"2023-11-08"},{"lineNumber":287,"author":{"gitId":"Clin-lyx"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":288,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":289,"author":{"gitId":"adammangzijun"},"content":"### View appointments : `viewappointment`","lastModifiedDate":"2023-11-01"},{"lineNumber":290,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":291,"author":{"gitId":"adammangzijun"},"content":"Displays all the medical appointments in a separate window.","lastModifiedDate":"2023-11-01"},{"lineNumber":292,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":293,"author":{"gitId":"adammangzijun"},"content":"Format: `viewappointment`","lastModifiedDate":"2023-11-01"},{"lineNumber":294,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":295,"author":{"gitId":"Clin-lyx"},"content":"- The appointments of all the patients in the patients list will be displayed on a new window in the **Appointment List**. \u003cbr\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":297,"author":{"gitId":"Clin-lyx"},"content":"- The **description**, **date and time**, and **NRIC** of the patient involved in appointment will be displayed in the **Appointment List**. \u003cbr\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":299,"author":{"gitId":"adammangzijun"},"content":"- The **description** of appointments will also appear on the calendar at the corresponding **date**. \u003cbr\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":300,"author":{"gitId":"hjoneweek"},"content":"**Note**: Only the **first two** appointments according to the **APPOINTMENTS** list will be displayed on the calendar per date.","lastModifiedDate":"2023-11-08"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":302,"author":{"gitId":"adammangzijun"},"content":"### Editing detail of a patient : `editpatient`","lastModifiedDate":"2023-10-25"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":304,"author":{"gitId":"adammangzijun"},"content":"Edits the detail of an existing patient in MedBook.","lastModifiedDate":"2023-11-01"},{"lineNumber":305,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":306,"author":{"gitId":"adammangzijun"},"content":"Format: `editpatient PATIENTID PREFIX/NEWVALUE...`","lastModifiedDate":"2023-11-02"},{"lineNumber":307,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":308,"author":{"gitId":"adammangzijun"},"content":"- Edits the patient at the specified `PATIENTID`. \u003cbr\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":310,"author":{"gitId":"adammangzijun"},"content":"- Acceptable fields : **name**, **email**, **phone**, **gender**, **age**, **bloodtype**, **allergy**. \u003cbr\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":311,"author":{"gitId":"adammangzijun"},"content":"**note**: NRIC can\u0027t be changed.","lastModifiedDate":"2023-11-01"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":313,"author":{"gitId":"adammangzijun"},"content":"- Existing values in the respective fields will be updated to the **NEWVALUE** input. \u003cbr\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":314,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":315,"author":{"gitId":"Clin-lyx"},"content":"- Constraints of each field are as stated in the **CONSTRAINTS** section above. \u003cbr\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":317,"author":{"gitId":"hjoneweek"},"content":"- Duplicate entries for **CONDITIONS** and **MEDICATIONS** will be considered as one entry","lastModifiedDate":"2023-11-08"},{"lineNumber":318,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":319,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":321,"author":{"gitId":"ryanongwx"},"content":"- `editpatient 1 e/johndoe_updated@gmail.com` Edits the email address of the 1st person to be **johndoe_updated@gmail.com**. \u003cbr\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":322,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":323,"author":{"gitId":"ryanongwx"},"content":"- `editpatient 2 p/92345678` Edits the name of the 2nd person to be **92345678**. \u003cbr\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":324,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":325,"author":{"gitId":"ryanongwx"},"content":"- `editpatient 3 al/aspirin` Edits the allergy of the 3rd person to be **aspirin**. \u003cbr\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":326,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":327,"author":{"gitId":"ryanongwx"},"content":"- `editpatient 2 p/92345678 al/aspirin` Edits the name and allergy of the 2nd person to be **92345678** and **aspirin** respectively. \u003cbr\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":329,"author":{"gitId":"adammangzijun"},"content":"### Editing a record of a patient : `editrecord`","lastModifiedDate":"2023-10-25"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":331,"author":{"gitId":"adammangzijun"},"content":"Edits a record of an existing patient in MedBook.","lastModifiedDate":"2023-10-25"},{"lineNumber":332,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":333,"author":{"gitId":"adammangzijun"},"content":"Format: `editrecord PATIENTID/RECORDID PREFIX/NEWVALUE...`","lastModifiedDate":"2023-11-02"},{"lineNumber":334,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":335,"author":{"gitId":"adammangzijun"},"content":"- Edits a record at the specific **RECORDID** of the patient at the specified **PATIENTID**. \u003cbr\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":336,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":337,"author":{"gitId":"adammangzijun"},"content":"- Acceptable fields : **date** , **condition**, **medication**. \u003cbr\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":338,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":339,"author":{"gitId":"adammangzijun"},"content":"- Existing values in the field will be updated to the **NEWVALUE** input. \u003cbr\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":340,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":341,"author":{"gitId":"adammangzijun"},"content":"- Multiple entries of date fields are not allowed. \u003cbr\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":342,"author":{"gitId":"adammangzijun"},"content":"S","lastModifiedDate":"2023-11-02"},{"lineNumber":343,"author":{"gitId":"adammangzijun"},"content":"- Multiple entries of condition/medication fields are allowed to represent a new set of conditions. \u003cbr\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":344,"author":{"gitId":"Clin-lyx"},"content":"- Constraints of each field are as stated in the **CONSTRAINTS** section above. \u003cbr\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":346,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2023-10-25"},{"lineNumber":347,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":348,"author":{"gitId":"adammangzijun"},"content":"- `editrecord 1/1 d/25-10-2023 1200` Edits the dateTime of the 1st record of the 1st patient to be **25-10-2023 1200**. \u003cbr\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":349,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":350,"author":{"gitId":"adammangzijun"},"content":"- `editrecord 1/1 c/Headache c/Flu` Edits the conditions of the 1st record of the 1st patient to be **Headache, Flu**. \u003cbr\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":351,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":352,"author":{"gitId":"adammangzijun"},"content":"- `editrecord 1/1 c/Headache m/Paracetamol` Edits the conditions and medications of the 1st  of the 1st patient to be **Headache** and **Paracetamol** respectively. \u003cbr\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":353,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":354,"author":{"gitId":"adammangzijun"},"content":"### Locating patients by keywords: `search`","lastModifiedDate":"2023-11-01"},{"lineNumber":355,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":356,"author":{"gitId":"adammangzijun"},"content":"Searches the patient with the corresponding **KEYWORD**","lastModifiedDate":"2023-11-02"},{"lineNumber":357,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":358,"author":{"gitId":"Darren159"},"content":"Format: `search KEYWORD...`","lastModifiedDate":"2023-10-25"},{"lineNumber":359,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":360,"author":{"gitId":"adammangzijun"},"content":"- The search is not case-sensitive. e.g **Penicillin** will match **penicillin**. \u003cbr\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":361,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":362,"author":{"gitId":"adammangzijun"},"content":"- A patient\u0027s name and details will be searched. \u003cbr\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":363,"author":{"gitId":"adammangzijun"},"content":"**note**: This does not include searching through the details of records.","lastModifiedDate":"2023-11-01"},{"lineNumber":364,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":365,"author":{"gitId":"adammangzijun"},"content":"- Patients matching at least one keyword will be returned. \u003cbr\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":366,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":367,"author":{"gitId":"adammangzijun"},"content":"- Patients with detail that are not exactly the same as the `KEYWORD` searched will not appear. \u003cbr\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":368,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":369,"author":{"gitId":"adammangzijun"},"content":"Examples:","lastModifiedDate":"2023-11-01"},{"lineNumber":370,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":371,"author":{"gitId":"adammangzijun"},"content":"- `search Alex` returns a list of patients with **Alex** in their details. \u003cbr\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":372,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":373,"author":{"gitId":"adammangzijun"},"content":"- `search Alex M` will return patients with **Alex** or **M** in their details.","lastModifiedDate":"2023-11-01"},{"lineNumber":374,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":375,"author":{"gitId":"adammangzijun"},"content":"### Locating records by keywords: `searchrecord`","lastModifiedDate":"2023-11-01"},{"lineNumber":376,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":377,"author":{"gitId":"hjoneweek"},"content":"Searches the records of the patient that the user is currently viewing with the corresponding **KEYWORD**","lastModifiedDate":"2023-11-08"},{"lineNumber":378,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":379,"author":{"gitId":"adammangzijun"},"content":"Format: `searchrecord KEYWORD...`","lastModifiedDate":"2023-11-01"},{"lineNumber":380,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":381,"author":{"gitId":"adammangzijun"},"content":"- The search is not case-sensitive. e.g **Penicillin** will match **penicillin**. \u003cbr\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":382,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":383,"author":{"gitId":"adammangzijun"},"content":"- A record\u0027s details will be searched. \u003cbr\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":384,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":385,"author":{"gitId":"adammangzijun"},"content":"- Records matching at least one **KEYWORD** will be returned. \u003cbr\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":386,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":387,"author":{"gitId":"adammangzijun"},"content":"- Records with detail that are not exactly the same as the **KEYWORD** searched will not appear. \u003cbr\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":389,"author":{"gitId":"hjoneweek"},"content":"- **IMPORTANT:** `view` command must precede `searchrecord` command. Otherwise `searchrecord` command would return 0 record.","lastModifiedDate":"2023-11-08"},{"lineNumber":390,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":391,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":392,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":393,"author":{"gitId":"adammangzijun"},"content":"- `searchrecord Penicillin` returns a list of records with **Penicillin** in their details. \u003cbr\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":394,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":395,"author":{"gitId":"adammangzijun"},"content":"- `searchrecord Fever Cough` will return records with **Fever** or **Cough** in their details. \u003cbr\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":397,"author":{"gitId":"adammangzijun"},"content":"- `searchrecord 19-10-2023` will return records with date **19-10-2023** in their details. \u003cbr\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":399,"author":{"gitId":"Darren159"},"content":"### Deleting a patient : `delete`","lastModifiedDate":"2023-10-03"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":401,"author":{"gitId":"Darren159"},"content":"Deletes the specified patient.","lastModifiedDate":"2023-10-25"},{"lineNumber":402,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":403,"author":{"gitId":"Darren159"},"content":"Format: `delete PATIENTID`","lastModifiedDate":"2023-10-25"},{"lineNumber":404,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":405,"author":{"gitId":"adammangzijun"},"content":"- Deletes the patient at the specified **PATIENTID**.","lastModifiedDate":"2023-11-02"},{"lineNumber":406,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":407,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":408,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":409,"author":{"gitId":"adammangzijun"},"content":"- `delete 2` deletes the **2nd patient** from the patients list.","lastModifiedDate":"2023-11-02"},{"lineNumber":410,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":411,"author":{"gitId":"adammangzijun"},"content":"### Deleting a record : `deleterecord`","lastModifiedDate":"2023-11-01"},{"lineNumber":412,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":413,"author":{"gitId":"adammangzijun"},"content":"Deletes the specified record of the patient.","lastModifiedDate":"2023-11-01"},{"lineNumber":414,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":415,"author":{"gitId":"adammangzijun"},"content":"Format: `deleterecord PATIENTID/RECORDID`","lastModifiedDate":"2023-11-01"},{"lineNumber":416,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":417,"author":{"gitId":"adammangzijun"},"content":"- Deletes the record at the specific **RECORDID** of the patient at the specified **PATIENTID**.","lastModifiedDate":"2023-11-02"},{"lineNumber":418,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":419,"author":{"gitId":"Darren159"},"content":"Examples:","lastModifiedDate":"2023-10-03"},{"lineNumber":420,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":421,"author":{"gitId":"adammangzijun"},"content":"- `deleterecord 2/1` deletes the **1st record** of the **2nd patient** in the patients list.","lastModifiedDate":"2023-11-02"},{"lineNumber":422,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":423,"author":{"gitId":"adammangzijun"},"content":"### Deleting an appointment : `deleteappointment`","lastModifiedDate":"2023-11-02"},{"lineNumber":424,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":425,"author":{"gitId":"adammangzijun"},"content":"Deletes an appointment from the **APPOINTMENTS** list.","lastModifiedDate":"2023-11-02"},{"lineNumber":426,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":427,"author":{"gitId":"adammangzijun"},"content":"Format: `deleteappointment APPOINTMENTID`","lastModifiedDate":"2023-11-02"},{"lineNumber":428,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":429,"author":{"gitId":"adammangzijun"},"content":"- Deletes the appointment at the specific **APPOINTMENTID** in the **APPOINTMENTS** list.","lastModifiedDate":"2023-11-02"},{"lineNumber":430,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":431,"author":{"gitId":"Darren159"},"content":"Examples:","lastModifiedDate":"2023-10-23"},{"lineNumber":432,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":433,"author":{"gitId":"adammangzijun"},"content":"- `deleteappointment 1` deletes the **1st appointment** in the **APPOINTMENTS** list.","lastModifiedDate":"2023-11-02"},{"lineNumber":434,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":435,"author":{"gitId":"Darren159"},"content":"### Pinning a Patient : `pin`","lastModifiedDate":"2023-10-23"},{"lineNumber":436,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":437,"author":{"gitId":"adammangzijun"},"content":"Pins the specified patient to the **PINNED PATIENT** list.","lastModifiedDate":"2023-11-02"},{"lineNumber":438,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":439,"author":{"gitId":"Darren159"},"content":"Format: `pin PATIENTID`","lastModifiedDate":"2023-10-23"},{"lineNumber":440,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":441,"author":{"gitId":"adammangzijun"},"content":"- The pinned patient will always be visible on screen in the **PINNED PATIENT** list.","lastModifiedDate":"2023-11-02"},{"lineNumber":442,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":443,"author":{"gitId":"Darren159"},"content":"Examples:","lastModifiedDate":"2023-10-03"},{"lineNumber":444,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":445,"author":{"gitId":"adammangzijun"},"content":"- `pin 2` pins the **2nd patient** in the patients list to the **PINNED PATIENT** list.","lastModifiedDate":"2023-11-02"},{"lineNumber":446,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":447,"author":{"gitId":"Darren159"},"content":"### Unpinning a Patient : `unpin`","lastModifiedDate":"2023-10-23"},{"lineNumber":448,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":449,"author":{"gitId":"adammangzijun"},"content":"Unpins the specified patient from the **PINNED PATIENT** list.","lastModifiedDate":"2023-11-02"},{"lineNumber":450,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":451,"author":{"gitId":"adammangzijun"},"content":"Format: `unpin PINNEDID`","lastModifiedDate":"2023-11-02"},{"lineNumber":452,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":453,"author":{"gitId":"adammangzijun"},"content":"- Removes the patient at the specified **PINNEDID** from the **PINNED PATIENT** list.","lastModifiedDate":"2023-11-02"},{"lineNumber":454,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":455,"author":{"gitId":"Darren159"},"content":"Examples:","lastModifiedDate":"2023-10-23"},{"lineNumber":456,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":457,"author":{"gitId":"adammangzijun"},"content":"- `unpin 2` unpins the **2nd patient** in the **PINNED PATIENT** list.","lastModifiedDate":"2023-11-02"},{"lineNumber":458,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":459,"author":{"gitId":"ryanongwx"},"content":"### Attaching files to a patient\u0027s record ","lastModifiedDate":"2023-11-08"},{"lineNumber":460,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":461,"author":{"gitId":"Clin-lyx"},"content":"Attach local files to a patient\u0027s record by clicking on the attached file button located within each record row.","lastModifiedDate":"2023-11-08"},{"lineNumber":462,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":463,"author":{"gitId":"Clin-lyx"},"content":"Caution: Refrain from deleting/relocating the local file. If necessary, re-attach the new file after relocation/deletion.","lastModifiedDate":"2023-11-08"},{"lineNumber":464,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":465,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":466,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":467,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":468,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":469,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":470,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":471,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":472,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":473,"author":{"gitId":"ryanongwx"},"content":"MedBook data is saved to the hard disk automatically after any command that changes the data. This ensures the safety of your data. When MedBook is restarted, the data is loaded back into the application automatically.","lastModifiedDate":"2023-11-08"},{"lineNumber":474,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":475,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":476,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":477,"author":{"gitId":"Clin-lyx"},"content":"MedBook data are saved automatically as a JSON file [JAR file location]/data/medbook.json. Advanced users will be able to edit this files to directly make changes to the data files. ","lastModifiedDate":"2023-11-08"},{"lineNumber":478,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":479,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"warning\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":480,"author":{"gitId":"Darren159"},"content":"Caution:","lastModifiedDate":"2023-10-25"},{"lineNumber":481,"author":{"gitId":"ryanongwx"},"content":"Only advanced users may make changes to the data file. Be careful as wrong data formatting may result in the application not working as intended.","lastModifiedDate":"2023-11-08"},{"lineNumber":482,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":483,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":484,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":485,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":486,"author":{"gitId":"Darren159"},"content":"**Q**: How do I check my java version?\u003cbr\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":487,"author":{"gitId":"Darren159"},"content":"**A**: Open a command prompt and type `java -version`. If you do not have Java installed, you can download it [here](https://www.oracle.com/java/technologies/downloads/#java11).","lastModifiedDate":"2023-10-25"},{"lineNumber":488,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":489,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":490,"author":{"gitId":"Darren159"},"content":"**A**: Install the app in the other computer and copy the data folder over to the same location in the other computer.","lastModifiedDate":"2023-10-25"},{"lineNumber":491,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":492,"author":{"gitId":"Darren159"},"content":"---","lastModifiedDate":"2023-10-23"},{"lineNumber":493,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":494,"author":{"gitId":"-"},"content":"## Known issues","lastModifiedDate":"2023-09-08"},{"lineNumber":495,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":496,"author":{"gitId":"-"},"content":"1. **When using multiple screens**, if you move the application to a secondary screen, and later switch to using only the primary screen, the GUI will open off-screen. The remedy is to delete the `preferences.json` file created by the application before running the application again.","lastModifiedDate":"2023-09-08"},{"lineNumber":497,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":498,"author":{"gitId":"Darren159"},"content":"---","lastModifiedDate":"2023-10-23"},{"lineNumber":499,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":500,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":501,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":502,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":503,"author":{"gitId":"adammangzijun"},"content":"| Action              | Format, Examples                                                                                                                       |","lastModifiedDate":"2023-10-04"},{"lineNumber":504,"author":{"gitId":"Darren159"},"content":"| ------------------- | -------------------------------------------------------------------------------------------------------------------------------------- |","lastModifiedDate":"2023-10-25"},{"lineNumber":505,"author":{"gitId":"adammangzijun"},"content":"| **Help**     | `help` |","lastModifiedDate":"2023-11-02"},{"lineNumber":506,"author":{"gitId":"adammangzijun"},"content":"| **Add Patient**     | `addpatient n/NAME i/NRIC e/EMAIL p/PHONE …​` \u003cbr\u003e e.g., `addpatient n/John Doe i/T1234567A e/johndoe@gmail.com p/12345678 g/M a/26 bt/AB+ al/Penicillin` |","lastModifiedDate":"2023-11-02"},{"lineNumber":507,"author":{"gitId":"adammangzijun"},"content":"| **Add Record**      | `addrecord PATIENTID d/DATETIME c/CONDITION... m/MEDICATION...`\u003cbr\u003e e.g., `addrecord 2 d/10-10-2020 1900 c/Fever m/Painkiller`       |","lastModifiedDate":"2023-11-02"},{"lineNumber":508,"author":{"gitId":"Darren159"},"content":"| **Add Appointment** | `addappointment PATIENTID n/APPOINTMENTNAME d/DATETIME`\u003cbr\u003e e.g., `addappointment 2 n/Eye Exam d/10-10-2020 1900`                      |","lastModifiedDate":"2023-10-25"},{"lineNumber":509,"author":{"gitId":"adammangzijun"},"content":"| **List**            | `list`                                                                                                |","lastModifiedDate":"2023-10-04"},{"lineNumber":510,"author":{"gitId":"adammangzijun"},"content":"| **View Records**            | `view PATIENTID`\u003cbr\u003e e.g., `view 2`                                                           |","lastModifiedDate":"2023-11-02"},{"lineNumber":511,"author":{"gitId":"adammangzijun"},"content":"| **View Appointments**            | `viewappointment`                                                                        |","lastModifiedDate":"2023-11-02"},{"lineNumber":512,"author":{"gitId":"adammangzijun"},"content":"| **Edit Patient** | `editpatient PATIENTID PREFIX/NEWVALUE...`\u003cbr\u003e e.g.,`editpatient 1 e/johndoe_updated@gmail.com`           |","lastModifiedDate":"2023-11-02"},{"lineNumber":513,"author":{"gitId":"adammangzijun"},"content":"| **Edit Record**  | `editrecord PATIENTID/RECORDID PREFIX/NEWVALUE...`\u003cbr\u003e e.g.,`editrecord 1/1 d/25-10-2023 1200`            |","lastModifiedDate":"2023-11-02"},{"lineNumber":514,"author":{"gitId":"adammangzijun"},"content":"| **Search Patients**          | `search KEYWORDS...`\u003cbr\u003e e.g., `search James`                                           |","lastModifiedDate":"2023-11-02"},{"lineNumber":515,"author":{"gitId":"adammangzijun"},"content":"| **Search Records**          | `searchrecord KEYWORDS...`\u003cbr\u003e e.g., `searchrecord Headache`                                  |","lastModifiedDate":"2023-11-02"},{"lineNumber":516,"author":{"gitId":"adammangzijun"},"content":"| **Delete Patient**          | `delete PATIENTID`\u003cbr\u003e e.g., `delete 3`                                                       |","lastModifiedDate":"2023-11-02"},{"lineNumber":517,"author":{"gitId":"adammangzijun"},"content":"| **Delete Record**          | `deleterecord PATIENTID/RECORDID`\u003cbr\u003e e.g., `delete 2/1`                                       |","lastModifiedDate":"2023-11-02"},{"lineNumber":518,"author":{"gitId":"adammangzijun"},"content":"| **Delete Appointment**          | `deleteappointment APPOINTMENTID`\u003cbr\u003e e.g., `deleteappointment 1`                         |","lastModifiedDate":"2023-11-02"},{"lineNumber":519,"author":{"gitId":"Clin-lyx"},"content":"| **Pin**             | `pin PATIENTID`\u003cbr\u003e e.g., `pin 2`                                                                     |","lastModifiedDate":"2023-10-24"},{"lineNumber":520,"author":{"gitId":"adammangzijun"},"content":"| **Unpin**           | `unpin PINNEDID`\u003cbr\u003e e.g. `unpin 2`                                                                  |","lastModifiedDate":"2023-11-02"},{"lineNumber":521,"author":{"gitId":"adammangzijun"},"content":"| **Clear**           | `clear`                                                                                               |","lastModifiedDate":"2023-10-04"},{"lineNumber":522,"author":{"gitId":"Darren159"},"content":"| **Exit**            | `exit`                                                                                                |","lastModifiedDate":"2023-10-25"},{"lineNumber":523,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-25"}],"authorContributionMap":{"Darren159":68,"hjoneweek":13,"Clin-lyx":137,"-":143,"ryanongwx":12,"adammangzijun":150}},{"path":"docs/diagrams/AddAppointmentSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"@startuml","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"!include style.puml","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"skinparam ArrowFontStyle plain","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"participant \":AddAppointmentCommandParser\" as AddAppointmentCommandParser LOGIC_COLOR","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"participant \"a:AddAppointmentCommand\" as AddAppointmentCommand LOGIC_COLOR","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"end box","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"end box","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"[-\u003e LogicManager : execute(\"addappointment d/20-10-2020...\")","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"activate LogicManager","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"addappointment d/20-10-2020...\")","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"activate AddressBookParser","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"create AddAppointmentCommandParser","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"AddressBookParser -\u003e AddAppointmentCommandParser","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"activate AddAppointmentCommandParser","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"AddAppointmentCommandParser --\u003e AddressBookParser","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"deactivate AddAppointmentCommandParser","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"AddressBookParser -\u003e AddAppointmentCommandParser : parse(\"d/20-10-2020...)","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"activate AddAppointmentCommandParser","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"create AddAppointmentCommand","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"AddAppointmentCommandParser -\u003e AddAppointmentCommand","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"activate AddAppointmentCommand","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"AddAppointmentCommand --\u003e AddAppointmentCommandParser : a","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"deactivate AddAppointmentCommand","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"AddAppointmentCommandParser --\u003e AddressBookParser : a","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"deactivate AddAppointmentCommandParser","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"AddAppointmentCommandParser -[hidden]-\u003e AddressBookParser","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"destroy AddAppointmentCommandParser","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"AddressBookParser --\u003e LogicManager : a","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"deactivate AddressBookParser","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"LogicManager -\u003e AddAppointmentCommand : execute()","lastModifiedDate":"2023-10-26"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"activate AddAppointmentCommand","lastModifiedDate":"2023-10-26"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"AddAppointmentCommand -\u003e Model : addAppointment(toAdd)","lastModifiedDate":"2023-10-26"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"activate Model","lastModifiedDate":"2023-10-26"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"Model --\u003e AddAppointmentCommand","lastModifiedDate":"2023-10-26"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"deactivate Model","lastModifiedDate":"2023-10-26"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"create CommandResult","lastModifiedDate":"2023-10-26"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"AddAppointmentCommand -\u003e CommandResult","lastModifiedDate":"2023-10-26"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"activate CommandResult","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"CommandResult --\u003e AddAppointmentCommand","lastModifiedDate":"2023-10-26"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"deactivate CommandResult","lastModifiedDate":"2023-10-26"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"AddAppointmentCommand --\u003e LogicManager : result","lastModifiedDate":"2023-10-26"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"deactivate AddAppointmentCommand","lastModifiedDate":"2023-10-26"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"[\u003c--LogicManager","lastModifiedDate":"2023-10-26"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"deactivate LogicManager","lastModifiedDate":"2023-10-26"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"@enduml","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"Darren159":70}},{"path":"docs/diagrams/AddRecordSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"@startuml","lastModifiedDate":"2023-10-27"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"!include style.puml","lastModifiedDate":"2023-10-27"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"skinparam ArrowFontStyle plain","lastModifiedDate":"2023-10-27"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2023-10-27"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2023-10-27"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2023-10-27"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"participant \":AddRecordCommandParser\" as AddRecordCommandParser LOGIC_COLOR","lastModifiedDate":"2023-10-27"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"participant \":AddRecordCommand\" as AddRecordCommand LOGIC_COLOR","lastModifiedDate":"2023-10-27"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2023-10-27"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"end box","lastModifiedDate":"2023-10-27"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2023-10-27"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2023-10-27"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"end box","lastModifiedDate":"2023-10-27"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"[-\u003e LogicManager : execute(\"addrecord 1 d/27-10-2023...\")","lastModifiedDate":"2023-10-27"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"activate LogicManager","lastModifiedDate":"2023-10-27"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"addrecord 1 d/27-10-2023...\")","lastModifiedDate":"2023-10-27"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"activate AddressBookParser","lastModifiedDate":"2023-10-27"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"create AddRecordCommandParser","lastModifiedDate":"2023-10-27"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"AddressBookParser -\u003e AddRecordCommandParser","lastModifiedDate":"2023-10-27"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"activate AddRecordCommandParser","lastModifiedDate":"2023-10-27"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"AddRecordCommandParser --\u003e AddressBookParser","lastModifiedDate":"2023-10-27"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"deactivate AddRecordCommandParser","lastModifiedDate":"2023-10-27"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"AddressBookParser -\u003e AddRecordCommandParser : parse(\"1 d/27-10-2023...)","lastModifiedDate":"2023-10-27"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"activate AddRecordCommandParser","lastModifiedDate":"2023-10-27"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"create AddRecordCommand","lastModifiedDate":"2023-10-27"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"AddRecordCommandParser -\u003e AddRecordCommand","lastModifiedDate":"2023-10-27"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"activate AddRecordCommand","lastModifiedDate":"2023-10-27"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"AddRecordCommand --\u003e AddRecordCommandParser : record","lastModifiedDate":"2023-10-27"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"deactivate AddRecordCommand","lastModifiedDate":"2023-10-27"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"AddRecordCommandParser --\u003e AddressBookParser : record","lastModifiedDate":"2023-10-27"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"deactivate AddRecordCommand","lastModifiedDate":"2023-10-27"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2023-10-27"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"AddRecordCommandParser -[hidden]-\u003e AddressBookParser","lastModifiedDate":"2023-10-27"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"destroy AddRecordCommandParser","lastModifiedDate":"2023-10-27"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"AddressBookParser --\u003e LogicManager : record","lastModifiedDate":"2023-10-27"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"deactivate AddressBookParser","lastModifiedDate":"2023-10-27"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"LogicManager -\u003e AddRecordCommand : execute(model)","lastModifiedDate":"2023-10-27"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"activate AddRecordCommand","lastModifiedDate":"2023-10-27"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"AddRecordCommand -\u003e Model : add(record)","lastModifiedDate":"2023-10-27"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"create CommandResult","lastModifiedDate":"2023-10-27"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"AddRecordCommand -\u003e CommandResult","lastModifiedDate":"2023-10-27"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"activate CommandResult","lastModifiedDate":"2023-10-27"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"CommandResult --\u003e AddRecordCommand","lastModifiedDate":"2023-10-27"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"deactivate CommandResult","lastModifiedDate":"2023-10-27"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"deactivate AddRecordCommand","lastModifiedDate":"2023-10-27"},{"lineNumber":62,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"AddRecordCommand --\u003e LogicManager : result","lastModifiedDate":"2023-10-27"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":65,"author":{"gitId":"hjoneweek"},"content":"[\u003c--LogicManager","lastModifiedDate":"2023-10-27"},{"lineNumber":66,"author":{"gitId":"hjoneweek"},"content":"deactivate LogicManager","lastModifiedDate":"2023-10-27"},{"lineNumber":67,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":68,"author":{"gitId":"hjoneweek"},"content":"@enduml","lastModifiedDate":"2023-10-27"}],"authorContributionMap":{"hjoneweek":68}},{"path":"docs/diagrams/AppointmentClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"@startuml","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"!include style.puml","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"UniqueAppointmentList -down-\u003e \"*\" Appointment","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"Appointment *--\u003e DateTime","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"Appointment --\u003e Person","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"Appointment *--\u003e Name","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"@enduml","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"Darren159":11}},{"path":"docs/diagrams/RecordClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"@startuml","lastModifiedDate":"2023-10-27"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"!include style.puml","lastModifiedDate":"2023-10-27"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"skinparam ArrowFontStyle plain","lastModifiedDate":"2023-10-27"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2023-10-27"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2023-10-27"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2023-10-27"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"Person -down-\u003e \"1\" UniqueRecordList","lastModifiedDate":"2023-10-27"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"UniqueRecordList -down-\u003e \"*\" Record","lastModifiedDate":"2023-10-27"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"Record -down-\u003e \"1\" DateTime","lastModifiedDate":"2023-10-27"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"Record -down-\u003e \"*\" Condition","lastModifiedDate":"2023-10-27"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"Record -down-\u003e \"*\" Medication","lastModifiedDate":"2023-10-27"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"@enduml","lastModifiedDate":"2023-10-27"}],"authorContributionMap":{"hjoneweek":13}},{"path":"docs/diagrams/ViewSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Clin-lyx"},"content":"@startuml","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"Clin-lyx"},"content":"!include style.puml","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"Clin-lyx"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"Clin-lyx"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"Clin-lyx"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"Clin-lyx"},"content":"participant \"v:ViewCommand\" as ViewCommand LOGIC_COLOR","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"Clin-lyx"},"content":"end box","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"Clin-lyx"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"Clin-lyx"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"Clin-lyx"},"content":"participant \":AddressBook\" as AddressBook MODEL_COLOR","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"Clin-lyx"},"content":"end box","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"Clin-lyx"},"content":"[-\u003e LogicManager : execute(view)","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"Clin-lyx"},"content":"activate LogicManager","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"Clin-lyx"},"content":"LogicManager -\u003e AddressBookParser : ParseCommand(view)","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"Clin-lyx"},"content":"activate AddressBookParser","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"Clin-lyx"},"content":"create ViewCommand","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"Clin-lyx"},"content":"AddressBookParser -\u003e ViewCommand","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"Clin-lyx"},"content":"activate ViewCommand","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"Clin-lyx"},"content":"ViewCommand --\u003e AddressBookParser","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"Clin-lyx"},"content":"deactivate ViewCommand","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"Clin-lyx"},"content":"AddressBookParser --\u003e LogicManager","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"Clin-lyx"},"content":"deactivate AddressBookParser","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"Clin-lyx"},"content":"LogicManager -\u003e ViewCommand : execute","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"Clin-lyx"},"content":"activate ViewCommand","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"Clin-lyx"},"content":"ViewCommand -\u003e Model : call","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"Clin-lyx"},"content":"activate Model","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"Clin-lyx"},"content":"Model -\u003e AddressBook : updateRecordList(Person)","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"Clin-lyx"},"content":"activate AddressBook","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"Clin-lyx"},"content":"deactivate Model","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"Clin-lyx"},"content":"AddressBook -\u003e AddressBook : setRecordList(Person)","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"Clin-lyx"},"content":"ViewCommand --\u003e LogicManager : result","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"Clin-lyx"},"content":"deactivate AddressBook","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"Clin-lyx"},"content":"deactivate ViewCommand","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"Clin-lyx"},"content":"ViewCommand -[hidden]-\u003e LogicManager : result","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"Clin-lyx"},"content":"destroy ViewCommand","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":50,"author":{"gitId":"Clin-lyx"},"content":"[\u003c-- LogicManager","lastModifiedDate":"2023-10-26"},{"lineNumber":51,"author":{"gitId":"Clin-lyx"},"content":"deactivate LogicManager","lastModifiedDate":"2023-10-26"},{"lineNumber":52,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":53,"author":{"gitId":"Clin-lyx"},"content":"@enduml","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"Clin-lyx":53}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"# MedBook","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3)","lastModifiedDate":"2020-08-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"**MedBook is a desktop application for managing your patient medical records.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"- If you are interested in using MedBook, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"- If you are interested about developing MedBook, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"- Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"Darren159":5,"-":15}},{"path":"docs/team/adammangzijun.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"---","lastModifiedDate":"2023-10-04"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"layout: default.md","lastModifiedDate":"2023-10-04"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"title: \"Adam\u0027s Project Portfolio Page\"","lastModifiedDate":"2023-10-04"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"---","lastModifiedDate":"2023-10-04"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"### Project: MedBook","lastModifiedDate":"2023-10-04"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"Overview: To be added soon","lastModifiedDate":"2023-10-04"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"Contributions: To be added soon","lastModifiedDate":"2023-10-04"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"* **New Feature 1**","lastModifiedDate":"2023-10-04"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"* **New Feature 2**","lastModifiedDate":"2023-10-04"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"* **Project management**","lastModifiedDate":"2023-10-04"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"* **Documentation**","lastModifiedDate":"2023-10-04"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"* **Community**","lastModifiedDate":"2023-10-04"}],"authorContributionMap":{"adammangzijun":20}},{"path":"docs/team/clin-lyx.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2023-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-10-04"},{"lineNumber":3,"author":{"gitId":"Clin-lyx"},"content":"  title: \"Lin Yuxiang\u0027s Project Portfolio Page\"","lastModifiedDate":"2023-10-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2023-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":6,"author":{"gitId":"Clin-lyx"},"content":"### Project Medbook","lastModifiedDate":"2023-10-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":8,"author":{"gitId":"Clin-lyx"},"content":"MedBook - Medbook streamlines patient management for healthcare professionals. It simplifies the process of accessing patients\u0027 contact information and medical records, making it easier for healthcare providers to efficiently coordinate care.","lastModifiedDate":"2023-10-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-10-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2023-10-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2023-10-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2023-10-04"},{"lineNumber":15,"author":{"gitId":"Clin-lyx"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in the future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2023-10-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2023-10-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2023-10-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":20,"author":{"gitId":"Clin-lyx"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2324s1.github.io/tp-dashboard/?search\u003dclin-lyx\u0026breakdown\u003dfalse\u0026sort\u003dgroupTitle%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2023-09-22\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos)","lastModifiedDate":"2023-10-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **Project management**:","lastModifiedDate":"2023-10-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2023-10-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-10-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2023-10-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2023-10-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* **Documentation**:","lastModifiedDate":"2023-10-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  * User Guide:","lastModifiedDate":"2023-10-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2023-10-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2023-10-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * Developer Guide:","lastModifiedDate":"2023-10-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2023-10-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"* **Community**:","lastModifiedDate":"2023-10-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2023-10-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2023-10-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2023-10-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2023-10-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"* **Tools**:","lastModifiedDate":"2023-10-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2023-10-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2023-10-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2023-10-04"}],"authorContributionMap":{"Clin-lyx":5,"-":41}},{"path":"docs/team/darren159.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"---","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"  layout: default.md","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"  title: \"Darren\u0027s Project Portfolio Page\"","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"---","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"### Project: MedBook","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"* **New Feature**:","lastModifiedDate":"2023-10-04"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2324s1.github.io/tp-dashboard/?search\u003ddarren159\u0026breakdown\u003dfalse\u0026sort\u003dgroupTitle%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2023-09-22\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos)","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"* **Project management**:","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"* **Documentation**:","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"* **Community**:","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"* **Tools**:","lastModifiedDate":"2023-10-03"}],"authorContributionMap":{"Darren159":24}},{"path":"docs/team/hjoneweek.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"---","lastModifiedDate":"2023-10-04"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"layout: default.md","lastModifiedDate":"2023-10-04"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"title: \"Hanjoo\u0027s Project Portfolio Page\"","lastModifiedDate":"2023-10-04"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"---","lastModifiedDate":"2023-10-04"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"### Project: MedBook","lastModifiedDate":"2023-10-04"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"Overview: To be added soon","lastModifiedDate":"2023-10-04"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"Contributions: To be added soon","lastModifiedDate":"2023-10-04"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"* **New Feature 1**","lastModifiedDate":"2023-10-04"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"* **New Feature 2**","lastModifiedDate":"2023-10-04"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"* **Project management**","lastModifiedDate":"2023-10-04"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"* **Documentation**","lastModifiedDate":"2023-10-04"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"* **Community**","lastModifiedDate":"2023-10-04"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"}],"authorContributionMap":{"hjoneweek":22}},{"path":"docs/team/ryanongwx.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ryanongwx"},"content":"---","lastModifiedDate":"2023-10-05"},{"lineNumber":2,"author":{"gitId":"ryanongwx"},"content":"  layout: default.md","lastModifiedDate":"2023-10-05"},{"lineNumber":3,"author":{"gitId":"ryanongwx"},"content":"  title: \"Ryan\u0027s Project Portfolio Page\"","lastModifiedDate":"2023-10-05"},{"lineNumber":4,"author":{"gitId":"ryanongwx"},"content":"---","lastModifiedDate":"2023-10-05"},{"lineNumber":5,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":6,"author":{"gitId":"ryanongwx"},"content":"### Project: MedBook","lastModifiedDate":"2023-10-05"},{"lineNumber":7,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"- **New Feature**:","lastModifiedDate":"2023-10-15"},{"lineNumber":9,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"- **Code contributed**:","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"- **Project management**:","lastModifiedDate":"2023-10-15"},{"lineNumber":13,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"- **Enhancements to existing features**:","lastModifiedDate":"2023-10-15"},{"lineNumber":15,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"- **Documentation**:","lastModifiedDate":"2023-10-15"},{"lineNumber":17,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"- **Community**:","lastModifiedDate":"2023-10-15"},{"lineNumber":19,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"- **Tools**:","lastModifiedDate":"2023-10-15"}],"authorContributionMap":{"Darren159":7,"ryanongwx":13}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"# Tutorial: Adding a command","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory.","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2020-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book.","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-399c284cb892c20b7c04a69116fcff6ccc0666c5230a1db8e4a9145def8fa4ee).","lastModifiedDate":"2022-01-02"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"../diagrams/add-remark/RemarkClass.puml\" alt\u003d\"The relationship between RemarkCommand and Command\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-08-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \": Edits the remark of the person identified \"","lastModifiedDate":"2021-08-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d","lastModifiedDate":"2021-08-01"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            \"Remark command not implemented yet\";","lastModifiedDate":"2021-08-01"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        throw new CommandException(","lastModifiedDate":"2021-08-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2021-08-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-a8e35af8f9c251525063fae36c9852922a7e7195763018eacec60f3a4d87c594) after you are done.","lastModifiedDate":"2022-01-02"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":146,"author":{"gitId":"-"},"content":"Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"../diagrams/add-remark/ParserClass.puml\" alt\u003d\"The relationship between Parser and RemarkCommandParser\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2023-09-12"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":225,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-8bf239e8e9529369b577701303ddd96af93178b4ed6735f91c2d8488b20c6b4a).","lastModifiedDate":"2022-01-02"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":229,"author":{"gitId":"-"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person.","lastModifiedDate":"2020-07-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":233,"author":{"gitId":"-"},"content":"Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":235,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-41bb13c581e280c686198251ad6cc337cd5e27032772f06ed9bf7f1440995ece). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2022-01-02"},{"lineNumber":236,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":244,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person.","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":246,"author":{"gitId":"-"},"content":"Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-639834f1e05afe2276a86372adf0fe5f69314642c2d93cfa543d614ce5a76688).","lastModifiedDate":"2022-01-02"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":258,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-d44c4f51c24f6253c277a2bb9bc440b8064d9c15ad7cb7ceda280bca032efce9).","lastModifiedDate":"2022-01-02"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"tip\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2023-09-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"warning\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2023-09-12"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":315,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"ryanongwx"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX + \". Please ensure that it is within 1 and \" + lastShownList.size() + \".\");","lastModifiedDate":"2023-11-08"},{"lineNumber":345,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-07-29"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(","lastModifiedDate":"2021-08-01"},{"lineNumber":349,"author":{"gitId":"-"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-08-01"},{"lineNumber":350,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());","lastModifiedDate":"2020-07-29"},{"lineNumber":351,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-07-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2020-07-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether","lastModifiedDate":"2021-08-01"},{"lineNumber":360,"author":{"gitId":"-"},"content":"     * the remark is added to or removed from","lastModifiedDate":"2021-08-01"},{"lineNumber":361,"author":{"gitId":"-"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":365,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":377,"author":{"gitId":"-"},"content":"Of course you can simply add the test cases manually, like you\u0027ve been doing all along this tutorial. The result would be like the test cases in [here](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01). Alternatively, you can get the help of IntelliJ to generate the skeletons of the test cases, as explained in the next section.","lastModifiedDate":"2022-01-02"},{"lineNumber":378,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":379,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":396,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":397,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":398,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01R36-R49).","lastModifiedDate":"2022-01-02"},{"lineNumber":399,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":400,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":401,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":402,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"-":401,"ryanongwx":1}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;","lastModifiedDate":"2016-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-01-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 2, 2, true);","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing MedBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2023-10-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2023-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());","lastModifiedDate":"2023-10-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":71,"author":{"gitId":"ryanongwx"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address","lastModifiedDate":"2023-10-24"},{"lineNumber":72,"author":{"gitId":"ryanongwx"},"content":"     * book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":73,"author":{"gitId":"ryanongwx"},"content":"     * The data from the sample address book will be used instead if","lastModifiedDate":"2023-10-24"},{"lineNumber":74,"author":{"gitId":"ryanongwx"},"content":"     * {@code storage}\u0027s address book is not found,","lastModifiedDate":"2023-10-24"},{"lineNumber":75,"author":{"gitId":"ryanongwx"},"content":"     * or an empty address book will be used instead if errors occur when reading","lastModifiedDate":"2023-10-24"},{"lineNumber":76,"author":{"gitId":"ryanongwx"},"content":"     * {@code storage}\u0027s address book.","lastModifiedDate":"2023-10-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        logger.info(\"Using data file : \" + storage.getAddressBookFilePath());","lastModifiedDate":"2023-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                logger.info(\"Creating a new data file \" + storage.getAddressBookFilePath()","lastModifiedDate":"2023-05-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                        + \" populated with a sample AddressBook.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);","lastModifiedDate":"2016-12-20"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2023-06-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file at \" + storage.getAddressBookFilePath() + \" could not be loaded.\"","lastModifiedDate":"2023-06-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                    + \" Will be starting with an empty AddressBook.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            if (!configOptional.isPresent()) {","lastModifiedDate":"2023-01-03"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                logger.info(\"Creating new config file \" + configFilePathUsed);","lastModifiedDate":"2023-05-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2023-01-03"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2023-06-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" could not be loaded.\"","lastModifiedDate":"2023-06-15"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                    + \" Using default config properties.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"ryanongwx"},"content":"        // Update config file in case it was missing to begin with or there are","lastModifiedDate":"2023-10-24"},{"lineNumber":134,"author":{"gitId":"ryanongwx"},"content":"        // new/unused fields","lastModifiedDate":"2023-10-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":144,"author":{"gitId":"ryanongwx"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs","lastModifiedDate":"2023-10-24"},{"lineNumber":145,"author":{"gitId":"ryanongwx"},"content":"     * file path,","lastModifiedDate":"2023-10-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        logger.info(\"Using preference file : \" + prefsFilePath);","lastModifiedDate":"2023-05-15"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            if (!prefsOptional.isPresent()) {","lastModifiedDate":"2023-01-03"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                logger.info(\"Creating new preference file \" + prefsFilePath);","lastModifiedDate":"2023-05-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2023-01-03"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2023-06-14"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            logger.warning(\"Preference file at \" + prefsFilePath + \" could not be loaded.\"","lastModifiedDate":"2023-06-15"},{"lineNumber":162,"author":{"gitId":"-"},"content":"                    + \" Using default preferences.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":166,"author":{"gitId":"ryanongwx"},"content":"        // Update prefs file in case it was missing to begin with or there are","lastModifiedDate":"2023-10-24"},{"lineNumber":167,"author":{"gitId":"ryanongwx"},"content":"        // new/unused fields","lastModifiedDate":"2023-10-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"Darren159"},"content":"        logger.info(\"Starting MedBook \" + MainApp.VERSION);","lastModifiedDate":"2023-10-18"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":192,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Darren159":2,"-":178,"ryanongwx":12}},{"path":"src/main/java/seedu/address/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings.","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Guarantees: immutable.","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"    private static final double DEFAULT_HEIGHT \u003d 720;","lastModifiedDate":"2023-10-22"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"    private static final double DEFAULT_WIDTH \u003d 1280;","lastModifiedDate":"2023-10-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final double windowWidth;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final double windowHeight;","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public GuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;","lastModifiedDate":"2018-08-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);","lastModifiedDate":"2018-08-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        GuiSettings otherGuiSettings \u003d (GuiSettings) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d otherGuiSettings.windowWidth","lastModifiedDate":"2023-07-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                \u0026\u0026 windowHeight \u003d\u003d otherGuiSettings.windowHeight","lastModifiedDate":"2023-07-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, otherGuiSettings.windowCoordinates);","lastModifiedDate":"2023-07-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .add(\"windowWidth\", windowWidth)","lastModifiedDate":"2019-02-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .add(\"windowHeight\", windowHeight)","lastModifiedDate":"2019-02-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                .add(\"windowCoordinates\", windowCoordinates)","lastModifiedDate":"2019-02-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Darren159":2,"-":80}},{"path":"src/main/java/seedu/address/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-05-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-05-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level","lastModifiedDate":"2016-09-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,","lastModifiedDate":"2016-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log","lastModifiedDate":"2016-09-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"    private static final String LOG_FILE \u003d \"medbook.log\";","lastModifiedDate":"2023-10-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final Logger logger; // logger for this class","lastModifiedDate":"2023-07-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static Logger baseLogger; // to be used as the parent of all other loggers created by this class.","lastModifiedDate":"2023-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    // This static block ensures essential loggers are created early","lastModifiedDate":"2023-07-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2023-07-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        setBaseLogger();","lastModifiedDate":"2023-07-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        logger \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2023-07-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Initializes loggers with the log level specified in the {@code config} object. Applies to all loggers created","lastModifiedDate":"2023-07-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * using {@link #getLogger(String)} and {@link #getLogger(Class)} methods except for those that are manually set.","lastModifiedDate":"2023-07-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        logger.info(\"Log level will be set as: \" + currentLogLevel);","lastModifiedDate":"2023-07-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // set the level of the baseLogger which will be inherited by other loggers","lastModifiedDate":"2023-07-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        baseLogger.setLevel(currentLogLevel);","lastModifiedDate":"2023-07-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name prefixed by the {@code baseLogger}\u0027s name so that the created logger","lastModifiedDate":"2023-07-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * becomes a descendant of the {@code baseLogger}. Furthermore, the returned logger will have the same log handlers","lastModifiedDate":"2023-07-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * as the {@code baseLogger}.","lastModifiedDate":"2023-07-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Java organizes loggers into a hierarchy based on their names (using \u0027.\u0027 as a separator, similar to how Java","lastModifiedDate":"2023-07-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // packages form a hierarchy). Furthermore, loggers without a level inherit the level of their parent logger.","lastModifiedDate":"2023-07-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // By prefixing names of all loggers with baseLogger\u0027s name + \".\", we make the baseLogger the parent of all","lastModifiedDate":"2023-07-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // loggers. This allows us to change the level of all loggers simply by changing the baseLogger level.","lastModifiedDate":"2023-07-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(baseLogger.getName() + \".\" + name);","lastModifiedDate":"2023-07-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(true);","lastModifiedDate":"2023-07-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return logger;","lastModifiedDate":"2023-07-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(clazz);","lastModifiedDate":"2023-05-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Removes all handlers from the {@code logger}.","lastModifiedDate":"2023-07-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Creates a logger named \u0027ab3\u0027, containing a {@code ConsoleHandler} and a {@code FileHandler}.","lastModifiedDate":"2023-07-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Sets it as the {@code baseLogger}, to be used as the parent logger of all other loggers.","lastModifiedDate":"2023-07-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static void setBaseLogger() {","lastModifiedDate":"2023-07-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        baseLogger \u003d Logger.getLogger(\"ab3\");","lastModifiedDate":"2023-07-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        baseLogger.setUseParentHandlers(false);","lastModifiedDate":"2023-07-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        removeHandlers(baseLogger);","lastModifiedDate":"2023-07-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // Level.ALL is used as the level for the handlers because the baseLogger filters the log messages by level","lastModifiedDate":"2023-07-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // already; there is no need to control log message level of the handlers.","lastModifiedDate":"2023-07-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // add a ConsoleHandler to log to the console","lastModifiedDate":"2023-07-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2023-07-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(Level.ALL);","lastModifiedDate":"2023-07-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        baseLogger.addHandler(consoleHandler);","lastModifiedDate":"2023-07-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // add a FileHandler to log to a file","lastModifiedDate":"2023-07-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2023-07-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2023-07-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            fileHandler.setLevel(Level.ALL);","lastModifiedDate":"2023-07-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            baseLogger.addHandler(fileHandler);","lastModifiedDate":"2023-07-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Darren159":1,"-":105}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"Clin-lyx"},"content":"import java.util.List;","lastModifiedDate":"2023-11-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":15,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2023-10-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"     *","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @throws ParseException   If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()","lastModifiedDate":"2018-12-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"    /** Returns an unmodifiable view of the pinned list of persons */","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"    ObservableList\u003cPerson\u003e getPinnedPersonList();","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"    /** Returns an unmodifiable view of the filtered list of appointments */","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"    /** Returns an unmodifiable view of the filtered list of records */","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"    ObservableList\u003cRecord\u003e getFilteredRecordList();","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":65,"author":{"gitId":"Clin-lyx"},"content":"    ObservableList\u003cRecord\u003e getRecordList();","lastModifiedDate":"2023-10-21"},{"lineNumber":66,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":67,"author":{"gitId":"Clin-lyx"},"content":"    ObservableList\u003cPerson\u003e getPersonBeingViewed();","lastModifiedDate":"2023-10-21"},{"lineNumber":68,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":69,"author":{"gitId":"Clin-lyx"},"content":"    List\u003cIndex\u003e getPatientIndex();","lastModifiedDate":"2023-11-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"Darren159":11,"Clin-lyx":9,"-":50}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.AccessDeniedException;","lastModifiedDate":"2023-06-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"Clin-lyx"},"content":"import java.util.List;","lastModifiedDate":"2023-11-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":12,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":22,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2023-10-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_FORMAT \u003d \"Could not save data due to the following error: %s\";","lastModifiedDate":"2023-06-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"    public static final String FILE_OPS_PERMISSION_ERROR_FORMAT \u003d \"Could not save data to file %s due to \"","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"            + \"insufficient permissions to write to the file or the folder.\";","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"     * {@code Storage}.","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2017-07-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        } catch (AccessDeniedException e) {","lastModifiedDate":"2023-06-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new CommandException(String.format(FILE_OPS_PERMISSION_ERROR_FORMAT, e.getMessage()), e);","lastModifiedDate":"2023-06-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            throw new CommandException(String.format(FILE_OPS_ERROR_FORMAT, ioe.getMessage()), ioe);","lastModifiedDate":"2023-06-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"Darren159"},"content":"    public ObservableList\u003cPerson\u003e getPinnedPersonList() {","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"Darren159"},"content":"        return model.getPinnedPersonList();","lastModifiedDate":"2023-10-13"},{"lineNumber":82,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":83,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":84,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":85,"author":{"gitId":"Darren159"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":86,"author":{"gitId":"Darren159"},"content":"        return model.getFilteredAppointmentList();","lastModifiedDate":"2023-11-01"},{"lineNumber":87,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":88,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":89,"author":{"gitId":"Clin-lyx"},"content":"    @Override","lastModifiedDate":"2023-10-21"},{"lineNumber":90,"author":{"gitId":"Clin-lyx"},"content":"    public ObservableList\u003cRecord\u003e getRecordList() {","lastModifiedDate":"2023-10-21"},{"lineNumber":91,"author":{"gitId":"Clin-lyx"},"content":"        return model.getRecordList();","lastModifiedDate":"2023-10-21"},{"lineNumber":92,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":93,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":94,"author":{"gitId":"Darren159"},"content":"    public ObservableList\u003cRecord\u003e getFilteredRecordList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":95,"author":{"gitId":"Darren159"},"content":"        return model.getFilteredRecordList();","lastModifiedDate":"2023-11-01"},{"lineNumber":96,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":97,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":98,"author":{"gitId":"Clin-lyx"},"content":"    @Override","lastModifiedDate":"2023-10-21"},{"lineNumber":99,"author":{"gitId":"Clin-lyx"},"content":"    public ObservableList\u003cPerson\u003e getPersonBeingViewed() {","lastModifiedDate":"2023-10-21"},{"lineNumber":100,"author":{"gitId":"Clin-lyx"},"content":"        return model.getPersonBeingViewed();","lastModifiedDate":"2023-10-21"},{"lineNumber":101,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":102,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":103,"author":{"gitId":"Clin-lyx"},"content":"    public List\u003cIndex\u003e getPatientIndex() {","lastModifiedDate":"2023-11-07"},{"lineNumber":104,"author":{"gitId":"Clin-lyx"},"content":"        return model.getPatientIndex();","lastModifiedDate":"2023-11-07"},{"lineNumber":105,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":106,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"Darren159":19,"Clin-lyx":17,"-":85}},{"path":"src/main/java/seedu/address/logic/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2023-07-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2023-07-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-07-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-07-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2023-07-14"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2019-02-23"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"    public static final String MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX \u003d","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"            \"The appointment index provided is invalid\";","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"    public static final String MESSAGE_INVALID_RECORD_DISPLAYED_INDEX \u003d \"The record index provided is invalid\";","lastModifiedDate":"2023-10-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"    public static final String MESSAGE_RECORDS_LISTED_OVERVIEW \u003d \"%1$d records listed!\";","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_FIELDS \u003d","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"            \"Multiple values specified for the following single-valued field(s): \";","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-07-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns an error message indicating the duplicate prefixes.","lastModifiedDate":"2023-07-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-07-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getErrorMessageForDuplicatePrefixes(Prefix... duplicatePrefixes) {","lastModifiedDate":"2023-07-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assert duplicatePrefixes.length \u003e 0;","lastModifiedDate":"2023-07-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"        Set\u003cString\u003e duplicateFields \u003d Stream.of(duplicatePrefixes).map(Prefix::toString).collect(Collectors.toSet());","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return MESSAGE_DUPLICATE_FIELDS + String.join(\" \", duplicateFields);","lastModifiedDate":"2023-07-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-02-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Formats the {@code person} for display to the user.","lastModifiedDate":"2019-02-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-02-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static String format(Person person) {","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        builder.append(person.getName())","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"                .append(\"; NRIC: \")","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"                .append(person.getNric())","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                .append(person.getEmail())","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2023-10-14"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"                .append(person.getPhone())","lastModifiedDate":"2023-10-14"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"                .append(\"; Gender: \")","lastModifiedDate":"2023-10-14"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"                .append(person.getGender())","lastModifiedDate":"2023-10-14"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"                .append(\"; Age: \")","lastModifiedDate":"2023-10-14"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"                .append(person.getAge())","lastModifiedDate":"2023-10-14"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"                .append(\"; BloodType: \")","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"                .append(person.getBloodType())","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"                .append(\"; Allergies: \");","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"        person.getAllergies().forEach(builder::append);","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-18"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"     * Formats the {@code appointment} for display to the user.","lastModifiedDate":"2023-10-30"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-18"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"    public static String format(Appointment appointment, Person person) {","lastModifiedDate":"2023-10-18"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2023-10-18"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"        builder.append(\"Patient: \")","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"                .append(person.getName())","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"                .append(\"; Appointment: \")","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"                .append(appointment.getName())","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"                .append(\"; Date \u0026 Time: \")","lastModifiedDate":"2023-10-18"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"                .append(appointment.getDateTime());","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":78,"author":{"gitId":"adammangzijun"},"content":"     * Formats the {@code record} for display to the user.","lastModifiedDate":"2023-10-21"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":80,"author":{"gitId":"Darren159"},"content":"    public static String format(Record record, Person person) {","lastModifiedDate":"2023-10-20"},{"lineNumber":81,"author":{"gitId":"Darren159"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2023-10-20"},{"lineNumber":82,"author":{"gitId":"Darren159"},"content":"        builder.append(\"Patient: \")","lastModifiedDate":"2023-10-20"},{"lineNumber":83,"author":{"gitId":"Darren159"},"content":"                .append(person.getName())","lastModifiedDate":"2023-10-20"},{"lineNumber":84,"author":{"gitId":"Darren159"},"content":"                .append(\"; Conditions: \")","lastModifiedDate":"2023-10-20"},{"lineNumber":85,"author":{"gitId":"Darren159"},"content":"                .append(record.getConditions())","lastModifiedDate":"2023-10-20"},{"lineNumber":86,"author":{"gitId":"Darren159"},"content":"                .append(\"; Date \u0026 Time: \")","lastModifiedDate":"2023-10-20"},{"lineNumber":87,"author":{"gitId":"Darren159"},"content":"                .append(record.getDateTime())","lastModifiedDate":"2023-10-29"},{"lineNumber":88,"author":{"gitId":"Darren159"},"content":"                .append(\"; Medications: \")","lastModifiedDate":"2023-10-29"},{"lineNumber":89,"author":{"gitId":"Darren159"},"content":"                .append(record.getMedications());","lastModifiedDate":"2023-10-29"},{"lineNumber":90,"author":{"gitId":"Darren159"},"content":"        return builder.toString();","lastModifiedDate":"2023-10-18"},{"lineNumber":91,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Darren159":35,"-":45,"adammangzijun":12}},{"path":"src/main/java/seedu/address/logic/commands/AddAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-17"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-17"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2023-10-17"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import java.util.List;","lastModifiedDate":"2023-10-18"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-18"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-17"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-17"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-17"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-17"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-18"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Nric;","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-17"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":" * Adds an appointment to the address book.","lastModifiedDate":"2023-10-17"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-17"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"public class AddAppointmentCommand extends Command {","lastModifiedDate":"2023-10-17"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"    public static final String COMMAND_WORD \u003d \"addappointment\";","lastModifiedDate":"2023-10-17"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an appointment to the address book.\\n\"","lastModifiedDate":"2023-10-18"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2023-10-18"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"            + PREFIX_DATE + \"DATE\\n\"","lastModifiedDate":"2023-10-17"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2023-10-18"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"            + PREFIX_NAME + \"Eye Examination \"","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"            + PREFIX_DATE + \"18-09-2023 1800 \";","lastModifiedDate":"2023-10-18"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New appointment added: %1$s\";","lastModifiedDate":"2023-10-17"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This appointment already exists in the address book\";","lastModifiedDate":"2023-10-17"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"    private final Index index;","lastModifiedDate":"2023-10-18"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"    private final Appointment toAdd;","lastModifiedDate":"2023-10-17"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-17"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"     * Creates an AddAppointmentCommand to add the specified {@code Appointment}","lastModifiedDate":"2023-10-17"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-17"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"    public AddAppointmentCommand(Index index, Appointment appointment) {","lastModifiedDate":"2023-10-18"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"        requireNonNull(index);","lastModifiedDate":"2023-10-18"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2023-10-18"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"        this.toAdd \u003d appointment;","lastModifiedDate":"2023-10-18"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-10-18"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-17"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-17"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-17"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-10-18"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-10-18"},{"lineNumber":56,"author":{"gitId":"ryanongwx"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX","lastModifiedDate":"2023-11-08"},{"lineNumber":57,"author":{"gitId":"ryanongwx"},"content":"                    + \". Please ensure that it is within 1 and \" + lastShownList.size() + \".\");","lastModifiedDate":"2023-11-08"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"        Person patient \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2023-11-01"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"        Nric patientId \u003d patient.getNric();","lastModifiedDate":"2023-11-01"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"        Appointment newAppointment \u003d new Appointment(toAdd.getName(), toAdd.getDateTime(), patientId);","lastModifiedDate":"2023-11-01"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"        if (patient.hasAppointment(newAppointment)) {","lastModifiedDate":"2023-11-01"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2023-10-17"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"        UniqueAppointmentList newAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2023-10-18"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"        newAppointmentList.setAppointments(patient.getAppointments());","lastModifiedDate":"2023-11-01"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"        newAppointmentList.add(newAppointment);","lastModifiedDate":"2023-11-01"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"        Person newPatient \u003d new Person(patient.getName(), patient.getNric(), patient.getEmail(),","lastModifiedDate":"2023-11-01"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"                patient.getPhone(), patient.getGender(), patient.getAge(), patient.getBloodType(),","lastModifiedDate":"2023-11-01"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"                patient.getAllergies(), patient.getRecords(), newAppointmentList, patient.isPinned());","lastModifiedDate":"2023-11-01"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":75,"author":{"gitId":"Darren159"},"content":"        model.setPerson(patient, newPatient);","lastModifiedDate":"2023-11-01"},{"lineNumber":76,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":77,"author":{"gitId":"Darren159"},"content":"        model.resetAppointmentList();","lastModifiedDate":"2023-11-01"},{"lineNumber":78,"author":{"gitId":"Darren159"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, Messages.format(newAppointment, newPatient)));","lastModifiedDate":"2023-11-01"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":80,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":81,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-17"},{"lineNumber":82,"author":{"gitId":"Darren159"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-17"},{"lineNumber":83,"author":{"gitId":"Darren159"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-17"},{"lineNumber":84,"author":{"gitId":"Darren159"},"content":"            return true;","lastModifiedDate":"2023-10-17"},{"lineNumber":85,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":86,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":87,"author":{"gitId":"Darren159"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-17"},{"lineNumber":88,"author":{"gitId":"Darren159"},"content":"        if (!(other instanceof AddAppointmentCommand)) {","lastModifiedDate":"2023-10-17"},{"lineNumber":89,"author":{"gitId":"Darren159"},"content":"            return false;","lastModifiedDate":"2023-10-17"},{"lineNumber":90,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":91,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":92,"author":{"gitId":"Darren159"},"content":"        AddAppointmentCommand otherAddCommand \u003d (AddAppointmentCommand) other;","lastModifiedDate":"2023-10-17"},{"lineNumber":93,"author":{"gitId":"Darren159"},"content":"        return toAdd.equals(otherAddCommand.toAdd) \u0026\u0026 index.equals(otherAddCommand.index);","lastModifiedDate":"2023-10-19"},{"lineNumber":94,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":95,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":96,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-17"},{"lineNumber":97,"author":{"gitId":"Darren159"},"content":"    public String toString() {","lastModifiedDate":"2023-10-17"},{"lineNumber":98,"author":{"gitId":"Darren159"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-17"},{"lineNumber":99,"author":{"gitId":"Darren159"},"content":"                .add(\"toAdd\", toAdd)","lastModifiedDate":"2023-10-17"},{"lineNumber":100,"author":{"gitId":"Darren159"},"content":"                .toString();","lastModifiedDate":"2023-10-17"},{"lineNumber":101,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":102,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-17"}],"authorContributionMap":{"Darren159":100,"ryanongwx":2}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-10-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-01-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Adds a person to the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"    public static final String COMMAND_WORD \u003d \"addpatient\";","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"Clin-lyx"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to the address book.\\n\"","lastModifiedDate":"2023-10-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"            + PREFIX_NRIC + \"NRIC \"","lastModifiedDate":"2023-10-30"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"            + PREFIX_GENDER + \"GENDER \"","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"            + PREFIX_AGE + \"AGE \"","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"            + PREFIX_BLOODTYPE + \"BLOODTYPE \"","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"            + \"[\" + PREFIX_ALLERGIES + \"ALLERGY]...\\n\"","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"            + PREFIX_NRIC + \"S1234567A \"","lastModifiedDate":"2023-10-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"            + PREFIX_GENDER + \"M \"","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"            + PREFIX_AGE + \"18 \"","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"            + PREFIX_BLOODTYPE + \"A+ \"","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"            + PREFIX_ALLERGIES + \"Penicillin \";","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the Medbook\";","lastModifiedDate":"2023-11-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, Messages.format(toAdd)));","lastModifiedDate":"2019-02-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (!(other instanceof AddCommand)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        AddCommand otherAddCommand \u003d (AddCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return toAdd.equals(otherAddCommand.toAdd);","lastModifiedDate":"2023-07-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                .add(\"toAdd\", toAdd)","lastModifiedDate":"2019-02-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Darren159":4,"hjoneweek":11,"Clin-lyx":1,"-":72,"adammangzijun":5}},{"path":"src/main/java/seedu/address/logic/commands/AddRecordCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-15"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CONDITION;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICATION;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import java.util.List;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-15"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-15"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-15"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-15"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2023-10-15"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.UniqueRecordList;","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":" * Adds a record to a patient in the MedBook","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"public class AddRecordCommand extends Command {","lastModifiedDate":"2023-10-15"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"    public static final String COMMAND_WORD \u003d \"addrecord\";","lastModifiedDate":"2023-10-15"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient record to the address book.\\n\"","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"            + PREFIX_DATE + \"DATE \"","lastModifiedDate":"2023-10-15"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"            + PREFIX_CONDITION + \"CONDITION \"","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"            + PREFIX_MEDICATION + \"MEDICATION \" + \"\\n\"","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"            + PREFIX_DATE + \"18-09-2023 1800 \"","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"            + PREFIX_CONDITION + \"Fever \"","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"            + PREFIX_MEDICATION + \"Tylenol\";","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New record added: %1$s\";","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"    public static final String MESSAGE_DUPLICATE_RECORDS \u003d \"This record already exists in the record of the patient.\";","lastModifiedDate":"2023-11-08"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"    private final Record record;","lastModifiedDate":"2023-10-15"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"    private final Index index;","lastModifiedDate":"2023-10-15"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"     * Creates a record under a patient of specified index","lastModifiedDate":"2023-10-19"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"    public AddRecordCommand(Index index, Record record) {","lastModifiedDate":"2023-10-15"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"        requireAllNonNull(index, record);","lastModifiedDate":"2023-10-15"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-10-15"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"        this.record \u003d record;","lastModifiedDate":"2023-10-15"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-15"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-15"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-10-15"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-10-15"},{"lineNumber":59,"author":{"gitId":"ryanongwx"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX","lastModifiedDate":"2023-11-08"},{"lineNumber":60,"author":{"gitId":"ryanongwx"},"content":"                    + \". Please ensure that it is within 1 and \" + lastShownList.size() + \".\");","lastModifiedDate":"2023-11-08"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-15"},{"lineNumber":62,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"        if (model.hasRecord(record, index)) {","lastModifiedDate":"2023-11-08"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_RECORDS);","lastModifiedDate":"2023-11-08"},{"lineNumber":65,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-11-08"},{"lineNumber":66,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":67,"author":{"gitId":"hjoneweek"},"content":"        Person personToAddRecord \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2023-10-15"},{"lineNumber":68,"author":{"gitId":"hjoneweek"},"content":"        UniqueRecordList newRecords \u003d new UniqueRecordList();","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"hjoneweek"},"content":"        newRecords.setRecords(personToAddRecord.getRecords());","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"hjoneweek"},"content":"        newRecords.add(record);","lastModifiedDate":"2023-10-19"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"        Person personWithAddedRecord \u003d new Person(personToAddRecord.getName(), personToAddRecord.getNric(),","lastModifiedDate":"2023-10-30"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"                personToAddRecord.getEmail(), personToAddRecord.getPhone(), personToAddRecord.getGender(),","lastModifiedDate":"2023-10-30"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"                personToAddRecord.getAge(), personToAddRecord.getBloodType(), personToAddRecord.getAllergies(),","lastModifiedDate":"2023-10-30"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"                newRecords, personToAddRecord.getAppointments(), personToAddRecord.isPinned());","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":76,"author":{"gitId":"hjoneweek"},"content":"        model.setPerson(personToAddRecord, personWithAddedRecord);","lastModifiedDate":"2023-10-19"},{"lineNumber":77,"author":{"gitId":"Clin-lyx"},"content":"        model.updateRecordList(personWithAddedRecord, index);","lastModifiedDate":"2023-11-07"},{"lineNumber":78,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, Messages.format(record, personWithAddedRecord)));","lastModifiedDate":"2023-10-20"},{"lineNumber":80,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":81,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":82,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":83,"author":{"gitId":"hjoneweek"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-19"},{"lineNumber":84,"author":{"gitId":"hjoneweek"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-19"},{"lineNumber":85,"author":{"gitId":"hjoneweek"},"content":"            return true;","lastModifiedDate":"2023-10-19"},{"lineNumber":86,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":87,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":88,"author":{"gitId":"hjoneweek"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-19"},{"lineNumber":89,"author":{"gitId":"hjoneweek"},"content":"        if (!(other instanceof AddRecordCommand)) {","lastModifiedDate":"2023-10-19"},{"lineNumber":90,"author":{"gitId":"hjoneweek"},"content":"            return false;","lastModifiedDate":"2023-10-19"},{"lineNumber":91,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":92,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":93,"author":{"gitId":"hjoneweek"},"content":"        AddRecordCommand otherAddRecordCommand \u003d (AddRecordCommand) other;","lastModifiedDate":"2023-10-19"},{"lineNumber":94,"author":{"gitId":"hjoneweek"},"content":"        return record.equals(otherAddRecordCommand.record)","lastModifiedDate":"2023-10-19"},{"lineNumber":95,"author":{"gitId":"hjoneweek"},"content":"                \u0026\u0026 index.equals(otherAddRecordCommand.index);","lastModifiedDate":"2023-10-19"},{"lineNumber":96,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":97,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":98,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":99,"author":{"gitId":"hjoneweek"},"content":"    public String toString() {","lastModifiedDate":"2023-10-19"},{"lineNumber":100,"author":{"gitId":"hjoneweek"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-19"},{"lineNumber":101,"author":{"gitId":"hjoneweek"},"content":"                .add(\"index\", index)","lastModifiedDate":"2023-10-19"},{"lineNumber":102,"author":{"gitId":"hjoneweek"},"content":"                .add(\"record\", record)","lastModifiedDate":"2023-10-19"},{"lineNumber":103,"author":{"gitId":"hjoneweek"},"content":"                .toString();","lastModifiedDate":"2023-10-19"},{"lineNumber":104,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":105,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-15"}],"authorContributionMap":{"hjoneweek":91,"Darren159":11,"Clin-lyx":1,"ryanongwx":2}},{"path":"src/main/java/seedu/address/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final boolean showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"    /** Appointments should be shown to the user. */","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"    private final boolean showAppointments;","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /** The application should exit. */","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean showAppointments, boolean exit) {","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"        this.showAppointments \u003d showAppointments;","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"        this(feedbackToUser, false, false, false);","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"    public boolean isShowAppointments() {","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"        return showAppointments;","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"                \u0026\u0026 showAppointments \u003d\u003d otherCommandResult.showAppointments","lastModifiedDate":"2023-11-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"        return Objects.hash(feedbackToUser, showHelp, showAppointments, exit);","lastModifiedDate":"2023-11-01"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                .add(\"feedbackToUser\", feedbackToUser)","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                .add(\"showHelp\", showHelp)","lastModifiedDate":"2019-02-23"},{"lineNumber":87,"author":{"gitId":"Darren159"},"content":"                .add(\"showAppointments\", showAppointments)","lastModifiedDate":"2023-11-01"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                .add(\"exit\", exit)","lastModifiedDate":"2019-02-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Darren159":13,"-":79}},{"path":"src/main/java/seedu/address/logic/commands/DeleteAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import java.util.List;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Nric;","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":" * Deletes an appointment identified using it\u0027s displayed index from the address","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":" * book.","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"public class DeleteAppointmentCommand extends Command {","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"    public static final String COMMAND_WORD \u003d \"deleteappointment\";","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"            + \": Deletes the appointment identified by the index number used in the displayed appointment list.\\n\"","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"    public static final String MESSAGE_DELETE_APPOINTMENT_SUCCESS \u003d \"Deleted Appointment: %1$s\";","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"    public static final String MESSAGE_INVALID_NRIC \u003d \"The Patient with the corresponding NRIC no longer exists\";","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"    private final Index targetIndex;","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"    public DeleteAppointmentCommand(Index targetIndex) {","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"        List\u003cAppointment\u003e appointmentList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"        List\u003cPerson\u003e personList \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d appointmentList.size()) {","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"        Appointment appointmentToDelete \u003d appointmentList.get(targetIndex.getZeroBased());","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"        Nric patientNric \u003d appointmentToDelete.getNric();","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"        Person personWithAppointment \u003d personList.stream()","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"                .filter(person -\u003e person.getNric().equals(patientNric))","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"                .findFirst()","lastModifiedDate":"2023-11-01"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"                .orElse(null);","lastModifiedDate":"2023-11-01"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"        if (personWithAppointment \u003d\u003d null) {","lastModifiedDate":"2023-11-01"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"            throw new CommandException(MESSAGE_INVALID_NRIC);","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"        UniqueAppointmentList newList \u003d new UniqueAppointmentList();","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"        newList.setAppointments(personWithAppointment.getAppointments());","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"        newList.remove(appointmentToDelete);","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"        Person newPatient \u003d new Person(personWithAppointment.getName(), personWithAppointment.getNric(),","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"                personWithAppointment.getEmail(),","lastModifiedDate":"2023-11-02"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"                personWithAppointment.getPhone(), personWithAppointment.getGender(), personWithAppointment.getAge(),","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"                personWithAppointment.getBloodType(),","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"                personWithAppointment.getAllergies(), personWithAppointment.getRecords(), newList,","lastModifiedDate":"2023-11-02"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"                personWithAppointment.isPinned());","lastModifiedDate":"2023-11-02"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"        model.setPerson(personWithAppointment, newPatient);","lastModifiedDate":"2023-11-02"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"        model.resetAppointmentList();","lastModifiedDate":"2023-11-01"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_APPOINTMENT_SUCCESS,","lastModifiedDate":"2023-11-01"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"                Messages.format(appointmentToDelete, personWithAppointment)));","lastModifiedDate":"2023-11-01"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":75,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":76,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":77,"author":{"gitId":"Darren159"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-11-01"},{"lineNumber":78,"author":{"gitId":"Darren159"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-11-01"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"            return true;","lastModifiedDate":"2023-11-01"},{"lineNumber":80,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":81,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":82,"author":{"gitId":"Darren159"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-11-01"},{"lineNumber":83,"author":{"gitId":"Darren159"},"content":"        if (!(other instanceof DeleteAppointmentCommand)) {","lastModifiedDate":"2023-11-01"},{"lineNumber":84,"author":{"gitId":"Darren159"},"content":"            return false;","lastModifiedDate":"2023-11-01"},{"lineNumber":85,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":86,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":87,"author":{"gitId":"Darren159"},"content":"        DeleteAppointmentCommand otherDeleteAppointmentCommand \u003d (DeleteAppointmentCommand) other;","lastModifiedDate":"2023-11-01"},{"lineNumber":88,"author":{"gitId":"Darren159"},"content":"        return targetIndex.equals(otherDeleteAppointmentCommand.targetIndex);","lastModifiedDate":"2023-11-01"},{"lineNumber":89,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":90,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":91,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":92,"author":{"gitId":"Darren159"},"content":"    public String toString() {","lastModifiedDate":"2023-11-01"},{"lineNumber":93,"author":{"gitId":"Darren159"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-11-01"},{"lineNumber":94,"author":{"gitId":"Darren159"},"content":"                .add(\"targetIndex\", targetIndex)","lastModifiedDate":"2023-11-01"},{"lineNumber":95,"author":{"gitId":"Darren159"},"content":"                .toString();","lastModifiedDate":"2023-11-01"},{"lineNumber":96,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":97,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"Darren159":97}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2018-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \": Deletes the person identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {","lastModifiedDate":"2017-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"ryanongwx"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX","lastModifiedDate":"2023-11-08"},{"lineNumber":41,"author":{"gitId":"ryanongwx"},"content":"                    + \". Please ensure that it is within 1 and \" + lastShownList.size() + \".\");","lastModifiedDate":"2023-11-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        model.deletePerson(personToDelete);","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"        model.resetAppointmentList();","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, Messages.format(personToDelete)));","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (!(other instanceof DeleteCommand)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        DeleteCommand otherDeleteCommand \u003d (DeleteCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return targetIndex.equals(otherDeleteCommand.targetIndex);","lastModifiedDate":"2023-07-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                .add(\"targetIndex\", targetIndex)","lastModifiedDate":"2019-02-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Darren159":1,"-":68,"ryanongwx":2}},{"path":"src/main/java/seedu/address/logic/commands/DeleteRecordCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import java.util.List;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.UniqueRecordList;","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":" * Deletes a record identified using it\u0027s displayed patient index and record","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":" * index from the address book.","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"public class DeleteRecordCommand extends Command {","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    public static final String COMMAND_WORD \u003d \"deleterecord\";","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"            + \": Deletes the record identified by the index number used \"","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"            + \"in the displayed patient list and record list.\\n\"","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"            + \"Parameters: PATIENT INDEX/RECORD INDEX (Both must be positive integers)\\n\"","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1/1\";","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    public static final String MESSAGE_DELETE_RECORD_SUCCESS \u003d \"Deleted Record: %1$s\";","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"    private final Index targetPatientIndex;","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"    private final Index targetRecordIndex;","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"     * Creates DeleteRecordCommand object","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"    public DeleteRecordCommand(Index targetPatientIndex, Index targetRecordIndex) {","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"        this.targetPatientIndex \u003d targetPatientIndex;","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"        this.targetRecordIndex \u003d targetRecordIndex;","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"        if (targetPatientIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"ryanongwx"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX","lastModifiedDate":"2023-11-08"},{"lineNumber":45,"author":{"gitId":"ryanongwx"},"content":"                    + \". Please ensure that it is within 1 and \" + lastShownList.size() + \".\");","lastModifiedDate":"2023-11-08"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"        Person targetPatient \u003d lastShownList.get(targetPatientIndex.getZeroBased());","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"        UniqueRecordList newRecordsList \u003d new UniqueRecordList();","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"        newRecordsList.setRecords(targetPatient.getRecords());","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"        if (targetRecordIndex.getZeroBased() \u003e\u003d newRecordsList.size()) {","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"        Record targetRecord \u003d newRecordsList.get(targetRecordIndex.getZeroBased());","lastModifiedDate":"2023-11-01"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"        newRecordsList.remove(targetRecord);","lastModifiedDate":"2023-11-01"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"        Person patientWithDeletedRecord \u003d new Person(targetPatient.getName(), targetPatient.getNric(),","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"                targetPatient.getEmail(), targetPatient.getPhone(), targetPatient.getGender(), targetPatient.getAge(),","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"                targetPatient.getBloodType(), targetPatient.getAllergies(), newRecordsList,","lastModifiedDate":"2023-11-01"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"                targetPatient.getAppointments(), targetPatient.isPinned());","lastModifiedDate":"2023-11-01"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"        model.setPerson(targetPatient, patientWithDeletedRecord);","lastModifiedDate":"2023-11-01"},{"lineNumber":62,"author":{"gitId":"Clin-lyx"},"content":"        model.updateRecordList(patientWithDeletedRecord, targetPatientIndex);","lastModifiedDate":"2023-11-07"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_RECORD_SUCCESS,","lastModifiedDate":"2023-11-01"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"                Messages.format(targetRecord, targetPatient)));","lastModifiedDate":"2023-11-01"},{"lineNumber":65,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":66,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":67,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":68,"author":{"gitId":"hjoneweek"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-11-01"},{"lineNumber":69,"author":{"gitId":"hjoneweek"},"content":"        if (this \u003d\u003d other) {","lastModifiedDate":"2023-11-01"},{"lineNumber":70,"author":{"gitId":"hjoneweek"},"content":"            return true;","lastModifiedDate":"2023-11-01"},{"lineNumber":71,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":72,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":73,"author":{"gitId":"hjoneweek"},"content":"        if (!(other instanceof DeleteRecordCommand)) {","lastModifiedDate":"2023-11-01"},{"lineNumber":74,"author":{"gitId":"hjoneweek"},"content":"            return false;","lastModifiedDate":"2023-11-01"},{"lineNumber":75,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":76,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":77,"author":{"gitId":"hjoneweek"},"content":"        DeleteRecordCommand otherDeleteRecordCommand \u003d (DeleteRecordCommand) other;","lastModifiedDate":"2023-11-01"},{"lineNumber":78,"author":{"gitId":"hjoneweek"},"content":"        return this.targetPatientIndex.equals(otherDeleteRecordCommand.targetPatientIndex)","lastModifiedDate":"2023-11-01"},{"lineNumber":79,"author":{"gitId":"hjoneweek"},"content":"                \u0026\u0026 this.targetRecordIndex.equals(otherDeleteRecordCommand.targetRecordIndex);","lastModifiedDate":"2023-11-01"},{"lineNumber":80,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":81,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":82,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":83,"author":{"gitId":"hjoneweek"},"content":"    public String toString() {","lastModifiedDate":"2023-11-01"},{"lineNumber":84,"author":{"gitId":"hjoneweek"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-11-01"},{"lineNumber":85,"author":{"gitId":"hjoneweek"},"content":"                .add(\"targetPatientIndex\", targetPatientIndex)","lastModifiedDate":"2023-11-01"},{"lineNumber":86,"author":{"gitId":"hjoneweek"},"content":"                .add(\"targetRecordIndex\", targetRecordIndex)","lastModifiedDate":"2023-11-01"},{"lineNumber":87,"author":{"gitId":"hjoneweek"},"content":"                .toString();","lastModifiedDate":"2023-11-01"},{"lineNumber":88,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":89,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"hjoneweek":83,"Darren159":3,"Clin-lyx":1,"ryanongwx":2}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2023-07-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Age;","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.BloodType;","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Gender;","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.record.UniqueRecordList;","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Name;","lastModifiedDate":"2023-10-22"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Nric;","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"    public static final String COMMAND_WORD \u003d \"editpatient\";","lastModifiedDate":"2023-10-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2023-10-14"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"            + \"[\" + PREFIX_GENDER + \"GENDER] \"","lastModifiedDate":"2023-10-14"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"            + \"[\" + PREFIX_AGE + \"AGE] \"","lastModifiedDate":"2023-10-14"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"            + \"[\" + PREFIX_BLOODTYPE + \"BLOODTYPE \"","lastModifiedDate":"2023-10-14"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"            + \"[\" + PREFIX_ALLERGIES + \"ALLERGY]...\\n\"","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"     * @param index","lastModifiedDate":"2023-11-02"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"     *                             of the person in the filtered person list to edit","lastModifiedDate":"2023-11-02"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"     * @param editPersonDescriptor","lastModifiedDate":"2023-11-02"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"     *                             details to edit the person with","lastModifiedDate":"2023-11-02"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"ryanongwx"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX","lastModifiedDate":"2023-11-08"},{"lineNumber":88,"author":{"gitId":"ryanongwx"},"content":"                    + \". Please ensure that it is within 1 and \" + lastShownList.size() + \".\");","lastModifiedDate":"2023-11-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":100,"author":{"gitId":"Clin-lyx"},"content":"        model.updateRecordList(editedPerson, index);","lastModifiedDate":"2023-11-08"},{"lineNumber":101,"author":{"gitId":"adammangzijun"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS,","lastModifiedDate":"2023-10-14"},{"lineNumber":102,"author":{"gitId":"adammangzijun"},"content":"                Messages.format(editedPerson)));","lastModifiedDate":"2023-10-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":113,"author":{"gitId":"Darren159"},"content":"        Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(personToEdit.getNric());","lastModifiedDate":"2023-10-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":115,"author":{"gitId":"adammangzijun"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2023-10-14"},{"lineNumber":116,"author":{"gitId":"adammangzijun"},"content":"        Gender updatedGender \u003d editPersonDescriptor.getGender().orElse(personToEdit.getGender());","lastModifiedDate":"2023-10-14"},{"lineNumber":117,"author":{"gitId":"adammangzijun"},"content":"        Age updatedAge \u003d editPersonDescriptor.getAge().orElse(personToEdit.getAge());","lastModifiedDate":"2023-10-14"},{"lineNumber":118,"author":{"gitId":"adammangzijun"},"content":"        BloodType updatedBloodType \u003d editPersonDescriptor.getBloodType().orElse(personToEdit.getBloodType());","lastModifiedDate":"2023-10-14"},{"lineNumber":119,"author":{"gitId":"adammangzijun"},"content":"        Set\u003cAllergy\u003e updatedAllergies \u003d editPersonDescriptor.getAllergies().orElse(personToEdit.getAllergies());","lastModifiedDate":"2023-10-14"},{"lineNumber":120,"author":{"gitId":"Darren159"},"content":"        UniqueRecordList updatedRecords \u003d personToEdit.getRecords();","lastModifiedDate":"2023-10-20"},{"lineNumber":121,"author":{"gitId":"Darren159"},"content":"        UniqueAppointmentList updatedAppointments \u003d personToEdit.getAppointments();","lastModifiedDate":"2023-10-18"},{"lineNumber":122,"author":{"gitId":"Darren159"},"content":"        Boolean updatedisPinned \u003d personToEdit.isPinned();","lastModifiedDate":"2023-10-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":124,"author":{"gitId":"Darren159"},"content":"        return new Person(updatedName, updatedNric, updatedEmail, updatedPhone, updatedGender,","lastModifiedDate":"2023-10-30"},{"lineNumber":125,"author":{"gitId":"Darren159"},"content":"                updatedAge, updatedBloodType, updatedAllergies, updatedRecords, updatedAppointments, updatedisPinned);","lastModifiedDate":"2023-10-20"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        EditCommand otherEditCommand \u003d (EditCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        return index.equals(otherEditCommand.index)","lastModifiedDate":"2023-07-13"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(otherEditCommand.editPersonDescriptor);","lastModifiedDate":"2023-07-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                .add(\"index\", index)","lastModifiedDate":"2019-02-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                .add(\"editPersonDescriptor\", editPersonDescriptor)","lastModifiedDate":"2019-02-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":153,"author":{"gitId":"Darren159"},"content":"     * Stores the details to edit the person with. Each non-empty field value will","lastModifiedDate":"2023-10-30"},{"lineNumber":154,"author":{"gitId":"Darren159"},"content":"     * replace the","lastModifiedDate":"2023-10-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":159,"author":{"gitId":"Darren159"},"content":"        private Nric nric;","lastModifiedDate":"2023-10-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":161,"author":{"gitId":"adammangzijun"},"content":"        private Phone phone;","lastModifiedDate":"2023-10-14"},{"lineNumber":162,"author":{"gitId":"adammangzijun"},"content":"        private Gender gender;","lastModifiedDate":"2023-10-14"},{"lineNumber":163,"author":{"gitId":"adammangzijun"},"content":"        private Age age;","lastModifiedDate":"2023-10-14"},{"lineNumber":164,"author":{"gitId":"adammangzijun"},"content":"        private BloodType bloodType;","lastModifiedDate":"2023-10-14"},{"lineNumber":165,"author":{"gitId":"Darren159"},"content":"        private Set\u003cAllergy\u003e allergies;","lastModifiedDate":"2023-10-15"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":167,"author":{"gitId":"Darren159"},"content":"        public EditPersonDescriptor() {","lastModifiedDate":"2023-10-30"},{"lineNumber":168,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":171,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":172,"author":{"gitId":"adammangzijun"},"content":"         * A defensive copy of {@code allergies} is used internally.","lastModifiedDate":"2023-10-14"},{"lineNumber":173,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":176,"author":{"gitId":"Darren159"},"content":"            setNric(toCopy.nric);","lastModifiedDate":"2023-10-30"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":178,"author":{"gitId":"adammangzijun"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2023-10-14"},{"lineNumber":179,"author":{"gitId":"adammangzijun"},"content":"            setGender(toCopy.gender);","lastModifiedDate":"2023-10-14"},{"lineNumber":180,"author":{"gitId":"adammangzijun"},"content":"            setAge(toCopy.age);","lastModifiedDate":"2023-10-14"},{"lineNumber":181,"author":{"gitId":"adammangzijun"},"content":"            setBloodType(toCopy.bloodType);","lastModifiedDate":"2023-10-14"},{"lineNumber":182,"author":{"gitId":"adammangzijun"},"content":"            setAllergies(toCopy.allergies);","lastModifiedDate":"2023-10-14"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":186,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":187,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":189,"author":{"gitId":"Darren159"},"content":"            return CollectionUtil.isAnyNonNull(name, email, phone, gender, age, bloodType, allergies);","lastModifiedDate":"2023-11-02"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":192,"author":{"gitId":"Darren159"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2023-10-19"},{"lineNumber":193,"author":{"gitId":"Darren159"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2023-10-19"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":200,"author":{"gitId":"Darren159"},"content":"        public Optional\u003cNric\u003e getNric() {","lastModifiedDate":"2023-10-30"},{"lineNumber":201,"author":{"gitId":"Darren159"},"content":"            return Optional.ofNullable(nric);","lastModifiedDate":"2023-10-30"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":204,"author":{"gitId":"Darren159"},"content":"        public void setNric(Nric nric) {","lastModifiedDate":"2023-10-30"},{"lineNumber":205,"author":{"gitId":"Darren159"},"content":"            this.nric \u003d nric;","lastModifiedDate":"2023-10-30"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2023-10-19"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2023-10-19"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":220,"author":{"gitId":"Darren159"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2023-10-19"},{"lineNumber":221,"author":{"gitId":"Darren159"},"content":"            this.email \u003d email;","lastModifiedDate":"2023-10-19"},{"lineNumber":222,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":223,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":224,"author":{"gitId":"adammangzijun"},"content":"        public Optional\u003cGender\u003e getGender() {","lastModifiedDate":"2023-10-14"},{"lineNumber":225,"author":{"gitId":"adammangzijun"},"content":"            return Optional.ofNullable(gender);","lastModifiedDate":"2023-10-14"},{"lineNumber":226,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":227,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":228,"author":{"gitId":"Darren159"},"content":"        public void setGender(Gender gender) {","lastModifiedDate":"2023-10-19"},{"lineNumber":229,"author":{"gitId":"Darren159"},"content":"            this.gender \u003d gender;","lastModifiedDate":"2023-10-19"},{"lineNumber":230,"author":{"gitId":"ryanongwx"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":231,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":232,"author":{"gitId":"adammangzijun"},"content":"        public Optional\u003cAge\u003e getAge() {","lastModifiedDate":"2023-10-14"},{"lineNumber":233,"author":{"gitId":"adammangzijun"},"content":"            return Optional.ofNullable(age);","lastModifiedDate":"2023-10-14"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":236,"author":{"gitId":"Darren159"},"content":"        public void setAge(Age age) {","lastModifiedDate":"2023-10-19"},{"lineNumber":237,"author":{"gitId":"Darren159"},"content":"            this.age \u003d age;","lastModifiedDate":"2023-10-19"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":240,"author":{"gitId":"adammangzijun"},"content":"        public Optional\u003cBloodType\u003e getBloodType() {","lastModifiedDate":"2023-10-14"},{"lineNumber":241,"author":{"gitId":"adammangzijun"},"content":"            return Optional.ofNullable(bloodType);","lastModifiedDate":"2023-10-14"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":244,"author":{"gitId":"Darren159"},"content":"        public void setBloodType(BloodType bloodType) {","lastModifiedDate":"2023-10-19"},{"lineNumber":245,"author":{"gitId":"Darren159"},"content":"            this.bloodType \u003d bloodType;","lastModifiedDate":"2023-10-19"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":249,"author":{"gitId":"Darren159"},"content":"         * Returns an unmodifiable Allergy set, which throws","lastModifiedDate":"2023-10-30"},{"lineNumber":250,"author":{"gitId":"Darren159"},"content":"         * {@code UnsupportedOperationException}","lastModifiedDate":"2023-10-30"},{"lineNumber":251,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":252,"author":{"gitId":"adammangzijun"},"content":"         * Returns {@code Optional#empty()} if {@code allergies} is null.","lastModifiedDate":"2023-10-14"},{"lineNumber":253,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":254,"author":{"gitId":"adammangzijun"},"content":"        public Optional\u003cSet\u003cAllergy\u003e\u003e getAllergies() {","lastModifiedDate":"2023-10-14"},{"lineNumber":255,"author":{"gitId":"adammangzijun"},"content":"            return (allergies !\u003d null) ? Optional.of(Collections.unmodifiableSet(allergies)) : Optional.empty();","lastModifiedDate":"2023-10-14"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2023-10-19"},{"lineNumber":259,"author":{"gitId":"Darren159"},"content":"         * Sets {@code allergies} to this object\u0027s {@code tags}.","lastModifiedDate":"2023-10-19"},{"lineNumber":260,"author":{"gitId":"Darren159"},"content":"         * A defensive copy of {@code allergies} is used internally.","lastModifiedDate":"2023-10-19"},{"lineNumber":261,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2023-10-19"},{"lineNumber":262,"author":{"gitId":"Darren159"},"content":"        public void setAllergies(Set\u003cAllergy\u003e allergies) {","lastModifiedDate":"2023-10-19"},{"lineNumber":263,"author":{"gitId":"Darren159"},"content":"            this.allergies \u003d (allergies !\u003d null) ? new HashSet\u003c\u003e(allergies) : null;","lastModifiedDate":"2023-10-19"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":268,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":269,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":272,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":273,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":274,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":275,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":277,"author":{"gitId":"-"},"content":"            EditPersonDescriptor otherEditPersonDescriptor \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":278,"author":{"gitId":"-"},"content":"            return Objects.equals(name, otherEditPersonDescriptor.name)","lastModifiedDate":"2023-07-13"},{"lineNumber":279,"author":{"gitId":"Darren159"},"content":"                    \u0026\u0026 Objects.equals(nric, otherEditPersonDescriptor.nric)","lastModifiedDate":"2023-11-02"},{"lineNumber":280,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(email, otherEditPersonDescriptor.email)","lastModifiedDate":"2023-07-13"},{"lineNumber":281,"author":{"gitId":"adammangzijun"},"content":"                    \u0026\u0026 Objects.equals(phone, otherEditPersonDescriptor.phone)","lastModifiedDate":"2023-10-14"},{"lineNumber":282,"author":{"gitId":"adammangzijun"},"content":"                    \u0026\u0026 Objects.equals(gender, otherEditPersonDescriptor.gender)","lastModifiedDate":"2023-10-14"},{"lineNumber":283,"author":{"gitId":"adammangzijun"},"content":"                    \u0026\u0026 Objects.equals(age, otherEditPersonDescriptor.age)","lastModifiedDate":"2023-10-14"},{"lineNumber":284,"author":{"gitId":"adammangzijun"},"content":"                    \u0026\u0026 Objects.equals(bloodType, otherEditPersonDescriptor.bloodType)","lastModifiedDate":"2023-10-14"},{"lineNumber":285,"author":{"gitId":"adammangzijun"},"content":"                    \u0026\u0026 Objects.equals(allergies, otherEditPersonDescriptor.allergies);","lastModifiedDate":"2023-10-14"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"            return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"                    .add(\"name\", name)","lastModifiedDate":"2019-02-23"},{"lineNumber":292,"author":{"gitId":"Darren159"},"content":"                    .add(\"nric\", nric)","lastModifiedDate":"2023-11-02"},{"lineNumber":293,"author":{"gitId":"-"},"content":"                    .add(\"email\", email)","lastModifiedDate":"2019-02-23"},{"lineNumber":294,"author":{"gitId":"adammangzijun"},"content":"                    .add(\"phone\", phone)","lastModifiedDate":"2023-10-14"},{"lineNumber":295,"author":{"gitId":"adammangzijun"},"content":"                    .add(\"gender\", gender)","lastModifiedDate":"2023-10-14"},{"lineNumber":296,"author":{"gitId":"adammangzijun"},"content":"                    .add(\"age\", age)","lastModifiedDate":"2023-10-14"},{"lineNumber":297,"author":{"gitId":"adammangzijun"},"content":"                    .add(\"bloodType\", bloodType)","lastModifiedDate":"2023-10-14"},{"lineNumber":298,"author":{"gitId":"adammangzijun"},"content":"                    .add(\"allergies\", allergies)","lastModifiedDate":"2023-10-14"},{"lineNumber":299,"author":{"gitId":"-"},"content":"                    .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2019-02-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":302,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"Darren159":45,"Clin-lyx":1,"-":199,"adammangzijun":53,"ryanongwx":4}},{"path":"src/main/java/seedu/address/logic/commands/EditRecordCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-21"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-22"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CONDITION;","lastModifiedDate":"2023-10-22"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2023-10-22"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICATION;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":8,"author":{"gitId":"ryanongwx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-22"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"import java.util.Collections;","lastModifiedDate":"2023-10-22"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"import java.util.List;","lastModifiedDate":"2023-10-22"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-22"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-22"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-21"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2023-10-21"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-21"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-21"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-21"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-21"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-22"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.record.Condition;","lastModifiedDate":"2023-10-21"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Medication;","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2023-10-21"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.record.UniqueRecordList;","lastModifiedDate":"2023-10-21"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.shared.DateTime;","lastModifiedDate":"2023-10-21"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-10-22"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":" * Edits the details of an existing record of a Person in the address book.","lastModifiedDate":"2023-10-22"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-10-22"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"public class EditRecordCommand extends Command {","lastModifiedDate":"2023-10-21"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"    public static final String COMMAND_WORD \u003d \"editrecord\";","lastModifiedDate":"2023-10-21"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits a patient\u0027s record in the address book \"","lastModifiedDate":"2023-10-22"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"            + \"by the patient\u0027s index number and the record\u0027s index number.\\n\"","lastModifiedDate":"2023-10-22"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2023-10-21"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"            + \"Parameters: PATIENT\u0027S INDEX/RECORD INDEX (both must be a positive integer) \"","lastModifiedDate":"2023-10-21"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"            + \"[\" + PREFIX_DATE + \"DATE] \"","lastModifiedDate":"2023-10-21"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"            + \"[\" + PREFIX_CONDITION + \"CONDITION] \" + \"\\n\"","lastModifiedDate":"2023-10-21"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1/2 \"","lastModifiedDate":"2023-10-21"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"            + PREFIX_DATE + \"21092023 1800 \"","lastModifiedDate":"2023-10-21"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"            + PREFIX_CONDITION + \"Cold\"","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"            + PREFIX_MEDICATION + \"Ibuprofen\";","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"    public static final String MESSAGE_EDIT_RECORD_SUCCESS \u003d \"Edited record: %1$s\";","lastModifiedDate":"2023-10-21"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2023-10-21"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"    public static final String MESSAGE_DUPLICATE_RECORD \u003d \"This record already exists in the record of the patient.\";","lastModifiedDate":"2023-10-21"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"    private final Index patientIndex;","lastModifiedDate":"2023-10-21"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"    private final Index recordIndex;","lastModifiedDate":"2023-10-21"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"    private final EditRecordCommand.EditRecordDescriptor editRecordDescriptor;","lastModifiedDate":"2023-10-21"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-10-21"},{"lineNumber":55,"author":{"gitId":"ryanongwx"},"content":"     * @param patientIndex         index of the person in the filtered person list","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"ryanongwx"},"content":"     *                             to edit","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"     * @param recordIndex          index of the record of the targeted patient","lastModifiedDate":"2023-10-21"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"     * @param editRecordDescriptor details to edit the record with","lastModifiedDate":"2023-10-21"},{"lineNumber":59,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-10-21"},{"lineNumber":60,"author":{"gitId":"adammangzijun"},"content":"    public EditRecordCommand(Index patientIndex, Index recordIndex,","lastModifiedDate":"2023-10-22"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"            EditRecordCommand.EditRecordDescriptor editRecordDescriptor) {","lastModifiedDate":"2023-10-22"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"        requireNonNull(patientIndex);","lastModifiedDate":"2023-10-21"},{"lineNumber":63,"author":{"gitId":"adammangzijun"},"content":"        requireNonNull(recordIndex);","lastModifiedDate":"2023-10-21"},{"lineNumber":64,"author":{"gitId":"adammangzijun"},"content":"        requireNonNull(editRecordDescriptor);","lastModifiedDate":"2023-10-21"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"        this.patientIndex \u003d patientIndex;","lastModifiedDate":"2023-10-21"},{"lineNumber":67,"author":{"gitId":"adammangzijun"},"content":"        this.recordIndex \u003d recordIndex;","lastModifiedDate":"2023-10-21"},{"lineNumber":68,"author":{"gitId":"adammangzijun"},"content":"        this.editRecordDescriptor \u003d new EditRecordCommand.EditRecordDescriptor(editRecordDescriptor);","lastModifiedDate":"2023-10-21"},{"lineNumber":69,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":70,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":71,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-10-21"},{"lineNumber":72,"author":{"gitId":"adammangzijun"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-21"},{"lineNumber":73,"author":{"gitId":"adammangzijun"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-21"},{"lineNumber":74,"author":{"gitId":"adammangzijun"},"content":"        List\u003cPerson\u003e lastShownPersonList \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-10-21"},{"lineNumber":75,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":76,"author":{"gitId":"adammangzijun"},"content":"        if (patientIndex.getZeroBased() \u003e\u003d lastShownPersonList.size()) {","lastModifiedDate":"2023-10-21"},{"lineNumber":77,"author":{"gitId":"ryanongwx"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX","lastModifiedDate":"2023-11-08"},{"lineNumber":78,"author":{"gitId":"ryanongwx"},"content":"                    + \". Please ensure that it is within 1 and \" + lastShownPersonList.size() + \".\");","lastModifiedDate":"2023-11-08"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":80,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":81,"author":{"gitId":"adammangzijun"},"content":"        Person personToEdit \u003d lastShownPersonList.get(patientIndex.getZeroBased());","lastModifiedDate":"2023-10-21"},{"lineNumber":82,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":83,"author":{"gitId":"adammangzijun"},"content":"        UniqueRecordList uniqueRecordList \u003d personToEdit.getRecords();","lastModifiedDate":"2023-10-21"},{"lineNumber":84,"author":{"gitId":"Darren159"},"content":"        List\u003cRecord\u003e lastShownRecordList \u003d uniqueRecordList.asUnmodifiableObservableList();","lastModifiedDate":"2023-10-30"},{"lineNumber":85,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":86,"author":{"gitId":"adammangzijun"},"content":"        if (recordIndex.getZeroBased() \u003e\u003d lastShownRecordList.size()) {","lastModifiedDate":"2023-10-21"},{"lineNumber":87,"author":{"gitId":"adammangzijun"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-21"},{"lineNumber":88,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":89,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":90,"author":{"gitId":"adammangzijun"},"content":"        Record recordToEdit \u003d lastShownRecordList.get(recordIndex.getZeroBased());","lastModifiedDate":"2023-10-21"},{"lineNumber":91,"author":{"gitId":"adammangzijun"},"content":"        Record editedRecord \u003d createEditedRecord(recordToEdit, editRecordDescriptor);","lastModifiedDate":"2023-10-21"},{"lineNumber":92,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":93,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":94,"author":{"gitId":"hjoneweek"},"content":"        if (recordToEdit.equals(editedRecord) || uniqueRecordList.contains(editedRecord)) {","lastModifiedDate":"2023-11-08"},{"lineNumber":95,"author":{"gitId":"adammangzijun"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_RECORD);","lastModifiedDate":"2023-10-21"},{"lineNumber":96,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":97,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":98,"author":{"gitId":"Darren159"},"content":"        UniqueRecordList newList \u003d new UniqueRecordList();","lastModifiedDate":"2023-10-30"},{"lineNumber":99,"author":{"gitId":"Darren159"},"content":"        newList.setRecords(uniqueRecordList);","lastModifiedDate":"2023-10-30"},{"lineNumber":100,"author":{"gitId":"Darren159"},"content":"        newList.setRecord(recordToEdit, editedRecord);","lastModifiedDate":"2023-10-30"},{"lineNumber":101,"author":{"gitId":"Darren159"},"content":"        Person editedPerson \u003d createdEditedPerson(personToEdit, newList);","lastModifiedDate":"2023-10-30"},{"lineNumber":102,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":103,"author":{"gitId":"adammangzijun"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2023-10-22"},{"lineNumber":104,"author":{"gitId":"adammangzijun"},"content":"            throw new CommandException(EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2023-10-22"},{"lineNumber":105,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-22"},{"lineNumber":106,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":107,"author":{"gitId":"adammangzijun"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2023-10-21"},{"lineNumber":108,"author":{"gitId":"Clin-lyx"},"content":"        model.updateRecordList(editedPerson, this.patientIndex);","lastModifiedDate":"2023-11-07"},{"lineNumber":109,"author":{"gitId":"adammangzijun"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_RECORD_SUCCESS,","lastModifiedDate":"2023-10-21"},{"lineNumber":110,"author":{"gitId":"adammangzijun"},"content":"                Messages.format(editedRecord, personToEdit)));","lastModifiedDate":"2023-10-21"},{"lineNumber":111,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":112,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":113,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-10-21"},{"lineNumber":114,"author":{"gitId":"adammangzijun"},"content":"     * Creates and returns a {@code Record} with the details of {@code recordToEdit}","lastModifiedDate":"2023-10-21"},{"lineNumber":115,"author":{"gitId":"adammangzijun"},"content":"     * edited with {@code editRecordDescriptor}.","lastModifiedDate":"2023-10-21"},{"lineNumber":116,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-10-21"},{"lineNumber":117,"author":{"gitId":"ryanongwx"},"content":"    private Record createEditedRecord(Record recordToEdit,","lastModifiedDate":"2023-10-24"},{"lineNumber":118,"author":{"gitId":"adammangzijun"},"content":"            EditRecordCommand.EditRecordDescriptor editRecordDescriptor) {","lastModifiedDate":"2023-10-22"},{"lineNumber":119,"author":{"gitId":"adammangzijun"},"content":"        assert recordToEdit !\u003d null;","lastModifiedDate":"2023-10-21"},{"lineNumber":120,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":121,"author":{"gitId":"adammangzijun"},"content":"        DateTime updatedDateTime \u003d editRecordDescriptor.getDateTime().orElse(recordToEdit.getDateTime());","lastModifiedDate":"2023-10-21"},{"lineNumber":122,"author":{"gitId":"adammangzijun"},"content":"        List\u003cCondition\u003e updatedConditions \u003d editRecordDescriptor.getConditions().orElse(recordToEdit.getConditions());","lastModifiedDate":"2023-10-21"},{"lineNumber":123,"author":{"gitId":"ryanongwx"},"content":"        Path filePath \u003d editRecordDescriptor.getFilePath().orElse(recordToEdit.getFilePath());","lastModifiedDate":"2023-10-24"},{"lineNumber":124,"author":{"gitId":"hjoneweek"},"content":"        List\u003cMedication\u003e updatedMedications \u003d editRecordDescriptor.getMedications()","lastModifiedDate":"2023-10-26"},{"lineNumber":125,"author":{"gitId":"hjoneweek"},"content":"                .orElse(recordToEdit.getMedications());","lastModifiedDate":"2023-10-26"},{"lineNumber":126,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":127,"author":{"gitId":"ryanongwx"},"content":"        return new Record(updatedDateTime, updatedConditions,","lastModifiedDate":"2023-10-27"},{"lineNumber":128,"author":{"gitId":"ryanongwx"},"content":"                updatedMedications, filePath, patientIndex.getZeroBased());","lastModifiedDate":"2023-10-27"},{"lineNumber":129,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":130,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":131,"author":{"gitId":"adammangzijun"},"content":"    private static Person createdEditedPerson(Person personToEdit, UniqueRecordList records) {","lastModifiedDate":"2023-10-21"},{"lineNumber":132,"author":{"gitId":"adammangzijun"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2023-10-21"},{"lineNumber":133,"author":{"gitId":"Darren159"},"content":"        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getNric(), personToEdit.getEmail(),","lastModifiedDate":"2023-10-30"},{"lineNumber":134,"author":{"gitId":"adammangzijun"},"content":"                personToEdit.getPhone(), personToEdit.getGender(),","lastModifiedDate":"2023-10-21"},{"lineNumber":135,"author":{"gitId":"adammangzijun"},"content":"                personToEdit.getAge(), personToEdit.getBloodType(),","lastModifiedDate":"2023-10-21"},{"lineNumber":136,"author":{"gitId":"Darren159"},"content":"                personToEdit.getAllergies(), records, personToEdit.getAppointments(),","lastModifiedDate":"2023-10-30"},{"lineNumber":137,"author":{"gitId":"Darren159"},"content":"                personToEdit.isPinned());","lastModifiedDate":"2023-10-30"},{"lineNumber":138,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":139,"author":{"gitId":"adammangzijun"},"content":"        return editedPerson;","lastModifiedDate":"2023-10-21"},{"lineNumber":140,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":141,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":142,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-10-21"},{"lineNumber":143,"author":{"gitId":"adammangzijun"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-21"},{"lineNumber":144,"author":{"gitId":"adammangzijun"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-21"},{"lineNumber":145,"author":{"gitId":"adammangzijun"},"content":"            return true;","lastModifiedDate":"2023-10-21"},{"lineNumber":146,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":147,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":148,"author":{"gitId":"adammangzijun"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-21"},{"lineNumber":149,"author":{"gitId":"adammangzijun"},"content":"        if (!(other instanceof EditRecordCommand)) {","lastModifiedDate":"2023-10-21"},{"lineNumber":150,"author":{"gitId":"adammangzijun"},"content":"            return false;","lastModifiedDate":"2023-10-21"},{"lineNumber":151,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":152,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":153,"author":{"gitId":"adammangzijun"},"content":"        EditRecordCommand otherEditRecordCommand \u003d (EditRecordCommand) other;","lastModifiedDate":"2023-10-21"},{"lineNumber":154,"author":{"gitId":"adammangzijun"},"content":"        return patientIndex.equals(otherEditRecordCommand.patientIndex)","lastModifiedDate":"2023-10-21"},{"lineNumber":155,"author":{"gitId":"adammangzijun"},"content":"                \u0026\u0026 recordIndex.equals(otherEditRecordCommand.recordIndex)","lastModifiedDate":"2023-10-24"},{"lineNumber":156,"author":{"gitId":"adammangzijun"},"content":"                \u0026\u0026 editRecordDescriptor.equals(otherEditRecordCommand.editRecordDescriptor);","lastModifiedDate":"2023-10-21"},{"lineNumber":157,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":158,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":159,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-10-21"},{"lineNumber":160,"author":{"gitId":"adammangzijun"},"content":"    public String toString() {","lastModifiedDate":"2023-10-21"},{"lineNumber":161,"author":{"gitId":"adammangzijun"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-21"},{"lineNumber":162,"author":{"gitId":"adammangzijun"},"content":"                .add(\"patientIndex\", patientIndex)","lastModifiedDate":"2023-10-21"},{"lineNumber":163,"author":{"gitId":"adammangzijun"},"content":"                .add(\"recordIndex\", recordIndex)","lastModifiedDate":"2023-10-21"},{"lineNumber":164,"author":{"gitId":"adammangzijun"},"content":"                .add(\"editRecordDescriptor\", editRecordDescriptor)","lastModifiedDate":"2023-10-21"},{"lineNumber":165,"author":{"gitId":"adammangzijun"},"content":"                .toString();","lastModifiedDate":"2023-10-21"},{"lineNumber":166,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":167,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":168,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-10-21"},{"lineNumber":169,"author":{"gitId":"ryanongwx"},"content":"     * Stores the details to edit the record with. Each non-empty field value will","lastModifiedDate":"2023-10-24"},{"lineNumber":170,"author":{"gitId":"ryanongwx"},"content":"     * replace the","lastModifiedDate":"2023-10-24"},{"lineNumber":171,"author":{"gitId":"adammangzijun"},"content":"     * corresponding field value of the record.","lastModifiedDate":"2023-10-21"},{"lineNumber":172,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-10-21"},{"lineNumber":173,"author":{"gitId":"adammangzijun"},"content":"    public static class EditRecordDescriptor {","lastModifiedDate":"2023-10-21"},{"lineNumber":174,"author":{"gitId":"adammangzijun"},"content":"        private DateTime dateTime;","lastModifiedDate":"2023-10-21"},{"lineNumber":175,"author":{"gitId":"adammangzijun"},"content":"        private List\u003cCondition\u003e conditions;","lastModifiedDate":"2023-10-21"},{"lineNumber":176,"author":{"gitId":"ryanongwx"},"content":"        private Path filePath;","lastModifiedDate":"2023-10-24"},{"lineNumber":177,"author":{"gitId":"ryanongwx"},"content":"        private Integer patientIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":178,"author":{"gitId":"hjoneweek"},"content":"        private List\u003cMedication\u003e medications;","lastModifiedDate":"2023-10-26"},{"lineNumber":179,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":180,"author":{"gitId":"ryanongwx"},"content":"        public EditRecordDescriptor() {","lastModifiedDate":"2023-10-24"},{"lineNumber":181,"author":{"gitId":"ryanongwx"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":182,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":183,"author":{"gitId":"adammangzijun"},"content":"        /**","lastModifiedDate":"2023-10-21"},{"lineNumber":184,"author":{"gitId":"adammangzijun"},"content":"         * Copy constructor.","lastModifiedDate":"2023-10-21"},{"lineNumber":185,"author":{"gitId":"Darren159"},"content":"         * Defensive copies of {@code conditions} and {@code medications} are used","lastModifiedDate":"2023-10-30"},{"lineNumber":186,"author":{"gitId":"Darren159"},"content":"         * internally.","lastModifiedDate":"2023-10-30"},{"lineNumber":187,"author":{"gitId":"adammangzijun"},"content":"         */","lastModifiedDate":"2023-10-21"},{"lineNumber":188,"author":{"gitId":"adammangzijun"},"content":"        public EditRecordDescriptor(EditRecordCommand.EditRecordDescriptor toCopy) {","lastModifiedDate":"2023-10-21"},{"lineNumber":189,"author":{"gitId":"adammangzijun"},"content":"            setDateTime(toCopy.dateTime);","lastModifiedDate":"2023-10-21"},{"lineNumber":190,"author":{"gitId":"adammangzijun"},"content":"            setConditions(toCopy.conditions);","lastModifiedDate":"2023-10-21"},{"lineNumber":191,"author":{"gitId":"ryanongwx"},"content":"            setFilePath(toCopy.filePath);","lastModifiedDate":"2023-10-24"},{"lineNumber":192,"author":{"gitId":"ryanongwx"},"content":"            setPatientIndex(toCopy.patientIndex);","lastModifiedDate":"2023-10-24"},{"lineNumber":193,"author":{"gitId":"hjoneweek"},"content":"            setMedications(toCopy.medications);","lastModifiedDate":"2023-10-26"},{"lineNumber":194,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":195,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":196,"author":{"gitId":"adammangzijun"},"content":"        /**","lastModifiedDate":"2023-10-21"},{"lineNumber":197,"author":{"gitId":"adammangzijun"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2023-10-21"},{"lineNumber":198,"author":{"gitId":"adammangzijun"},"content":"         */","lastModifiedDate":"2023-10-21"},{"lineNumber":199,"author":{"gitId":"adammangzijun"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2023-10-21"},{"lineNumber":200,"author":{"gitId":"ryanongwx"},"content":"            return CollectionUtil.isAnyNonNull(dateTime, conditions, filePath, medications);","lastModifiedDate":"2023-10-26"},{"lineNumber":201,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":202,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":203,"author":{"gitId":"adammangzijun"},"content":"        public void setDateTime(DateTime dateTime) {","lastModifiedDate":"2023-10-21"},{"lineNumber":204,"author":{"gitId":"adammangzijun"},"content":"            this.dateTime \u003d dateTime;","lastModifiedDate":"2023-10-21"},{"lineNumber":205,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":206,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":207,"author":{"gitId":"ryanongwx"},"content":"        public void setFilePath(Path filePath) {","lastModifiedDate":"2023-10-24"},{"lineNumber":208,"author":{"gitId":"ryanongwx"},"content":"            this.filePath \u003d filePath;","lastModifiedDate":"2023-10-24"},{"lineNumber":209,"author":{"gitId":"ryanongwx"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":210,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":211,"author":{"gitId":"ryanongwx"},"content":"        public Optional\u003cPath\u003e getFilePath() {","lastModifiedDate":"2023-10-24"},{"lineNumber":212,"author":{"gitId":"ryanongwx"},"content":"            return Optional.ofNullable(filePath);","lastModifiedDate":"2023-10-24"},{"lineNumber":213,"author":{"gitId":"ryanongwx"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":214,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":215,"author":{"gitId":"ryanongwx"},"content":"        public Optional\u003cInteger\u003e getPatientIndex() {","lastModifiedDate":"2023-10-24"},{"lineNumber":216,"author":{"gitId":"ryanongwx"},"content":"            return Optional.ofNullable(patientIndex);","lastModifiedDate":"2023-10-24"},{"lineNumber":217,"author":{"gitId":"ryanongwx"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":218,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":219,"author":{"gitId":"ryanongwx"},"content":"        public void setPatientIndex(Integer patientIndex) {","lastModifiedDate":"2023-10-24"},{"lineNumber":220,"author":{"gitId":"ryanongwx"},"content":"            this.patientIndex \u003d patientIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":221,"author":{"gitId":"ryanongwx"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":222,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":223,"author":{"gitId":"adammangzijun"},"content":"        public Optional\u003cDateTime\u003e getDateTime() {","lastModifiedDate":"2023-10-21"},{"lineNumber":224,"author":{"gitId":"adammangzijun"},"content":"            return Optional.ofNullable(dateTime);","lastModifiedDate":"2023-10-21"},{"lineNumber":225,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":226,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":227,"author":{"gitId":"adammangzijun"},"content":"        /**","lastModifiedDate":"2023-10-21"},{"lineNumber":228,"author":{"gitId":"adammangzijun"},"content":"         * Sets {@code conditions} to this record\u0027s {@code conditions}.","lastModifiedDate":"2023-10-21"},{"lineNumber":229,"author":{"gitId":"adammangzijun"},"content":"         * A defensive copy of {@code condtions} is used internally.","lastModifiedDate":"2023-10-21"},{"lineNumber":230,"author":{"gitId":"adammangzijun"},"content":"         */","lastModifiedDate":"2023-10-21"},{"lineNumber":231,"author":{"gitId":"adammangzijun"},"content":"        public void setConditions(List\u003cCondition\u003e conditions) {","lastModifiedDate":"2023-10-21"},{"lineNumber":232,"author":{"gitId":"adammangzijun"},"content":"            this.conditions \u003d (conditions !\u003d null) ? new ArrayList\u003c\u003e(conditions) : null;","lastModifiedDate":"2023-10-21"},{"lineNumber":233,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":234,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":235,"author":{"gitId":"adammangzijun"},"content":"        /**","lastModifiedDate":"2023-10-21"},{"lineNumber":236,"author":{"gitId":"ryanongwx"},"content":"         * Returns an unmodifiable condition list, which throws","lastModifiedDate":"2023-10-24"},{"lineNumber":237,"author":{"gitId":"ryanongwx"},"content":"         * {@code UnsupportedOperationException}","lastModifiedDate":"2023-10-24"},{"lineNumber":238,"author":{"gitId":"adammangzijun"},"content":"         * if modification is attempted.","lastModifiedDate":"2023-10-21"},{"lineNumber":239,"author":{"gitId":"adammangzijun"},"content":"         * Returns {@code Optional#empty()} if {@code conditions} is null.","lastModifiedDate":"2023-10-21"},{"lineNumber":240,"author":{"gitId":"adammangzijun"},"content":"         */","lastModifiedDate":"2023-10-21"},{"lineNumber":241,"author":{"gitId":"adammangzijun"},"content":"        public Optional\u003cList\u003cCondition\u003e\u003e getConditions() {","lastModifiedDate":"2023-10-21"},{"lineNumber":242,"author":{"gitId":"adammangzijun"},"content":"            return (conditions !\u003d null) ? Optional.of(Collections.unmodifiableList(conditions)) : Optional.empty();","lastModifiedDate":"2023-10-21"},{"lineNumber":243,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":244,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":245,"author":{"gitId":"hjoneweek"},"content":"        /**","lastModifiedDate":"2023-10-26"},{"lineNumber":246,"author":{"gitId":"hjoneweek"},"content":"         * Sets {@code medications} to this record\u0027s {@code medications}.","lastModifiedDate":"2023-10-26"},{"lineNumber":247,"author":{"gitId":"hjoneweek"},"content":"         * A defensive copy of {@code medications} is used internally.","lastModifiedDate":"2023-10-26"},{"lineNumber":248,"author":{"gitId":"hjoneweek"},"content":"         */","lastModifiedDate":"2023-10-26"},{"lineNumber":249,"author":{"gitId":"hjoneweek"},"content":"        public void setMedications(List\u003cMedication\u003e medications) {","lastModifiedDate":"2023-10-26"},{"lineNumber":250,"author":{"gitId":"hjoneweek"},"content":"            this.medications \u003d (medications !\u003d null) ? new ArrayList\u003c\u003e(medications) : null;","lastModifiedDate":"2023-10-26"},{"lineNumber":251,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":252,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":253,"author":{"gitId":"hjoneweek"},"content":"        /**","lastModifiedDate":"2023-10-26"},{"lineNumber":254,"author":{"gitId":"Darren159"},"content":"         * Returns an unmodifiable medication list, which throws","lastModifiedDate":"2023-10-30"},{"lineNumber":255,"author":{"gitId":"Darren159"},"content":"         * {@code UnsupportedOperationException}","lastModifiedDate":"2023-10-30"},{"lineNumber":256,"author":{"gitId":"hjoneweek"},"content":"         * if modification is attempted.","lastModifiedDate":"2023-10-26"},{"lineNumber":257,"author":{"gitId":"hjoneweek"},"content":"         * Returns {@code Optional#empty()} if {@code medications} is null.","lastModifiedDate":"2023-10-26"},{"lineNumber":258,"author":{"gitId":"hjoneweek"},"content":"         */","lastModifiedDate":"2023-10-26"},{"lineNumber":259,"author":{"gitId":"hjoneweek"},"content":"        public Optional\u003cList\u003cMedication\u003e\u003e getMedications() {","lastModifiedDate":"2023-10-26"},{"lineNumber":260,"author":{"gitId":"hjoneweek"},"content":"            return (medications !\u003d null) ? Optional.of(Collections.unmodifiableList(medications)) : Optional.empty();","lastModifiedDate":"2023-10-26"},{"lineNumber":261,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":262,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":263,"author":{"gitId":"adammangzijun"},"content":"        @Override","lastModifiedDate":"2023-10-21"},{"lineNumber":264,"author":{"gitId":"adammangzijun"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2023-10-21"},{"lineNumber":265,"author":{"gitId":"adammangzijun"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-21"},{"lineNumber":266,"author":{"gitId":"adammangzijun"},"content":"                return true;","lastModifiedDate":"2023-10-21"},{"lineNumber":267,"author":{"gitId":"adammangzijun"},"content":"            }","lastModifiedDate":"2023-10-21"},{"lineNumber":268,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":269,"author":{"gitId":"adammangzijun"},"content":"            // instanceof handles nulls","lastModifiedDate":"2023-10-21"},{"lineNumber":270,"author":{"gitId":"adammangzijun"},"content":"            if (!(other instanceof EditRecordCommand.EditRecordDescriptor)) {","lastModifiedDate":"2023-10-21"},{"lineNumber":271,"author":{"gitId":"adammangzijun"},"content":"                return false;","lastModifiedDate":"2023-10-21"},{"lineNumber":272,"author":{"gitId":"adammangzijun"},"content":"            }","lastModifiedDate":"2023-10-21"},{"lineNumber":273,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":274,"author":{"gitId":"adammangzijun"},"content":"            EditRecordCommand.EditRecordDescriptor otherEditRecordDescriptor \u003d","lastModifiedDate":"2023-10-22"},{"lineNumber":275,"author":{"gitId":"adammangzijun"},"content":"                (EditRecordCommand.EditRecordDescriptor) other;","lastModifiedDate":"2023-10-22"},{"lineNumber":276,"author":{"gitId":"adammangzijun"},"content":"            return Objects.equals(dateTime, otherEditRecordDescriptor.dateTime)","lastModifiedDate":"2023-10-21"},{"lineNumber":277,"author":{"gitId":"ryanongwx"},"content":"                    \u0026\u0026 Objects.equals(conditions, otherEditRecordDescriptor.conditions)","lastModifiedDate":"2023-10-24"},{"lineNumber":278,"author":{"gitId":"ryanongwx"},"content":"                    \u0026\u0026 Objects.equals(filePath, otherEditRecordDescriptor.filePath)","lastModifiedDate":"2023-10-24"},{"lineNumber":279,"author":{"gitId":"ryanongwx"},"content":"                    \u0026\u0026 Objects.equals(patientIndex, otherEditRecordDescriptor.patientIndex)","lastModifiedDate":"2023-10-26"},{"lineNumber":280,"author":{"gitId":"hjoneweek"},"content":"                    \u0026\u0026 Objects.equals(medications, otherEditRecordDescriptor.medications);","lastModifiedDate":"2023-10-26"},{"lineNumber":281,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":282,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":283,"author":{"gitId":"adammangzijun"},"content":"        @Override","lastModifiedDate":"2023-10-21"},{"lineNumber":284,"author":{"gitId":"adammangzijun"},"content":"        public String toString() {","lastModifiedDate":"2023-10-21"},{"lineNumber":285,"author":{"gitId":"adammangzijun"},"content":"            return new ToStringBuilder(this)","lastModifiedDate":"2023-10-21"},{"lineNumber":286,"author":{"gitId":"adammangzijun"},"content":"                    .add(\"dateTime\", dateTime)","lastModifiedDate":"2023-10-21"},{"lineNumber":287,"author":{"gitId":"adammangzijun"},"content":"                    .add(\"conditions\", conditions)","lastModifiedDate":"2023-10-21"},{"lineNumber":288,"author":{"gitId":"ryanongwx"},"content":"                    .add(\"medications\", medications)","lastModifiedDate":"2023-10-27"},{"lineNumber":289,"author":{"gitId":"ryanongwx"},"content":"                    .add(\"filePath\", filePath)","lastModifiedDate":"2023-10-27"},{"lineNumber":290,"author":{"gitId":"ryanongwx"},"content":"                    .add(\"patientIndex\", patientIndex)","lastModifiedDate":"2023-10-24"},{"lineNumber":291,"author":{"gitId":"adammangzijun"},"content":"                    .toString();","lastModifiedDate":"2023-10-21"},{"lineNumber":292,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":293,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":294,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-10-21"}],"authorContributionMap":{"hjoneweek":25,"Darren159":14,"Clin-lyx":1,"adammangzijun":212,"ryanongwx":42}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"Darren159":1,"-":18}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"ryanongwx"},"content":" * Finds and lists all persons in address book whose name contains any of the","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"ryanongwx"},"content":" * argument keywords.","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"ryanongwx"},"content":"    public static final String COMMAND_WORD \u003d \"search\";","lastModifiedDate":"2023-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \"","lastModifiedDate":"2016-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2018-04-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (!(other instanceof FindCommand)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        FindCommand otherFindCommand \u003d (FindCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return predicate.equals(otherFindCommand.predicate);","lastModifiedDate":"2023-07-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                .add(\"predicate\", predicate)","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"-":56,"ryanongwx":3}},{"path":"src/main/java/seedu/address/logic/commands/FindRecordCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.RecordContainsKeywordsPredicate;","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":" * Finds and lists all records of a patient in address book that contain any of the arguement keywords.","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":" * Keyword matching is not case sensitive.","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"public class FindRecordCommand extends Command {","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    public static final String COMMAND_WORD \u003d \"searchrecord\";","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all records of a patient that contain any of \"","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers \\n\"","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]... \\n\"","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"            + \"Example: \" + COMMAND_WORD + \"Tylenol\";","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"    private final RecordContainsKeywordsPredicate predicate;","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"    public FindRecordCommand(RecordContainsKeywordsPredicate predicate) {","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"        model.updateFilteredRecordList(predicate);","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"        return new CommandResult(","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"                String.format(Messages.MESSAGE_RECORDS_LISTED_OVERVIEW, model.getFilteredRecordList().size())","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"        );","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"        if (this \u003d\u003d other) {","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"            return true;","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"        if (!(other instanceof FindRecordCommand)) {","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"            return false;","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"        FindRecordCommand otherFindRecordCommand \u003d (FindRecordCommand) other;","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"        return this.predicate.equals(otherFindRecordCommand.predicate);","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"    public String toString() {","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"                .add(\"predicate\", predicate)","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"                .toString();","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"hjoneweek":53}},{"path":"src/main/java/seedu/address/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";","lastModifiedDate":"2016-08-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Darren159":1,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/PinCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import java.util.List;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":" * Pins the person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"public class PinCommand extends Command {","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"    public static final String COMMAND_WORD \u003d \"pin\";","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"            + \": Pins the person identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"    public static final String MESSAGE_PIN_PERSON_SUCCESS \u003d \"Pinned Person: %1$s\";","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"    private final Index targetIndex;","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"    public PinCommand(Index targetIndex) {","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"ryanongwx"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX","lastModifiedDate":"2023-11-08"},{"lineNumber":41,"author":{"gitId":"ryanongwx"},"content":"                    + \". Please ensure that it is within 1 and \" + lastShownList.size() + \".\");","lastModifiedDate":"2023-11-08"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"        Person personToPin \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"        Person pinnedPerson \u003d new Person(personToPin.getName(), personToPin.getNric(), personToPin.getEmail(),","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"                personToPin.getPhone(), personToPin.getGender(), personToPin.getAge(), personToPin.getBloodType(),","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"                personToPin.getAllergies(), personToPin.getRecords(), personToPin.getAppointments(), true);","lastModifiedDate":"2023-10-30"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"        model.setPerson(personToPin, pinnedPerson);","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"        return new CommandResult(String.format(MESSAGE_PIN_PERSON_SUCCESS, Messages.format(personToPin)));","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"            return true;","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"        if (!(other instanceof PinCommand)) {","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"            return false;","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"        PinCommand otherPinCommand \u003d (PinCommand) other;","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"        return targetIndex.equals(otherPinCommand.targetIndex);","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"    public String toString() {","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"                .add(\"targetIndex\", targetIndex)","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"                .toString();","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"Darren159":72,"ryanongwx":2}},{"path":"src/main/java/seedu/address/logic/commands/UnpinCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import java.util.List;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"ryanongwx"},"content":" * Unpins the person identified using it\u0027s displayed index from the address","lastModifiedDate":"2023-11-08"},{"lineNumber":16,"author":{"gitId":"ryanongwx"},"content":" * book.","lastModifiedDate":"2023-11-08"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"public class UnpinCommand extends Command {","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"    public static final String COMMAND_WORD \u003d \"unpin\";","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"            + \": Unpins the person identified by the index number used in the displayed pinned list.\\n\"","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"    public static final String MESSAGE_UNPIN_PERSON_SUCCESS \u003d \"Unpinned Person: %1$s\";","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"    private final Index targetIndex;","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"    public UnpinCommand(Index targetIndex) {","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"        List\u003cPerson\u003e lastShownPinnedList \u003d model.getPinnedPersonList();","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownPinnedList.size()) {","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"ryanongwx"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX","lastModifiedDate":"2023-11-08"},{"lineNumber":42,"author":{"gitId":"ryanongwx"},"content":"                    + \". Please ensure that it is within 1 and \" + lastShownPinnedList.size() + \".\");","lastModifiedDate":"2023-11-08"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"        Person personToUnpin \u003d lastShownPinnedList.get(targetIndex.getZeroBased());","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"        Person unpinnedPerson \u003d new Person(personToUnpin.getName(), personToUnpin.getNric(), personToUnpin.getEmail(),","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"                personToUnpin.getPhone(), personToUnpin.getGender(), personToUnpin.getAge(),","lastModifiedDate":"2023-10-30"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"                personToUnpin.getBloodType(), personToUnpin.getAllergies(), personToUnpin.getRecords(),","lastModifiedDate":"2023-10-30"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"                personToUnpin.getAppointments(), false);","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"        model.setPerson(personToUnpin, unpinnedPerson);","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"        return new CommandResult(String.format(MESSAGE_UNPIN_PERSON_SUCCESS, Messages.format(personToUnpin)));","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"            return true;","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"        if (!(other instanceof UnpinCommand)) {","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"            return false;","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"        UnpinCommand otherUnpinCommand \u003d (UnpinCommand) other;","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"        return targetIndex.equals(otherUnpinCommand.targetIndex);","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"    public String toString() {","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"                .add(\"targetIndex\", targetIndex)","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"                .toString();","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"Darren159":72,"ryanongwx":4}},{"path":"src/main/java/seedu/address/logic/commands/ViewAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":" * Opens the Appointments window.","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"public class ViewAppointmentCommand extends Command {","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"    public static final String COMMAND_WORD \u003d \"viewappointment\";","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Opens Appointments window.\\n\"","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"    public static final String SHOWING_APPOINTMENTS_MESSAGE \u003d \"Opened appointments window.\";","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"        return new CommandResult(SHOWING_APPOINTMENTS_MESSAGE, false, true, false);","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"Darren159":21}},{"path":"src/main/java/seedu/address/logic/commands/ViewCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Clin-lyx"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"Clin-lyx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"Clin-lyx"},"content":"import java.util.List;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"Clin-lyx"},"content":"/**","lastModifiedDate":"2023-10-21"},{"lineNumber":14,"author":{"gitId":"Clin-lyx"},"content":" * Views patient detailed information at the specified index","lastModifiedDate":"2023-10-21"},{"lineNumber":15,"author":{"gitId":"Clin-lyx"},"content":" * and list medical records of the patient.","lastModifiedDate":"2023-10-21"},{"lineNumber":16,"author":{"gitId":"Clin-lyx"},"content":" */","lastModifiedDate":"2023-10-21"},{"lineNumber":17,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":18,"author":{"gitId":"Clin-lyx"},"content":"public class ViewCommand extends Command {","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"Clin-lyx"},"content":"    public static final String COMMAND_WORD \u003d \"view\";","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"Clin-lyx"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"Clin-lyx"},"content":"            + \": display the detailed information of the patient identified by the index given\"","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"Clin-lyx"},"content":"            + \" and list all the existing medical records of patient.\\n\"","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"Clin-lyx"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"Clin-lyx"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"Clin-lyx"},"content":"    public static final String MESSAGE_VIEW_PERSON_SUCCESS \u003d \"View Patient: %1$s\";","lastModifiedDate":"2023-11-08"},{"lineNumber":29,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"Clin-lyx"},"content":"    private final Index targetIndex;","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"Clin-lyx"},"content":"    /**","lastModifiedDate":"2023-10-21"},{"lineNumber":33,"author":{"gitId":"Clin-lyx"},"content":"     * Constructor for ViewCommand class","lastModifiedDate":"2023-10-21"},{"lineNumber":34,"author":{"gitId":"ryanongwx"},"content":"     *","lastModifiedDate":"2023-11-08"},{"lineNumber":35,"author":{"gitId":"Clin-lyx"},"content":"     * @param targetIndex the patient Index to view","lastModifiedDate":"2023-10-21"},{"lineNumber":36,"author":{"gitId":"Clin-lyx"},"content":"     */","lastModifiedDate":"2023-10-21"},{"lineNumber":37,"author":{"gitId":"Clin-lyx"},"content":"    public ViewCommand(Index targetIndex) {","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"Clin-lyx"},"content":"        requireNonNull(targetIndex);","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"Clin-lyx"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"Clin-lyx"},"content":"    @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"Clin-lyx"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"Clin-lyx"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"Clin-lyx"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"Clin-lyx"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"ryanongwx"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX","lastModifiedDate":"2023-11-08"},{"lineNumber":49,"author":{"gitId":"ryanongwx"},"content":"                    + \". Please ensure that it is within 1 and \" + lastShownList.size() + \".\");","lastModifiedDate":"2023-11-08"},{"lineNumber":50,"author":{"gitId":"Clin-lyx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":52,"author":{"gitId":"Clin-lyx"},"content":"        Person patientToView \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2023-11-08"},{"lineNumber":53,"author":{"gitId":"Clin-lyx"},"content":"        model.updateRecordList(patientToView, targetIndex);","lastModifiedDate":"2023-11-08"},{"lineNumber":54,"author":{"gitId":"Clin-lyx"},"content":"        return new CommandResult(String.format(MESSAGE_VIEW_PERSON_SUCCESS, Messages.format(patientToView)));","lastModifiedDate":"2023-11-08"},{"lineNumber":55,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"Clin-lyx"},"content":"    @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"Clin-lyx"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"Clin-lyx"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"Clin-lyx"},"content":"            return true;","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"Clin-lyx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":62,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"Clin-lyx"},"content":"        if (!(other instanceof ViewCommand)) {","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"Clin-lyx"},"content":"            return false;","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"Clin-lyx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":67,"author":{"gitId":"Clin-lyx"},"content":"        ViewCommand v \u003d (ViewCommand) other;","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"Clin-lyx"},"content":"        return this.targetIndex.equals(v.targetIndex);","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"Clin-lyx"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"Clin-lyx":67,"ryanongwx":3}},{"path":"src/main/java/seedu/address/logic/parser/AddAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-18"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-18"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-18"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2023-10-18"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-18"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2023-10-18"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-18"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.DateTime;","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Name;","lastModifiedDate":"2023-10-22"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-18"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":" * Parses input arguments and creates a new AddAppointmentCommand object","lastModifiedDate":"2023-10-18"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-18"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"public class AddAppointmentCommandParser implements Parser\u003cAddAppointmentCommand\u003e {","lastModifiedDate":"2023-10-18"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-18"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"     * Parses the given {@code String} of arguments in the context of the","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"     * AddAppointmentCommand","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"     * and returns an AddAppointmentCommand object for execution.","lastModifiedDate":"2023-10-18"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"     *","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-18"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-18"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"    public AddAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-18"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-10-18"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE);","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"        Index index;","lastModifiedDate":"2023-10-18"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"        try {","lastModifiedDate":"2023-10-18"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2023-10-18"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-18"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-18"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"                    AddAppointmentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-18"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DATE)) {","lastModifiedDate":"2023-10-19"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-19"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"                    AddAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-19"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_DATE);","lastModifiedDate":"2023-10-19"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2023-10-19"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"        DateTime dateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATE).get());","lastModifiedDate":"2023-10-18"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"        Appointment appointment \u003d new Appointment(name, dateTime, null);","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"        return new AddAppointmentCommand(index, appointment);","lastModifiedDate":"2023-10-18"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"     * in the given","lastModifiedDate":"2023-11-01"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-10-19"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-10-19"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-10-19"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-18"}],"authorContributionMap":{"Darren159":65}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-10-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Age;","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.BloodType;","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-03-17"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Gender;","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-03-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-03-17"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.record.UniqueRecordList;","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Name;","lastModifiedDate":"2023-10-22"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Nric;","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"     *","lastModifiedDate":"2023-10-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_NRIC, PREFIX_EMAIL,","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"                PREFIX_PHONE, PREFIX_GENDER, PREFIX_AGE,","lastModifiedDate":"2023-10-30"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"                PREFIX_BLOODTYPE, PREFIX_ALLERGIES);","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_NRIC, PREFIX_EMAIL, PREFIX_PHONE, PREFIX_GENDER,","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"ryanongwx"},"content":"                PREFIX_EMAIL, PREFIX_AGE, PREFIX_BLOODTYPE)","lastModifiedDate":"2023-10-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_NRIC, PREFIX_EMAIL, PREFIX_PHONE, PREFIX_GENDER,","lastModifiedDate":"2023-10-30"},{"lineNumber":53,"author":{"gitId":"ryanongwx"},"content":"                PREFIX_EMAIL, PREFIX_AGE, PREFIX_BLOODTYPE);","lastModifiedDate":"2023-10-17"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());","lastModifiedDate":"2023-10-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2023-10-12"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"        Age age \u003d ParserUtil.parseAge(argMultimap.getValue(PREFIX_AGE).get());","lastModifiedDate":"2023-10-12"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"        BloodType bloodType \u003d ParserUtil.parseBloodType(argMultimap.getValue(PREFIX_BLOODTYPE).get());","lastModifiedDate":"2023-10-12"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"        Set\u003cAllergy\u003e allergies \u003d ParserUtil.parseAllergies(argMultimap.getAllValues(PREFIX_ALLERGIES));","lastModifiedDate":"2023-10-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"        Person person \u003d new Person(name, nric, email, phone, gender, age, bloodType, allergies,","lastModifiedDate":"2023-10-30"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"                new UniqueRecordList(), new UniqueAppointmentList(), false);","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values","lastModifiedDate":"2023-10-30"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"     * in the given","lastModifiedDate":"2023-10-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"hjoneweek":10,"Darren159":15,"-":47,"adammangzijun":4,"ryanongwx":2}},{"path":"src/main/java/seedu/address/logic/parser/AddRecordCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-15"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-15"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CONDITION;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICATION;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import java.util.List;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-15"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.logic.commands.AddRecordCommand;","lastModifiedDate":"2023-10-15"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-15"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Condition;","lastModifiedDate":"2023-10-15"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Medication;","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2023-10-15"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.DateTime;","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":" * Parses a user input and creates a AddRecordCommand object","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"public class AddRecordCommandParser implements Parser\u003cAddRecordCommand\u003e {","lastModifiedDate":"2023-10-15"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-15"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"    public AddRecordCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2023-10-15"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-10-15"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"                ArgumentTokenizer.tokenize(userInput, PREFIX_DATE, PREFIX_CONDITION, PREFIX_MEDICATION);","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_CONDITION, PREFIX_MEDICATION)","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"                || argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRecordCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-15"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-15"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"        Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2023-10-15"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_DATE);","lastModifiedDate":"2023-10-22"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"        DateTime dateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATE).get());","lastModifiedDate":"2023-10-15"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"        List\u003cCondition\u003e conditions \u003d ParserUtil.parseConditions(argMultimap.getAllValues(PREFIX_CONDITION));","lastModifiedDate":"2023-10-15"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"        List\u003cMedication\u003e medications \u003d ParserUtil.parseMedications(argMultimap.getAllValues(PREFIX_MEDICATION));","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":41,"author":{"gitId":"ryanongwx"},"content":"        Record record \u003d new Record(dateTime, conditions, medications, null, index.getZeroBased());","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"        return new AddRecordCommand(index, record);","lastModifiedDate":"2023-10-15"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-15"},{"lineNumber":46,"author":{"gitId":"ryanongwx"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"ryanongwx"},"content":"     * in the given","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-10-15"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-15"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-10-15"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-10-15"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-15"}],"authorContributionMap":{"hjoneweek":48,"Darren159":1,"adammangzijun":1,"ryanongwx":3}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-07-29"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2023-10-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.logic.commands.AddRecordCommand;","lastModifiedDate":"2023-10-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.DeleteAppointmentCommand;","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.logic.commands.DeleteRecordCommand;","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.logic.commands.EditRecordCommand;","lastModifiedDate":"2023-10-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.FindRecordCommand;","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.PinCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.UnpinCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.ViewAppointmentCommand;","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.logic.commands.ViewCommand;","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AddressBookParser.class);","lastModifiedDate":"2023-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"     * @param userInput","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"     *            full user input string","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"     * @throws ParseException","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"     *             if the user input does not conform the expected format","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"        // Note to developers: Change the log level in config.json to enable lower level","lastModifiedDate":"2023-11-01"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"        // (i.e., FINE, FINER and lower)","lastModifiedDate":"2023-11-01"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // log messages such as the one below.","lastModifiedDate":"2023-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Lower level log messages are used sparingly to minimize noise in the code.","lastModifiedDate":"2023-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        logger.fine(\"Command word: \" + commandWord + \"; Arguments: \" + arguments);","lastModifiedDate":"2023-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"hjoneweek"},"content":"        case AddRecordCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-15"},{"lineNumber":72,"author":{"gitId":"hjoneweek"},"content":"            return new AddRecordCommandParser().parse(arguments);","lastModifiedDate":"2023-10-15"},{"lineNumber":73,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":77,"author":{"gitId":"adammangzijun"},"content":"        case EditRecordCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-22"},{"lineNumber":78,"author":{"gitId":"adammangzijun"},"content":"            return new EditRecordCommandParser().parse(arguments);","lastModifiedDate":"2023-10-22"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"hjoneweek"},"content":"        case DeleteRecordCommand.COMMAND_WORD:","lastModifiedDate":"2023-11-01"},{"lineNumber":84,"author":{"gitId":"hjoneweek"},"content":"            return new DeleteRecordCommandParser().parse(arguments);","lastModifiedDate":"2023-11-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"Darren159"},"content":"        case PinCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-13"},{"lineNumber":87,"author":{"gitId":"Darren159"},"content":"            return new PinCommandParser().parse(arguments);","lastModifiedDate":"2023-10-13"},{"lineNumber":88,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":89,"author":{"gitId":"Darren159"},"content":"        case UnpinCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-13"},{"lineNumber":90,"author":{"gitId":"Darren159"},"content":"            return new UnpinCommandParser().parse(arguments);","lastModifiedDate":"2023-10-13"},{"lineNumber":91,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":92,"author":{"gitId":"Darren159"},"content":"        case AddAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-18"},{"lineNumber":93,"author":{"gitId":"Darren159"},"content":"            return new AddAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2023-10-18"},{"lineNumber":94,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":95,"author":{"gitId":"Darren159"},"content":"        case DeleteAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2023-11-01"},{"lineNumber":96,"author":{"gitId":"Darren159"},"content":"            return new DeleteAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2023-11-01"},{"lineNumber":97,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":98,"author":{"gitId":"Clin-lyx"},"content":"        case ViewCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-20"},{"lineNumber":99,"author":{"gitId":"Clin-lyx"},"content":"            return new ViewCommandParser().parse(arguments);","lastModifiedDate":"2023-10-20"},{"lineNumber":100,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":101,"author":{"gitId":"Darren159"},"content":"        case ViewAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2023-11-01"},{"lineNumber":102,"author":{"gitId":"Darren159"},"content":"            return new ViewAppointmentCommand();","lastModifiedDate":"2023-11-01"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":107,"author":{"gitId":"Darren159"},"content":"        case FindRecordCommand.COMMAND_WORD:","lastModifiedDate":"2023-11-01"},{"lineNumber":108,"author":{"gitId":"Darren159"},"content":"            return new FindRecordCommandParser().parse(arguments);","lastModifiedDate":"2023-11-01"},{"lineNumber":109,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            logger.finer(\"This user input caused a ParseException: \" + userInput);","lastModifiedDate":"2023-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Darren159":29,"hjoneweek":7,"Clin-lyx":4,"-":81,"adammangzijun":4}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"i/\");","lastModifiedDate":"2023-10-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"    public static final Prefix PREFIX_AGE \u003d new Prefix(\"a/\");","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    public static final Prefix PREFIX_BLOODTYPE \u003d new Prefix(\"bt/\");","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    public static final Prefix PREFIX_ALLERGIES \u003d new Prefix(\"al/\");","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");","lastModifiedDate":"2023-10-17"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    public static final Prefix PREFIX_CONDITION \u003d new Prefix(\"c/\");","lastModifiedDate":"2023-10-15"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    public static final Prefix PREFIX_MEDICATION \u003d new Prefix(\"m/\");","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"Darren159":2,"hjoneweek":7,"-":11}},{"path":"src/main/java/seedu/address/logic/parser/DeleteAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.DeleteAppointmentCommand;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":" * Parses input arguments and creates a new DeleteAppointmentCommand object","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"public class DeleteAppointmentCommandParser implements Parser\u003cDeleteAppointmentCommand\u003e {","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"     * Parses the given {@code String} of arguments in the context of the","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"     * DeleteAppointmentCommand","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"     * and returns a DeleteAppointmentCommand object for execution.","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"     *","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"    public DeleteAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"        try {","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"            return new DeleteAppointmentCommand(index);","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"            throw new ParseException(","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAppointmentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"Darren159":31}},{"path":"src/main/java/seedu/address/logic/parser/DeleteRecordCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.logic.commands.DeleteRecordCommand;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":" * Parses input arguments and creates a new DeleteRecordCommand object","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"public class DeleteRecordCommandParser implements Parser\u003cDeleteRecordCommand\u003e {","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    public DeleteRecordCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(userInput);","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"        Index patientIndex;","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"        Index recordIndex;","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"        try {","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"            String trimmedUserInput \u003d userInput.trim();","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"            patientIndex \u003d ParserUtil.parsePatientIndex(trimmedUserInput);","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"            recordIndex \u003d ParserUtil.parseRecordIndex(trimmedUserInput);","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"                    DeleteRecordCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"        return new DeleteRecordCommand(patientIndex, recordIndex);","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"hjoneweek":32}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"     * Parses the given {@code String} of arguments in the context of the","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"     * EditCommand","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"     *","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"     * @throws ParseException","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"     *             if the user input does not conform the expected format","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_EMAIL, PREFIX_PHONE,","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"                PREFIX_GENDER, PREFIX_AGE, PREFIX_BLOODTYPE, PREFIX_ALLERGIES);","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_EMAIL, PREFIX_PHONE,","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"                PREFIX_GENDER, PREFIX_AGE, PREFIX_BLOODTYPE);","lastModifiedDate":"2023-10-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"adammangzijun"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2023-10-14"},{"lineNumber":60,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":64,"author":{"gitId":"adammangzijun"},"content":"        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {","lastModifiedDate":"2023-10-14"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"            editPersonDescriptor.setGender(ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get()));","lastModifiedDate":"2023-10-15"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":67,"author":{"gitId":"adammangzijun"},"content":"        if (argMultimap.getValue(PREFIX_AGE).isPresent()) {","lastModifiedDate":"2023-10-14"},{"lineNumber":68,"author":{"gitId":"adammangzijun"},"content":"            editPersonDescriptor.setAge(ParserUtil.parseAge(argMultimap.getValue(PREFIX_AGE).get()));","lastModifiedDate":"2023-10-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":70,"author":{"gitId":"adammangzijun"},"content":"        if (argMultimap.getValue(PREFIX_BLOODTYPE).isPresent()) {","lastModifiedDate":"2023-10-14"},{"lineNumber":71,"author":{"gitId":"adammangzijun"},"content":"            editPersonDescriptor.setBloodType(ParserUtil.parseBloodType(argMultimap.getValue(PREFIX_BLOODTYPE).get()));","lastModifiedDate":"2023-10-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":73,"author":{"gitId":"adammangzijun"},"content":"        parseAllergiesForEdit(argMultimap.getAllValues(PREFIX_ALLERGIES)).ifPresent(editPersonDescriptor::setAllergies);","lastModifiedDate":"2023-10-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":83,"author":{"gitId":"Darren159"},"content":"     * Parses {@code Collection\u003cString\u003e allergies} into a {@code Set\u003cAllergy\u003e} if","lastModifiedDate":"2023-11-02"},{"lineNumber":84,"author":{"gitId":"Darren159"},"content":"     * {@code allergies} is non-empty.","lastModifiedDate":"2023-11-02"},{"lineNumber":85,"author":{"gitId":"Darren159"},"content":"     * If {@code allergies} contain only one element which is an empty string, it","lastModifiedDate":"2023-11-02"},{"lineNumber":86,"author":{"gitId":"Darren159"},"content":"     * will be parsed into a","lastModifiedDate":"2023-11-02"},{"lineNumber":87,"author":{"gitId":"adammangzijun"},"content":"     * {@code Set\u003cAllergy\u003e} containing zero allergies.","lastModifiedDate":"2023-10-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":89,"author":{"gitId":"adammangzijun"},"content":"    private Optional\u003cSet\u003cAllergy\u003e\u003e parseAllergiesForEdit(Collection\u003cString\u003e allergies) throws ParseException {","lastModifiedDate":"2023-10-14"},{"lineNumber":90,"author":{"gitId":"adammangzijun"},"content":"        assert allergies !\u003d null;","lastModifiedDate":"2023-10-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":92,"author":{"gitId":"adammangzijun"},"content":"        if (allergies.isEmpty()) {","lastModifiedDate":"2023-10-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":95,"author":{"gitId":"adammangzijun"},"content":"        Collection\u003cString\u003e allergySet \u003d allergies.size() \u003d\u003d 1","lastModifiedDate":"2023-10-14"},{"lineNumber":96,"author":{"gitId":"adammangzijun"},"content":"                \u0026\u0026 allergies.contains(\"\") ? Collections.emptySet() : allergies;","lastModifiedDate":"2023-10-14"},{"lineNumber":97,"author":{"gitId":"adammangzijun"},"content":"        return Optional.of(ParserUtil.parseAllergies(allergySet));","lastModifiedDate":"2023-10-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"Darren159":11,"-":64,"adammangzijun":25}},{"path":"src/main/java/seedu/address/logic/parser/EditRecordCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-21"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-22"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-22"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CONDITION;","lastModifiedDate":"2023-10-22"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2023-10-22"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICATION;","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"import java.util.Collection;","lastModifiedDate":"2023-10-22"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"import java.util.Collections;","lastModifiedDate":"2023-10-22"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"import java.util.List;","lastModifiedDate":"2023-10-22"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-22"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-21"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2023-10-21"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.logic.commands.EditRecordCommand;","lastModifiedDate":"2023-10-21"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-21"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.record.Condition;","lastModifiedDate":"2023-10-21"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Medication;","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-10-21"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":" * Parses input arguments and creates a new EditRecordCommand object","lastModifiedDate":"2023-10-21"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-10-21"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"public class EditRecordCommandParser implements Parser\u003cEditRecordCommand\u003e {","lastModifiedDate":"2023-10-21"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-10-21"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2023-10-21"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2023-10-21"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-21"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-10-21"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"    public EditRecordCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-21"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-10-21"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-10-21"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_CONDITION, PREFIX_MEDICATION);","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"        Index patientIndex;","lastModifiedDate":"2023-10-21"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"        Index recordIndex;","lastModifiedDate":"2023-10-21"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"        try {","lastModifiedDate":"2023-10-21"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"            String preamble \u003d argMultimap.getPreamble();","lastModifiedDate":"2023-10-21"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"            patientIndex \u003d ParserUtil.parsePatientIndex(preamble);","lastModifiedDate":"2023-10-21"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"            recordIndex \u003d ParserUtil.parseRecordIndex(preamble);","lastModifiedDate":"2023-10-21"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-21"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"                    EditRecordCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_DATE);","lastModifiedDate":"2023-10-22"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"        EditRecordCommand.EditRecordDescriptor editRecordDescriptor \u003d new EditRecordCommand.EditRecordDescriptor();","lastModifiedDate":"2023-10-21"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {","lastModifiedDate":"2023-10-21"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"            editRecordDescriptor.setDateTime(ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATE).get()));","lastModifiedDate":"2023-10-21"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"        parseConditionsForEdit(argMultimap.getAllValues(PREFIX_CONDITION))","lastModifiedDate":"2023-10-22"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"                .ifPresent(editRecordDescriptor::setConditions);","lastModifiedDate":"2023-10-22"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"        parseMedicationForEdit(argMultimap.getAllValues(PREFIX_MEDICATION))","lastModifiedDate":"2023-10-26"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"                .ifPresent(editRecordDescriptor::setMedications);","lastModifiedDate":"2023-10-26"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"        if (!editRecordDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2023-10-21"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2023-10-21"},{"lineNumber":63,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":64,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"        return new EditRecordCommand(patientIndex, recordIndex, editRecordDescriptor);","lastModifiedDate":"2023-10-21"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":67,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":68,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-10-21"},{"lineNumber":69,"author":{"gitId":"hjoneweek"},"content":"     * Parses {@code Collection\u003cString\u003e condtions} into a {@code Set\u003cCondition\u003e} if {@code condition} is non-empty.","lastModifiedDate":"2023-10-26"},{"lineNumber":70,"author":{"gitId":"hjoneweek"},"content":"     * If {@code contion} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2023-10-26"},{"lineNumber":71,"author":{"gitId":"hjoneweek"},"content":"     * {@code Set\u003cCondition\u003e} containing zero allergies.","lastModifiedDate":"2023-10-26"},{"lineNumber":72,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-10-21"},{"lineNumber":73,"author":{"gitId":"adammangzijun"},"content":"    private Optional\u003cList\u003cCondition\u003e\u003e parseConditionsForEdit(Collection\u003cString\u003e conditions) throws ParseException {","lastModifiedDate":"2023-10-21"},{"lineNumber":74,"author":{"gitId":"adammangzijun"},"content":"        assert conditions !\u003d null;","lastModifiedDate":"2023-10-21"},{"lineNumber":75,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":76,"author":{"gitId":"adammangzijun"},"content":"        if (conditions.isEmpty()) {","lastModifiedDate":"2023-10-21"},{"lineNumber":77,"author":{"gitId":"adammangzijun"},"content":"            return Optional.empty();","lastModifiedDate":"2023-10-21"},{"lineNumber":78,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"        Collection\u003cString\u003e conditionSet \u003d conditions.size() \u003d\u003d 1","lastModifiedDate":"2023-10-21"},{"lineNumber":80,"author":{"gitId":"adammangzijun"},"content":"                \u0026\u0026 conditions.contains(\"\") ? Collections.emptySet() : conditions;","lastModifiedDate":"2023-10-21"},{"lineNumber":81,"author":{"gitId":"adammangzijun"},"content":"        return Optional.of(ParserUtil.parseConditions(conditionSet));","lastModifiedDate":"2023-10-22"},{"lineNumber":82,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":83,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":84,"author":{"gitId":"hjoneweek"},"content":"     * Parses {@code Collection\u003cString\u003e medications} into a {@code Set\u003cMedication\u003e} if {@code medications} is non-empty.","lastModifiedDate":"2023-10-26"},{"lineNumber":85,"author":{"gitId":"hjoneweek"},"content":"     * If {@code medications} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2023-10-26"},{"lineNumber":86,"author":{"gitId":"hjoneweek"},"content":"     * {@code Set\u003cMedication\u003e} containing zero allergies.","lastModifiedDate":"2023-10-26"},{"lineNumber":87,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":88,"author":{"gitId":"hjoneweek"},"content":"    private Optional\u003cList\u003cMedication\u003e\u003e parseMedicationForEdit(Collection\u003cString\u003e medications) throws ParseException {","lastModifiedDate":"2023-10-26"},{"lineNumber":89,"author":{"gitId":"hjoneweek"},"content":"        assert medications !\u003d null;","lastModifiedDate":"2023-10-26"},{"lineNumber":90,"author":{"gitId":"hjoneweek"},"content":"        if (medications.isEmpty()) {","lastModifiedDate":"2023-10-26"},{"lineNumber":91,"author":{"gitId":"hjoneweek"},"content":"            return Optional.empty();","lastModifiedDate":"2023-10-26"},{"lineNumber":92,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":93,"author":{"gitId":"hjoneweek"},"content":"        Collection\u003cString\u003e medicationSet \u003d medications.size() \u003d\u003d 1","lastModifiedDate":"2023-10-26"},{"lineNumber":94,"author":{"gitId":"hjoneweek"},"content":"                \u0026\u0026 medications.contains(\"\") ? Collections.emptySet() : medications;","lastModifiedDate":"2023-10-26"},{"lineNumber":95,"author":{"gitId":"hjoneweek"},"content":"        return Optional.of(ParserUtil.parseMedications(medicationSet));","lastModifiedDate":"2023-10-26"},{"lineNumber":96,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":97,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-10-21"}],"authorContributionMap":{"hjoneweek":23,"adammangzijun":74}},{"path":"src/main/java/seedu/address/logic/parser/FindRecordCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.logic.commands.FindRecordCommand;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.RecordContainsKeywordsPredicate;","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":" * Parses input arguments and creates a new FindRecordCommand object","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"public class FindRecordCommandParser implements Parser\u003cFindRecordCommand\u003e {","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    public FindRecordCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"            throw new ParseException(","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindRecordCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"        return new FindRecordCommand(new RecordContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"hjoneweek":26}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import java.util.List;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Age;","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.BloodType;","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Gender;","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Condition;","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Medication;","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.DateTime;","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.shared.Name;","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Nric;","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":" * Contains utility methods used for parsing strings in the various *Parser","lastModifiedDate":"2023-10-30"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":" * classes.","lastModifiedDate":"2023-10-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"    public static final String MESSAGE_INVALID_INPUT \u003d \"Index input is not in the format of number/number\";","lastModifiedDate":"2023-10-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"    public static final String MESSAGE_INVALID_PATIENT_INDEX \u003d \"Patient index is not a non-zero unsigned integer.\";","lastModifiedDate":"2023-10-21"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"    public static final String MESSAGE_INVALID_RECORD_INDEX \u003d \"Record index is not a non-zero unsigned integer.\";","lastModifiedDate":"2023-10-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading","lastModifiedDate":"2023-10-30"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"     * and trailing whitespaces will be","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"     *","lastModifiedDate":"2023-10-30"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"     *                        unsigned integer).","lastModifiedDate":"2023-10-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-10-22"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"     * Parses {@code oneBasedIndexes} for edit record command into a patient\u0027s","lastModifiedDate":"2023-10-30"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"     * {@code Index}","lastModifiedDate":"2023-10-30"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"     * and returns it. Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-22"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"     *","lastModifiedDate":"2023-10-30"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"     * @throws ParseException if the specified patient index is invalid (not","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"     *                        non-zero unsigned integer).","lastModifiedDate":"2023-10-30"},{"lineNumber":60,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-10-22"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"    public static Index parsePatientIndex(String oneBasedIndexes) throws ParseException {","lastModifiedDate":"2023-10-21"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"        // Check if input matches the format of two numbers separated by a slash","lastModifiedDate":"2023-10-22"},{"lineNumber":63,"author":{"gitId":"adammangzijun"},"content":"        if (!oneBasedIndexes.matches(\"\\\\d+/\\\\d+\")) {","lastModifiedDate":"2023-10-22"},{"lineNumber":64,"author":{"gitId":"adammangzijun"},"content":"            throw new ParseException(MESSAGE_INVALID_INPUT);","lastModifiedDate":"2023-10-22"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-22"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"        String trimmedIndex \u003d oneBasedIndexes.split(\"/\")[0].trim();","lastModifiedDate":"2023-10-21"},{"lineNumber":67,"author":{"gitId":"adammangzijun"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2023-10-21"},{"lineNumber":68,"author":{"gitId":"adammangzijun"},"content":"            throw new ParseException(MESSAGE_INVALID_PATIENT_INDEX);","lastModifiedDate":"2023-10-21"},{"lineNumber":69,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":70,"author":{"gitId":"adammangzijun"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2023-10-21"},{"lineNumber":71,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":72,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":73,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-10-22"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"     * Parses {@code oneBasedIndexes} for edit record command into a record\u0027s","lastModifiedDate":"2023-10-30"},{"lineNumber":75,"author":{"gitId":"Darren159"},"content":"     * {@code Index}","lastModifiedDate":"2023-10-30"},{"lineNumber":76,"author":{"gitId":"adammangzijun"},"content":"     * and returns it. Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-22"},{"lineNumber":77,"author":{"gitId":"Darren159"},"content":"     *","lastModifiedDate":"2023-10-30"},{"lineNumber":78,"author":{"gitId":"Darren159"},"content":"     * @throws ParseException if the specified patient index is invalid (not","lastModifiedDate":"2023-10-30"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"     *                        non-zero unsigned integer).","lastModifiedDate":"2023-10-30"},{"lineNumber":80,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-10-22"},{"lineNumber":81,"author":{"gitId":"adammangzijun"},"content":"    public static Index parseRecordIndex(String oneBasedIndexes) throws ParseException {","lastModifiedDate":"2023-10-21"},{"lineNumber":82,"author":{"gitId":"adammangzijun"},"content":"        String trimmedIndex \u003d oneBasedIndexes.split(\"/\")[1].trim();","lastModifiedDate":"2023-10-21"},{"lineNumber":83,"author":{"gitId":"adammangzijun"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2023-10-21"},{"lineNumber":84,"author":{"gitId":"adammangzijun"},"content":"            throw new ParseException(MESSAGE_INVALID_RECORD_INDEX);","lastModifiedDate":"2023-10-21"},{"lineNumber":85,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":86,"author":{"gitId":"adammangzijun"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2023-10-21"},{"lineNumber":87,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":88,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":104,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-30"},{"lineNumber":105,"author":{"gitId":"Darren159"},"content":"     * Parses a {@code String nric} into a {@code Nric}.","lastModifiedDate":"2023-10-30"},{"lineNumber":106,"author":{"gitId":"Darren159"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-30"},{"lineNumber":107,"author":{"gitId":"Darren159"},"content":"     *","lastModifiedDate":"2023-10-30"},{"lineNumber":108,"author":{"gitId":"Darren159"},"content":"     * @throws ParseException if the given {@code nric} is invalid.","lastModifiedDate":"2023-10-30"},{"lineNumber":109,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-30"},{"lineNumber":110,"author":{"gitId":"Darren159"},"content":"    public static Nric parseNric(String nric) throws ParseException {","lastModifiedDate":"2023-10-30"},{"lineNumber":111,"author":{"gitId":"Darren159"},"content":"        requireNonNull(nric);","lastModifiedDate":"2023-10-30"},{"lineNumber":112,"author":{"gitId":"Darren159"},"content":"        String trimmedNric \u003d nric.trim();","lastModifiedDate":"2023-10-30"},{"lineNumber":113,"author":{"gitId":"Darren159"},"content":"        if (!Nric.isValidNric(trimmedNric)) {","lastModifiedDate":"2023-10-30"},{"lineNumber":114,"author":{"gitId":"Darren159"},"content":"            throw new ParseException(Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-30"},{"lineNumber":115,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":116,"author":{"gitId":"Darren159"},"content":"        return new Nric(trimmedNric.toUpperCase());","lastModifiedDate":"2023-10-30"},{"lineNumber":117,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":118,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":135,"author":{"gitId":"hjoneweek"},"content":"     * Parses a {@code String gender} into an {@code Gender}.","lastModifiedDate":"2023-10-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":138,"author":{"gitId":"hjoneweek"},"content":"     * @throws ParseException if the given {@code gender} is invalid.","lastModifiedDate":"2023-10-12"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"hjoneweek"},"content":"    public static Gender parseGender(String gender) throws ParseException {","lastModifiedDate":"2023-10-12"},{"lineNumber":141,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(gender);","lastModifiedDate":"2023-10-12"},{"lineNumber":142,"author":{"gitId":"hjoneweek"},"content":"        String trimmedGender \u003d gender.trim();","lastModifiedDate":"2023-10-12"},{"lineNumber":143,"author":{"gitId":"hjoneweek"},"content":"        if (!Gender.isValidGender(trimmedGender)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":144,"author":{"gitId":"hjoneweek"},"content":"            throw new ParseException(Gender.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":146,"author":{"gitId":"hjoneweek"},"content":"        return new Gender(trimmedGender);","lastModifiedDate":"2023-10-12"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":150,"author":{"gitId":"hjoneweek"},"content":"     * Parses a {@code String age} into an {@code Age}.","lastModifiedDate":"2023-10-12"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":153,"author":{"gitId":"hjoneweek"},"content":"     * @throws ParseException if the given {@code age} is invalid.","lastModifiedDate":"2023-10-12"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"hjoneweek"},"content":"    public static Age parseAge(String age) throws ParseException {","lastModifiedDate":"2023-10-12"},{"lineNumber":156,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(age);","lastModifiedDate":"2023-10-12"},{"lineNumber":157,"author":{"gitId":"ryanongwx"},"content":"        int trimmedAge \u003d 0;","lastModifiedDate":"2023-10-17"},{"lineNumber":158,"author":{"gitId":"ryanongwx"},"content":"        try {","lastModifiedDate":"2023-10-17"},{"lineNumber":159,"author":{"gitId":"ryanongwx"},"content":"            trimmedAge \u003d Integer.parseInt(age.trim());","lastModifiedDate":"2023-10-17"},{"lineNumber":160,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":161,"author":{"gitId":"ryanongwx"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-10-17"},{"lineNumber":162,"author":{"gitId":"ryanongwx"},"content":"            throw new ParseException(Age.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-17"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":164,"author":{"gitId":"hjoneweek"},"content":"        if (!Age.isValidAge(trimmedAge)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":165,"author":{"gitId":"hjoneweek"},"content":"            throw new ParseException(Age.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":167,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":168,"author":{"gitId":"hjoneweek"},"content":"        return new Age(trimmedAge);","lastModifiedDate":"2023-10-12"},{"lineNumber":169,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":170,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":171,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":172,"author":{"gitId":"hjoneweek"},"content":"     * Parses a {@code String bloodType} into an {@code BloodType}.","lastModifiedDate":"2023-10-12"},{"lineNumber":173,"author":{"gitId":"hjoneweek"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-12"},{"lineNumber":174,"author":{"gitId":"hjoneweek"},"content":"     *","lastModifiedDate":"2023-10-12"},{"lineNumber":175,"author":{"gitId":"hjoneweek"},"content":"     * @throws ParseException if the given {@code allergy} is invalid.","lastModifiedDate":"2023-10-12"},{"lineNumber":176,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":177,"author":{"gitId":"hjoneweek"},"content":"    public static BloodType parseBloodType(String bloodType) throws ParseException {","lastModifiedDate":"2023-10-12"},{"lineNumber":178,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(bloodType);","lastModifiedDate":"2023-10-12"},{"lineNumber":179,"author":{"gitId":"hjoneweek"},"content":"        String trimmedBloodType \u003d bloodType.trim();","lastModifiedDate":"2023-10-12"},{"lineNumber":180,"author":{"gitId":"hjoneweek"},"content":"        if (!BloodType.isValidBloodType(trimmedBloodType)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":181,"author":{"gitId":"hjoneweek"},"content":"            throw new ParseException(BloodType.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":182,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":183,"author":{"gitId":"hjoneweek"},"content":"        return new BloodType(trimmedBloodType);","lastModifiedDate":"2023-10-12"},{"lineNumber":184,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":185,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":186,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":187,"author":{"gitId":"hjoneweek"},"content":"     * Parses a {@code String allergy} into an {@code Allergy}.","lastModifiedDate":"2023-10-12"},{"lineNumber":188,"author":{"gitId":"hjoneweek"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-12"},{"lineNumber":189,"author":{"gitId":"hjoneweek"},"content":"     *","lastModifiedDate":"2023-10-12"},{"lineNumber":190,"author":{"gitId":"hjoneweek"},"content":"     * @throws ParseException if the given {@code allergy} is invalid.","lastModifiedDate":"2023-10-12"},{"lineNumber":191,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":192,"author":{"gitId":"hjoneweek"},"content":"    public static Allergy parseAllergy(String allergy) throws ParseException {","lastModifiedDate":"2023-10-12"},{"lineNumber":193,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(allergy);","lastModifiedDate":"2023-10-12"},{"lineNumber":194,"author":{"gitId":"hjoneweek"},"content":"        String trimmedAllergy \u003d allergy.trim();","lastModifiedDate":"2023-10-12"},{"lineNumber":195,"author":{"gitId":"hjoneweek"},"content":"        if (!Allergy.isValidAllergy(trimmedAllergy)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":196,"author":{"gitId":"hjoneweek"},"content":"            throw new ParseException(Allergy.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":197,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":198,"author":{"gitId":"hjoneweek"},"content":"        return new Allergy(trimmedAllergy);","lastModifiedDate":"2023-10-12"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":202,"author":{"gitId":"hjoneweek"},"content":"     * Parses a {@code Collection\u003cString\u003e allergies} into an {@code Set\u003cAllergy\u003e}.","lastModifiedDate":"2023-10-12"},{"lineNumber":203,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":204,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":205,"author":{"gitId":"hjoneweek"},"content":"     * @throws ParseException if the given {@code allergy} is invalid.","lastModifiedDate":"2023-10-12"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":207,"author":{"gitId":"hjoneweek"},"content":"    public static Set\u003cAllergy\u003e parseAllergies(Collection\u003cString\u003e allergies) throws ParseException {","lastModifiedDate":"2023-10-12"},{"lineNumber":208,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(allergies);","lastModifiedDate":"2023-10-12"},{"lineNumber":209,"author":{"gitId":"hjoneweek"},"content":"        final Set\u003cAllergy\u003e allergiesSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-10-12"},{"lineNumber":210,"author":{"gitId":"hjoneweek"},"content":"        for (String allergy : allergies) {","lastModifiedDate":"2023-10-12"},{"lineNumber":211,"author":{"gitId":"hjoneweek"},"content":"            allergiesSet.add(parseAllergy(allergy));","lastModifiedDate":"2023-10-12"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":213,"author":{"gitId":"hjoneweek"},"content":"        return allergiesSet;","lastModifiedDate":"2023-10-12"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":217,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2023-10-12"},{"lineNumber":218,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-12"},{"lineNumber":219,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-10-12"},{"lineNumber":220,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2023-10-12"},{"lineNumber":221,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2023-10-12"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2023-10-12"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2023-10-12"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2023-10-12"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-10-18"},{"lineNumber":232,"author":{"gitId":"Darren159"},"content":"     * Parses a {@code String dateTime} into an {@code DateTime}.","lastModifiedDate":"2023-10-18"},{"lineNumber":233,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-15"},{"lineNumber":234,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-10-18"},{"lineNumber":235,"author":{"gitId":"hjoneweek"},"content":"     * @throws ParseException if the given {@code dateTime} is invalid.","lastModifiedDate":"2023-10-15"},{"lineNumber":236,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-10-18"},{"lineNumber":237,"author":{"gitId":"Darren159"},"content":"    public static DateTime parseDateTime(String dateTime) throws ParseException {","lastModifiedDate":"2023-10-18"},{"lineNumber":238,"author":{"gitId":"Darren159"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2023-10-18"},{"lineNumber":239,"author":{"gitId":"Darren159"},"content":"        String trimmedDateTime \u003d dateTime.trim();","lastModifiedDate":"2023-10-18"},{"lineNumber":240,"author":{"gitId":"Darren159"},"content":"        if (!DateTime.isValidDateTime(trimmedDateTime)) {","lastModifiedDate":"2023-10-18"},{"lineNumber":241,"author":{"gitId":"Darren159"},"content":"            throw new ParseException(DateTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-18"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":243,"author":{"gitId":"Darren159"},"content":"        return new DateTime(trimmedDateTime);","lastModifiedDate":"2023-10-18"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-10-15"},{"lineNumber":247,"author":{"gitId":"hjoneweek"},"content":"     * Parses a {@code String condition} into an {@code Condition}.","lastModifiedDate":"2023-10-15"},{"lineNumber":248,"author":{"gitId":"hjoneweek"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-15"},{"lineNumber":249,"author":{"gitId":"hjoneweek"},"content":"     *","lastModifiedDate":"2023-10-15"},{"lineNumber":250,"author":{"gitId":"hjoneweek"},"content":"     * @throws ParseException if the given {@code condition} is invalid.","lastModifiedDate":"2023-10-15"},{"lineNumber":251,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-15"},{"lineNumber":252,"author":{"gitId":"hjoneweek"},"content":"    public static Condition parseCondition(String condition) throws ParseException {","lastModifiedDate":"2023-10-20"},{"lineNumber":253,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(condition);","lastModifiedDate":"2023-10-15"},{"lineNumber":254,"author":{"gitId":"hjoneweek"},"content":"        String trimmedCondition \u003d condition.trim();","lastModifiedDate":"2023-10-15"},{"lineNumber":255,"author":{"gitId":"hjoneweek"},"content":"        if (!Condition.isValidCondition(trimmedCondition)) {","lastModifiedDate":"2023-10-20"},{"lineNumber":256,"author":{"gitId":"Darren159"},"content":"            throw new ParseException(Condition.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-20"},{"lineNumber":257,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":258,"author":{"gitId":"hjoneweek"},"content":"        return new Condition(trimmedCondition);","lastModifiedDate":"2023-10-15"},{"lineNumber":259,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":260,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":261,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-15"},{"lineNumber":262,"author":{"gitId":"Darren159"},"content":"     * Parses a {@code Collection\u003cString\u003e condtions} into an","lastModifiedDate":"2023-10-30"},{"lineNumber":263,"author":{"gitId":"Darren159"},"content":"     * {@code List\u003cCondition\u003e}.","lastModifiedDate":"2023-10-30"},{"lineNumber":264,"author":{"gitId":"hjoneweek"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-15"},{"lineNumber":265,"author":{"gitId":"hjoneweek"},"content":"     *","lastModifiedDate":"2023-10-15"},{"lineNumber":266,"author":{"gitId":"hjoneweek"},"content":"     * @throws ParseException if the given {@code condition} is invalid.","lastModifiedDate":"2023-10-15"},{"lineNumber":267,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-15"},{"lineNumber":268,"author":{"gitId":"hjoneweek"},"content":"    public static List\u003cCondition\u003e parseConditions(Collection\u003cString\u003e conditions) throws ParseException {","lastModifiedDate":"2023-10-15"},{"lineNumber":269,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(conditions);","lastModifiedDate":"2023-10-15"},{"lineNumber":270,"author":{"gitId":"hjoneweek"},"content":"        final List\u003cCondition\u003e conditionsList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-15"},{"lineNumber":271,"author":{"gitId":"hjoneweek"},"content":"        for (String condition : conditions) {","lastModifiedDate":"2023-10-15"},{"lineNumber":272,"author":{"gitId":"hjoneweek"},"content":"            conditionsList.add(parseCondition(condition));","lastModifiedDate":"2023-10-15"},{"lineNumber":273,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-15"},{"lineNumber":274,"author":{"gitId":"hjoneweek"},"content":"        return conditionsList;","lastModifiedDate":"2023-10-15"},{"lineNumber":275,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":276,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":277,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":278,"author":{"gitId":"hjoneweek"},"content":"     * Parses a {@code String medication} into an {@code Medication}.","lastModifiedDate":"2023-10-26"},{"lineNumber":279,"author":{"gitId":"hjoneweek"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-26"},{"lineNumber":280,"author":{"gitId":"hjoneweek"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":281,"author":{"gitId":"hjoneweek"},"content":"     * @throws ParseException if the given {@code medication} is invalid.","lastModifiedDate":"2023-10-26"},{"lineNumber":282,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":283,"author":{"gitId":"hjoneweek"},"content":"    public static Medication parseMedication(String medication) throws ParseException {","lastModifiedDate":"2023-10-26"},{"lineNumber":284,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(medication);","lastModifiedDate":"2023-10-26"},{"lineNumber":285,"author":{"gitId":"hjoneweek"},"content":"        String trimmedMedication \u003d medication.trim();","lastModifiedDate":"2023-10-26"},{"lineNumber":286,"author":{"gitId":"hjoneweek"},"content":"        if (!Medication.isValidMedication(trimmedMedication)) {","lastModifiedDate":"2023-10-26"},{"lineNumber":287,"author":{"gitId":"hjoneweek"},"content":"            throw new ParseException(Medication.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-26"},{"lineNumber":288,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":289,"author":{"gitId":"hjoneweek"},"content":"        return new Medication(trimmedMedication);","lastModifiedDate":"2023-10-26"},{"lineNumber":290,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":291,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":292,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":293,"author":{"gitId":"Darren159"},"content":"     * Parses a {@code Collection\u003cString\u003e medications} into an","lastModifiedDate":"2023-10-30"},{"lineNumber":294,"author":{"gitId":"Darren159"},"content":"     * {@code List\u003cMedication\u003e}.","lastModifiedDate":"2023-10-30"},{"lineNumber":295,"author":{"gitId":"hjoneweek"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-26"},{"lineNumber":296,"author":{"gitId":"hjoneweek"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":297,"author":{"gitId":"hjoneweek"},"content":"     * @throws ParseException if the given {@code medication} is invalid.","lastModifiedDate":"2023-10-26"},{"lineNumber":298,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":299,"author":{"gitId":"hjoneweek"},"content":"    public static List\u003cMedication\u003e parseMedications(Collection\u003cString\u003e medications) throws ParseException {","lastModifiedDate":"2023-10-26"},{"lineNumber":300,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(medications);","lastModifiedDate":"2023-10-26"},{"lineNumber":301,"author":{"gitId":"hjoneweek"},"content":"        final List\u003cMedication\u003e medicationList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-26"},{"lineNumber":302,"author":{"gitId":"hjoneweek"},"content":"        for (String medication : medications) {","lastModifiedDate":"2023-10-26"},{"lineNumber":303,"author":{"gitId":"hjoneweek"},"content":"            medicationList.add(parseMedication(medication));","lastModifiedDate":"2023-10-26"},{"lineNumber":304,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":305,"author":{"gitId":"hjoneweek"},"content":"        return medicationList;","lastModifiedDate":"2023-10-26"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":307,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"hjoneweek":110,"Darren159":47,"-":110,"adammangzijun":33,"ryanongwx":7}},{"path":"src/main/java/seedu/address/logic/parser/PinCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.PinCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":" * Parses input arguments and creates a new PinCommand object","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"public class PinCommandParser implements Parser\u003cPinCommand\u003e {","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"     * Parses the given {@code String} of arguments in the context of the PinCommand","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"     * and returns a PinCommand object for execution.","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"    public PinCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"        try {","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"            return new PinCommand(index);","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"            throw new ParseException(","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PinCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"Darren159":29}},{"path":"src/main/java/seedu/address/logic/parser/UnpinCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.UnpinCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":" * Parses input arguments and creates a new UnpinCommand object","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"public class UnpinCommandParser implements Parser\u003cUnpinCommand\u003e {","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"     * Parses the given {@code String} of arguments in the context of the UnpinCommand","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"     * and returns a UnpinCommand object for execution.","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"    public UnpinCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"        try {","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"            return new UnpinCommand(index);","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"            throw new ParseException(","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnpinCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"Darren159":29}},{"path":"src/main/java/seedu/address/logic/parser/ViewCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Clin-lyx"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"Clin-lyx"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.logic.commands.ViewCommand;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"Clin-lyx"},"content":"/**","lastModifiedDate":"2023-10-21"},{"lineNumber":10,"author":{"gitId":"Clin-lyx"},"content":" * Parse input and create a View Command.","lastModifiedDate":"2023-10-21"},{"lineNumber":11,"author":{"gitId":"Clin-lyx"},"content":" */","lastModifiedDate":"2023-10-21"},{"lineNumber":12,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":13,"author":{"gitId":"Clin-lyx"},"content":"public class ViewCommandParser implements Parser\u003cViewCommand\u003e {","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"Clin-lyx"},"content":"    @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"Clin-lyx"},"content":"    public ViewCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"Clin-lyx"},"content":"        Index index;","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"Clin-lyx"},"content":"        try {","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"Clin-lyx"},"content":"            index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"Clin-lyx"},"content":"            return new ViewCommand(index);","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"Clin-lyx"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"Clin-lyx"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"Clin-lyx"},"content":"                    ViewCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"Clin-lyx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"Clin-lyx"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"Clin-lyx":27}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-11-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"Clin-lyx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2023-10-21"},{"lineNumber":17,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.model.record.UniqueRecordList;","lastModifiedDate":"2023-10-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":26,"author":{"gitId":"Clin-lyx"},"content":"    private final UniquePersonList personBeingViewed;","lastModifiedDate":"2023-10-21"},{"lineNumber":27,"author":{"gitId":"Clin-lyx"},"content":"    private final UniqueRecordList records;","lastModifiedDate":"2023-10-21"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"    private final UniqueAppointmentList appointments;","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"Clin-lyx"},"content":"    private List\u003cIndex\u003e patientIndex;","lastModifiedDate":"2023-11-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block,","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"     * sometimes used to avoid duplication","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"     * between constructors. See","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"     * https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"     * Note that non-static init blocks are not recommended to use. There are other","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"     * ways to avoid duplication","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":42,"author":{"gitId":"Clin-lyx"},"content":"        records \u003d new UniqueRecordList();","lastModifiedDate":"2023-10-21"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"        appointments \u003d new UniqueAppointmentList();","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"Clin-lyx"},"content":"        personBeingViewed \u003d new UniquePersonList();","lastModifiedDate":"2023-10-21"},{"lineNumber":45,"author":{"gitId":"Clin-lyx"},"content":"        patientIndex \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-11-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"    public AddressBook() {","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2018-03-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":69,"author":{"gitId":"Clin-lyx"},"content":"    public void setRecords(Person person, Index index) {","lastModifiedDate":"2023-11-07"},{"lineNumber":70,"author":{"gitId":"Clin-lyx"},"content":"        ArrayList\u003cPerson\u003e beingViewed \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-21"},{"lineNumber":71,"author":{"gitId":"Clin-lyx"},"content":"        beingViewed.add(person);","lastModifiedDate":"2023-10-21"},{"lineNumber":72,"author":{"gitId":"Clin-lyx"},"content":"        this.patientIndex.clear();","lastModifiedDate":"2023-11-07"},{"lineNumber":73,"author":{"gitId":"Clin-lyx"},"content":"        this.patientIndex.add(index);","lastModifiedDate":"2023-11-07"},{"lineNumber":74,"author":{"gitId":"Clin-lyx"},"content":"        this.personBeingViewed.setPersons(beingViewed);","lastModifiedDate":"2023-10-21"},{"lineNumber":75,"author":{"gitId":"Clin-lyx"},"content":"        this.records.setRecords(person.getRecords());","lastModifiedDate":"2023-10-21"},{"lineNumber":76,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":84,"author":{"gitId":"Darren159"},"content":"        List\u003cPerson\u003e fullList \u003d newData.getPersonList();","lastModifiedDate":"2023-11-01"},{"lineNumber":85,"author":{"gitId":"Darren159"},"content":"        setPersons(fullList);","lastModifiedDate":"2023-11-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"Darren159"},"content":"     * Returns true if a person with the same identity as {@code person} exists in","lastModifiedDate":"2023-11-01"},{"lineNumber":92,"author":{"gitId":"Darren159"},"content":"     * the address book.","lastModifiedDate":"2023-11-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":99,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-11-08"},{"lineNumber":100,"author":{"gitId":"hjoneweek"},"content":"     * Returns true if the same record under the patient at {@code index} exists in the Medbook.","lastModifiedDate":"2023-11-08"},{"lineNumber":101,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-11-08"},{"lineNumber":102,"author":{"gitId":"hjoneweek"},"content":"    public boolean hasRecord(Record record, Index index) {","lastModifiedDate":"2023-11-08"},{"lineNumber":103,"author":{"gitId":"hjoneweek"},"content":"        requireAllNonNull(record, index);","lastModifiedDate":"2023-11-08"},{"lineNumber":104,"author":{"gitId":"hjoneweek"},"content":"        return persons.asUnmodifiableObservableList().get(index.getZeroBased()).getRecords().contains(record);","lastModifiedDate":"2023-11-08"},{"lineNumber":105,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":106,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":116,"author":{"gitId":"Darren159"},"content":"     * Replaces the given person {@code target} in the list with","lastModifiedDate":"2023-11-01"},{"lineNumber":117,"author":{"gitId":"Darren159"},"content":"     * {@code editedPerson}.","lastModifiedDate":"2023-11-01"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":119,"author":{"gitId":"Darren159"},"content":"     * The person identity of {@code editedPerson} must not be the same as another","lastModifiedDate":"2023-11-01"},{"lineNumber":120,"author":{"gitId":"Darren159"},"content":"     * existing person in the address book.","lastModifiedDate":"2023-11-01"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                .add(\"persons\", persons)","lastModifiedDate":"2019-02-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":150,"author":{"gitId":"Clin-lyx"},"content":"    public ObservableList\u003cRecord\u003e getRecordList() {","lastModifiedDate":"2023-10-21"},{"lineNumber":151,"author":{"gitId":"Clin-lyx"},"content":"        return records.asUnmodifiableObservableList();","lastModifiedDate":"2023-10-21"},{"lineNumber":152,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":153,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":154,"author":{"gitId":"Clin-lyx"},"content":"    public List\u003cIndex\u003e getPatientIndex() {","lastModifiedDate":"2023-11-08"},{"lineNumber":155,"author":{"gitId":"Clin-lyx"},"content":"        return this.patientIndex;","lastModifiedDate":"2023-11-08"},{"lineNumber":156,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":157,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":158,"author":{"gitId":"Darren159"},"content":"    public ObservableList\u003cAppointment\u003e getAppointmentList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":159,"author":{"gitId":"Darren159"},"content":"        resetAppointmentList();","lastModifiedDate":"2023-11-01"},{"lineNumber":160,"author":{"gitId":"Darren159"},"content":"        return appointments.asUnmodifiableObservableList();","lastModifiedDate":"2023-11-01"},{"lineNumber":161,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":162,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":163,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":164,"author":{"gitId":"Darren159"},"content":"     * Resets the appointment list to include all appointments from all persons.","lastModifiedDate":"2023-11-01"},{"lineNumber":165,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":166,"author":{"gitId":"Darren159"},"content":"    public void resetAppointmentList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":167,"author":{"gitId":"Darren159"},"content":"        UniqueAppointmentList newList \u003d new UniqueAppointmentList();","lastModifiedDate":"2023-11-01"},{"lineNumber":168,"author":{"gitId":"Darren159"},"content":"        for (Person person : persons) {","lastModifiedDate":"2023-11-01"},{"lineNumber":169,"author":{"gitId":"Darren159"},"content":"            for (Appointment appointment : person.getAppointments()) {","lastModifiedDate":"2023-11-01"},{"lineNumber":170,"author":{"gitId":"Darren159"},"content":"                newList.add(appointment);","lastModifiedDate":"2023-11-01"},{"lineNumber":171,"author":{"gitId":"Darren159"},"content":"            }","lastModifiedDate":"2023-11-01"},{"lineNumber":172,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":173,"author":{"gitId":"Darren159"},"content":"        appointments.setAppointments(newList);","lastModifiedDate":"2023-11-01"},{"lineNumber":174,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":175,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":176,"author":{"gitId":"Clin-lyx"},"content":"    public ObservableList\u003cPerson\u003e getPersonBeingViewed() {","lastModifiedDate":"2023-10-21"},{"lineNumber":177,"author":{"gitId":"Clin-lyx"},"content":"        return personBeingViewed.asUnmodifiableObservableList();","lastModifiedDate":"2023-10-21"},{"lineNumber":178,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":179,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        if (!(other instanceof AddressBook)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        AddressBook otherAddressBook \u003d (AddressBook) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        return persons.equals(otherAddressBook.persons);","lastModifiedDate":"2023-07-13"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        return persons.hashCode();","lastModifiedDate":"2018-03-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":199,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hjoneweek":9,"Darren159":38,"Clin-lyx":30,"-":122}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"Clin-lyx"},"content":"import java.util.List;","lastModifiedDate":"2023-11-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-07"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2023-10-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"    Predicate\u003cRecord\u003e PREDICATE_SHOW_ALL_RECORDS \u003d unused -\u003e true;","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"ryanongwx"},"content":"     * Returns true if a person with the same identity as {@code person} exists in","lastModifiedDate":"2023-10-24"},{"lineNumber":65,"author":{"gitId":"ryanongwx"},"content":"     * the address book.","lastModifiedDate":"2023-10-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-11-08"},{"lineNumber":70,"author":{"gitId":"hjoneweek"},"content":"     * Returns true if the same record exists under the patient in the Medbook","lastModifiedDate":"2023-11-08"},{"lineNumber":71,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-11-08"},{"lineNumber":72,"author":{"gitId":"hjoneweek"},"content":"    boolean hasRecord(Record record, Index index);","lastModifiedDate":"2023-11-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"ryanongwx"},"content":"     * The person identity of {@code editedPerson} must not be the same as another","lastModifiedDate":"2023-10-24"},{"lineNumber":89,"author":{"gitId":"ryanongwx"},"content":"     * existing person in the address book.","lastModifiedDate":"2023-10-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":97,"author":{"gitId":"ryanongwx"},"content":"     * Updates the filter of the filtered person list to filter by the given","lastModifiedDate":"2023-10-24"},{"lineNumber":98,"author":{"gitId":"ryanongwx"},"content":"     * {@code predicate}.","lastModifiedDate":"2023-10-24"},{"lineNumber":99,"author":{"gitId":"ryanongwx"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":100,"author":{"gitId":"Darren159"},"content":"     * @throws NullPointerException","lastModifiedDate":"2023-11-01"},{"lineNumber":101,"author":{"gitId":"Darren159"},"content":"     *             if {@code predicate} is null.","lastModifiedDate":"2023-11-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":104,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":105,"author":{"gitId":"Darren159"},"content":"    /** Returns an unmodifiable view of the pinned person list */","lastModifiedDate":"2023-10-13"},{"lineNumber":106,"author":{"gitId":"Darren159"},"content":"    ObservableList\u003cPerson\u003e getPinnedPersonList();","lastModifiedDate":"2023-10-13"},{"lineNumber":107,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":108,"author":{"gitId":"Darren159"},"content":"    /** Returns an unmodifiable view of the filtered appointment list */","lastModifiedDate":"2023-11-01"},{"lineNumber":109,"author":{"gitId":"Darren159"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();","lastModifiedDate":"2023-11-01"},{"lineNumber":110,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":111,"author":{"gitId":"Darren159"},"content":"    void resetAppointmentList();","lastModifiedDate":"2023-11-01"},{"lineNumber":112,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":113,"author":{"gitId":"Clin-lyx"},"content":"    ObservableList\u003cRecord\u003e getRecordList();","lastModifiedDate":"2023-10-21"},{"lineNumber":114,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":115,"author":{"gitId":"Darren159"},"content":"    /** Returns an unmodifiable view of the filtered record list */","lastModifiedDate":"2023-11-01"},{"lineNumber":116,"author":{"gitId":"Darren159"},"content":"    ObservableList\u003cRecord\u003e getFilteredRecordList();","lastModifiedDate":"2023-11-01"},{"lineNumber":117,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":118,"author":{"gitId":"Clin-lyx"},"content":"    void updateRecordList(Person person, Index index);","lastModifiedDate":"2023-11-07"},{"lineNumber":119,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":120,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":121,"author":{"gitId":"Darren159"},"content":"     * Updates the filter of the filtered record list to filter by the given","lastModifiedDate":"2023-11-01"},{"lineNumber":122,"author":{"gitId":"Darren159"},"content":"     * {@code predicate}.","lastModifiedDate":"2023-11-01"},{"lineNumber":123,"author":{"gitId":"Darren159"},"content":"     *","lastModifiedDate":"2023-11-01"},{"lineNumber":124,"author":{"gitId":"Darren159"},"content":"     * @throws NullPointerException","lastModifiedDate":"2023-11-01"},{"lineNumber":125,"author":{"gitId":"Darren159"},"content":"     *             if {@code predicate} is null.","lastModifiedDate":"2023-11-01"},{"lineNumber":126,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":127,"author":{"gitId":"Darren159"},"content":"    void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate);","lastModifiedDate":"2023-11-01"},{"lineNumber":128,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":129,"author":{"gitId":"Clin-lyx"},"content":"    ObservableList\u003cPerson\u003e getPersonBeingViewed();","lastModifiedDate":"2023-10-21"},{"lineNumber":130,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":131,"author":{"gitId":"Clin-lyx"},"content":"    List\u003cIndex\u003e getPatientIndex();","lastModifiedDate":"2023-11-07"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"Darren159":26,"hjoneweek":4,"Clin-lyx":10,"-":84,"ryanongwx":8}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"Clin-lyx"},"content":"import java.util.List;","lastModifiedDate":"2023-11-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":15,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-07"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2023-10-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":25,"author":{"gitId":"ryanongwx"},"content":"    private static ModelManager instance;","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"    private final FilteredList\u003cAppointment\u003e filteredAppointments;","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"    private final FilteredList\u003cRecord\u003e filteredRecords;","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"ryanongwx"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"        filteredAppointments \u003d new FilteredList\u003c\u003e(this.addressBook.getAppointmentList());","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"        filteredRecords \u003d new FilteredList\u003c\u003e(this.addressBook.getRecordList());","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"ryanongwx"},"content":"        instance \u003d this;","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"ryanongwx"},"content":"    public static Model getInstance() {","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"ryanongwx"},"content":"        if (instance \u003d\u003d null) {","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"ryanongwx"},"content":"            instance \u003d new ModelManager(/* necessary initializations */);","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"ryanongwx"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"ryanongwx"},"content":"        return instance;","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"ryanongwx"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"ryanongwx"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"ryanongwx"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"ryanongwx"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook","lastModifiedDate":"2023-10-24"},{"lineNumber":96,"author":{"gitId":"ryanongwx"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":114,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-11-08"},{"lineNumber":115,"author":{"gitId":"hjoneweek"},"content":"    public boolean hasRecord(Record record, Index index) {","lastModifiedDate":"2023-11-08"},{"lineNumber":116,"author":{"gitId":"hjoneweek"},"content":"        requireAllNonNull(record, index);","lastModifiedDate":"2023-11-08"},{"lineNumber":117,"author":{"gitId":"hjoneweek"},"content":"        return addressBook.hasRecord(record, index);","lastModifiedDate":"2023-11-08"},{"lineNumber":118,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":119,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":137,"author":{"gitId":"ryanongwx"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors","lastModifiedDate":"2023-10-24"},{"lineNumber":138,"author":{"gitId":"ryanongwx"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-24"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":141,"author":{"gitId":"ryanongwx"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the","lastModifiedDate":"2023-10-24"},{"lineNumber":142,"author":{"gitId":"ryanongwx"},"content":"     * internal list of","lastModifiedDate":"2023-10-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":156,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":157,"author":{"gitId":"Darren159"},"content":"    public ObservableList\u003cPerson\u003e getPinnedPersonList() {","lastModifiedDate":"2023-10-13"},{"lineNumber":158,"author":{"gitId":"Darren159"},"content":"        FilteredList\u003cPerson\u003e pinnedPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2023-10-13"},{"lineNumber":159,"author":{"gitId":"Darren159"},"content":"        pinnedPersons.setPredicate(person -\u003e person.isPinned());","lastModifiedDate":"2023-10-13"},{"lineNumber":160,"author":{"gitId":"Darren159"},"content":"        return pinnedPersons;","lastModifiedDate":"2023-10-13"},{"lineNumber":161,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":162,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":163,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":164,"author":{"gitId":"Darren159"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the","lastModifiedDate":"2023-11-01"},{"lineNumber":165,"author":{"gitId":"Darren159"},"content":"     * internal list of","lastModifiedDate":"2023-11-01"},{"lineNumber":166,"author":{"gitId":"Darren159"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2023-11-01"},{"lineNumber":167,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":168,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":169,"author":{"gitId":"Darren159"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":170,"author":{"gitId":"Darren159"},"content":"        return filteredAppointments;","lastModifiedDate":"2023-11-01"},{"lineNumber":171,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":172,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":173,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":174,"author":{"gitId":"Darren159"},"content":"    public void resetAppointmentList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":175,"author":{"gitId":"Darren159"},"content":"        this.addressBook.resetAppointmentList();","lastModifiedDate":"2023-11-01"},{"lineNumber":176,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":177,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":178,"author":{"gitId":"Clin-lyx"},"content":"    @Override","lastModifiedDate":"2023-10-21"},{"lineNumber":179,"author":{"gitId":"Clin-lyx"},"content":"    public ObservableList\u003cRecord\u003e getRecordList() {","lastModifiedDate":"2023-10-21"},{"lineNumber":180,"author":{"gitId":"Clin-lyx"},"content":"        return this.addressBook.getRecordList();","lastModifiedDate":"2023-10-21"},{"lineNumber":181,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":182,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":183,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":184,"author":{"gitId":"Darren159"},"content":"    public ObservableList\u003cRecord\u003e getFilteredRecordList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":185,"author":{"gitId":"Darren159"},"content":"        return filteredRecords;","lastModifiedDate":"2023-11-01"},{"lineNumber":186,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":187,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":188,"author":{"gitId":"Clin-lyx"},"content":"    @Override","lastModifiedDate":"2023-10-21"},{"lineNumber":189,"author":{"gitId":"Clin-lyx"},"content":"    public void updateRecordList(Person person, Index index) {","lastModifiedDate":"2023-11-07"},{"lineNumber":190,"author":{"gitId":"Clin-lyx"},"content":"        requireAllNonNull(person, index);","lastModifiedDate":"2023-11-08"},{"lineNumber":191,"author":{"gitId":"Clin-lyx"},"content":"        this.addressBook.setRecords(person, index);","lastModifiedDate":"2023-11-07"},{"lineNumber":192,"author":{"gitId":"Darren159"},"content":"        updateFilteredRecordList(PREDICATE_SHOW_ALL_RECORDS);","lastModifiedDate":"2023-11-01"},{"lineNumber":193,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":194,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":195,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":196,"author":{"gitId":"Darren159"},"content":"    public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {","lastModifiedDate":"2023-11-01"},{"lineNumber":197,"author":{"gitId":"Darren159"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2023-11-01"},{"lineNumber":198,"author":{"gitId":"Darren159"},"content":"        filteredRecords.setPredicate(predicate);","lastModifiedDate":"2023-11-01"},{"lineNumber":199,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":200,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":201,"author":{"gitId":"Clin-lyx"},"content":"    @Override","lastModifiedDate":"2023-10-21"},{"lineNumber":202,"author":{"gitId":"Clin-lyx"},"content":"    public ObservableList\u003cPerson\u003e getPersonBeingViewed() {","lastModifiedDate":"2023-10-21"},{"lineNumber":203,"author":{"gitId":"Clin-lyx"},"content":"        return this.addressBook.getPersonBeingViewed();","lastModifiedDate":"2023-10-21"},{"lineNumber":204,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":205,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":206,"author":{"gitId":"Clin-lyx"},"content":"    @Override","lastModifiedDate":"2023-11-07"},{"lineNumber":207,"author":{"gitId":"Clin-lyx"},"content":"    public List\u003cIndex\u003e getPatientIndex() {","lastModifiedDate":"2023-11-07"},{"lineNumber":208,"author":{"gitId":"Clin-lyx"},"content":"        return this.addressBook.getPatientIndex();","lastModifiedDate":"2023-11-07"},{"lineNumber":209,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":210,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-07-13"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        if (!(other instanceof ModelManager)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        ModelManager otherModelManager \u003d (ModelManager) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        return addressBook.equals(otherModelManager.addressBook)","lastModifiedDate":"2023-07-13"},{"lineNumber":224,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(otherModelManager.userPrefs)","lastModifiedDate":"2023-07-13"},{"lineNumber":225,"author":{"gitId":"Darren159"},"content":"                \u0026\u0026 filteredPersons.equals(otherModelManager.filteredPersons)","lastModifiedDate":"2023-11-01"},{"lineNumber":226,"author":{"gitId":"Darren159"},"content":"                \u0026\u0026 filteredAppointments.equals(otherModelManager.filteredAppointments)","lastModifiedDate":"2023-11-01"},{"lineNumber":227,"author":{"gitId":"Darren159"},"content":"                \u0026\u0026 filteredRecords.equals(otherModelManager.filteredRecords);","lastModifiedDate":"2023-11-01"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":229,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Darren159":42,"hjoneweek":6,"Clin-lyx":24,"-":139,"ryanongwx":18}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"medbook.json\");","lastModifiedDate":"2023-10-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        UserPrefs otherUserPrefs \u003d (UserPrefs) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return guiSettings.equals(otherUserPrefs.guiSettings)","lastModifiedDate":"2023-07-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                \u0026\u0026 addressBookFilePath.equals(otherUserPrefs.addressBookFilePath);","lastModifiedDate":"2023-07-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath);","lastModifiedDate":"2018-08-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Darren159":1,"-":87}},{"path":"src/main/java/seedu/address/model/appointment/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-17"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-17"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-17"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.DateTime;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Name;","lastModifiedDate":"2023-10-22"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Nric;","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-17"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":" * Represents an Appointment in the address book.","lastModifiedDate":"2023-10-17"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":" * Guarantees: details are present and not null, field values are validated,","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":" * immutable.","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-17"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"public class Appointment {","lastModifiedDate":"2023-10-17"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"    // Identity fields","lastModifiedDate":"2023-10-17"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"    private final Name name;","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"    private final DateTime dateTime;","lastModifiedDate":"2023-10-17"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"    private final Nric nric;","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-17"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2023-10-17"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-17"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"    public Appointment(Name name, DateTime dateTime, Nric nric) {","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"        requireAllNonNull(name, dateTime);","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2023-10-17"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"    public Name getName() {","lastModifiedDate":"2023-10-19"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"        return name;","lastModifiedDate":"2023-10-19"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"    public DateTime getDateTime() {","lastModifiedDate":"2023-10-17"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"        return dateTime;","lastModifiedDate":"2023-10-17"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"    public Nric getNric() {","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"        return nric;","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-17"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-17"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-17"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"            return true;","lastModifiedDate":"2023-10-17"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-17"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"        if (!(other instanceof Appointment)) {","lastModifiedDate":"2023-10-17"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"            return false;","lastModifiedDate":"2023-10-17"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"        Appointment otherAppointment \u003d (Appointment) other;","lastModifiedDate":"2023-10-17"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"        return name.equals(otherAppointment.name)","lastModifiedDate":"2023-10-19"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"                \u0026\u0026 dateTime.equals(otherAppointment.dateTime)","lastModifiedDate":"2023-11-01"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"                \u0026\u0026 ((nric \u003d\u003d null \u0026\u0026 otherAppointment.nric \u003d\u003d null) || nric.equals(otherAppointment.nric));","lastModifiedDate":"2023-11-01"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-17"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-17"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2023-10-17"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"        return Objects.hash(name, dateTime);","lastModifiedDate":"2023-10-19"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-17"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"    public String toString() {","lastModifiedDate":"2023-10-17"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-17"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"                .add(\"name\", name)","lastModifiedDate":"2023-10-19"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"                .add(\"dateTime\", dateTime)","lastModifiedDate":"2023-10-17"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"                .add(\"nric\", nric)","lastModifiedDate":"2023-11-01"},{"lineNumber":75,"author":{"gitId":"Darren159"},"content":"                .toString();","lastModifiedDate":"2023-10-17"},{"lineNumber":76,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":77,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-17"}],"authorContributionMap":{"Darren159":77}},{"path":"src/main/java/seedu/address/model/appointment/UniqueAppointmentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-18"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-18"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-10-18"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import java.util.List;","lastModifiedDate":"2023-10-18"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-10-18"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-18"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-18"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":" * A list of appointments that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2023-10-18"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":" * An appointment is considered unique by comparing using {@code Appointment#equals(Appointment)}.","lastModifiedDate":"2023-10-18"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":" *","lastModifiedDate":"2023-10-18"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2023-10-18"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":" *","lastModifiedDate":"2023-10-18"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":" * @see Appointment#equals(Appointment)","lastModifiedDate":"2023-10-18"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-18"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"public class UniqueAppointmentList implements Iterable\u003cAppointment\u003e {","lastModifiedDate":"2023-10-18"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-10-18"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"    private final ObservableList\u003cAppointment\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2023-10-18"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2023-10-18"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-18"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"     * Returns true if the list contains an equivalent appointment as the given argument.","lastModifiedDate":"2023-10-18"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-18"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"    public boolean contains(Appointment toCheck) {","lastModifiedDate":"2023-10-18"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2023-10-18"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"        return internalList.stream().anyMatch(toCheck::equals);","lastModifiedDate":"2023-10-18"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-18"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"     * Adds a appointment to the list.","lastModifiedDate":"2023-10-18"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"     * The appointment must not already exist in the list.","lastModifiedDate":"2023-10-18"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-18"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"    public void add(Appointment toAdd) {","lastModifiedDate":"2023-10-18"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2023-10-18"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2023-10-18"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2023-10-18"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2023-10-18"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-18"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"     * Replaces the appointment {@code target} in the list with {@code editedappointment}.","lastModifiedDate":"2023-10-18"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2023-10-18"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"     * The appointment identity of {@code editedappointment} must not be the same as","lastModifiedDate":"2023-10-18"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"     * another existing appointment in the list.","lastModifiedDate":"2023-10-18"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-18"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"    public void setAppointment(Appointment target, Appointment editedappointment) {","lastModifiedDate":"2023-10-19"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"        requireAllNonNull(target, editedappointment);","lastModifiedDate":"2023-10-18"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2023-10-18"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2023-10-18"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2023-10-18"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"        if (!target.equals(editedappointment) \u0026\u0026 contains(editedappointment)) {","lastModifiedDate":"2023-10-18"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2023-10-18"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"        internalList.set(index, editedappointment);","lastModifiedDate":"2023-10-18"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-18"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"     * Removes the equivalent appointment from the list.","lastModifiedDate":"2023-10-18"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"     * The appointment must exist in the list.","lastModifiedDate":"2023-10-18"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-18"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"    public void remove(Appointment toRemove) {","lastModifiedDate":"2023-10-18"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2023-10-18"},{"lineNumber":75,"author":{"gitId":"Darren159"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2023-10-18"},{"lineNumber":76,"author":{"gitId":"Darren159"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2023-10-18"},{"lineNumber":77,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":78,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":80,"author":{"gitId":"Darren159"},"content":"    public void setAppointments(UniqueAppointmentList replacement) {","lastModifiedDate":"2023-10-18"},{"lineNumber":81,"author":{"gitId":"Darren159"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2023-10-18"},{"lineNumber":82,"author":{"gitId":"Darren159"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2023-10-18"},{"lineNumber":83,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":84,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":85,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-18"},{"lineNumber":86,"author":{"gitId":"Darren159"},"content":"     * Replaces the contents of this list with {@code appointments}.","lastModifiedDate":"2023-10-18"},{"lineNumber":87,"author":{"gitId":"Darren159"},"content":"     * {@code appointments} must not contain duplicate appointments.","lastModifiedDate":"2023-10-18"},{"lineNumber":88,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-18"},{"lineNumber":89,"author":{"gitId":"Darren159"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2023-10-19"},{"lineNumber":90,"author":{"gitId":"Darren159"},"content":"        requireAllNonNull(appointments);","lastModifiedDate":"2023-10-18"},{"lineNumber":91,"author":{"gitId":"Darren159"},"content":"        if (!appointmentsAreUnique(appointments)) {","lastModifiedDate":"2023-10-18"},{"lineNumber":92,"author":{"gitId":"Darren159"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2023-10-18"},{"lineNumber":93,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":94,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":95,"author":{"gitId":"Darren159"},"content":"        internalList.setAll(appointments);","lastModifiedDate":"2023-10-18"},{"lineNumber":96,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":97,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":98,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-18"},{"lineNumber":99,"author":{"gitId":"Darren159"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2023-10-18"},{"lineNumber":100,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-18"},{"lineNumber":101,"author":{"gitId":"Darren159"},"content":"    public ObservableList\u003cAppointment\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2023-10-18"},{"lineNumber":102,"author":{"gitId":"Darren159"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2023-10-18"},{"lineNumber":103,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":104,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":105,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-18"},{"lineNumber":106,"author":{"gitId":"Darren159"},"content":"    public Iterator\u003cAppointment\u003e iterator() {","lastModifiedDate":"2023-10-18"},{"lineNumber":107,"author":{"gitId":"Darren159"},"content":"        return internalList.iterator();","lastModifiedDate":"2023-10-18"},{"lineNumber":108,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":109,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":110,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-18"},{"lineNumber":111,"author":{"gitId":"Darren159"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-18"},{"lineNumber":112,"author":{"gitId":"Darren159"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-18"},{"lineNumber":113,"author":{"gitId":"Darren159"},"content":"            return true;","lastModifiedDate":"2023-10-18"},{"lineNumber":114,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":115,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":116,"author":{"gitId":"Darren159"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-18"},{"lineNumber":117,"author":{"gitId":"Darren159"},"content":"        if (!(other instanceof UniqueAppointmentList)) {","lastModifiedDate":"2023-10-18"},{"lineNumber":118,"author":{"gitId":"Darren159"},"content":"            return false;","lastModifiedDate":"2023-10-18"},{"lineNumber":119,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":120,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":121,"author":{"gitId":"Darren159"},"content":"        UniqueAppointmentList otherUniqueAppointmentList \u003d (UniqueAppointmentList) other;","lastModifiedDate":"2023-10-18"},{"lineNumber":122,"author":{"gitId":"Darren159"},"content":"        return internalList.equals(otherUniqueAppointmentList.internalList);","lastModifiedDate":"2023-10-18"},{"lineNumber":123,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":124,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":125,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-18"},{"lineNumber":126,"author":{"gitId":"Darren159"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-18"},{"lineNumber":127,"author":{"gitId":"Darren159"},"content":"        return internalList.hashCode();","lastModifiedDate":"2023-10-18"},{"lineNumber":128,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":129,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":130,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-18"},{"lineNumber":131,"author":{"gitId":"Darren159"},"content":"    public String toString() {","lastModifiedDate":"2023-10-18"},{"lineNumber":132,"author":{"gitId":"Darren159"},"content":"        return internalList.toString();","lastModifiedDate":"2023-10-18"},{"lineNumber":133,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":134,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":135,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-18"},{"lineNumber":136,"author":{"gitId":"Darren159"},"content":"     * Returns true if {@code appointments} contains only unique appointments.","lastModifiedDate":"2023-10-18"},{"lineNumber":137,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-18"},{"lineNumber":138,"author":{"gitId":"Darren159"},"content":"    private boolean appointmentsAreUnique(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2023-10-18"},{"lineNumber":139,"author":{"gitId":"Darren159"},"content":"        for (int i \u003d 0; i \u003c appointments.size() - 1; i++) {","lastModifiedDate":"2023-10-18"},{"lineNumber":140,"author":{"gitId":"Darren159"},"content":"            for (int j \u003d i + 1; j \u003c appointments.size(); j++) {","lastModifiedDate":"2023-10-18"},{"lineNumber":141,"author":{"gitId":"Darren159"},"content":"                if (appointments.get(i).equals(appointments.get(j))) {","lastModifiedDate":"2023-10-18"},{"lineNumber":142,"author":{"gitId":"Darren159"},"content":"                    return false;","lastModifiedDate":"2023-10-18"},{"lineNumber":143,"author":{"gitId":"Darren159"},"content":"                }","lastModifiedDate":"2023-10-18"},{"lineNumber":144,"author":{"gitId":"Darren159"},"content":"            }","lastModifiedDate":"2023-10-18"},{"lineNumber":145,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":146,"author":{"gitId":"Darren159"},"content":"        return true;","lastModifiedDate":"2023-10-18"},{"lineNumber":147,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":148,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-18"}],"authorContributionMap":{"Darren159":148}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/AppointmentNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.model.appointment.exceptions;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-18"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":" * Signals that the operation is unable to find the specified appointment.","lastModifiedDate":"2023-10-18"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-18"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"public class AppointmentNotFoundException extends RuntimeException {}","lastModifiedDate":"2023-10-18"}],"authorContributionMap":{"Darren159":6}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/DuplicateAppointmentException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.model.appointment.exceptions;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-18"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":" * Signals that the operation will result in duplicate Appointments (Appointments are considered","lastModifiedDate":"2023-10-18"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":" * duplicates if they have the same identity).","lastModifiedDate":"2023-10-18"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-18"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"public class DuplicateAppointmentException extends RuntimeException {","lastModifiedDate":"2023-10-18"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"    public DuplicateAppointmentException() {","lastModifiedDate":"2023-10-18"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"        super(\"Operation would result in duplicate Appointments\");","lastModifiedDate":"2023-10-18"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-18"}],"authorContributionMap":{"Darren159":11}},{"path":"src/main/java/seedu/address/model/person/Age.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":" * Represents a Patient\u0027s age in the MedBook.","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAge(Integer)}","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"public class Age {","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"Clin-lyx"},"content":"            \"Age should only be a non-negative integer\";","lastModifiedDate":"2023-11-08"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"    public final Integer age;","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"     * Constructs a {@code Age}.","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"     *","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"     * @param age A valid age.","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"    public Age(Integer age) {","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(age);","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"        checkArgument(isValidAge(age), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"        this.age \u003d age;","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"     * Returns true if a given integer is a valid age.","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"    public static boolean isValidAge(Integer test) {","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"Clin-lyx"},"content":"        return test \u003e\u003d 0;","lastModifiedDate":"2023-11-08"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"    public String toString() {","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"        return String.valueOf(this.age);","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"            return true;","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"        if (!(other instanceof Age)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"            return false;","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"        Age otherAge \u003d (Age) other;","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"        return this.age \u003d\u003d otherAge.age;","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-12"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"        return this.age.hashCode();","lastModifiedDate":"2023-10-12"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"hjoneweek":57,"Clin-lyx":2}},{"path":"src/main/java/seedu/address/model/person/Allergy.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":" * Represents an allergy in the address book.","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidAllergy(String)}","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"public class Allergy {","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Allergy names should be alphanumeric\";","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    public final String allergy;","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"     * Constructs a {@code Allergy}.","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"     *","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"     * @param allergy A valid allergy name.","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"    public Allergy(String allergy) {","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(allergy);","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"        checkArgument(isValidAllergy(allergy), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"        this.allergy \u003d allergy;","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"     * Returns true if a given string is a valid tag name.","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"    public static boolean isValidAllergy(String test) {","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"            return true;","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"        if (!(other instanceof Allergy)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"            return false;","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"        Allergy otherAllergy \u003d (Allergy) other;","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"        return allergy.equals(otherAllergy.allergy);","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-12"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"        return allergy.hashCode();","lastModifiedDate":"2023-10-12"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"    public String toString() {","lastModifiedDate":"2023-10-12"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"        return \u0027[\u0027 + allergy + \u0027]\u0027;","lastModifiedDate":"2023-10-12"},{"lineNumber":62,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"hjoneweek":64}},{"path":"src/main/java/seedu/address/model/person/BloodType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"ryanongwx"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-17"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":" * Represents a Patient\u0027s blood type in the MedBook.","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"ryanongwx"},"content":" * Guarantees: immutable; is valid as declared in","lastModifiedDate":"2023-10-17"},{"lineNumber":11,"author":{"gitId":"ryanongwx"},"content":" * {@link #isValidBloodType(String)}","lastModifiedDate":"2023-10-17"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"public class BloodType {","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"ryanongwx"},"content":"    public static final String","lastModifiedDate":"2023-10-17"},{"lineNumber":15,"author":{"gitId":"ryanongwx"},"content":"        MESSAGE_CONSTRAINTS \u003d \"Blood Type should only be one of the following: A+, A-, B+, B-, AB+, AB-, O+, O-\";","lastModifiedDate":"2023-10-17"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    public static final String[] POSSIBLE_BLOOD_TYPES \u003d { \"A+\", \"A-\", \"B+\", \"B-\", \"AB+\", \"AB-\", \"O+\", \"O-\" };","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    public final String bloodType;","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"     * Constructs a {@code Gender}.","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"     *","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"     * @param bloodType A valid blood type.","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    public BloodType(String bloodType) {","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(bloodType);","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"        checkArgument(isValidBloodType(bloodType), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"        this.bloodType \u003d bloodType;","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"     * Returns true if a given string is a valid gender.","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"    public static boolean isValidBloodType(String test) {","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"        for (int i \u003d 0; i \u003c POSSIBLE_BLOOD_TYPES.length; i++) {","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"            if (test.equals(POSSIBLE_BLOOD_TYPES[i])) {","lastModifiedDate":"2023-10-19"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"                return true;","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"            }","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"        return false;","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"    public String toString() {","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"        return this.bloodType;","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"            return true;","lastModifiedDate":"2023-10-12"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-12"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"        if (!(other instanceof BloodType)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"            return false;","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"        BloodType otherBloodType \u003d (BloodType) other;","lastModifiedDate":"2023-10-12"},{"lineNumber":62,"author":{"gitId":"ryanongwx"},"content":"        return Objects.equals(this.bloodType, otherBloodType.bloodType);","lastModifiedDate":"2023-10-17"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":65,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":66,"author":{"gitId":"hjoneweek"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-12"},{"lineNumber":67,"author":{"gitId":"hjoneweek"},"content":"        return this.bloodType.hashCode();","lastModifiedDate":"2023-10-12"},{"lineNumber":68,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":69,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"hjoneweek":63,"ryanongwx":6}},{"path":"src/main/java/seedu/address/model/person/Gender.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":" * Represents a Patient\u0027s gender in the MedBook.","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidGender(String)}","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"public class Gender {","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"            \"Gender should only be either M or F\";","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    public final String gender;","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"     * Constructs a {@code Gender}.","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"     *","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"     * @param gender A valid gender.","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"    public Gender(String gender) {","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(gender);","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"        checkArgument(isValidGender(gender), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"        this.gender \u003d gender;","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"     * Returns true if a given string is a valid gender.","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    public static boolean isValidGender(String test) {","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"        return test.equals(\"M\") || test.equals(\"F\");","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"    public String toString() {","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"        return this.gender;","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"            return true;","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"        if (!(other instanceof Gender)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"            return false;","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"        Gender otherGender \u003d (Gender) other;","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"        return this.gender.equals(otherGender.gender);","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-12"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"        return this.gender.hashCode();","lastModifiedDate":"2023-10-12"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":62,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"hjoneweek":62}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2018-01-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"ryanongwx"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword)","lastModifiedDate":"2023-10-16"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"                        ||","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"                        StringUtil.containsWordIgnoreCase(person.getNric().nric, keyword)","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"ryanongwx"},"content":"                        ||","lastModifiedDate":"2023-10-16"},{"lineNumber":26,"author":{"gitId":"ryanongwx"},"content":"                        StringUtil.containsWordIgnoreCase(person.getPhone().value, keyword)","lastModifiedDate":"2023-10-16"},{"lineNumber":27,"author":{"gitId":"ryanongwx"},"content":"                        ||","lastModifiedDate":"2023-10-16"},{"lineNumber":28,"author":{"gitId":"ryanongwx"},"content":"                        person.getAllergies().stream()","lastModifiedDate":"2023-10-16"},{"lineNumber":29,"author":{"gitId":"ryanongwx"},"content":"                                .anyMatch(hobby -\u003e StringUtil.containsWordIgnoreCase(hobby.allergy, keyword))","lastModifiedDate":"2023-10-16"},{"lineNumber":30,"author":{"gitId":"ryanongwx"},"content":"                        ||","lastModifiedDate":"2023-10-16"},{"lineNumber":31,"author":{"gitId":"ryanongwx"},"content":"                        StringUtil.containsWordIgnoreCase(person.getGender().gender, keyword)","lastModifiedDate":"2023-10-16"},{"lineNumber":32,"author":{"gitId":"ryanongwx"},"content":"                        ||","lastModifiedDate":"2023-10-16"},{"lineNumber":33,"author":{"gitId":"ryanongwx"},"content":"                        StringUtil.containsWordIgnoreCase(person.getBloodType().bloodType, keyword)","lastModifiedDate":"2023-10-16"},{"lineNumber":34,"author":{"gitId":"ryanongwx"},"content":"                        ||","lastModifiedDate":"2023-10-16"},{"lineNumber":35,"author":{"gitId":"ryanongwx"},"content":"                        StringUtil.containsWordIgnoreCase(person.getAge().age.toString(), keyword)","lastModifiedDate":"2023-10-16"},{"lineNumber":36,"author":{"gitId":"ryanongwx"},"content":"                        ||","lastModifiedDate":"2023-10-16"},{"lineNumber":37,"author":{"gitId":"ryanongwx"},"content":"                        StringUtil.containsWordIgnoreCase(person.getEmail().value, keyword));","lastModifiedDate":"2023-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (!(other instanceof NameContainsKeywordsPredicate)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate otherNameContainsKeywordsPredicate \u003d (NameContainsKeywordsPredicate) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return keywords.equals(otherNameContainsKeywordsPredicate.keywords);","lastModifiedDate":"2023-07-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this).add(\"keywords\", keywords).toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"Darren159":2,"-":43,"ryanongwx":14}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.UniqueRecordList;","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Name;","lastModifiedDate":"2023-10-22"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Nric;","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":" * Guarantees: details are present and not null, field values are validated,","lastModifiedDate":"2023-10-30"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":" * immutable.","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"    private final Nric nric;","lastModifiedDate":"2023-10-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    private final Gender gender;","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"    private final Age age;","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"    private final BloodType bloodType;","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"    private final Set\u003cAllergy\u003e allergies \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"    private final UniqueRecordList records \u003d new UniqueRecordList();","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"    private final UniqueAppointmentList appointments \u003d new UniqueAppointmentList();","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"    private boolean isPinned;","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"     * Constructs a Person","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"    public Person(Name name, Nric nric, Email email, Phone phone, Gender gender, Age age,","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"            BloodType bloodType, Set\u003cAllergy\u003e allergies, UniqueRecordList records, UniqueAppointmentList appointments,","lastModifiedDate":"2023-10-30"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"            boolean isPinned) {","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"        requireAllNonNull(name, phone, email, gender, age, allergies, appointments, isPinned);","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2023-10-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"        this.gender \u003d gender;","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"        this.age \u003d age;","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"        this.bloodType \u003d bloodType;","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"        this.allergies.addAll(allergies);","lastModifiedDate":"2023-10-12"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"        this.records.setRecords(records);","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"        this.appointments.setAppointments(appointments);","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"        this.isPinned \u003d isPinned;","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"    public Nric getNric() {","lastModifiedDate":"2023-10-30"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"        return nric;","lastModifiedDate":"2023-10-30"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"hjoneweek"},"content":"    public Gender getGender() {","lastModifiedDate":"2023-10-12"},{"lineNumber":76,"author":{"gitId":"hjoneweek"},"content":"        return gender;","lastModifiedDate":"2023-10-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"    public boolean isPinned() {","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"Darren159"},"content":"        return isPinned;","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":82,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":83,"author":{"gitId":"hjoneweek"},"content":"    public Age getAge() {","lastModifiedDate":"2023-10-12"},{"lineNumber":84,"author":{"gitId":"hjoneweek"},"content":"        return age;","lastModifiedDate":"2023-10-12"},{"lineNumber":85,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":86,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":87,"author":{"gitId":"hjoneweek"},"content":"    public BloodType getBloodType() {","lastModifiedDate":"2023-10-12"},{"lineNumber":88,"author":{"gitId":"hjoneweek"},"content":"        return bloodType;","lastModifiedDate":"2023-10-12"},{"lineNumber":89,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":90,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":91,"author":{"gitId":"hjoneweek"},"content":"    public Set\u003cAllergy\u003e getAllergies() {","lastModifiedDate":"2023-10-12"},{"lineNumber":92,"author":{"gitId":"hjoneweek"},"content":"        return Collections.unmodifiableSet(allergies);","lastModifiedDate":"2023-10-12"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":95,"author":{"gitId":"hjoneweek"},"content":"    public UniqueRecordList getRecords() {","lastModifiedDate":"2023-10-20"},{"lineNumber":96,"author":{"gitId":"hjoneweek"},"content":"        return this.records;","lastModifiedDate":"2023-10-20"},{"lineNumber":97,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":98,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":99,"author":{"gitId":"Darren159"},"content":"    public UniqueAppointmentList getAppointments() {","lastModifiedDate":"2023-10-18"},{"lineNumber":100,"author":{"gitId":"Darren159"},"content":"        return this.appointments;","lastModifiedDate":"2023-10-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-10-18"},{"lineNumber":104,"author":{"gitId":"Darren159"},"content":"     * Returns true if the same appointment as {@code appointment} exists in the","lastModifiedDate":"2023-10-30"},{"lineNumber":105,"author":{"gitId":"Darren159"},"content":"     * person.","lastModifiedDate":"2023-10-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-10-18"},{"lineNumber":107,"author":{"gitId":"Darren159"},"content":"    public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2023-10-18"},{"lineNumber":108,"author":{"gitId":"Darren159"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2023-10-18"},{"lineNumber":109,"author":{"gitId":"Darren159"},"content":"        return appointments.contains(appointment);","lastModifiedDate":"2023-10-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":113,"author":{"gitId":"Darren159"},"content":"     * Returns true if both persons have the same nric.","lastModifiedDate":"2023-10-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":122,"author":{"gitId":"Darren159"},"content":"                \u0026\u0026 otherPerson.getNric().equals(getNric());","lastModifiedDate":"2023-10-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":125,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-17"},{"lineNumber":126,"author":{"gitId":"hjoneweek"},"content":"     * Adds a record to the patient","lastModifiedDate":"2023-10-17"},{"lineNumber":127,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-17"},{"lineNumber":128,"author":{"gitId":"hjoneweek"},"content":"    public void addRecord(Record record) {","lastModifiedDate":"2023-10-15"},{"lineNumber":129,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(record);","lastModifiedDate":"2023-10-15"},{"lineNumber":130,"author":{"gitId":"hjoneweek"},"content":"        this.records.add(record);","lastModifiedDate":"2023-10-15"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        return name.equals(otherPerson.name)","lastModifiedDate":"2023-07-13"},{"lineNumber":150,"author":{"gitId":"Darren159"},"content":"                \u0026\u0026 nric.equals(otherPerson.nric)","lastModifiedDate":"2023-10-30"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                \u0026\u0026 phone.equals(otherPerson.phone)","lastModifiedDate":"2023-07-13"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                \u0026\u0026 email.equals(otherPerson.email)","lastModifiedDate":"2023-07-13"},{"lineNumber":153,"author":{"gitId":"hjoneweek"},"content":"                \u0026\u0026 gender.equals(otherPerson.gender)","lastModifiedDate":"2023-10-12"},{"lineNumber":154,"author":{"gitId":"hjoneweek"},"content":"                \u0026\u0026 age.equals(otherPerson.age)","lastModifiedDate":"2023-10-12"},{"lineNumber":155,"author":{"gitId":"hjoneweek"},"content":"                \u0026\u0026 bloodType.equals(otherPerson.bloodType)","lastModifiedDate":"2023-10-12"},{"lineNumber":156,"author":{"gitId":"Darren159"},"content":"                \u0026\u0026 allergies.equals(otherPerson.allergies)","lastModifiedDate":"2023-10-15"},{"lineNumber":157,"author":{"gitId":"hjoneweek"},"content":"                \u0026\u0026 records.equals(otherPerson.records)","lastModifiedDate":"2023-10-19"},{"lineNumber":158,"author":{"gitId":"Darren159"},"content":"                \u0026\u0026 appointments.equals(otherPerson.appointments)","lastModifiedDate":"2023-10-20"},{"lineNumber":159,"author":{"gitId":"Darren159"},"content":"                \u0026\u0026 isPinned \u003d\u003d otherPerson.isPinned;","lastModifiedDate":"2023-10-14"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":165,"author":{"gitId":"hjoneweek"},"content":"        return Objects.hash(name, email, phone, gender, age, bloodType, allergies);","lastModifiedDate":"2023-10-12"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"                .add(\"name\", name)","lastModifiedDate":"2019-02-23"},{"lineNumber":172,"author":{"gitId":"Darren159"},"content":"                .add(\"nric\", nric)","lastModifiedDate":"2023-10-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                .add(\"email\", email)","lastModifiedDate":"2019-02-23"},{"lineNumber":174,"author":{"gitId":"hjoneweek"},"content":"                .add(\"phone\", phone)","lastModifiedDate":"2023-10-12"},{"lineNumber":175,"author":{"gitId":"hjoneweek"},"content":"                .add(\"gender\", gender)","lastModifiedDate":"2023-10-12"},{"lineNumber":176,"author":{"gitId":"hjoneweek"},"content":"                .add(\"age\", age)","lastModifiedDate":"2023-10-12"},{"lineNumber":177,"author":{"gitId":"hjoneweek"},"content":"                .add(\"bloodType\", bloodType)","lastModifiedDate":"2023-10-12"},{"lineNumber":178,"author":{"gitId":"hjoneweek"},"content":"                .add(\"allergies\", allergies)","lastModifiedDate":"2023-10-12"},{"lineNumber":179,"author":{"gitId":"hjoneweek"},"content":"                .add(\"records\", records)","lastModifiedDate":"2023-10-19"},{"lineNumber":180,"author":{"gitId":"Darren159"},"content":"                .add(\"appointments\", appointments)","lastModifiedDate":"2023-10-19"},{"lineNumber":181,"author":{"gitId":"Darren159"},"content":"                .add(\"isPinned\", isPinned)","lastModifiedDate":"2023-10-30"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":184,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Darren159":43,"hjoneweek":45,"-":96}},{"path":"src/main/java/seedu/address/model/record/Condition.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.model.record;","lastModifiedDate":"2023-10-15"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-15"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":" * Represents a condition of a patient. Recorded inside a Record object.","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"public class Condition {","lastModifiedDate":"2023-10-15"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2023-10-15"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"            \"Condition should be alphanumeric\";","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"    public static final String VALIDATION_REGEX \u003d \"[a-zA-Z0-9- ]+\";","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    public final String condition;","lastModifiedDate":"2023-10-15"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-15"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"     * Constructs a {@code Condition}.","lastModifiedDate":"2023-10-15"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"     *","lastModifiedDate":"2023-10-15"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"     * @param condition A valid condition name.","lastModifiedDate":"2023-10-15"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-15"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"    public Condition(String condition) {","lastModifiedDate":"2023-10-15"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(condition);","lastModifiedDate":"2023-10-15"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"        checkArgument(isValidCondition(condition), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"        this.condition \u003d condition;","lastModifiedDate":"2023-10-15"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"    public static boolean isValidCondition(String test) {","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-15"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-15"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-15"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"            return true;","lastModifiedDate":"2023-10-15"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-15"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-15"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"        if (!(other instanceof Condition)) {","lastModifiedDate":"2023-10-15"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"            return false;","lastModifiedDate":"2023-10-15"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-15"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"        Condition otherCondition \u003d (Condition) other;","lastModifiedDate":"2023-10-15"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"        return condition.equals(otherCondition.condition);","lastModifiedDate":"2023-10-15"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-15"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-15"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"        return condition.hashCode();","lastModifiedDate":"2023-10-15"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-15"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"    public String toString() {","lastModifiedDate":"2023-10-15"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"        return condition;","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-15"}],"authorContributionMap":{"hjoneweek":56,"Darren159":1}},{"path":"src/main/java/seedu/address/model/record/Medication.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.model.record;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":" * Represents a medication that a patient receives. Recorded inside a Record object.","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"public class Medication {","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Medication should be alphanumeric\";","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"    public static final String VALIDATION_REGEX \u003d \"[a-zA-Z0-9- ]+\";","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    public final String medication;","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"     * Constructs a {@code Medication}","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"     * @param medication A valid medication name.","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    public Medication(String medication) {","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(medication);","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"        checkArgument(isValidMedication(medication), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"        this.medication \u003d medication;","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"    public static boolean isValidMedication(String test) {","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"        if (this \u003d\u003d other) {","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"            return true;","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"        if (!(other instanceof Medication)) {","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"            return false;","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"        Medication otherMedication \u003d (Medication) other;","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"        return this.medication.equals(otherMedication.medication);","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"        return medication.hashCode();","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"    public String toString() {","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"        return medication;","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"hjoneweek":48}},{"path":"src/main/java/seedu/address/model/record/Record.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.model.record;","lastModifiedDate":"2023-10-15"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":5,"author":{"gitId":"ryanongwx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-15"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import java.util.Collections;","lastModifiedDate":"2023-10-15"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import java.util.List;","lastModifiedDate":"2023-10-15"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-15"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"ryanongwx"},"content":"import seedu.address.logic.commands.EditRecordCommand;","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ryanongwx"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ryanongwx"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.DateTime;","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"ryanongwx"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ryanongwx"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"ryanongwx"},"content":" * Record of condition of a patient and date and time in which a patient visits","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"ryanongwx"},"content":" * the doctor","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"public class Record {","lastModifiedDate":"2023-10-15"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    private final List\u003cCondition\u003e conditions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-15"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    private final List\u003cMedication\u003e medications \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"    private final DateTime dateTime;","lastModifiedDate":"2023-10-15"},{"lineNumber":28,"author":{"gitId":"ryanongwx"},"content":"    private Path filePath;","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"ryanongwx"},"content":"    private final Integer personIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"     * Constructs a record object","lastModifiedDate":"2023-10-19"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":34,"author":{"gitId":"ryanongwx"},"content":"    public Record(DateTime dateTime, List\u003cCondition\u003e conditions, List\u003cMedication\u003e medications, Path filePath,","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"ryanongwx"},"content":"            Integer personIndex) {","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"        requireAllNonNull(dateTime, conditions);","lastModifiedDate":"2023-10-15"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2023-10-15"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"        this.conditions.addAll(removeDuplicates(conditions));","lastModifiedDate":"2023-11-08"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"        this.medications.addAll(removeDuplicates(medications));","lastModifiedDate":"2023-11-08"},{"lineNumber":40,"author":{"gitId":"ryanongwx"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"ryanongwx"},"content":"        this.personIndex \u003d personIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"    public DateTime getDateTime() {","lastModifiedDate":"2023-10-15"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"        return dateTime;","lastModifiedDate":"2023-10-15"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":48,"author":{"gitId":"ryanongwx"},"content":"    public int getPersonIndex() {","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"ryanongwx"},"content":"        return personIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"ryanongwx"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"    public List\u003cCondition\u003e getConditions() {","lastModifiedDate":"2023-10-15"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"        return Collections.unmodifiableList(conditions);","lastModifiedDate":"2023-10-15"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":55,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"ryanongwx"},"content":"    public Path getFilePath() {","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"ryanongwx"},"content":"        return filePath; // Getter for the file path","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"ryanongwx"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"ryanongwx"},"content":"    // Set the filePath. This is the new setter method","lastModifiedDate":"2023-10-24"},{"lineNumber":61,"author":{"gitId":"ryanongwx"},"content":"    public void setFilePath(Path filePath, int displayedIndex) {","lastModifiedDate":"2023-10-24"},{"lineNumber":62,"author":{"gitId":"ryanongwx"},"content":"        requireAllNonNull(filePath); // Ensure the provided filePath is not null","lastModifiedDate":"2023-10-24"},{"lineNumber":63,"author":{"gitId":"ryanongwx"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-10-24"},{"lineNumber":64,"author":{"gitId":"ryanongwx"},"content":"        Model model \u003d ModelManager.getInstance();","lastModifiedDate":"2023-10-24"},{"lineNumber":65,"author":{"gitId":"ryanongwx"},"content":"        EditRecordCommand.EditRecordDescriptor editRecordDescriptor \u003d new EditRecordCommand.EditRecordDescriptor();","lastModifiedDate":"2023-10-24"},{"lineNumber":66,"author":{"gitId":"ryanongwx"},"content":"        editRecordDescriptor.setFilePath(filePath);","lastModifiedDate":"2023-10-24"},{"lineNumber":67,"author":{"gitId":"ryanongwx"},"content":"        try {","lastModifiedDate":"2023-10-24"},{"lineNumber":68,"author":{"gitId":"ryanongwx"},"content":"            Storage storage \u003d StorageManager.getInstance();","lastModifiedDate":"2023-10-24"},{"lineNumber":69,"author":{"gitId":"ryanongwx"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2023-10-24"},{"lineNumber":70,"author":{"gitId":"ryanongwx"},"content":"        } catch (Exception c) {","lastModifiedDate":"2023-10-24"},{"lineNumber":71,"author":{"gitId":"ryanongwx"},"content":"            c.printStackTrace();","lastModifiedDate":"2023-10-24"},{"lineNumber":72,"author":{"gitId":"ryanongwx"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":73,"author":{"gitId":"ryanongwx"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":74,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":75,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-11-08"},{"lineNumber":76,"author":{"gitId":"hjoneweek"},"content":"     * Removes duplicate entries in record information.","lastModifiedDate":"2023-11-08"},{"lineNumber":77,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-11-08"},{"lineNumber":78,"author":{"gitId":"hjoneweek"},"content":"    public static \u003cT\u003e List\u003cT\u003e removeDuplicates(List\u003cT\u003e list) {","lastModifiedDate":"2023-11-08"},{"lineNumber":79,"author":{"gitId":"hjoneweek"},"content":"        List\u003cT\u003e listToModify \u003d new ArrayList\u003c\u003e(list);","lastModifiedDate":"2023-11-08"},{"lineNumber":80,"author":{"gitId":"hjoneweek"},"content":"        for (int i \u003d 0; i \u003c listToModify.size() - 1; i++) {","lastModifiedDate":"2023-11-08"},{"lineNumber":81,"author":{"gitId":"hjoneweek"},"content":"            for (int j \u003d i + 1; j \u003c listToModify.size(); j++) {","lastModifiedDate":"2023-11-08"},{"lineNumber":82,"author":{"gitId":"hjoneweek"},"content":"                if (listToModify.get(i).equals(listToModify.get(j))) {","lastModifiedDate":"2023-11-08"},{"lineNumber":83,"author":{"gitId":"hjoneweek"},"content":"                    listToModify.remove(j);","lastModifiedDate":"2023-11-08"},{"lineNumber":84,"author":{"gitId":"hjoneweek"},"content":"                    j--;","lastModifiedDate":"2023-11-08"},{"lineNumber":85,"author":{"gitId":"hjoneweek"},"content":"                }","lastModifiedDate":"2023-11-08"},{"lineNumber":86,"author":{"gitId":"hjoneweek"},"content":"            }","lastModifiedDate":"2023-11-08"},{"lineNumber":87,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-11-08"},{"lineNumber":88,"author":{"gitId":"hjoneweek"},"content":"        return listToModify;","lastModifiedDate":"2023-11-08"},{"lineNumber":89,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":90,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":91,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":92,"author":{"gitId":"hjoneweek"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-15"},{"lineNumber":93,"author":{"gitId":"hjoneweek"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2023-10-15"},{"lineNumber":94,"author":{"gitId":"ryanongwx"},"content":"        return Objects.hash(dateTime, conditions, filePath, personIndex);","lastModifiedDate":"2023-10-24"},{"lineNumber":95,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":96,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":97,"author":{"gitId":"ryanongwx"},"content":"    public List\u003cMedication\u003e getMedications() {","lastModifiedDate":"2023-10-26"},{"lineNumber":98,"author":{"gitId":"ryanongwx"},"content":"        return Collections.unmodifiableList(medications);","lastModifiedDate":"2023-10-26"},{"lineNumber":99,"author":{"gitId":"ryanongwx"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":100,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":101,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":102,"author":{"gitId":"hjoneweek"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-15"},{"lineNumber":103,"author":{"gitId":"hjoneweek"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-15"},{"lineNumber":104,"author":{"gitId":"hjoneweek"},"content":"            return true;","lastModifiedDate":"2023-10-15"},{"lineNumber":105,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-15"},{"lineNumber":106,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":107,"author":{"gitId":"hjoneweek"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-15"},{"lineNumber":108,"author":{"gitId":"hjoneweek"},"content":"        if (!(other instanceof Record)) {","lastModifiedDate":"2023-10-15"},{"lineNumber":109,"author":{"gitId":"hjoneweek"},"content":"            return false;","lastModifiedDate":"2023-10-15"},{"lineNumber":110,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-15"},{"lineNumber":111,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":112,"author":{"gitId":"hjoneweek"},"content":"        Record otherRecord \u003d (Record) other;","lastModifiedDate":"2023-10-15"},{"lineNumber":113,"author":{"gitId":"hjoneweek"},"content":"        return dateTime.equals(otherRecord.dateTime)","lastModifiedDate":"2023-10-15"},{"lineNumber":114,"author":{"gitId":"ryanongwx"},"content":"                \u0026\u0026 conditions.equals(otherRecord.conditions)","lastModifiedDate":"2023-10-24"},{"lineNumber":115,"author":{"gitId":"ryanongwx"},"content":"                \u0026\u0026 Objects.equals(filePath, otherRecord.filePath)","lastModifiedDate":"2023-10-24"},{"lineNumber":116,"author":{"gitId":"ryanongwx"},"content":"                \u0026\u0026 personIndex.equals(otherRecord.personIndex)","lastModifiedDate":"2023-10-26"},{"lineNumber":117,"author":{"gitId":"hjoneweek"},"content":"                \u0026\u0026 medications.equals(otherRecord.medications);","lastModifiedDate":"2023-10-26"},{"lineNumber":118,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":119,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":120,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":121,"author":{"gitId":"hjoneweek"},"content":"    public String toString() {","lastModifiedDate":"2023-10-15"},{"lineNumber":122,"author":{"gitId":"hjoneweek"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-15"},{"lineNumber":123,"author":{"gitId":"hjoneweek"},"content":"                .add(\"dateTime\", dateTime)","lastModifiedDate":"2023-10-15"},{"lineNumber":124,"author":{"gitId":"hjoneweek"},"content":"                .add(\"conditions\", conditions)","lastModifiedDate":"2023-10-15"},{"lineNumber":125,"author":{"gitId":"hjoneweek"},"content":"                .add(\"medications\", medications)","lastModifiedDate":"2023-10-26"},{"lineNumber":126,"author":{"gitId":"ryanongwx"},"content":"                .add(\"filePath\", filePath)","lastModifiedDate":"2023-10-24"},{"lineNumber":127,"author":{"gitId":"ryanongwx"},"content":"                .add(\"personIndex\", personIndex)","lastModifiedDate":"2023-10-24"},{"lineNumber":128,"author":{"gitId":"hjoneweek"},"content":"                .toString();","lastModifiedDate":"2023-10-15"},{"lineNumber":129,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":130,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":131,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-15"}],"authorContributionMap":{"hjoneweek":80,"Darren159":1,"ryanongwx":50}},{"path":"src/main/java/seedu/address/model/record/RecordContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.model.record;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import java.util.List;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":" * Tests that a {@code Record} matches any of the keywords given.","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"public class RecordContainsKeywordsPredicate implements Predicate\u003cRecord\u003e {","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"    public RecordContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    public boolean test(Record record) {","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"        return keywords.stream()","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(record.getDateTime().toString(), keyword)","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"                        ||","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"                        record.getConditions().stream()","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"                                .anyMatch(condition -\u003e StringUtil.containsWordIgnoreCase(condition.condition, keyword))","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"                        ||","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"                        record.getMedications().stream()","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"                                .anyMatch(medication -\u003e StringUtil.containsWordIgnoreCase(medication.medication,","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"                                        keyword)));","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"            return true;","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"        if (!(other instanceof RecordContainsKeywordsPredicate)) {","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"            return false;","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"        RecordContainsKeywordsPredicate otherRecordContainsKeywordsPredicate \u003d (RecordContainsKeywordsPredicate) other;","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"        return keywords.equals(otherRecordContainsKeywordsPredicate.keywords);","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"    public String toString() {","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"                .add(\"keywords\", keywords)","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"                .toString();","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"hjoneweek":46}},{"path":"src/main/java/seedu/address/model/record/UniqueRecordList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.model.record;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import java.util.List;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.exceptions.DuplicateRecordException;","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.exceptions.RecordNotFoundException;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":" * A list of records that enforces uniqueness between its elements and does not","lastModifiedDate":"2023-10-30"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":" * allow nulls.","lastModifiedDate":"2023-10-30"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":" * A record is considered unique by comparing using","lastModifiedDate":"2023-10-30"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":" * {@code Record#equals(Object)}. As such, adding, updating, removal of","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":" * records uses Record#equals(Object) for equality so as to ensure that the","lastModifiedDate":"2023-10-30"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":" * record being added, updated, removed is","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":" * unique in terms of identity in the UniqueRecordList.","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":" *","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":" *","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":" * @see Record#equals(Object)","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"public class UniqueRecordList implements Iterable\u003cRecord\u003e {","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"    private final ObservableList\u003cRecord\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"    private final ObservableList\u003cRecord\u003e internalUnmodifiableList \u003d FXCollections","lastModifiedDate":"2023-10-30"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"            .unmodifiableObservableList(internalList);","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"     * Returns true if the list contains an equivalent record as the given argument.","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"    public boolean contains(Record toCheck) {","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"        return internalList.stream().anyMatch(toCheck::equals);","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"     * Returns a record at a specified index.","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"    public Record get(int index) {","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"        return internalList.get(index);","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"     * Returns the size of the internalList","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"    public int size() {","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"        return internalList.size();","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"     * Adds a record to the list","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"    public void add(Record recordToAdd) {","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(recordToAdd);","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"        if (contains(recordToAdd)) {","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"            throw new DuplicateRecordException();","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":62,"author":{"gitId":"hjoneweek"},"content":"        internalList.add(recordToAdd);","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"hjoneweek"},"content":"     * Replaces the record {@code target} in the list with {@code editedRecord}.","lastModifiedDate":"2023-10-20"},{"lineNumber":67,"author":{"gitId":"hjoneweek"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"     * The record identity of {@code editedRecord} must not be the same as another","lastModifiedDate":"2023-10-30"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"     * existing record in the list.","lastModifiedDate":"2023-10-30"},{"lineNumber":70,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"hjoneweek"},"content":"    public void setRecord(Record target, Record editedRecord) {","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"hjoneweek"},"content":"        requireAllNonNull(target, editedRecord);","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"hjoneweek"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"hjoneweek"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"hjoneweek"},"content":"            throw new RecordNotFoundException();","lastModifiedDate":"2023-10-20"},{"lineNumber":78,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":79,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":80,"author":{"gitId":"hjoneweek"},"content":"        if (!target.equals(editedRecord) \u0026\u0026 contains(editedRecord)) {","lastModifiedDate":"2023-10-20"},{"lineNumber":81,"author":{"gitId":"hjoneweek"},"content":"            throw new DuplicateRecordException();","lastModifiedDate":"2023-10-20"},{"lineNumber":82,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":83,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":84,"author":{"gitId":"hjoneweek"},"content":"        internalList.set(index, editedRecord);","lastModifiedDate":"2023-10-20"},{"lineNumber":85,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":86,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":87,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":88,"author":{"gitId":"hjoneweek"},"content":"     * Removes the equivalent record from the list.","lastModifiedDate":"2023-10-20"},{"lineNumber":89,"author":{"gitId":"hjoneweek"},"content":"     * The record must exist in the list.","lastModifiedDate":"2023-10-20"},{"lineNumber":90,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":91,"author":{"gitId":"hjoneweek"},"content":"    public void remove(Record recordToRemove) {","lastModifiedDate":"2023-10-20"},{"lineNumber":92,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(recordToRemove);","lastModifiedDate":"2023-10-20"},{"lineNumber":93,"author":{"gitId":"hjoneweek"},"content":"        if (!internalList.remove(recordToRemove)) {","lastModifiedDate":"2023-10-20"},{"lineNumber":94,"author":{"gitId":"hjoneweek"},"content":"            throw new RecordNotFoundException();","lastModifiedDate":"2023-10-20"},{"lineNumber":95,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":96,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":97,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":98,"author":{"gitId":"hjoneweek"},"content":"    public void setRecords(UniqueRecordList replacement) {","lastModifiedDate":"2023-10-20"},{"lineNumber":99,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2023-10-20"},{"lineNumber":100,"author":{"gitId":"hjoneweek"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2023-10-20"},{"lineNumber":101,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":102,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":103,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":104,"author":{"gitId":"hjoneweek"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2023-10-20"},{"lineNumber":105,"author":{"gitId":"hjoneweek"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2023-10-20"},{"lineNumber":106,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":107,"author":{"gitId":"hjoneweek"},"content":"    public void setRecords(List\u003cRecord\u003e records) {","lastModifiedDate":"2023-10-20"},{"lineNumber":108,"author":{"gitId":"hjoneweek"},"content":"        requireAllNonNull(records);","lastModifiedDate":"2023-10-20"},{"lineNumber":109,"author":{"gitId":"hjoneweek"},"content":"        if (!recordsAreUnique(records)) {","lastModifiedDate":"2023-10-20"},{"lineNumber":110,"author":{"gitId":"hjoneweek"},"content":"            throw new DuplicateRecordException();","lastModifiedDate":"2023-10-20"},{"lineNumber":111,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":112,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":113,"author":{"gitId":"hjoneweek"},"content":"        internalList.setAll(records);","lastModifiedDate":"2023-10-20"},{"lineNumber":114,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":115,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":116,"author":{"gitId":"hjoneweek"},"content":"    public ObservableList\u003cRecord\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2023-10-20"},{"lineNumber":117,"author":{"gitId":"hjoneweek"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2023-10-20"},{"lineNumber":118,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":119,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":120,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":121,"author":{"gitId":"hjoneweek"},"content":"    public Iterator\u003cRecord\u003e iterator() {","lastModifiedDate":"2023-10-20"},{"lineNumber":122,"author":{"gitId":"hjoneweek"},"content":"        return internalList.iterator();","lastModifiedDate":"2023-10-20"},{"lineNumber":123,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":124,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":125,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":126,"author":{"gitId":"hjoneweek"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-20"},{"lineNumber":127,"author":{"gitId":"hjoneweek"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-20"},{"lineNumber":128,"author":{"gitId":"hjoneweek"},"content":"            return true;","lastModifiedDate":"2023-10-20"},{"lineNumber":129,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":130,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":131,"author":{"gitId":"hjoneweek"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-20"},{"lineNumber":132,"author":{"gitId":"hjoneweek"},"content":"        if (!(other instanceof UniqueRecordList)) {","lastModifiedDate":"2023-10-20"},{"lineNumber":133,"author":{"gitId":"hjoneweek"},"content":"            return false;","lastModifiedDate":"2023-10-20"},{"lineNumber":134,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":135,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":136,"author":{"gitId":"hjoneweek"},"content":"        UniqueRecordList otherUniqueRecordList \u003d (UniqueRecordList) other;","lastModifiedDate":"2023-10-20"},{"lineNumber":137,"author":{"gitId":"hjoneweek"},"content":"        return internalList.equals(otherUniqueRecordList.internalList);","lastModifiedDate":"2023-10-20"},{"lineNumber":138,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":139,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":140,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":141,"author":{"gitId":"hjoneweek"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-20"},{"lineNumber":142,"author":{"gitId":"hjoneweek"},"content":"        return internalList.hashCode();","lastModifiedDate":"2023-10-20"},{"lineNumber":143,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":144,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":145,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":146,"author":{"gitId":"hjoneweek"},"content":"    public String toString() {","lastModifiedDate":"2023-10-20"},{"lineNumber":147,"author":{"gitId":"hjoneweek"},"content":"        return internalList.toString();","lastModifiedDate":"2023-10-20"},{"lineNumber":148,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":149,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":150,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":151,"author":{"gitId":"hjoneweek"},"content":"     * Returns true if {@code records} contains only unique records.","lastModifiedDate":"2023-10-20"},{"lineNumber":152,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":153,"author":{"gitId":"hjoneweek"},"content":"    private boolean recordsAreUnique(List\u003cRecord\u003e records) {","lastModifiedDate":"2023-10-20"},{"lineNumber":154,"author":{"gitId":"hjoneweek"},"content":"        for (int i \u003d 0; i \u003c records.size() - 1; i++) {","lastModifiedDate":"2023-10-20"},{"lineNumber":155,"author":{"gitId":"hjoneweek"},"content":"            for (int j \u003d i + 1; j \u003c records.size(); j++) {","lastModifiedDate":"2023-10-20"},{"lineNumber":156,"author":{"gitId":"hjoneweek"},"content":"                if (records.get(i).equals(records.get(j))) {","lastModifiedDate":"2023-10-20"},{"lineNumber":157,"author":{"gitId":"hjoneweek"},"content":"                    return false;","lastModifiedDate":"2023-10-20"},{"lineNumber":158,"author":{"gitId":"hjoneweek"},"content":"                }","lastModifiedDate":"2023-10-20"},{"lineNumber":159,"author":{"gitId":"hjoneweek"},"content":"            }","lastModifiedDate":"2023-10-20"},{"lineNumber":160,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":161,"author":{"gitId":"hjoneweek"},"content":"        return true;","lastModifiedDate":"2023-10-20"},{"lineNumber":162,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":163,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"hjoneweek":149,"Darren159":14}},{"path":"src/main/java/seedu/address/model/record/exceptions/DuplicateRecordException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.model.record.exceptions;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":" * Signals that the operation will result in duplicate Records (Records are considered duplicates if they have the same","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":" * DateTime and Conditions).","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"public class DuplicateRecordException extends RuntimeException {","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"    public DuplicateRecordException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"        super(\"Operation would result in duplicate records\");","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"hjoneweek":13}},{"path":"src/main/java/seedu/address/model/record/exceptions/RecordNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.model.record.exceptions;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":" * Signals that the operation is unable to find the specified record.","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"public class RecordNotFoundException extends RuntimeException{","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"hjoneweek":7}},{"path":"src/main/java/seedu/address/model/shared/DateTime.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.model.shared;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-18"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-18"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-18"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-10-18"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-10-18"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-18"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":" * Represents the date and time in which patient visits the doctor","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-18"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"public class DateTime {","lastModifiedDate":"2023-10-18"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2023-10-18"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"            \"Date should be in the form of \u0027dd-MM-yyyy HHmm\";","lastModifiedDate":"2023-10-18"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2023-10-18"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"    public final LocalDateTime dateTime;","lastModifiedDate":"2023-10-18"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-18"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"     * Constructs a {@code DateTime}.","lastModifiedDate":"2023-10-18"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"     *","lastModifiedDate":"2023-10-18"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"     * @param dateTime A valid date and time.","lastModifiedDate":"2023-10-18"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-18"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"    public DateTime(String dateTime) {","lastModifiedDate":"2023-10-18"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2023-10-18"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"        checkArgument(isValidDateTime(dateTime), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-18"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"        this.dateTime \u003d LocalDateTime.parse(dateTime, FORMATTER);","lastModifiedDate":"2023-10-18"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-18"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"     * Returns true if a given string is a valid date-time.","lastModifiedDate":"2023-10-18"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-18"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"    public static boolean isValidDateTime(String test) {","lastModifiedDate":"2023-10-18"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"        try {","lastModifiedDate":"2023-10-18"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"            LocalDateTime.parse(test, FORMATTER);","lastModifiedDate":"2023-10-18"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"            return true;","lastModifiedDate":"2023-10-18"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-10-18"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"            return false;","lastModifiedDate":"2023-10-18"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-18"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-18"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-18"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"            return true;","lastModifiedDate":"2023-10-18"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-18"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"        if (!(other instanceof DateTime)) {","lastModifiedDate":"2023-10-18"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"            return false;","lastModifiedDate":"2023-10-18"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"        DateTime otherDateTime \u003d (DateTime) other;","lastModifiedDate":"2023-10-18"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"        return dateTime.equals(otherDateTime.dateTime);","lastModifiedDate":"2023-10-18"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-18"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-18"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"        return dateTime.hashCode();","lastModifiedDate":"2023-10-18"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-18"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"    public String toString() {","lastModifiedDate":"2023-10-18"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"        return dateTime.format(FORMATTER);","lastModifiedDate":"2023-10-18"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-18"}],"authorContributionMap":{"Darren159":66,"hjoneweek":1}},{"path":"src/main/java/seedu/address/model/shared/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.model.shared;","lastModifiedDate":"2023-10-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s name in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"ryanongwx"},"content":"        \"Names should only contain alphanumeric characters, spaces, dots, and dashes, and it should not be blank\";","lastModifiedDate":"2023-11-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"ryanongwx"},"content":"     * The first character of the name must not be a whitespace,","lastModifiedDate":"2023-11-08"},{"lineNumber":17,"author":{"gitId":"ryanongwx"},"content":"     * /*","lastModifiedDate":"2023-11-08"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"     * The first character of the name must not be a whitespace,","lastModifiedDate":"2023-10-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":21,"author":{"gitId":"ryanongwx"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} .-]*\";","lastModifiedDate":"2023-11-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!(other instanceof Name)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Name otherName \u003d (Name) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return fullName.equals(otherName.fullName);","lastModifiedDate":"2023-07-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Darren159":2,"-":62,"ryanongwx":4}},{"path":"src/main/java/seedu/address/model/shared/Nric.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.model.shared;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-30"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-30"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-30"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":" * Represents a Person\u0027s Nric in the address book.","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidNric(String)}","lastModifiedDate":"2023-10-30"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-30"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"public class Nric {","lastModifiedDate":"2023-10-30"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"NRIC should follow the format: a letter, \"","lastModifiedDate":"2023-10-30"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"            + \"followed by seven digits, and then another letter\";","lastModifiedDate":"2023-10-30"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"    /*","lastModifiedDate":"2023-10-30"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"     * The Nric starts with a letter (either uppercase or lowercase),","lastModifiedDate":"2023-10-30"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"     * followed by seven digits, and ends with another letter (either uppercase or","lastModifiedDate":"2023-10-30"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"     * lowercase).","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-30"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"    public static final String VALIDATION_REGEX \u003d \"[A-Za-z]\\\\d{7}[A-Za-z]\";","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"    public final String nric;","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"     * Constructs a {@code Nric}.","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"     *","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"     * @param nric A valid Nric.","lastModifiedDate":"2023-10-30"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-30"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"    public Nric(String nric) {","lastModifiedDate":"2023-10-30"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"        requireNonNull(nric);","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"        checkArgument(isValidNric(nric), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-30"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-30"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"     * Returns true if a given string is a valid Nric.","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"    public static boolean isValidNric(String test) {","lastModifiedDate":"2023-10-30"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"    public String toString() {","lastModifiedDate":"2023-10-30"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"        return nric;","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-30"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"            return true;","lastModifiedDate":"2023-10-30"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-30"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"        if (!(other instanceof Nric)) {","lastModifiedDate":"2023-10-30"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"            return false;","lastModifiedDate":"2023-10-30"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"        Nric otherNric \u003d (Nric) other;","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"        return nric.equals(otherNric.nric);","lastModifiedDate":"2023-10-30"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-30"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"        return nric.hashCode();","lastModifiedDate":"2023-10-30"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-30"}],"authorContributionMap":{"Darren159":67}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import java.util.List;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Age;","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.BloodType;","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-20"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Gender;","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-20"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Condition;","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Medication;","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.UniqueRecordList;","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.DateTime;","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Name;","lastModifiedDate":"2023-10-22"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Nric;","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Nric(\"S1234569A\"),","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"                    new Email(\"alexyeoh@example.com\"), new Phone(\"87438807\"),","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"                    new Gender(\"M\"), new Age(12), new BloodType(\"A+\"),","lastModifiedDate":"2023-10-30"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"                    getAllergySet(\"Peanuts\"),","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"                    getRecordList(new Record(new DateTime(\"01-01-2001 1200\"),","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"                            getConditionList(\"Fever\"),","lastModifiedDate":"2023-10-30"},{"lineNumber":39,"author":{"gitId":"ryanongwx"},"content":"                            getMedicationList(\"Tylenol\"), null, 0)),","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"                    getAppointmentList(new Appointment(new Name(\"Eye Exam\"),","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"                            new DateTime(\"01-01-2001 1200\"),","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"                            new Nric(\"S1234569A\"))),","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"                    true),","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"            new Person(new Name(\"Bernice Yu\"), new Nric(\"T1234567A\"),","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"                    new Email(\"berniceyu@example.com\"), new Phone(\"99272758\"),","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"                    new Gender(\"F\"), new Age(31), new BloodType(\"B+\"),","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"                    getAllergySet(\"Dust\", \"Peanuts\"),","lastModifiedDate":"2023-10-30"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"                    new UniqueRecordList(), new UniqueAppointmentList(), false),","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Nric(\"S7654321A\"),","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"                    new Email(\"charlotte@example.com\"), new Phone(\"93210283\"),","lastModifiedDate":"2023-10-30"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"                    new Gender(\"F\"), new Age(12), new BloodType(\"AB+\"),","lastModifiedDate":"2023-10-30"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"                    getAllergySet(\"Dust\"),","lastModifiedDate":"2023-10-30"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"                    new UniqueRecordList(), new UniqueAppointmentList(), false),","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"            new Person(new Name(\"David Li\"), new Nric(\"T1234567C\"),","lastModifiedDate":"2023-10-30"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"                    new Email(\"lidavid@example.com\"), new Phone(\"91031282\"),","lastModifiedDate":"2023-10-30"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"                    new Gender(\"M\"), new Age(33), new BloodType(\"O-\"),","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"                    getAllergySet(\"Pollen\"), new UniqueRecordList(),","lastModifiedDate":"2023-10-30"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"                    new UniqueAppointmentList(), false),","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Nric(\"S5671234A\"),","lastModifiedDate":"2023-10-30"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"                    new Email(\"irfan@example.com\"), new Phone(\"92492021\"),","lastModifiedDate":"2023-10-30"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"                    new Gender(\"M\"), new Age(21), new BloodType(\"B-\"),","lastModifiedDate":"2023-10-14"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"                    getAllergySet(\"Fur\"), new UniqueRecordList(),","lastModifiedDate":"2023-10-30"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"                    new UniqueAppointmentList(), false),","lastModifiedDate":"2023-10-30"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Nric(\"T1234567Z\"),","lastModifiedDate":"2023-10-30"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"                    new Email(\"royb@example.com\"), new Phone(\"92624417\"),","lastModifiedDate":"2023-10-30"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"                    new Gender(\"M\"), new Age(24), new BloodType(\"B+\"),","lastModifiedDate":"2023-10-14"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"                    getAllergySet(\"Grass\"), new UniqueRecordList(),","lastModifiedDate":"2023-10-30"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"                    new UniqueAppointmentList(), false)","lastModifiedDate":"2023-10-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":77,"author":{"gitId":"Darren159"},"content":"        // for (Appointment sampleAppointment : getSampleAppointments()) {","lastModifiedDate":"2023-10-30"},{"lineNumber":78,"author":{"gitId":"Darren159"},"content":"        // sampleAb.addAppointment(sampleAppointment);","lastModifiedDate":"2023-10-30"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"        // }","lastModifiedDate":"2023-10-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":84,"author":{"gitId":"Darren159"},"content":"     * Returns an allergy set containing the list of strings given.","lastModifiedDate":"2023-10-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":86,"author":{"gitId":"adammangzijun"},"content":"    public static Set\u003cAllergy\u003e getAllergySet(String... strings) {","lastModifiedDate":"2023-10-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":88,"author":{"gitId":"adammangzijun"},"content":"                .map(Allergy::new)","lastModifiedDate":"2023-10-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":92,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":93,"author":{"gitId":"hjoneweek"},"content":"     * Returns a list of conditions containing the list of strings given.","lastModifiedDate":"2023-10-19"},{"lineNumber":94,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":95,"author":{"gitId":"hjoneweek"},"content":"    public static List\u003cCondition\u003e getConditionList(String... strings) {","lastModifiedDate":"2023-10-19"},{"lineNumber":96,"author":{"gitId":"hjoneweek"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2023-10-19"},{"lineNumber":97,"author":{"gitId":"hjoneweek"},"content":"                .map(Condition::new)","lastModifiedDate":"2023-10-19"},{"lineNumber":98,"author":{"gitId":"hjoneweek"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2023-10-19"},{"lineNumber":99,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":100,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":101,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":102,"author":{"gitId":"hjoneweek"},"content":"     * Returns a list of medications containing the list of strings given.","lastModifiedDate":"2023-10-26"},{"lineNumber":103,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":104,"author":{"gitId":"hjoneweek"},"content":"    public static List\u003cMedication\u003e getMedicationList(String... strings) {","lastModifiedDate":"2023-10-26"},{"lineNumber":105,"author":{"gitId":"hjoneweek"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2023-10-26"},{"lineNumber":106,"author":{"gitId":"hjoneweek"},"content":"                .map(Medication::new)","lastModifiedDate":"2023-10-26"},{"lineNumber":107,"author":{"gitId":"hjoneweek"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2023-10-26"},{"lineNumber":108,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":109,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":110,"author":{"gitId":"hjoneweek"},"content":"    public static UniqueRecordList getRecordList(Record... records) {","lastModifiedDate":"2023-10-20"},{"lineNumber":111,"author":{"gitId":"hjoneweek"},"content":"        UniqueRecordList recordList \u003d new UniqueRecordList();","lastModifiedDate":"2023-10-20"},{"lineNumber":112,"author":{"gitId":"hjoneweek"},"content":"        recordList.setRecords(Arrays.asList(records));","lastModifiedDate":"2023-10-20"},{"lineNumber":113,"author":{"gitId":"hjoneweek"},"content":"        return recordList;","lastModifiedDate":"2023-10-20"},{"lineNumber":114,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":115,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":116,"author":{"gitId":"Darren159"},"content":"    public static UniqueAppointmentList getAppointmentList(Appointment... appointments) {","lastModifiedDate":"2023-10-19"},{"lineNumber":117,"author":{"gitId":"Darren159"},"content":"        UniqueAppointmentList appointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2023-10-19"},{"lineNumber":118,"author":{"gitId":"Darren159"},"content":"        appointmentList.setAppointments(Arrays.asList(appointments));","lastModifiedDate":"2023-10-20"},{"lineNumber":119,"author":{"gitId":"Darren159"},"content":"        return appointmentList;","lastModifiedDate":"2023-10-19"},{"lineNumber":120,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"hjoneweek":25,"Darren159":51,"-":36,"adammangzijun":7,"ryanongwx":2}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedAllergy.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":" * Jackson-friendly version of {@link Allergy}.","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"public class JsonAdaptedAllergy {","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    private final String allergy;","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"     * Constructs a {@code JsonAdaptedAllergy} with the given {@code allergy}.","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    @JsonCreator","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"    public JsonAdaptedAllergy(String allergy) {","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"        this.allergy \u003d allergy;","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"     * Converts a given {@code Tag} into this class for Jackson use.","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"    public JsonAdaptedAllergy(Allergy source) {","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"        this.allergy \u003d source.allergy;","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    @JsonValue","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"    public String getAllergy() {","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"        return allergy;","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Allergy} object.","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"     *","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted allergy.","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"    public Allergy toModelType() throws IllegalValueException {","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"        if (allergy \u003d\u003d null) {","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"            throw new IllegalValueException(Allergy.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"        if (!Allergy.isValidAllergy(allergy)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"            throw new IllegalValueException(Allergy.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"        return new Allergy(allergy);","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"hjoneweek":51}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedAppointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-18"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-10-18"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-10-18"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-18"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-18"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.DateTime;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Name;","lastModifiedDate":"2023-10-22"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Nric;","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-18"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2023-10-18"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-18"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"class JsonAdaptedAppointment {","lastModifiedDate":"2023-10-18"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment\u0027s %s field is missing!\";","lastModifiedDate":"2023-10-18"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"    private final String name;","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"    private final String dateTime;","lastModifiedDate":"2023-10-18"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"    private final String nric;","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-18"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"     * Constructs a {@code JsonAdaptedAppointment} with the given person details.","lastModifiedDate":"2023-10-18"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-18"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"    @JsonCreator","lastModifiedDate":"2023-10-18"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"    public JsonAdaptedAppointment(@JsonProperty(\"name\") String name,","lastModifiedDate":"2023-10-30"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"            @JsonProperty(\"dateTime\") String dateTime, @JsonProperty(\"nric\") String nric) {","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-10-19"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2023-10-18"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-18"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"     * Converts a given {@code Appointment} into this class for Jackson use.","lastModifiedDate":"2023-10-18"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-18"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"    public JsonAdaptedAppointment(Appointment source) {","lastModifiedDate":"2023-10-18"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2023-10-19"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"        dateTime \u003d source.getDateTime().toString();","lastModifiedDate":"2023-10-18"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"        nric \u003d source.getNric().toString();","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-18"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"     * Converts this Jackson-friendly adapted appointment object into the model\u0027s","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"     * {@code Appointment} object.","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"     *","lastModifiedDate":"2023-10-18"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"     * @throws IllegalValueException if there were any data constraints violated in","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"     *                               the adapted appointment.","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-18"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"    public Appointment toModelType() throws IllegalValueException {","lastModifiedDate":"2023-10-18"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2023-10-19"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2023-10-19"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-18"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"        final Name modelname \u003d new Name(name);","lastModifiedDate":"2023-10-19"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"        if (dateTime \u003d\u003d null) {","lastModifiedDate":"2023-10-18"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2023-10-20"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"                    DateTime.class.getSimpleName()));","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"        if (!DateTime.isValidDateTime(dateTime)) {","lastModifiedDate":"2023-10-18"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-18"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"        final DateTime modelDateTime \u003d new DateTime(dateTime);","lastModifiedDate":"2023-10-18"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"        if (nric \u003d\u003d null) {","lastModifiedDate":"2023-11-01"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));","lastModifiedDate":"2023-11-01"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"        if (!Nric.isValidNric(nric)) {","lastModifiedDate":"2023-11-01"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"            throw new IllegalValueException(Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-01"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":75,"author":{"gitId":"Darren159"},"content":"        final Nric modelNric \u003d new Nric(nric);","lastModifiedDate":"2023-11-01"},{"lineNumber":76,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":77,"author":{"gitId":"Darren159"},"content":"        return new Appointment(modelname, modelDateTime, modelNric);","lastModifiedDate":"2023-11-01"},{"lineNumber":78,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-18"}],"authorContributionMap":{"Darren159":79}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedCondition.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-15"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-10-15"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2023-10-15"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-15"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Condition;","lastModifiedDate":"2023-10-15"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":" * Jackson-friendly version of {@link Condition}.","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"public class JsonAdaptedCondition {","lastModifiedDate":"2023-10-15"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"    private final String condition;","lastModifiedDate":"2023-10-15"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-15"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"     * Constructs a {@code JsonAdaptedCondition} with the given {@code condition}.","lastModifiedDate":"2023-10-15"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-15"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    @JsonCreator","lastModifiedDate":"2023-10-15"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"    public JsonAdaptedCondition(String condition) {","lastModifiedDate":"2023-10-15"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"        this.condition \u003d condition;","lastModifiedDate":"2023-10-15"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-15"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"     * Converts a given {@code Condition} into this class for Jackson use.","lastModifiedDate":"2023-10-15"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-15"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    public JsonAdaptedCondition(Condition source) {","lastModifiedDate":"2023-10-15"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"        this.condition \u003d source.condition;","lastModifiedDate":"2023-10-15"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"    @JsonValue","lastModifiedDate":"2023-10-15"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    public String getCondition() {","lastModifiedDate":"2023-10-15"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"        return condition;","lastModifiedDate":"2023-10-15"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-15"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Condition} object.","lastModifiedDate":"2023-10-15"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"     *","lastModifiedDate":"2023-10-15"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted condition.","lastModifiedDate":"2023-10-15"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-15"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"    public Condition toModelType() throws IllegalValueException {","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"        if (condition \u003d\u003d null) {","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"            throw new IllegalValueException(Condition.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"        if (!Condition.isValidCondition(condition)) {","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"            throw new IllegalValueException(Condition.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"        return new Condition(condition);","lastModifiedDate":"2023-10-15"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-15"}],"authorContributionMap":{"hjoneweek":48}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedMedication.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Medication;","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":" * Jackson-friendly version of {@link Medication}","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"public class JsonAdaptedMedication {","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    private final String medication;","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"     * Constructs a {@code JsonAdaptedMedication} with the given {@code medication}.","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    @JsonCreator","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    public JsonAdaptedMedication(String medication) {","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"        this.medication \u003d medication;","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"     * Converts a given {@code Medication} into this class for Jackson use.","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    public JsonAdaptedMedication(Medication source) {","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"        this.medication \u003d source.medication;","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"    @JsonValue","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"    public String getMedication() {","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"        return medication;","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"     * Converts this Jackson-friendly adapted medication object into the model\u0027s {@code Medication} object.","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted condition.","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"    public Medication toModelType() throws IllegalValueException {","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"        if (medication \u003d\u003d null) {","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"            throw new IllegalValueException(Medication.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"        if (!Medication.isValidMedication(medication)) {","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"            throw new IllegalValueException(Medication.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"        return new Medication(medication);","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"hjoneweek":46}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Age;","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.BloodType;","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Gender;","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.UniqueRecordList;","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Name;","lastModifiedDate":"2023-10-22"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Nric;","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"    private final String nric;","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"    private final String gender;","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"    private final Integer age;","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"    private final String bloodType;","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"    private final List\u003cJsonAdaptedAllergy\u003e allergies \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"    private final List\u003cJsonAdaptedRecord\u003e records \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-15"},{"lineNumber":42,"author":{"gitId":"ryanongwx"},"content":"    private final Boolean isPinned;","lastModifiedDate":"2023-10-17"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"    private final List\u003cJsonAdaptedAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"nric\") String nric,","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2023-10-30"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"            @JsonProperty(\"gender\") String gender,","lastModifiedDate":"2023-10-30"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"            @JsonProperty(\"age\") Integer age, @JsonProperty(\"bloodType\") String bloodType,","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"ryanongwx"},"content":"            @JsonProperty(\"allergies\") List\u003cJsonAdaptedAllergy\u003e allergies,","lastModifiedDate":"2023-10-17"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"            @JsonProperty(\"records\") List\u003cJsonAdaptedRecord\u003e records,","lastModifiedDate":"2023-10-19"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"            @JsonProperty(\"appointments\") List\u003cJsonAdaptedAppointment\u003e appointments,","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"            @JsonProperty(\"isPinned\") Boolean isPinned) {","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2023-10-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"hjoneweek"},"content":"        this.gender \u003d gender;","lastModifiedDate":"2023-10-12"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"        this.age \u003d age;","lastModifiedDate":"2023-10-12"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"        this.bloodType \u003d bloodType;","lastModifiedDate":"2023-10-12"},{"lineNumber":65,"author":{"gitId":"hjoneweek"},"content":"        if (allergies !\u003d null) {","lastModifiedDate":"2023-10-12"},{"lineNumber":66,"author":{"gitId":"hjoneweek"},"content":"            this.allergies.addAll(allergies);","lastModifiedDate":"2023-10-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"hjoneweek"},"content":"        if (records !\u003d null) {","lastModifiedDate":"2023-10-15"},{"lineNumber":69,"author":{"gitId":"hjoneweek"},"content":"            this.records.addAll(records);","lastModifiedDate":"2023-10-15"},{"lineNumber":70,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-15"},{"lineNumber":71,"author":{"gitId":"ryanongwx"},"content":"        this.isPinned \u003d isPinned;","lastModifiedDate":"2023-10-17"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"        if (appointments !\u003d null) {","lastModifiedDate":"2023-10-18"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"            this.appointments.addAll(appointments);","lastModifiedDate":"2023-10-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"Darren159"},"content":"        nric \u003d source.getNric().nric;","lastModifiedDate":"2023-10-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"hjoneweek"},"content":"        gender \u003d source.getGender().gender;","lastModifiedDate":"2023-10-12"},{"lineNumber":86,"author":{"gitId":"hjoneweek"},"content":"        age \u003d source.getAge().age;","lastModifiedDate":"2023-10-12"},{"lineNumber":87,"author":{"gitId":"hjoneweek"},"content":"        bloodType \u003d source.getBloodType().bloodType;","lastModifiedDate":"2023-10-12"},{"lineNumber":88,"author":{"gitId":"hjoneweek"},"content":"        allergies.addAll(source.getAllergies().stream()","lastModifiedDate":"2023-10-12"},{"lineNumber":89,"author":{"gitId":"hjoneweek"},"content":"                .map(JsonAdaptedAllergy::new)","lastModifiedDate":"2023-10-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"hjoneweek"},"content":"        records.addAll(source.getRecords().asUnmodifiableObservableList()","lastModifiedDate":"2023-10-20"},{"lineNumber":92,"author":{"gitId":"hjoneweek"},"content":"                .stream()","lastModifiedDate":"2023-10-20"},{"lineNumber":93,"author":{"gitId":"hjoneweek"},"content":"                .map(JsonAdaptedRecord::new)","lastModifiedDate":"2023-10-15"},{"lineNumber":94,"author":{"gitId":"hjoneweek"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2023-10-15"},{"lineNumber":95,"author":{"gitId":"Darren159"},"content":"        appointments.addAll(source.getAppointments().asUnmodifiableObservableList().stream()","lastModifiedDate":"2023-10-18"},{"lineNumber":96,"author":{"gitId":"Darren159"},"content":"                .map(JsonAdaptedAppointment::new).collect(Collectors.toList()));","lastModifiedDate":"2023-10-30"},{"lineNumber":97,"author":{"gitId":"Darren159"},"content":"        isPinned \u003d source.isPinned();","lastModifiedDate":"2023-10-20"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"Darren159"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s","lastModifiedDate":"2023-10-30"},{"lineNumber":102,"author":{"gitId":"Darren159"},"content":"     * {@code Person} object.","lastModifiedDate":"2023-10-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"Darren159"},"content":"     * @throws IllegalValueException if there were any data constraints violated in","lastModifiedDate":"2023-10-30"},{"lineNumber":105,"author":{"gitId":"Darren159"},"content":"     *                               the adapted person.","lastModifiedDate":"2023-10-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"hjoneweek"},"content":"        final List\u003cAllergy\u003e allergiesList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-12"},{"lineNumber":109,"author":{"gitId":"hjoneweek"},"content":"        for (JsonAdaptedAllergy allergy : allergies) {","lastModifiedDate":"2023-10-12"},{"lineNumber":110,"author":{"gitId":"hjoneweek"},"content":"            allergiesList.add(allergy.toModelType());","lastModifiedDate":"2023-10-12"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"hjoneweek"},"content":"        final UniqueRecordList modelRecords \u003d new UniqueRecordList();","lastModifiedDate":"2023-10-20"},{"lineNumber":114,"author":{"gitId":"hjoneweek"},"content":"        for (JsonAdaptedRecord record : records) {","lastModifiedDate":"2023-10-15"},{"lineNumber":115,"author":{"gitId":"hjoneweek"},"content":"            modelRecords.add(record.toModelType());","lastModifiedDate":"2023-10-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":126,"author":{"gitId":"Darren159"},"content":"        if (nric \u003d\u003d null) {","lastModifiedDate":"2023-10-30"},{"lineNumber":127,"author":{"gitId":"Darren159"},"content":"            throw new IllegalValueException(","lastModifiedDate":"2023-10-30"},{"lineNumber":128,"author":{"gitId":"Darren159"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, seedu.address.model.shared.Nric.class.getSimpleName()));","lastModifiedDate":"2023-11-01"},{"lineNumber":129,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":130,"author":{"gitId":"Darren159"},"content":"        if (!Nric.isValidNric(nric)) {","lastModifiedDate":"2023-10-30"},{"lineNumber":131,"author":{"gitId":"Darren159"},"content":"            throw new IllegalValueException(seedu.address.model.shared.Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-01"},{"lineNumber":132,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":133,"author":{"gitId":"Darren159"},"content":"        final Nric modelNric \u003d new Nric(nric);","lastModifiedDate":"2023-10-30"},{"lineNumber":134,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":151,"author":{"gitId":"hjoneweek"},"content":"        if (gender \u003d\u003d null) {","lastModifiedDate":"2023-10-12"},{"lineNumber":152,"author":{"gitId":"hjoneweek"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));","lastModifiedDate":"2023-10-12"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":154,"author":{"gitId":"hjoneweek"},"content":"        if (!Gender.isValidGender(gender)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":155,"author":{"gitId":"hjoneweek"},"content":"            throw new IllegalValueException(Gender.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":157,"author":{"gitId":"hjoneweek"},"content":"        final Gender modelGender \u003d new Gender(gender);","lastModifiedDate":"2023-10-12"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":159,"author":{"gitId":"hjoneweek"},"content":"        if (age \u003d\u003d null) {","lastModifiedDate":"2023-10-12"},{"lineNumber":160,"author":{"gitId":"ryanongwx"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Age.class.getSimpleName()));","lastModifiedDate":"2023-10-17"},{"lineNumber":161,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":162,"author":{"gitId":"hjoneweek"},"content":"        if (!Age.isValidAge(age)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":163,"author":{"gitId":"hjoneweek"},"content":"            throw new IllegalValueException(Age.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":164,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":165,"author":{"gitId":"hjoneweek"},"content":"        final Age modelAge \u003d new Age(age);","lastModifiedDate":"2023-10-12"},{"lineNumber":166,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":167,"author":{"gitId":"hjoneweek"},"content":"        if (bloodType \u003d\u003d null) {","lastModifiedDate":"2023-10-12"},{"lineNumber":168,"author":{"gitId":"adammangzijun"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2023-10-14"},{"lineNumber":169,"author":{"gitId":"adammangzijun"},"content":"                    BloodType.class.getSimpleName()));","lastModifiedDate":"2023-10-14"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":171,"author":{"gitId":"hjoneweek"},"content":"        if (!BloodType.isValidBloodType(bloodType)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":172,"author":{"gitId":"hjoneweek"},"content":"            throw new IllegalValueException(BloodType.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":174,"author":{"gitId":"hjoneweek"},"content":"        final BloodType modelBloodType \u003d new BloodType(bloodType);","lastModifiedDate":"2023-10-12"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":176,"author":{"gitId":"hjoneweek"},"content":"        final Set\u003cAllergy\u003e modelAllergies \u003d new HashSet\u003c\u003e(allergiesList);","lastModifiedDate":"2023-10-12"},{"lineNumber":177,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":178,"author":{"gitId":"Darren159"},"content":"        final UniqueAppointmentList modelAppointments \u003d new UniqueAppointmentList();","lastModifiedDate":"2023-10-18"},{"lineNumber":179,"author":{"gitId":"Darren159"},"content":"        for (JsonAdaptedAppointment jsonAdaptedAppointment : appointments) {","lastModifiedDate":"2023-10-18"},{"lineNumber":180,"author":{"gitId":"Darren159"},"content":"            Appointment appointment \u003d jsonAdaptedAppointment.toModelType();","lastModifiedDate":"2023-10-18"},{"lineNumber":181,"author":{"gitId":"Darren159"},"content":"            modelAppointments.add(appointment);","lastModifiedDate":"2023-10-18"},{"lineNumber":182,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":183,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":184,"author":{"gitId":"Darren159"},"content":"        return new Person(modelName, modelNric, modelEmail, modelPhone, modelGender,","lastModifiedDate":"2023-10-30"},{"lineNumber":185,"author":{"gitId":"Darren159"},"content":"                modelAge, modelBloodType, modelAllergies, modelRecords, modelAppointments, isPinned);","lastModifiedDate":"2023-10-20"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":187,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Darren159":40,"hjoneweek":49,"-":88,"adammangzijun":6,"ryanongwx":4}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedRecord.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-15"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":3,"author":{"gitId":"ryanongwx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"ryanongwx"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import java.util.List;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-10-15"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-15"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Condition;","lastModifiedDate":"2023-10-15"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Medication;","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2023-10-15"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.DateTime;","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":" * Jackson-friendly version of {@link Record}.","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"public class JsonAdaptedRecord {","lastModifiedDate":"2023-10-15"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Record\u0027s %s field is missing!\";","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"    private final String dateTime;","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    private final List\u003cJsonAdaptedCondition\u003e conditions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-15"},{"lineNumber":26,"author":{"gitId":"ryanongwx"},"content":"    private final String filePath;","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"ryanongwx"},"content":"    private final Integer personIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"    private final List\u003cJsonAdaptedMedication\u003e medications \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-15"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"     * Constructs a {@code JsonAdoptedRecord} with the given record details.","lastModifiedDate":"2023-10-15"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-15"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"    @JsonCreator","lastModifiedDate":"2023-10-15"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"    public JsonAdaptedRecord(@JsonProperty(\"dateTime\") String dateTime,","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"ryanongwx"},"content":"            @JsonProperty(\"condition\") List\u003cJsonAdaptedCondition\u003e conditions,","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"ryanongwx"},"content":"            @JsonProperty(\"medication\") List\u003cJsonAdaptedMedication\u003e medications,","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"ryanongwx"},"content":"            @JsonProperty(\"filePath\") String filePath,","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"ryanongwx"},"content":"            @JsonProperty(\"personIndex\") Integer personIndex) {","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2023-10-15"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"        if (conditions !\u003d null) {","lastModifiedDate":"2023-10-15"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"            this.conditions.addAll(conditions);","lastModifiedDate":"2023-10-15"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-15"},{"lineNumber":44,"author":{"gitId":"ryanongwx"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"ryanongwx"},"content":"        this.personIndex \u003d personIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"        if (medications !\u003d null) {","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"            this.medications.addAll(medications);","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-15"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"     * Converts a given {@code Record} into this class for Jackson use.","lastModifiedDate":"2023-10-15"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-15"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"    public JsonAdaptedRecord(Record source) {","lastModifiedDate":"2023-10-15"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"        this.dateTime \u003d source.getDateTime().toString();","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"ryanongwx"},"content":"        this.personIndex \u003d source.getPersonIndex();","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"ryanongwx"},"content":"        this.filePath \u003d source.getFilePath() \u003d\u003d null ? null : source.getFilePath().toString();","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"        this.conditions.addAll(source.getConditions().stream()","lastModifiedDate":"2023-10-15"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"                .map(JsonAdaptedCondition::new)","lastModifiedDate":"2023-10-15"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2023-10-15"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"        this.medications.addAll(source.getMedications().stream()","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"hjoneweek"},"content":"                .map(JsonAdaptedMedication::new)","lastModifiedDate":"2023-10-26"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2023-10-26"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":65,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":66,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-15"},{"lineNumber":67,"author":{"gitId":"ryanongwx"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s","lastModifiedDate":"2023-10-24"},{"lineNumber":68,"author":{"gitId":"ryanongwx"},"content":"     * {@code Person} object.","lastModifiedDate":"2023-10-24"},{"lineNumber":69,"author":{"gitId":"hjoneweek"},"content":"     *","lastModifiedDate":"2023-10-15"},{"lineNumber":70,"author":{"gitId":"ryanongwx"},"content":"     * @throws IllegalValueException if there were any data constraints violated in","lastModifiedDate":"2023-10-24"},{"lineNumber":71,"author":{"gitId":"ryanongwx"},"content":"     *                               the adapted person.","lastModifiedDate":"2023-10-24"},{"lineNumber":72,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-15"},{"lineNumber":73,"author":{"gitId":"hjoneweek"},"content":"    public Record toModelType() throws IllegalValueException {","lastModifiedDate":"2023-10-15"},{"lineNumber":74,"author":{"gitId":"hjoneweek"},"content":"        final List\u003cCondition\u003e conditionsList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-15"},{"lineNumber":75,"author":{"gitId":"hjoneweek"},"content":"        final List\u003cMedication\u003e medicationsList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-26"},{"lineNumber":76,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"hjoneweek"},"content":"        for (JsonAdaptedCondition condition : conditions) {","lastModifiedDate":"2023-10-15"},{"lineNumber":78,"author":{"gitId":"hjoneweek"},"content":"            if (condition \u003d\u003d null) {","lastModifiedDate":"2023-10-20"},{"lineNumber":79,"author":{"gitId":"hjoneweek"},"content":"                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2023-10-20"},{"lineNumber":80,"author":{"gitId":"hjoneweek"},"content":"                        Condition.class.getSimpleName()));","lastModifiedDate":"2023-10-20"},{"lineNumber":81,"author":{"gitId":"hjoneweek"},"content":"            }","lastModifiedDate":"2023-10-20"},{"lineNumber":82,"author":{"gitId":"hjoneweek"},"content":"            conditionsList.add(condition.toModelType());","lastModifiedDate":"2023-10-15"},{"lineNumber":83,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-15"},{"lineNumber":84,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":85,"author":{"gitId":"hjoneweek"},"content":"        for (JsonAdaptedMedication medication : medications) {","lastModifiedDate":"2023-10-26"},{"lineNumber":86,"author":{"gitId":"hjoneweek"},"content":"            if (medication \u003d\u003d null) {","lastModifiedDate":"2023-10-26"},{"lineNumber":87,"author":{"gitId":"hjoneweek"},"content":"                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2023-10-26"},{"lineNumber":88,"author":{"gitId":"hjoneweek"},"content":"                        Medication.class.getSimpleName()));","lastModifiedDate":"2023-10-26"},{"lineNumber":89,"author":{"gitId":"hjoneweek"},"content":"            }","lastModifiedDate":"2023-10-26"},{"lineNumber":90,"author":{"gitId":"hjoneweek"},"content":"            medicationsList.add(medication.toModelType());","lastModifiedDate":"2023-10-26"},{"lineNumber":91,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":92,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":93,"author":{"gitId":"hjoneweek"},"content":"        if (dateTime \u003d\u003d null) {","lastModifiedDate":"2023-10-15"},{"lineNumber":94,"author":{"gitId":"hjoneweek"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2023-10-15"},{"lineNumber":95,"author":{"gitId":"hjoneweek"},"content":"                    DateTime.class.getSimpleName()));","lastModifiedDate":"2023-10-15"},{"lineNumber":96,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-15"},{"lineNumber":97,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":98,"author":{"gitId":"hjoneweek"},"content":"        final DateTime modelDateTime \u003d new DateTime(dateTime);","lastModifiedDate":"2023-10-15"},{"lineNumber":99,"author":{"gitId":"ryanongwx"},"content":"        final List\u003cMedication\u003e modelMedications \u003d new ArrayList\u003c\u003e(medicationsList);","lastModifiedDate":"2023-10-26"},{"lineNumber":100,"author":{"gitId":"hjoneweek"},"content":"        final List\u003cCondition\u003e modelConditions \u003d new ArrayList\u003c\u003e(conditionsList);","lastModifiedDate":"2023-10-15"},{"lineNumber":101,"author":{"gitId":"ryanongwx"},"content":"        if (filePath \u003d\u003d null) {","lastModifiedDate":"2023-10-24"},{"lineNumber":102,"author":{"gitId":"ryanongwx"},"content":"            return new Record(modelDateTime, modelConditions, modelMedications, null, personIndex);","lastModifiedDate":"2023-10-26"},{"lineNumber":103,"author":{"gitId":"ryanongwx"},"content":"        } else {","lastModifiedDate":"2023-10-24"},{"lineNumber":104,"author":{"gitId":"ryanongwx"},"content":"            Path modelFilePath \u003d Paths.get(filePath);","lastModifiedDate":"2023-10-24"},{"lineNumber":105,"author":{"gitId":"ryanongwx"},"content":"            return new Record(modelDateTime, modelConditions, modelMedications, modelFilePath, personIndex);","lastModifiedDate":"2023-10-26"},{"lineNumber":106,"author":{"gitId":"ryanongwx"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":107,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":108,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-15"}],"authorContributionMap":{"hjoneweek":81,"Darren159":4,"ryanongwx":23}},{"path":"src/main/java/seedu/address/storage/JsonAddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"ryanongwx"},"content":"import java.nio.charset.StandardCharsets;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"ryanongwx"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * A class to access AddressBook data stored as a json file on the hard disk.","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorage implements AddressBookStorage {","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"ryanongwx"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"ryanongwx"},"content":"     * Constructs a new JsonAddressBookStorage instance with a given filePath.","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"ryanongwx"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"ryanongwx"},"content":"     * @param filePath The path to the file.","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"ryanongwx"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public JsonAddressBookStorage(Path filePath) {","lastModifiedDate":"2023-10-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"ryanongwx"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"ryanongwx"},"content":"     * Returns the file path where the AddressBook is stored.","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"ryanongwx"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"ryanongwx"},"content":"     * @return The file path.","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"ryanongwx"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"ryanongwx"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"ryanongwx"},"content":"     * Reads the AddressBook from the default file path.","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"ryanongwx"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"ryanongwx"},"content":"     * @return An Optional containing the AddressBook if it exists, or empty","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"ryanongwx"},"content":"     *         otherwise.","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"ryanongwx"},"content":"     * @throws DataLoadingException if there was an error reading the AddressBook.","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"ryanongwx"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return readAddressBook(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"ryanongwx"},"content":"     * Reads the AddressBook from the specified file path.","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"ryanongwx"},"content":"     * @param filePath The path to the file.","lastModifiedDate":"2023-10-24"},{"lineNumber":61,"author":{"gitId":"ryanongwx"},"content":"     * @return An Optional containing the AddressBook if it exists, or empty","lastModifiedDate":"2023-10-24"},{"lineNumber":62,"author":{"gitId":"ryanongwx"},"content":"     *         otherwise.","lastModifiedDate":"2023-10-24"},{"lineNumber":63,"author":{"gitId":"ryanongwx"},"content":"     * @throws DataLoadingException if there was an error reading the AddressBook.","lastModifiedDate":"2023-10-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"ryanongwx"},"content":"        if (!FileUtil.isFileExists(filePath)) {","lastModifiedDate":"2023-10-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"ryanongwx"},"content":"            String data \u003d new String(Files.readAllBytes(filePath), StandardCharsets.UTF_8);","lastModifiedDate":"2023-11-08"},{"lineNumber":74,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":75,"author":{"gitId":"ryanongwx"},"content":"            JsonSerializableAddressBook jsonAddressBook \u003d JsonUtil.fromJsonString(","lastModifiedDate":"2023-10-24"},{"lineNumber":76,"author":{"gitId":"ryanongwx"},"content":"                    data, JsonSerializableAddressBook.class);","lastModifiedDate":"2023-11-08"},{"lineNumber":77,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":78,"author":{"gitId":"ryanongwx"},"content":"            if (jsonAddressBook \u003d\u003d null) {","lastModifiedDate":"2023-10-24"},{"lineNumber":79,"author":{"gitId":"ryanongwx"},"content":"                return Optional.empty();","lastModifiedDate":"2023-10-24"},{"lineNumber":80,"author":{"gitId":"ryanongwx"},"content":"            }","lastModifiedDate":"2023-10-24"},{"lineNumber":81,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":82,"author":{"gitId":"ryanongwx"},"content":"            return Optional.of(jsonAddressBook.toModelType());","lastModifiedDate":"2023-10-24"},{"lineNumber":83,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":84,"author":{"gitId":"ryanongwx"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-10-24"},{"lineNumber":85,"author":{"gitId":"ryanongwx"},"content":"            throw new DataLoadingException(e);","lastModifiedDate":"2023-10-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"ryanongwx"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":90,"author":{"gitId":"ryanongwx"},"content":"     * Saves the AddressBook to the default file path.","lastModifiedDate":"2023-10-24"},{"lineNumber":91,"author":{"gitId":"ryanongwx"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":92,"author":{"gitId":"ryanongwx"},"content":"     * @param addressBook The AddressBook to be saved.","lastModifiedDate":"2023-10-24"},{"lineNumber":93,"author":{"gitId":"ryanongwx"},"content":"     * @throws IOException if there was an error writing to the file.","lastModifiedDate":"2023-10-24"},{"lineNumber":94,"author":{"gitId":"ryanongwx"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"ryanongwx"},"content":"     * Saves the AddressBook to the specified file path.","lastModifiedDate":"2023-10-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"ryanongwx"},"content":"     * @param addressBook The AddressBook to be saved.","lastModifiedDate":"2023-10-24"},{"lineNumber":104,"author":{"gitId":"ryanongwx"},"content":"     * @param filePath    The path to the file.","lastModifiedDate":"2023-10-24"},{"lineNumber":105,"author":{"gitId":"ryanongwx"},"content":"     * @throws IOException if there was an error writing to the file.","lastModifiedDate":"2023-10-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireNonNull(addressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"ryanongwx"},"content":"        String jsonData \u003d JsonUtil.toJsonString(new JsonSerializableAddressBook(addressBook));","lastModifiedDate":"2023-10-24"},{"lineNumber":113,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":114,"author":{"gitId":"ryanongwx"},"content":"        Files.write(filePath, jsonData.getBytes(StandardCharsets.UTF_8));","lastModifiedDate":"2023-11-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"-":66,"ryanongwx":51}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Manages storage of AddressBook data in local storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":20,"author":{"gitId":"ryanongwx"},"content":"    private static StorageManager instance;","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private AddressBookStorage addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"ryanongwx"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage}","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"ryanongwx"},"content":"     * and {@code UserPrefStorage}.","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2016-10-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"ryanongwx"},"content":"        this.instance \u003d this;","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataLoadingException {","lastModifiedDate":"2023-06-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataLoadingException {","lastModifiedDate":"2023-06-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataLoadingException {","lastModifiedDate":"2023-06-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"ryanongwx"},"content":"    public static StorageManager getInstance() {","lastModifiedDate":"2023-10-24"},{"lineNumber":81,"author":{"gitId":"ryanongwx"},"content":"        return instance;","lastModifiedDate":"2023-10-24"},{"lineNumber":82,"author":{"gitId":"ryanongwx"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":83,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":76,"ryanongwx":8}},{"path":"src/main/java/seedu/address/ui/AppointmentCalenderPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import java.time.DayOfWeek;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"import javafx.scene.layout.GridPane;","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":" * Panel containing the list of appointments.","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"public class AppointmentCalenderPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"    private static final String FXML \u003d \"AppointmentCalenderPanel.fxml\";","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(AppointmentCalenderPanel.class);","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"    @FXML","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"    private ObservableList\u003cAppointment\u003e appointmentList;","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"    @FXML","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"    private GridPane calendarGrid;","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"    @FXML","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"    private Label currentMonthLabel;","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"    private LocalDate currentDate;","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"     * Creates a {@code AppointmentCalender","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"     * Panel} with the given {@code ObservableList}.","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"    public AppointmentCalenderPanel(ObservableList\u003cAppointment\u003e appointmentList) {","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"        super(FXML);","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"        this.appointmentList \u003d appointmentList;","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"        currentDate \u003d LocalDate.now();","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"        populateMonth(currentDate);","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"        this.appointmentList.addListener((javafx.collections.ListChangeListener.Change\u003c? extends Appointment\u003e c) -\u003e {","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"            populateMonth(currentDate);","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"        });","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Appointment}","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"     * using","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"     * a {@code AppointmentCard}.","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"    class AppointmentListViewCell extends ListCell\u003cAppointment\u003e {","lastModifiedDate":"2023-11-01"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"        protected void updateItem(Appointment appointment, boolean empty) {","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"            super.updateItem(appointment, empty);","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"            if (empty || appointment \u003d\u003d null) {","lastModifiedDate":"2023-11-01"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"                setGraphic(null);","lastModifiedDate":"2023-11-01"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"                setText(null);","lastModifiedDate":"2023-11-01"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"            } else {","lastModifiedDate":"2023-11-01"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"                setGraphic(new AppointmentCard(appointment, getIndex() + 1).getRoot());","lastModifiedDate":"2023-11-01"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"            }","lastModifiedDate":"2023-11-01"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"    @FXML","lastModifiedDate":"2023-11-01"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"    private void initialize() {","lastModifiedDate":"2023-11-01"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"    @FXML","lastModifiedDate":"2023-11-01"},{"lineNumber":75,"author":{"gitId":"Darren159"},"content":"    private void previousMonth() {","lastModifiedDate":"2023-11-01"},{"lineNumber":76,"author":{"gitId":"Darren159"},"content":"        currentDate \u003d currentDate.minusMonths(1);","lastModifiedDate":"2023-11-01"},{"lineNumber":77,"author":{"gitId":"Darren159"},"content":"        populateMonth(currentDate);","lastModifiedDate":"2023-11-01"},{"lineNumber":78,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":80,"author":{"gitId":"Darren159"},"content":"    @FXML","lastModifiedDate":"2023-11-01"},{"lineNumber":81,"author":{"gitId":"Darren159"},"content":"    private void nextMonth() {","lastModifiedDate":"2023-11-01"},{"lineNumber":82,"author":{"gitId":"Darren159"},"content":"        currentDate \u003d currentDate.plusMonths(1);","lastModifiedDate":"2023-11-01"},{"lineNumber":83,"author":{"gitId":"Darren159"},"content":"        populateMonth(currentDate);","lastModifiedDate":"2023-11-01"},{"lineNumber":84,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":85,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":86,"author":{"gitId":"Darren159"},"content":"    private void populateMonth(LocalDate date) {","lastModifiedDate":"2023-11-01"},{"lineNumber":87,"author":{"gitId":"Darren159"},"content":"        calendarGrid.getChildren().clear(); // Clear the previous month\u0027s data","lastModifiedDate":"2023-11-01"},{"lineNumber":88,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":89,"author":{"gitId":"Darren159"},"content":"        // Print headers (days of the week)","lastModifiedDate":"2023-11-01"},{"lineNumber":90,"author":{"gitId":"Darren159"},"content":"        DayOfWeek[] daysOfWeek \u003d { DayOfWeek.SUNDAY, DayOfWeek.MONDAY, DayOfWeek.TUESDAY, DayOfWeek.WEDNESDAY,","lastModifiedDate":"2023-11-01"},{"lineNumber":91,"author":{"gitId":"Darren159"},"content":"            DayOfWeek.THURSDAY, DayOfWeek.FRIDAY, DayOfWeek.SATURDAY };","lastModifiedDate":"2023-11-01"},{"lineNumber":92,"author":{"gitId":"Darren159"},"content":"        for (int i \u003d 0; i \u003c daysOfWeek.length; i++) {","lastModifiedDate":"2023-11-01"},{"lineNumber":93,"author":{"gitId":"Darren159"},"content":"            Label label \u003d new Label(daysOfWeek[i].toString().substring(0, 3));","lastModifiedDate":"2023-11-01"},{"lineNumber":94,"author":{"gitId":"Darren159"},"content":"            label.setAlignment(Pos.CENTER);","lastModifiedDate":"2023-11-01"},{"lineNumber":95,"author":{"gitId":"Darren159"},"content":"            label.getStyleClass().add(\"label-bright\");","lastModifiedDate":"2023-11-01"},{"lineNumber":96,"author":{"gitId":"Darren159"},"content":"            calendarGrid.add(label, i, 0);","lastModifiedDate":"2023-11-01"},{"lineNumber":97,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":98,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":99,"author":{"gitId":"Darren159"},"content":"        // Determine the first day of the month","lastModifiedDate":"2023-11-01"},{"lineNumber":100,"author":{"gitId":"Darren159"},"content":"        LocalDate firstOfMonth \u003d date.withDayOfMonth(1);","lastModifiedDate":"2023-11-01"},{"lineNumber":101,"author":{"gitId":"Darren159"},"content":"        int dayOfWeek \u003d firstOfMonth.getDayOfWeek().getValue() % 7;","lastModifiedDate":"2023-11-01"},{"lineNumber":102,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":103,"author":{"gitId":"Darren159"},"content":"        int rowOffset \u003d dayOfWeek;","lastModifiedDate":"2023-11-01"},{"lineNumber":104,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":105,"author":{"gitId":"Darren159"},"content":"        // Populate days","lastModifiedDate":"2023-11-01"},{"lineNumber":106,"author":{"gitId":"Darren159"},"content":"        for (int day \u003d 1; day \u003c\u003d date.lengthOfMonth(); day++) {","lastModifiedDate":"2023-11-01"},{"lineNumber":107,"author":{"gitId":"Darren159"},"content":"            VBox dateBox \u003d new VBox();","lastModifiedDate":"2023-11-01"},{"lineNumber":108,"author":{"gitId":"Darren159"},"content":"            dateBox.setMinHeight(50);","lastModifiedDate":"2023-11-01"},{"lineNumber":109,"author":{"gitId":"Darren159"},"content":"            Label dateLabel \u003d new Label(Integer.toString(day));","lastModifiedDate":"2023-11-01"},{"lineNumber":110,"author":{"gitId":"Darren159"},"content":"            dateLabel.getStyleClass().add(\"label-bright\");","lastModifiedDate":"2023-11-01"},{"lineNumber":111,"author":{"gitId":"Darren159"},"content":"            dateBox.getChildren().add(dateLabel);","lastModifiedDate":"2023-11-01"},{"lineNumber":112,"author":{"gitId":"Darren159"},"content":"            int currentRow \u003d 1 + (day + rowOffset - 1) / 7;","lastModifiedDate":"2023-11-01"},{"lineNumber":113,"author":{"gitId":"Darren159"},"content":"            calendarGrid.add(dateBox, dayOfWeek, currentRow);","lastModifiedDate":"2023-11-01"},{"lineNumber":114,"author":{"gitId":"Darren159"},"content":"            dayOfWeek \u003d (dayOfWeek + 1) % 7;","lastModifiedDate":"2023-11-01"},{"lineNumber":115,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":116,"author":{"gitId":"Darren159"},"content":"        for (Appointment appointment : appointmentList) {","lastModifiedDate":"2023-11-01"},{"lineNumber":117,"author":{"gitId":"Darren159"},"content":"            LocalDate appointmentDate \u003d appointment.getDateTime().dateTime.toLocalDate();","lastModifiedDate":"2023-11-01"},{"lineNumber":118,"author":{"gitId":"Darren159"},"content":"            if (appointmentDate.getMonth() \u003d\u003d date.getMonth() \u0026\u0026 appointmentDate.getYear() \u003d\u003d date.getYear()) {","lastModifiedDate":"2023-11-01"},{"lineNumber":119,"author":{"gitId":"Darren159"},"content":"                // This appointment belongs to the currently displayed month","lastModifiedDate":"2023-11-01"},{"lineNumber":120,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":121,"author":{"gitId":"Darren159"},"content":"                int day \u003d appointmentDate.getDayOfMonth();","lastModifiedDate":"2023-11-01"},{"lineNumber":122,"author":{"gitId":"Darren159"},"content":"                System.out.println(appointment.getDateTime().toString() + day);","lastModifiedDate":"2023-11-01"},{"lineNumber":123,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":124,"author":{"gitId":"Darren159"},"content":"                int cellDayOfWeek \u003d (firstOfMonth.getDayOfWeek().getValue() + day - 1) % 7;","lastModifiedDate":"2023-11-01"},{"lineNumber":125,"author":{"gitId":"Darren159"},"content":"                System.out.println(cellDayOfWeek);","lastModifiedDate":"2023-11-01"},{"lineNumber":126,"author":{"gitId":"Darren159"},"content":"                // Find the label that corresponds to this day","lastModifiedDate":"2023-11-01"},{"lineNumber":127,"author":{"gitId":"Darren159"},"content":"                for (Node node : calendarGrid.getChildren()) {","lastModifiedDate":"2023-11-01"},{"lineNumber":128,"author":{"gitId":"Darren159"},"content":"                    if (GridPane.getRowIndex(node) \u003d\u003d 1 + (day + rowOffset - 1) / 7","lastModifiedDate":"2023-11-01"},{"lineNumber":129,"author":{"gitId":"Darren159"},"content":"                            \u0026\u0026 GridPane.getColumnIndex(node) \u003d\u003d cellDayOfWeek) {","lastModifiedDate":"2023-11-01"},{"lineNumber":130,"author":{"gitId":"Darren159"},"content":"                        VBox dateBox \u003d (VBox) node;","lastModifiedDate":"2023-11-01"},{"lineNumber":131,"author":{"gitId":"Darren159"},"content":"                        if (dateBox.getChildren().size() \u003c 3) { // Assuming \u0027n\u0027 is 3 for illustration","lastModifiedDate":"2023-11-01"},{"lineNumber":132,"author":{"gitId":"Darren159"},"content":"                            Label appointmentLabel \u003d new Label(appointment.getName().fullName);","lastModifiedDate":"2023-11-01"},{"lineNumber":133,"author":{"gitId":"Darren159"},"content":"                            appointmentLabel.getStyleClass().add(\"label-bright\");","lastModifiedDate":"2023-11-01"},{"lineNumber":134,"author":{"gitId":"Darren159"},"content":"                            dateBox.getChildren().add(appointmentLabel);","lastModifiedDate":"2023-11-01"},{"lineNumber":135,"author":{"gitId":"Darren159"},"content":"                            break;","lastModifiedDate":"2023-11-01"},{"lineNumber":136,"author":{"gitId":"Darren159"},"content":"                        }","lastModifiedDate":"2023-11-01"},{"lineNumber":137,"author":{"gitId":"Darren159"},"content":"                    }","lastModifiedDate":"2023-11-01"},{"lineNumber":138,"author":{"gitId":"Darren159"},"content":"                }","lastModifiedDate":"2023-11-01"},{"lineNumber":139,"author":{"gitId":"Darren159"},"content":"            }","lastModifiedDate":"2023-11-01"},{"lineNumber":140,"author":{"gitId":"Darren159"},"content":"            currentMonthLabel.setText(date.getMonth() + \" \" + date.getYear());","lastModifiedDate":"2023-11-01"},{"lineNumber":141,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":142,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":143,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"Darren159":143}},{"path":"src/main/java/seedu/address/ui/AppointmentCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":" * An UI component that displays information of a {@code Appointment}.","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"public class AppointmentCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"    private static final String FXML \u003d \"AppointmentListCard.fxml\";","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"     * keywords in JavaFX.","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"     *","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"     *      issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"    public final Appointment appointment;","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"    @FXML","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"    private HBox cardPane;","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"    @FXML","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"    private Label name;","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"    @FXML","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"    private Label dateTime;","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"    @FXML","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"    private Label nric;","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"    @FXML","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"    private Label id;","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"     * Creates a {@code AppointmentCode} with the given {@code Appointment} and","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"     * index to display.","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"    public AppointmentCard(Appointment appointment, int displayedIndex) {","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"        super(FXML);","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"        name.setText(appointment.getName().fullName);","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"        dateTime.setText(appointment.getDateTime().toString());","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"        nric.setText(appointment.getNric().nric);","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"Darren159":51}},{"path":"src/main/java/seedu/address/ui/AppointmentListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":" * Panel containing the list of appointments.","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"public class AppointmentListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"    private static final String FXML \u003d \"AppointmentListPanel.fxml\";","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(AppointmentListPanel.class);","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"    @FXML","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"    private ListView\u003cAppointment\u003e appointmentListView;","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"     * Creates a {@code AppointmentListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"    public AppointmentListPanel(ObservableList\u003cAppointment\u003e appointmentList) {","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"        super(FXML);","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"        appointmentListView.setItems(appointmentList);","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"        appointmentListView.setCellFactory(listView -\u003e new AppointmentListViewCell());","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Appointment}","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"     * using","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"     * a {@code AppointmentCard}.","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"    class AppointmentListViewCell extends ListCell\u003cAppointment\u003e {","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"        protected void updateItem(Appointment appointment, boolean empty) {","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"            super.updateItem(appointment, empty);","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"            if (empty || appointment \u003d\u003d null) {","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"                setGraphic(null);","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"                setText(null);","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"            } else {","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"                setGraphic(new AppointmentCard(appointment, getIndex() + 1).getRoot());","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"            }","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"Darren159":51}},{"path":"src/main/java/seedu/address/ui/AppointmentsWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":" * Controller for an Appointments page","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"public class AppointmentsWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"    private static final String FXML \u003d \"AppointmentsWindow.fxml\";","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(AppointmentsWindow.class);","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"    private Logic logic;","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"    private AppointmentListPanel appointmentListPanel;","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"    private AppointmentCalenderPanel appointmentCalenderPanel;","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"    @FXML","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"    private StackPane appointmentListPanelPlaceholder;","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"    @FXML","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"    private StackPane appointmentCalenderPanelPlaceholder;","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"     * Creates a new AppointmentsWindow.","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"     *","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"     * @param root Stage to use as the root of the AppointmentsWindow.","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"    public AppointmentsWindow(Stage root, Logic logic) {","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"        super(FXML, root);","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"    void fillInnerParts() {","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"        ObservableList\u003cAppointment\u003e filteredAppointments \u003d logic.getFilteredAppointmentList();","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"        appointmentListPanel \u003d new AppointmentListPanel(filteredAppointments);","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"        appointmentListPanelPlaceholder.getChildren().add(appointmentListPanel.getRoot());","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"        appointmentCalenderPanel \u003d new AppointmentCalenderPanel(filteredAppointments);","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"        appointmentCalenderPanelPlaceholder.getChildren().add(appointmentCalenderPanel.getRoot());","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"     * Shows the appointment window.","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"     *","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2023-11-01"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"     *                               \u003cul\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"     *                               \u003cli\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"     *                               if this method is called on a thread other than","lastModifiedDate":"2023-11-01"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"     *                               the JavaFX Application Thread.","lastModifiedDate":"2023-11-01"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"     *                               \u003c/li\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"     *                               \u003cli\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"     *                               if this method is called during animation or","lastModifiedDate":"2023-11-01"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"     *                               layout processing.","lastModifiedDate":"2023-11-01"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"     *                               \u003c/li\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"     *                               \u003cli\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"     *                               if this method is called on the primary stage.","lastModifiedDate":"2023-11-01"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"     *                               \u003c/li\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"     *                               \u003cli\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"     *                               if {@code dialogStage} is already showing.","lastModifiedDate":"2023-11-01"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"     *                               \u003c/li\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":75,"author":{"gitId":"Darren159"},"content":"     *                               \u003c/ul\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":76,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":77,"author":{"gitId":"Darren159"},"content":"    public void show() {","lastModifiedDate":"2023-11-01"},{"lineNumber":78,"author":{"gitId":"Darren159"},"content":"        logger.fine(\"Showing appointments window.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"        getRoot().show();","lastModifiedDate":"2023-11-01"},{"lineNumber":80,"author":{"gitId":"Darren159"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2023-11-01"},{"lineNumber":81,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":82,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":83,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":84,"author":{"gitId":"Darren159"},"content":"     * Returns true if the appointments window is currently being shown.","lastModifiedDate":"2023-11-01"},{"lineNumber":85,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":86,"author":{"gitId":"Darren159"},"content":"    public boolean isShowing() {","lastModifiedDate":"2023-11-01"},{"lineNumber":87,"author":{"gitId":"Darren159"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2023-11-01"},{"lineNumber":88,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":89,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":90,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":91,"author":{"gitId":"Darren159"},"content":"     * Hides the appointments window.","lastModifiedDate":"2023-11-01"},{"lineNumber":92,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":93,"author":{"gitId":"Darren159"},"content":"    public void hide() {","lastModifiedDate":"2023-11-01"},{"lineNumber":94,"author":{"gitId":"Darren159"},"content":"        getRoot().hide();","lastModifiedDate":"2023-11-01"},{"lineNumber":95,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":96,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":97,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":98,"author":{"gitId":"Darren159"},"content":"     * Focuses on the appointments window.","lastModifiedDate":"2023-11-01"},{"lineNumber":99,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":100,"author":{"gitId":"Darren159"},"content":"    public void focus() {","lastModifiedDate":"2023-11-01"},{"lineNumber":101,"author":{"gitId":"Darren159"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2023-11-01"},{"lineNumber":102,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":103,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"Darren159":103}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2023-10-29"},{"lineNumber":14,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.logic.commands.AddRecordCommand;","lastModifiedDate":"2023-10-29"},{"lineNumber":15,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.logic.commands.DeleteAppointmentCommand;","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2023-10-29"},{"lineNumber":17,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.logic.commands.DeleteRecordCommand;","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2023-10-29"},{"lineNumber":19,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.logic.commands.EditRecordCommand;","lastModifiedDate":"2023-10-29"},{"lineNumber":20,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2023-10-29"},{"lineNumber":21,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2023-10-29"},{"lineNumber":22,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.logic.commands.FindRecordCommand;","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2023-10-29"},{"lineNumber":24,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.logic.commands.PinCommand;","lastModifiedDate":"2023-10-29"},{"lineNumber":25,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.logic.commands.UnpinCommand;","lastModifiedDate":"2023-10-29"},{"lineNumber":26,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.logic.commands.ViewAppointmentCommand;","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.logic.commands.ViewCommand;","lastModifiedDate":"2023-10-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"Clin-lyx"},"content":"    public static final String USERGUIDE_URL \u003d","lastModifiedDate":"2023-10-29"},{"lineNumber":35,"author":{"gitId":"Clin-lyx"},"content":"            \"https://ay2324s1-cs2103t-t12-4.github.io/tp/UserGuide.html\";","lastModifiedDate":"2023-10-29"},{"lineNumber":36,"author":{"gitId":"Clin-lyx"},"content":"    public static final String HELP_MESSAGE \u003d \"A more detailed User \"","lastModifiedDate":"2023-10-29"},{"lineNumber":37,"author":{"gitId":"Clin-lyx"},"content":"            + \"Guide can be accessed \" + \"from this url: \";","lastModifiedDate":"2023-10-29"},{"lineNumber":38,"author":{"gitId":"Clin-lyx"},"content":"    public static final String COMMAND_SUMMARY \u003d \"COMMAND SUMMARY\";","lastModifiedDate":"2023-10-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":44,"author":{"gitId":"Clin-lyx"},"content":"    @FXML","lastModifiedDate":"2023-10-29"},{"lineNumber":45,"author":{"gitId":"Clin-lyx"},"content":"    private Label commandSummary;","lastModifiedDate":"2023-10-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":48,"author":{"gitId":"Clin-lyx"},"content":"    @FXML","lastModifiedDate":"2023-10-29"},{"lineNumber":49,"author":{"gitId":"Clin-lyx"},"content":"    private Label addPatient;","lastModifiedDate":"2023-10-29"},{"lineNumber":50,"author":{"gitId":"Clin-lyx"},"content":"    @FXML","lastModifiedDate":"2023-10-29"},{"lineNumber":51,"author":{"gitId":"Clin-lyx"},"content":"    private Label editPatient;","lastModifiedDate":"2023-10-29"},{"lineNumber":52,"author":{"gitId":"Clin-lyx"},"content":"    @FXML","lastModifiedDate":"2023-10-29"},{"lineNumber":53,"author":{"gitId":"Clin-lyx"},"content":"    private Label addRecord;","lastModifiedDate":"2023-10-29"},{"lineNumber":54,"author":{"gitId":"Clin-lyx"},"content":"    @FXML","lastModifiedDate":"2023-10-29"},{"lineNumber":55,"author":{"gitId":"Clin-lyx"},"content":"    private Label editRecord;","lastModifiedDate":"2023-10-29"},{"lineNumber":56,"author":{"gitId":"Clin-lyx"},"content":"    @FXML","lastModifiedDate":"2023-10-29"},{"lineNumber":57,"author":{"gitId":"Clin-lyx"},"content":"    private Label addAppointment;","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"Clin-lyx"},"content":"    @FXML","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"Clin-lyx"},"content":"    private Label viewAppointment;","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"Clin-lyx"},"content":"    @FXML","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"Clin-lyx"},"content":"    private Label deleteAppointment;","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"Clin-lyx"},"content":"    @FXML","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"Clin-lyx"},"content":"    private Label findRecords;","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"Clin-lyx"},"content":"    @FXML","lastModifiedDate":"2023-11-02"},{"lineNumber":65,"author":{"gitId":"Clin-lyx"},"content":"    private Label deleteRecord;","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"Clin-lyx"},"content":"    @FXML","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"Clin-lyx"},"content":"    private Label list;","lastModifiedDate":"2023-10-29"},{"lineNumber":68,"author":{"gitId":"Clin-lyx"},"content":"    @FXML","lastModifiedDate":"2023-10-29"},{"lineNumber":69,"author":{"gitId":"Clin-lyx"},"content":"    private Label find;","lastModifiedDate":"2023-10-29"},{"lineNumber":70,"author":{"gitId":"Clin-lyx"},"content":"    @FXML","lastModifiedDate":"2023-10-29"},{"lineNumber":71,"author":{"gitId":"Clin-lyx"},"content":"    private Label pin;","lastModifiedDate":"2023-10-29"},{"lineNumber":72,"author":{"gitId":"Clin-lyx"},"content":"    @FXML","lastModifiedDate":"2023-10-29"},{"lineNumber":73,"author":{"gitId":"Clin-lyx"},"content":"    private Label unpin;","lastModifiedDate":"2023-10-29"},{"lineNumber":74,"author":{"gitId":"Clin-lyx"},"content":"    @FXML","lastModifiedDate":"2023-10-29"},{"lineNumber":75,"author":{"gitId":"Clin-lyx"},"content":"    private Label view;","lastModifiedDate":"2023-10-29"},{"lineNumber":76,"author":{"gitId":"Clin-lyx"},"content":"    @FXML","lastModifiedDate":"2023-10-29"},{"lineNumber":77,"author":{"gitId":"Clin-lyx"},"content":"    private Label delete;","lastModifiedDate":"2023-10-29"},{"lineNumber":78,"author":{"gitId":"Clin-lyx"},"content":"    @FXML","lastModifiedDate":"2023-10-29"},{"lineNumber":79,"author":{"gitId":"Clin-lyx"},"content":"    private Label exit;","lastModifiedDate":"2023-10-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":88,"author":{"gitId":"Clin-lyx"},"content":"        commandSummary.setText(COMMAND_SUMMARY);","lastModifiedDate":"2023-10-29"},{"lineNumber":89,"author":{"gitId":"Clin-lyx"},"content":"        helpMessage.setText(HELP_MESSAGE + USERGUIDE_URL);","lastModifiedDate":"2023-10-29"},{"lineNumber":90,"author":{"gitId":"Clin-lyx"},"content":"        addPatient.setText(AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-29"},{"lineNumber":91,"author":{"gitId":"Clin-lyx"},"content":"        editPatient.setText(EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-29"},{"lineNumber":92,"author":{"gitId":"Clin-lyx"},"content":"        addRecord.setText(AddRecordCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-29"},{"lineNumber":93,"author":{"gitId":"Clin-lyx"},"content":"        editRecord.setText(EditRecordCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-29"},{"lineNumber":94,"author":{"gitId":"Clin-lyx"},"content":"        addAppointment.setText(AddAppointmentCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-11-02"},{"lineNumber":95,"author":{"gitId":"Clin-lyx"},"content":"        viewAppointment.setText(ViewAppointmentCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-11-02"},{"lineNumber":96,"author":{"gitId":"Clin-lyx"},"content":"        deleteAppointment.setText(DeleteAppointmentCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-11-02"},{"lineNumber":97,"author":{"gitId":"Clin-lyx"},"content":"        pin.setText(PinCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-29"},{"lineNumber":98,"author":{"gitId":"Clin-lyx"},"content":"        unpin.setText(UnpinCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-29"},{"lineNumber":99,"author":{"gitId":"Clin-lyx"},"content":"        view.setText(ViewCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-29"},{"lineNumber":100,"author":{"gitId":"Clin-lyx"},"content":"        delete.setText(DeleteCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-29"},{"lineNumber":101,"author":{"gitId":"Clin-lyx"},"content":"        deleteRecord.setText(DeleteRecordCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-11-02"},{"lineNumber":102,"author":{"gitId":"Clin-lyx"},"content":"        find.setText(FindCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-29"},{"lineNumber":103,"author":{"gitId":"Clin-lyx"},"content":"        findRecords.setText(FindRecordCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-11-02"},{"lineNumber":104,"author":{"gitId":"Clin-lyx"},"content":"        list.setText(ListCommand.COMMAND_WORD + \": \" + ListCommand.MESSAGE_SUCCESS);","lastModifiedDate":"2023-10-29"},{"lineNumber":105,"author":{"gitId":"Clin-lyx"},"content":"        exit.setText(ExitCommand.COMMAND_WORD + \": \" + ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT);","lastModifiedDate":"2023-10-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     *     \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     *             if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     *             if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     *             if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     *             if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     *     \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"Clin-lyx":73,"-":97}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2016-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"ryanongwx"},"content":"    private static MainWindow mainWindow;","lastModifiedDate":"2023-11-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"    private AppointmentsWindow appointmentsWindow;","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"    private PinnedPersonListPanel pinnedPersonListPanel;","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"Clin-lyx"},"content":"    private RecordListPanel recordListPanel;","lastModifiedDate":"2023-10-21"},{"lineNumber":41,"author":{"gitId":"Clin-lyx"},"content":"    private PersonViewPanel personBeingViewedPanel;","lastModifiedDate":"2023-11-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"    @FXML","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"    private StackPane pinnedPersonListPanelPlaceholder;","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"Clin-lyx"},"content":"    @FXML","lastModifiedDate":"2023-10-21"},{"lineNumber":51,"author":{"gitId":"Clin-lyx"},"content":"    private StackPane personBeingViewedPanelPlaceholder;","lastModifiedDate":"2023-10-21"},{"lineNumber":52,"author":{"gitId":"Clin-lyx"},"content":"    @FXML","lastModifiedDate":"2023-10-21"},{"lineNumber":53,"author":{"gitId":"Clin-lyx"},"content":"    private StackPane recordListPanelPlaceholder;","lastModifiedDate":"2023-10-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"Darren159"},"content":"        appointmentsWindow \u003d new AppointmentsWindow(new Stage(), logic);","lastModifiedDate":"2023-11-01"},{"lineNumber":76,"author":{"gitId":"ryanongwx"},"content":"        mainWindow \u003d this;","lastModifiedDate":"2023-11-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":87,"author":{"gitId":"ryanongwx"},"content":"    public static MainWindow getInstance() {","lastModifiedDate":"2023-11-08"},{"lineNumber":88,"author":{"gitId":"ryanongwx"},"content":"        return mainWindow;","lastModifiedDate":"2023-11-08"},{"lineNumber":89,"author":{"gitId":"ryanongwx"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":90,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":91,"author":{"gitId":"ryanongwx"},"content":"    public void setResultDisplay(String s) {","lastModifiedDate":"2023-11-08"},{"lineNumber":92,"author":{"gitId":"ryanongwx"},"content":"        resultDisplay.setFeedbackToUser(s);","lastModifiedDate":"2023-11-08"},{"lineNumber":93,"author":{"gitId":"ryanongwx"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":94,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"Darren159"},"content":"     *","lastModifiedDate":"2023-11-01"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":133,"author":{"gitId":"Darren159"},"content":"        pinnedPersonListPanel \u003d new PinnedPersonListPanel(logic.getPinnedPersonList());","lastModifiedDate":"2023-10-13"},{"lineNumber":134,"author":{"gitId":"Darren159"},"content":"        pinnedPersonListPanelPlaceholder.getChildren().add(pinnedPersonListPanel.getRoot());","lastModifiedDate":"2023-10-13"},{"lineNumber":135,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":136,"author":{"gitId":"Darren159"},"content":"        recordListPanel \u003d new RecordListPanel(logic.getFilteredRecordList());","lastModifiedDate":"2023-11-01"},{"lineNumber":137,"author":{"gitId":"Clin-lyx"},"content":"        recordListPanelPlaceholder.getChildren().add(recordListPanel.getRoot());","lastModifiedDate":"2023-10-21"},{"lineNumber":138,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":139,"author":{"gitId":"Clin-lyx"},"content":"        personBeingViewedPanel \u003d new PersonViewPanel(logic.getPersonBeingViewed(), logic.getPatientIndex());","lastModifiedDate":"2023-11-07"},{"lineNumber":140,"author":{"gitId":"Clin-lyx"},"content":"        personBeingViewedPanelPlaceholder.getChildren().add(personBeingViewedPanel.getRoot());","lastModifiedDate":"2023-10-21"},{"lineNumber":141,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2019-01-25"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":176,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":177,"author":{"gitId":"Darren159"},"content":"     * Opens the appointments window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2023-11-01"},{"lineNumber":178,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":179,"author":{"gitId":"Darren159"},"content":"    @FXML","lastModifiedDate":"2023-11-01"},{"lineNumber":180,"author":{"gitId":"Darren159"},"content":"    public void handleAppointments() {","lastModifiedDate":"2023-11-01"},{"lineNumber":181,"author":{"gitId":"Darren159"},"content":"        if (!appointmentsWindow.isShowing()) {","lastModifiedDate":"2023-11-01"},{"lineNumber":182,"author":{"gitId":"Darren159"},"content":"            appointmentsWindow.show();","lastModifiedDate":"2023-11-01"},{"lineNumber":183,"author":{"gitId":"Darren159"},"content":"            appointmentsWindow.fillInnerParts();","lastModifiedDate":"2023-11-01"},{"lineNumber":184,"author":{"gitId":"Darren159"},"content":"        } else {","lastModifiedDate":"2023-11-01"},{"lineNumber":185,"author":{"gitId":"Darren159"},"content":"            appointmentsWindow.focus();","lastModifiedDate":"2023-11-01"},{"lineNumber":186,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":187,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":188,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":194,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":195,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {","lastModifiedDate":"2016-08-25"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        return personListPanel;","lastModifiedDate":"2018-08-14"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":210,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":211,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":212,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":213,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":224,"author":{"gitId":"Darren159"},"content":"            if (commandResult.isShowAppointments()) {","lastModifiedDate":"2023-11-01"},{"lineNumber":225,"author":{"gitId":"Darren159"},"content":"                handleAppointments();","lastModifiedDate":"2023-11-01"},{"lineNumber":226,"author":{"gitId":"Darren159"},"content":"            }","lastModifiedDate":"2023-11-01"},{"lineNumber":227,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":229,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            logger.info(\"An error occurred while executing command: \" + commandText);","lastModifiedDate":"2023-06-13"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":239,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"Darren159":27,"Clin-lyx":11,"-":191,"ryanongwx":10}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"    private Label nric;","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"    @FXML","lastModifiedDate":"2023-10-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"    private Label age;","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"    @FXML","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"    private FlowPane allergies;","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"    @FXML","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"    private Label gender;","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"    @FXML","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"    private Label bloodType;","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"        nric.setText(person.getNric().nric);","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"        age.setText(String.valueOf(person.getAge().age));","lastModifiedDate":"2023-10-12"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"        gender.setText(person.getGender().gender);","lastModifiedDate":"2023-10-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"        bloodType.setText(person.getBloodType().bloodType);","lastModifiedDate":"2023-10-12"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":65,"author":{"gitId":"hjoneweek"},"content":"        person.getAllergies().stream()","lastModifiedDate":"2023-10-12"},{"lineNumber":66,"author":{"gitId":"hjoneweek"},"content":"                .sorted(Comparator.comparing(allergy -\u003e allergy.allergy))","lastModifiedDate":"2023-10-12"},{"lineNumber":67,"author":{"gitId":"Clin-lyx"},"content":"                .forEach(allergy -\u003e allergies.getChildren().add(new Label(allergy.allergy + \" \")));","lastModifiedDate":"2023-10-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"Darren159":3,"hjoneweek":13,"Clin-lyx":1,"-":52}},{"path":"src/main/java/seedu/address/ui/PersonViewPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Clin-lyx"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-11-07"},{"lineNumber":2,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":3,"author":{"gitId":"Clin-lyx"},"content":"import java.util.List;","lastModifiedDate":"2023-11-07"},{"lineNumber":4,"author":{"gitId":"Clin-lyx"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-11-07"},{"lineNumber":5,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":6,"author":{"gitId":"Clin-lyx"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-11-07"},{"lineNumber":7,"author":{"gitId":"Clin-lyx"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-11-07"},{"lineNumber":8,"author":{"gitId":"Clin-lyx"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2023-11-07"},{"lineNumber":9,"author":{"gitId":"Clin-lyx"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2023-11-07"},{"lineNumber":10,"author":{"gitId":"Clin-lyx"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-11-07"},{"lineNumber":11,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-11-07"},{"lineNumber":12,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-07"},{"lineNumber":13,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-11-07"},{"lineNumber":14,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":15,"author":{"gitId":"Clin-lyx"},"content":"/**","lastModifiedDate":"2023-11-08"},{"lineNumber":16,"author":{"gitId":"Clin-lyx"},"content":" * Panel containing the patient being viewed.","lastModifiedDate":"2023-11-08"},{"lineNumber":17,"author":{"gitId":"Clin-lyx"},"content":" */","lastModifiedDate":"2023-11-08"},{"lineNumber":18,"author":{"gitId":"Clin-lyx"},"content":"public class PersonViewPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-11-07"},{"lineNumber":19,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":20,"author":{"gitId":"Clin-lyx"},"content":"    private static final String FXML \u003d \"ViewedPersonPanel.fxml\";","lastModifiedDate":"2023-11-07"},{"lineNumber":21,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":22,"author":{"gitId":"Clin-lyx"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonViewPanel.class);","lastModifiedDate":"2023-11-07"},{"lineNumber":23,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":24,"author":{"gitId":"Clin-lyx"},"content":"    private List\u003cIndex\u003e patientIndex;","lastModifiedDate":"2023-11-07"},{"lineNumber":25,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":26,"author":{"gitId":"Clin-lyx"},"content":"    @FXML","lastModifiedDate":"2023-11-07"},{"lineNumber":27,"author":{"gitId":"Clin-lyx"},"content":"    private ListView\u003cPerson\u003e viewedPerson;","lastModifiedDate":"2023-11-07"},{"lineNumber":28,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":29,"author":{"gitId":"Clin-lyx"},"content":"    /**","lastModifiedDate":"2023-11-08"},{"lineNumber":30,"author":{"gitId":"Clin-lyx"},"content":"     * Creates a {@code PersonViewPanel} with the given {@code ObservableList}.","lastModifiedDate":"2023-11-08"},{"lineNumber":31,"author":{"gitId":"Clin-lyx"},"content":"     */","lastModifiedDate":"2023-11-08"},{"lineNumber":32,"author":{"gitId":"Clin-lyx"},"content":"    public PersonViewPanel(ObservableList\u003cPerson\u003e personList, List\u003cIndex\u003e patientIndex) {","lastModifiedDate":"2023-11-07"},{"lineNumber":33,"author":{"gitId":"Clin-lyx"},"content":"        super(FXML);","lastModifiedDate":"2023-11-07"},{"lineNumber":34,"author":{"gitId":"Clin-lyx"},"content":"        this.patientIndex \u003d patientIndex;","lastModifiedDate":"2023-11-07"},{"lineNumber":35,"author":{"gitId":"Clin-lyx"},"content":"        viewedPerson.setItems(personList);","lastModifiedDate":"2023-11-07"},{"lineNumber":36,"author":{"gitId":"Clin-lyx"},"content":"        viewedPerson.setCellFactory(listView -\u003e new PersonViewPanel.PersonViewCell());","lastModifiedDate":"2023-11-07"},{"lineNumber":37,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":38,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":39,"author":{"gitId":"Clin-lyx"},"content":"    class PersonViewCell extends ListCell\u003cPerson\u003e {","lastModifiedDate":"2023-11-07"},{"lineNumber":40,"author":{"gitId":"Clin-lyx"},"content":"        @Override","lastModifiedDate":"2023-11-07"},{"lineNumber":41,"author":{"gitId":"Clin-lyx"},"content":"        protected void updateItem(Person person, boolean empty) {","lastModifiedDate":"2023-11-07"},{"lineNumber":42,"author":{"gitId":"Clin-lyx"},"content":"            super.updateItem(person, empty);","lastModifiedDate":"2023-11-07"},{"lineNumber":43,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":44,"author":{"gitId":"Clin-lyx"},"content":"            if (empty || person \u003d\u003d null) {","lastModifiedDate":"2023-11-07"},{"lineNumber":45,"author":{"gitId":"Clin-lyx"},"content":"                setGraphic(null);","lastModifiedDate":"2023-11-07"},{"lineNumber":46,"author":{"gitId":"Clin-lyx"},"content":"                setText(null);","lastModifiedDate":"2023-11-07"},{"lineNumber":47,"author":{"gitId":"Clin-lyx"},"content":"            } else {","lastModifiedDate":"2023-11-07"},{"lineNumber":48,"author":{"gitId":"Clin-lyx"},"content":"                setGraphic(new PersonCard(person, patientIndex.get(0).getOneBased()).getRoot());","lastModifiedDate":"2023-11-07"},{"lineNumber":49,"author":{"gitId":"Clin-lyx"},"content":"            }","lastModifiedDate":"2023-11-07"},{"lineNumber":50,"author":{"gitId":"Clin-lyx"},"content":"        }","lastModifiedDate":"2023-11-07"},{"lineNumber":51,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":52,"author":{"gitId":"Clin-lyx"},"content":"}","lastModifiedDate":"2023-11-07"}],"authorContributionMap":{"Clin-lyx":52}},{"path":"src/main/java/seedu/address/ui/PinnedPersonListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":" * Panel containing the list of pinned persons.","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"public class PinnedPersonListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"    private static final String FXML \u003d \"PinnedPersonListPanel.fxml\";","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PinnedPersonListPanel.class);","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"    @FXML","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"    private ListView\u003cPerson\u003e pinnedPersonListView;","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"     * Creates a {@code PinnedPersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"    public PinnedPersonListPanel(ObservableList\u003cPerson\u003e pinnedPersonList) {","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"        super(FXML);","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"        pinnedPersonListView.setItems(pinnedPersonList);","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"        pinnedPersonListView.setCellFactory(listView -\u003e new PinnedPersonListViewCell());","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"    class PinnedPersonListViewCell extends ListCell\u003cPerson\u003e {","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"        protected void updateItem(Person person, boolean empty) {","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"            super.updateItem(person, empty);","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"            if (empty || person \u003d\u003d null) {","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"                setGraphic(null);","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"                setText(null);","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"            } else {","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"            }","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"Darren159":49}},{"path":"src/main/java/seedu/address/ui/RecordCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Clin-lyx"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-10-21"},{"lineNumber":2,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":3,"author":{"gitId":"ryanongwx"},"content":"import java.awt.Desktop;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"ryanongwx"},"content":"import java.io.File;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"ryanongwx"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"ryanongwx"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"Clin-lyx"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-10-21"},{"lineNumber":9,"author":{"gitId":"ryanongwx"},"content":"import javafx.scene.control.Hyperlink;","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"Clin-lyx"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-10-21"},{"lineNumber":11,"author":{"gitId":"Clin-lyx"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-10-21"},{"lineNumber":12,"author":{"gitId":"Clin-lyx"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-10-21"},{"lineNumber":13,"author":{"gitId":"ryanongwx"},"content":"import javafx.stage.FileChooser;","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2023-10-21"},{"lineNumber":15,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":16,"author":{"gitId":"Clin-lyx"},"content":"/**","lastModifiedDate":"2023-10-21"},{"lineNumber":17,"author":{"gitId":"Clin-lyx"},"content":" * An UI component that displays information of a {@code Record}.","lastModifiedDate":"2023-10-21"},{"lineNumber":18,"author":{"gitId":"Clin-lyx"},"content":" */","lastModifiedDate":"2023-10-21"},{"lineNumber":19,"author":{"gitId":"Clin-lyx"},"content":"public class RecordCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-10-21"},{"lineNumber":20,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":21,"author":{"gitId":"Clin-lyx"},"content":"    private static final String FXML \u003d \"RecordListCard.fxml\";","lastModifiedDate":"2023-10-21"},{"lineNumber":22,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":23,"author":{"gitId":"Clin-lyx"},"content":"    public final Record record;","lastModifiedDate":"2023-10-21"},{"lineNumber":24,"author":{"gitId":"Clin-lyx"},"content":"    @FXML","lastModifiedDate":"2023-10-21"},{"lineNumber":25,"author":{"gitId":"Clin-lyx"},"content":"    private HBox cardPane;","lastModifiedDate":"2023-10-21"},{"lineNumber":26,"author":{"gitId":"Clin-lyx"},"content":"    @FXML","lastModifiedDate":"2023-10-21"},{"lineNumber":27,"author":{"gitId":"Clin-lyx"},"content":"    private Label id;","lastModifiedDate":"2023-10-21"},{"lineNumber":28,"author":{"gitId":"Clin-lyx"},"content":"    @FXML","lastModifiedDate":"2023-10-21"},{"lineNumber":29,"author":{"gitId":"Clin-lyx"},"content":"    private Label dateTime;","lastModifiedDate":"2023-10-21"},{"lineNumber":30,"author":{"gitId":"Clin-lyx"},"content":"    @FXML","lastModifiedDate":"2023-10-21"},{"lineNumber":31,"author":{"gitId":"Clin-lyx"},"content":"    private Label condition;","lastModifiedDate":"2023-10-21"},{"lineNumber":32,"author":{"gitId":"ryanongwx"},"content":"    @FXML","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"ryanongwx"},"content":"    private Hyperlink filePathLabel;","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"ryanongwx"},"content":"    @FXML","lastModifiedDate":"2023-10-27"},{"lineNumber":35,"author":{"gitId":"ryanongwx"},"content":"    private Label medication;","lastModifiedDate":"2023-10-27"},{"lineNumber":36,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"ryanongwx"},"content":"    private int displayedIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"ryanongwx"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2023-11-08"},{"lineNumber":39,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":40,"author":{"gitId":"Clin-lyx"},"content":"    /**","lastModifiedDate":"2023-10-21"},{"lineNumber":41,"author":{"gitId":"ryanongwx"},"content":"     * Creates a {@code RecordCard} with the given {@code Record} and index to","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"ryanongwx"},"content":"     * display.","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"ryanongwx"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"ryanongwx"},"content":"     * @param record         The record object to be displayed.","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"ryanongwx"},"content":"     * @param displayedIndex The index at which the record will be displayed.","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"Clin-lyx"},"content":"     */","lastModifiedDate":"2023-10-21"},{"lineNumber":47,"author":{"gitId":"Clin-lyx"},"content":"    public RecordCard(Record record, int displayedIndex) {","lastModifiedDate":"2023-10-21"},{"lineNumber":48,"author":{"gitId":"Clin-lyx"},"content":"        super(FXML);","lastModifiedDate":"2023-10-21"},{"lineNumber":49,"author":{"gitId":"Clin-lyx"},"content":"        this.record \u003d record;","lastModifiedDate":"2023-10-21"},{"lineNumber":50,"author":{"gitId":"Clin-lyx"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2023-10-21"},{"lineNumber":51,"author":{"gitId":"Clin-lyx"},"content":"        dateTime.setText(record.getDateTime().toString());","lastModifiedDate":"2023-10-21"},{"lineNumber":52,"author":{"gitId":"Clin-lyx"},"content":"        condition.setText(record.getConditions().toString());","lastModifiedDate":"2023-10-21"},{"lineNumber":53,"author":{"gitId":"ryanongwx"},"content":"        if (record.getFilePath() !\u003d null) {","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"ryanongwx"},"content":"            filePathLabel.setText(record.getFilePath().toString());","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"ryanongwx"},"content":"        } else {","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"ryanongwx"},"content":"            filePathLabel.setText(\"No file attached\");","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"ryanongwx"},"content":"            filePathLabel.setDisable(true); // Disable the hyperlink if no file is attached","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"ryanongwx"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"ryanongwx"},"content":"        this.displayedIndex \u003d displayedIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"        medication.setText(record.getMedications().toString());","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"ryanongwx"},"content":"        mainWindow \u003d MainWindow.getInstance();","lastModifiedDate":"2023-11-08"},{"lineNumber":62,"author":{"gitId":"ryanongwx"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":63,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":64,"author":{"gitId":"ryanongwx"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":65,"author":{"gitId":"ryanongwx"},"content":"     * Opens a file chooser dialog to attach a file to the record.","lastModifiedDate":"2023-10-24"},{"lineNumber":66,"author":{"gitId":"ryanongwx"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":67,"author":{"gitId":"ryanongwx"},"content":"     * @param event The event triggering this method call.","lastModifiedDate":"2023-10-24"},{"lineNumber":68,"author":{"gitId":"ryanongwx"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":69,"author":{"gitId":"ryanongwx"},"content":"    @FXML","lastModifiedDate":"2023-10-24"},{"lineNumber":70,"author":{"gitId":"ryanongwx"},"content":"    public void handleAttachFile(ActionEvent event) {","lastModifiedDate":"2023-10-24"},{"lineNumber":71,"author":{"gitId":"ryanongwx"},"content":"        FileChooser fileChooser \u003d new FileChooser();","lastModifiedDate":"2023-10-24"},{"lineNumber":72,"author":{"gitId":"ryanongwx"},"content":"        fileChooser.setTitle(\"Select File to Attach\");","lastModifiedDate":"2023-10-24"},{"lineNumber":73,"author":{"gitId":"ryanongwx"},"content":"        File file \u003d fileChooser.showOpenDialog(cardPane.getScene().getWindow());","lastModifiedDate":"2023-10-24"},{"lineNumber":74,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":75,"author":{"gitId":"ryanongwx"},"content":"        if (file !\u003d null) {","lastModifiedDate":"2023-10-24"},{"lineNumber":76,"author":{"gitId":"ryanongwx"},"content":"            this.record.setFilePath(file.toPath(), displayedIndex);","lastModifiedDate":"2023-10-24"},{"lineNumber":77,"author":{"gitId":"ryanongwx"},"content":"            filePathLabel.setText(file.toPath().toString());","lastModifiedDate":"2023-10-24"},{"lineNumber":78,"author":{"gitId":"ryanongwx"},"content":"            mainWindow.setResultDisplay(\"File successfully attached!\");","lastModifiedDate":"2023-11-08"},{"lineNumber":79,"author":{"gitId":"ryanongwx"},"content":"        } else {","lastModifiedDate":"2023-11-08"},{"lineNumber":80,"author":{"gitId":"ryanongwx"},"content":"            mainWindow.setResultDisplay(\"No file chosen\");","lastModifiedDate":"2023-11-08"},{"lineNumber":81,"author":{"gitId":"ryanongwx"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":82,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":83,"author":{"gitId":"ryanongwx"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":84,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":85,"author":{"gitId":"ryanongwx"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":86,"author":{"gitId":"ryanongwx"},"content":"     * Opens the file associated with the record if available.","lastModifiedDate":"2023-10-24"},{"lineNumber":87,"author":{"gitId":"ryanongwx"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":88,"author":{"gitId":"ryanongwx"},"content":"     * @param event The event triggering this method call.","lastModifiedDate":"2023-10-24"},{"lineNumber":89,"author":{"gitId":"ryanongwx"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":90,"author":{"gitId":"ryanongwx"},"content":"    @FXML","lastModifiedDate":"2023-10-24"},{"lineNumber":91,"author":{"gitId":"ryanongwx"},"content":"    public void handleOpenFile(ActionEvent event) {","lastModifiedDate":"2023-10-24"},{"lineNumber":92,"author":{"gitId":"ryanongwx"},"content":"        if (record.getFilePath() !\u003d null \u0026\u0026 Desktop.isDesktopSupported()) {","lastModifiedDate":"2023-10-24"},{"lineNumber":93,"author":{"gitId":"ryanongwx"},"content":"            try {","lastModifiedDate":"2023-10-24"},{"lineNumber":94,"author":{"gitId":"ryanongwx"},"content":"                Desktop.getDesktop().open(record.getFilePath().toFile());","lastModifiedDate":"2023-10-24"},{"lineNumber":95,"author":{"gitId":"ryanongwx"},"content":"                mainWindow.setResultDisplay(\"File successfully opened\");","lastModifiedDate":"2023-11-08"},{"lineNumber":96,"author":{"gitId":"ryanongwx"},"content":"            } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-11-08"},{"lineNumber":97,"author":{"gitId":"ryanongwx"},"content":"                // Handle the case where the file does not exist or is not valid.","lastModifiedDate":"2023-11-08"},{"lineNumber":98,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":99,"author":{"gitId":"ryanongwx"},"content":"                mainWindow.setResultDisplay(\"There was an issue with the file: \" + e.getMessage());","lastModifiedDate":"2023-11-08"},{"lineNumber":100,"author":{"gitId":"ryanongwx"},"content":"                System.out.println(\"There was an issue with the file: \" + e.getMessage());","lastModifiedDate":"2023-11-08"},{"lineNumber":101,"author":{"gitId":"ryanongwx"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-10-24"},{"lineNumber":102,"author":{"gitId":"ryanongwx"},"content":"                // Handle other I/O errors.","lastModifiedDate":"2023-11-08"},{"lineNumber":103,"author":{"gitId":"ryanongwx"},"content":"                e.printStackTrace();","lastModifiedDate":"2023-10-24"},{"lineNumber":104,"author":{"gitId":"ryanongwx"},"content":"            }","lastModifiedDate":"2023-10-24"},{"lineNumber":105,"author":{"gitId":"ryanongwx"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":106,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":107,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":108,"author":{"gitId":"Clin-lyx"},"content":"}","lastModifiedDate":"2023-10-21"}],"authorContributionMap":{"hjoneweek":1,"Clin-lyx":35,"ryanongwx":72}},{"path":"src/main/java/seedu/address/ui/RecordListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Clin-lyx"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"Clin-lyx"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-21"},{"lineNumber":4,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":5,"author":{"gitId":"Clin-lyx"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"Clin-lyx"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-10-21"},{"lineNumber":7,"author":{"gitId":"Clin-lyx"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2023-10-21"},{"lineNumber":8,"author":{"gitId":"Clin-lyx"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2023-10-21"},{"lineNumber":9,"author":{"gitId":"Clin-lyx"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-10-21"},{"lineNumber":11,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2023-10-21"},{"lineNumber":12,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"Clin-lyx"},"content":"/**","lastModifiedDate":"2023-10-21"},{"lineNumber":14,"author":{"gitId":"Clin-lyx"},"content":" * Panel contains a list of records.","lastModifiedDate":"2023-10-21"},{"lineNumber":15,"author":{"gitId":"Clin-lyx"},"content":" */","lastModifiedDate":"2023-10-21"},{"lineNumber":16,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":17,"author":{"gitId":"Clin-lyx"},"content":"public class RecordListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"Clin-lyx"},"content":"    private static final String FXML \u003d \"RecordListPanel.fxml\";","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"Clin-lyx"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(RecordListPanel.class);","lastModifiedDate":"2023-10-21"},{"lineNumber":22,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":23,"author":{"gitId":"Clin-lyx"},"content":"    @FXML","lastModifiedDate":"2023-10-21"},{"lineNumber":24,"author":{"gitId":"Clin-lyx"},"content":"    private ListView\u003cRecord\u003e recordListView;","lastModifiedDate":"2023-10-21"},{"lineNumber":25,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":26,"author":{"gitId":"Clin-lyx"},"content":"    /**","lastModifiedDate":"2023-10-21"},{"lineNumber":27,"author":{"gitId":"Clin-lyx"},"content":"     * Creates a {@code RecordListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2023-10-21"},{"lineNumber":28,"author":{"gitId":"Clin-lyx"},"content":"     */","lastModifiedDate":"2023-10-21"},{"lineNumber":29,"author":{"gitId":"Clin-lyx"},"content":"    public RecordListPanel(ObservableList\u003cRecord\u003e recordList) {","lastModifiedDate":"2023-10-21"},{"lineNumber":30,"author":{"gitId":"Clin-lyx"},"content":"        super(FXML);","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"Clin-lyx"},"content":"        recordListView.setItems(recordList);","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"Clin-lyx"},"content":"        recordListView.setCellFactory(listView -\u003e new RecordListPanel.RecordListViewCell());","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":35,"author":{"gitId":"Clin-lyx"},"content":"    /**","lastModifiedDate":"2023-10-21"},{"lineNumber":36,"author":{"gitId":"ryanongwx"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Record} using","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"ryanongwx"},"content":"     * a {@code RecordCard}.","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"Clin-lyx"},"content":"     */","lastModifiedDate":"2023-10-21"},{"lineNumber":39,"author":{"gitId":"Clin-lyx"},"content":"    class RecordListViewCell extends ListCell\u003cRecord\u003e {","lastModifiedDate":"2023-10-21"},{"lineNumber":40,"author":{"gitId":"Clin-lyx"},"content":"        @Override","lastModifiedDate":"2023-10-21"},{"lineNumber":41,"author":{"gitId":"Clin-lyx"},"content":"        protected void updateItem(Record record, boolean empty) {","lastModifiedDate":"2023-10-21"},{"lineNumber":42,"author":{"gitId":"Clin-lyx"},"content":"            super.updateItem(record, empty);","lastModifiedDate":"2023-10-21"},{"lineNumber":43,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":44,"author":{"gitId":"Clin-lyx"},"content":"            if (empty || record \u003d\u003d null) {","lastModifiedDate":"2023-10-21"},{"lineNumber":45,"author":{"gitId":"Clin-lyx"},"content":"                setGraphic(null);","lastModifiedDate":"2023-10-21"},{"lineNumber":46,"author":{"gitId":"Clin-lyx"},"content":"                setText(null);","lastModifiedDate":"2023-10-21"},{"lineNumber":47,"author":{"gitId":"Clin-lyx"},"content":"            } else {","lastModifiedDate":"2023-10-21"},{"lineNumber":48,"author":{"gitId":"Clin-lyx"},"content":"                setGraphic(new RecordCard(record, getIndex() + 1).getRoot());","lastModifiedDate":"2023-10-21"},{"lineNumber":49,"author":{"gitId":"Clin-lyx"},"content":"            }","lastModifiedDate":"2023-10-21"},{"lineNumber":50,"author":{"gitId":"Clin-lyx"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":51,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":52,"author":{"gitId":"Clin-lyx"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"Clin-lyx":50,"ryanongwx":2}},{"path":"src/main/resources/view/AppointmentCalenderPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"CENTER\"\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"    \u003cLabel fx:id\u003d\"currentMonthLabel\" text\u003d\"Month Year\" styleClass\u003d\"cell_big_label\"","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"        style\u003d\"-fx-text-fill:#FFFF\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"    \u003cHBox alignment\u003d\"CENTER\"\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"        \u003cGridPane fx:id\u003d\"calendarGrid\" hgap\u003d\"50\" vgap\u003d\"50\"\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"            \u003crowConstraints\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"                \u003cRowConstraints prefHeight\u003d\"50\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"                \u003cRowConstraints prefHeight\u003d\"50\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"                \u003cRowConstraints prefHeight\u003d\"50\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"                \u003cRowConstraints prefHeight\u003d\"50\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"                \u003cRowConstraints prefHeight\u003d\"50\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"                \u003cRowConstraints prefHeight\u003d\"50\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"                \u003cRowConstraints prefHeight\u003d\"50\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"            \u003c/rowConstraints\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"            \u003ccolumnConstraints\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"                \u003cColumnConstraints prefWidth\u003d\"50\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"                \u003cColumnConstraints prefWidth\u003d\"50\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"                \u003cColumnConstraints prefWidth\u003d\"50\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"                \u003cColumnConstraints prefWidth\u003d\"50\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"                \u003cColumnConstraints prefWidth\u003d\"50\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"                \u003cColumnConstraints prefWidth\u003d\"50\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"                \u003cColumnConstraints prefWidth\u003d\"50\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"            \u003c/columnConstraints\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"        \u003c/GridPane\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"    \u003c/HBox\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"    \u003cHBox fx:id\u003d\"navigationBox\" spacing\u003d\"10\" alignment\u003d\"CENTER\"\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"        \u003cButton fx:id\u003d\"prevMonthButton\" text\u003d\"Previous\" onAction\u003d\"#previousMonth\"","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"            minWidth\u003d\"100\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"        \u003cButton fx:id\u003d\"nextMonthButton\" text\u003d\"Next\" onAction\u003d\"#nextMonth\" minWidth\u003d\"100\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"    \u003c/HBox\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"Darren159":45}},{"path":"src/main/resources/view/AppointmentListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.control.Hyperlink?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/17\"","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"                \u003cVBox prefWidth\u003d\"300\"\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"                    \u003cHBox\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"                        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"                            \u003cminWidth\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"                                \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"                                \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"                            \u003c/minWidth\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"                        \u003c/Label\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"                        \u003cLabel fx:id\u003d\"name\" text\u003d\"$name\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"                    \u003c/HBox\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"                \u003c/VBox\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"            \u003cLabel fx:id\u003d\"dateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"$dateTime\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"            \u003cLabel fx:id\u003d\"nric\" styleClass\u003d\"cell_small_label\" text\u003d\"$nric\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"Darren159":39}},{"path":"src/main/resources/view/AppointmentListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"  \u003cListView fx:id\u003d\"appointmentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"Darren159":8}},{"path":"src/main/resources/view/AppointmentsWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.text.Text?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/17\"","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"    xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"    title\u003d\"Appointments\" minWidth\u003d\"1000\" minHeight\u003d\"800\"\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"    \u003cscene\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"        \u003cScene\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"            \u003cstylesheets\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"                \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"            \u003c/stylesheets\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"            \u003cVBox\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"                \u003cSplitPane dividerPositions\u003d\"0.3\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"                    \u003cVBox fx:id\u003d\"appointmentList\" styleClass\u003d\"pane_with-border\" minWidth\u003d\"200\"","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"                        prefWidth\u003d\"200\" maxWidth\u003d\"300\"","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"                        VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"                        \u003cLabel text\u003d\"APPOINTMENTS\" styleClass\u003d\"cell_big_label\"","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"                            style\u003d\"-fx-text-fill:#FFFF\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"                        \u003cStackPane fx:id\u003d\"appointmentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"                            prefHeight\u003d\"850\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"                    \u003c/VBox\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"                    \u003cVBox fx:id\u003d\"appointmentCalender\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"600\"","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"                        prefWidth\u003d\"600\"","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"                        VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"                        \u003cpadding\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"                        \u003c/padding\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"                        \u003cStackPane fx:id\u003d\"appointmentCalenderPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"                    \u003c/VBox\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"                \u003c/SplitPane\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"        \u003c/Scene\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"    \u003c/scene\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"Darren159":49}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  background-color: #383838; /* Used in the default.html file */","lastModifiedDate":"2017-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":".calendar-label {","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"  -fx-font-size: 16px;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":".label-appointment {","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"  -fx-font-size: 7pt;","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"  -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"  -fx-text-fill: black;","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"  -fx-opacity: 1;","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"  -fx-text-overrun: ellipsis;","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"  -fx-white-space: nowrap;","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"  -fx-overflow: hidden;","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  -fx-text-fill: #555555;","lastModifiedDate":"2016-08-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  -fx-font-size: 32pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  -fx-min-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  -fx-max-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  -fx-base: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  -fx-control-inner-background: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  -fx-table-cell-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  -fx-table-header-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":".table-view .column-header,","lastModifiedDate":"2023-11-01"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":".table-view .filler {","lastModifiedDate":"2023-11-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"  -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"  -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"  -fx-border-color: transparent transparent derive(-fx-base, 80%) transparent;","lastModifiedDate":"2023-11-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"  -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"  -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"  -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"  -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"  -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"  -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"  -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":92,"author":{"gitId":"-"},"content":"  -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2017-03-02"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"  -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"  -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":102,"author":{"gitId":"-"},"content":"  -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":104,"author":{"gitId":"-"},"content":"  -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2018-01-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":107,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"  -fx-graphic-text-gap: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"  -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":"  -fx-background-color: #3c3e3f;","lastModifiedDate":"2017-03-02"},{"lineNumber":115,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":117,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  -fx-background-color: #515658;","lastModifiedDate":"2017-03-02"},{"lineNumber":119,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":121,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  -fx-background-color: #424d5f;","lastModifiedDate":"2017-03-02"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":125,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":126,"author":{"gitId":"-"},"content":"  -fx-border-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":128,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":130,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"  -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"  -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"  -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"  -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2022-01-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-05-09"},{"lineNumber":152,"author":{"gitId":"-"},"content":"  -fx-border-color: derive(#1d1d1d, 10%);","lastModifiedDate":"2017-05-09"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"  -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2018-12-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":160,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":161,"author":{"gitId":"-"},"content":"  -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":162,"author":{"gitId":"-"},"content":"  -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":167,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":168,"author":{"gitId":"-"},"content":"  -fx-text-fill: black !important;","lastModifiedDate":"2016-09-14"},{"lineNumber":169,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"  -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":173,"author":{"gitId":"-"},"content":"  -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"  -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"  -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":180,"author":{"gitId":"-"},"content":"  -fx-border-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":181,"author":{"gitId":"-"},"content":"  -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"  -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"  -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  -fx-border-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":191,"author":{"gitId":"-"},"content":"  -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":195,"author":{"gitId":"-"},"content":"  -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":"  -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":200,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":"  -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":"  -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":213,"author":{"gitId":"-"},"content":"  -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"  -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"  -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":221,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":222,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":223,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":"  -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":"  -fx-border-color: #e2e2e2;","lastModifiedDate":"2016-08-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":"  -fx-border-width: 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":"  -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":"  -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;","lastModifiedDate":"2022-01-13"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":234,"author":{"gitId":"-"},"content":"  -fx-text-fill: #d8d8d8;","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"  -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":236,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":238,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":239,"author":{"gitId":"-"},"content":"  -fx-background-color: #3a3a3a;","lastModifiedDate":"2016-08-08"},{"lineNumber":240,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"Darren159"},"content":".button:pressed,","lastModifiedDate":"2023-11-01"},{"lineNumber":243,"author":{"gitId":"Darren159"},"content":".button:default:hover:pressed {","lastModifiedDate":"2023-11-01"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  -fx-background-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":246,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":"  -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"  -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"  -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"Darren159"},"content":".button:disabled,","lastModifiedDate":"2023-11-01"},{"lineNumber":257,"author":{"gitId":"Darren159"},"content":".button:default:disabled {","lastModifiedDate":"2023-11-01"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":"  -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":260,"author":{"gitId":"-"},"content":"  -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"  -fx-text-fill: #ffffff;","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":"  -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":"  -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":274,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":278,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":280,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":284,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":286,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  -fx-background-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":288,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":290,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":291,"author":{"gitId":"-"},"content":"  -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":292,"author":{"gitId":"-"},"content":"  -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  -fx-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":294,"author":{"gitId":"-"},"content":"  -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":295,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":297,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":298,"author":{"gitId":"-"},"content":"  -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":299,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":301,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":302,"author":{"gitId":"-"},"content":"  -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":303,"author":{"gitId":"-"},"content":"  -fx-background-insets: 3;","lastModifiedDate":"2016-08-15"},{"lineNumber":304,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":306,"author":{"gitId":"Darren159"},"content":".scroll-bar .increment-button,","lastModifiedDate":"2023-11-01"},{"lineNumber":307,"author":{"gitId":"Darren159"},"content":".scroll-bar .decrement-button {","lastModifiedDate":"2023-11-01"},{"lineNumber":308,"author":{"gitId":"-"},"content":"  -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":309,"author":{"gitId":"-"},"content":"  -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":310,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":312,"author":{"gitId":"Darren159"},"content":".scroll-bar .increment-arrow,","lastModifiedDate":"2023-11-01"},{"lineNumber":313,"author":{"gitId":"Darren159"},"content":".scroll-bar .decrement-arrow {","lastModifiedDate":"2023-11-01"},{"lineNumber":314,"author":{"gitId":"-"},"content":"  -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":315,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":317,"author":{"gitId":"Darren159"},"content":".scroll-bar:vertical .increment-arrow,","lastModifiedDate":"2023-11-01"},{"lineNumber":318,"author":{"gitId":"Darren159"},"content":".scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2023-11-01"},{"lineNumber":319,"author":{"gitId":"-"},"content":"  -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":320,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":322,"author":{"gitId":"Darren159"},"content":".scroll-bar:horizontal .increment-arrow,","lastModifiedDate":"2023-11-01"},{"lineNumber":323,"author":{"gitId":"Darren159"},"content":".scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2023-11-01"},{"lineNumber":324,"author":{"gitId":"-"},"content":"  -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":325,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":326,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":327,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":328,"author":{"gitId":"-"},"content":"  -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":329,"author":{"gitId":"-"},"content":"  -fx-border-width: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":330,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":331,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":332,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":333,"author":{"gitId":"-"},"content":"  -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":334,"author":{"gitId":"Darren159"},"content":"  -fx-text-fill: #f70d1a;","lastModifiedDate":"2023-11-01"},{"lineNumber":335,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":336,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":337,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":338,"author":{"gitId":"-"},"content":"  -fx-background-color: transparent #383838 transparent #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":339,"author":{"gitId":"-"},"content":"  -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":340,"author":{"gitId":"-"},"content":"  -fx-border-color: #383838 #383838 #ffffff #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":341,"author":{"gitId":"-"},"content":"  -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":342,"author":{"gitId":"-"},"content":"  -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":343,"author":{"gitId":"-"},"content":"  -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":344,"author":{"gitId":"-"},"content":"  -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":345,"author":{"gitId":"-"},"content":"  -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":346,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":347,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":348,"author":{"gitId":"Darren159"},"content":"#filterField,","lastModifiedDate":"2023-11-01"},{"lineNumber":349,"author":{"gitId":"Darren159"},"content":"#personListPanel,","lastModifiedDate":"2023-11-01"},{"lineNumber":350,"author":{"gitId":"Darren159"},"content":"#personWebpage {","lastModifiedDate":"2023-11-01"},{"lineNumber":351,"author":{"gitId":"-"},"content":"  -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2016-08-15"},{"lineNumber":352,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":354,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":355,"author":{"gitId":"-"},"content":"  -fx-background-color: transparent, #383838, transparent, #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":356,"author":{"gitId":"-"},"content":"  -fx-background-radius: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":357,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":358,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":359,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":360,"author":{"gitId":"-"},"content":"  -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":361,"author":{"gitId":"-"},"content":"  -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":362,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":363,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":364,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":365,"author":{"gitId":"-"},"content":"  -fx-text-fill: white;","lastModifiedDate":"2016-12-18"},{"lineNumber":366,"author":{"gitId":"-"},"content":"  -fx-background-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":367,"author":{"gitId":"-"},"content":"  -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":368,"author":{"gitId":"-"},"content":"  -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":369,"author":{"gitId":"-"},"content":"  -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":370,"author":{"gitId":"-"},"content":"  -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":371,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"}],"authorContributionMap":{"Darren159":31,"-":340}},{"path":"src/main/resources/view/HelpWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"Clin-lyx"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"Clin-lyx"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"Clin-lyx"},"content":"\u003cfx:root title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@HelpWindow.css\" /\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"Clin-lyx"},"content":"        \u003cScrollPane maxHeight\u003d\"500\"\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"Clin-lyx"},"content":"            \u003cVBox fx:id\u003d\"helpMessageContainer\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":25,"author":{"gitId":"Clin-lyx"},"content":"                \u003cHBox alignment\u003d\"CENTER\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":26,"author":{"gitId":"Clin-lyx"},"content":"                    \u003cchildren\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":27,"author":{"gitId":"Clin-lyx"},"content":"                        \u003cLabel fx:id\u003d\"commandSummary\" styleClass\u003d\"cell_big_label\" text\u003d\"Label\" textFill\u003d\"white\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":28,"author":{"gitId":"Clin-lyx"},"content":"                            \u003cHBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":29,"author":{"gitId":"Clin-lyx"},"content":"                                \u003cInsets right\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":30,"author":{"gitId":"Clin-lyx"},"content":"                            \u003c/HBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":31,"author":{"gitId":"Clin-lyx"},"content":"                        \u003c/Label\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":32,"author":{"gitId":"Clin-lyx"},"content":"                    \u003c/children\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":33,"author":{"gitId":"Clin-lyx"},"content":"                    \u003copaqueInsets\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":34,"author":{"gitId":"Clin-lyx"},"content":"                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":35,"author":{"gitId":"Clin-lyx"},"content":"                    \u003c/opaqueInsets\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":36,"author":{"gitId":"Clin-lyx"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":37,"author":{"gitId":"Clin-lyx"},"content":"                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":38,"author":{"gitId":"Clin-lyx"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":39,"author":{"gitId":"Clin-lyx"},"content":"                \u003c/HBox\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":40,"author":{"gitId":"Clin-lyx"},"content":"                \u003cHBox\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                    \u003cchildren\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                        \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                            \u003cHBox.margin\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                                \u003cInsets right\u003d\"5.0\" /\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                            \u003c/HBox.margin\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                        \u003c/Label\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                        \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                            \u003cHBox.margin\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":49,"author":{"gitId":"Clin-lyx"},"content":"                                \u003cInsets left\u003d\"5.0\" top\u003d\"-5.0\" /\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                            \u003c/HBox.margin\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                        \u003c/Button\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                    \u003c/children\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                    \u003copaqueInsets\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                    \u003c/opaqueInsets\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                \u003c/HBox\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":60,"author":{"gitId":"Clin-lyx"},"content":"                \u003cLabel fx:id\u003d\"addPatient\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":61,"author":{"gitId":"Clin-lyx"},"content":"                    \u003cHBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":62,"author":{"gitId":"Clin-lyx"},"content":"                        \u003cInsets right\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":63,"author":{"gitId":"Clin-lyx"},"content":"                    \u003c/HBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":64,"author":{"gitId":"Clin-lyx"},"content":"                    \u003cVBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":65,"author":{"gitId":"Clin-lyx"},"content":"                        \u003cInsets top\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":66,"author":{"gitId":"Clin-lyx"},"content":"                    \u003c/VBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":67,"author":{"gitId":"Clin-lyx"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":68,"author":{"gitId":"Clin-lyx"},"content":"                \u003cLabel fx:id\u003d\"editPatient\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":69,"author":{"gitId":"Clin-lyx"},"content":"                    \u003cVBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":70,"author":{"gitId":"Clin-lyx"},"content":"                        \u003cInsets top\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":71,"author":{"gitId":"Clin-lyx"},"content":"                    \u003c/VBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":72,"author":{"gitId":"Clin-lyx"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":73,"author":{"gitId":"Clin-lyx"},"content":"                \u003cLabel fx:id\u003d\"addRecord\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":74,"author":{"gitId":"Clin-lyx"},"content":"                    \u003cVBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":75,"author":{"gitId":"Clin-lyx"},"content":"                        \u003cInsets top\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":76,"author":{"gitId":"Clin-lyx"},"content":"                    \u003c/VBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":77,"author":{"gitId":"Clin-lyx"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":78,"author":{"gitId":"Clin-lyx"},"content":"                \u003cLabel fx:id\u003d\"editRecord\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":79,"author":{"gitId":"Clin-lyx"},"content":"                    \u003cVBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":80,"author":{"gitId":"Clin-lyx"},"content":"                        \u003cInsets top\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":81,"author":{"gitId":"Clin-lyx"},"content":"                    \u003c/VBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":82,"author":{"gitId":"Clin-lyx"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":83,"author":{"gitId":"Clin-lyx"},"content":"                \u003cLabel fx:id\u003d\"addAppointment\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":84,"author":{"gitId":"Clin-lyx"},"content":"                    \u003cVBox.margin\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":85,"author":{"gitId":"Clin-lyx"},"content":"                        \u003cInsets top\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":86,"author":{"gitId":"Clin-lyx"},"content":"                    \u003c/VBox.margin\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":87,"author":{"gitId":"Clin-lyx"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":88,"author":{"gitId":"Clin-lyx"},"content":"                \u003cLabel fx:id\u003d\"find\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":89,"author":{"gitId":"Clin-lyx"},"content":"                    \u003cVBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":90,"author":{"gitId":"Clin-lyx"},"content":"                        \u003cInsets top\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":91,"author":{"gitId":"Clin-lyx"},"content":"                    \u003c/VBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":92,"author":{"gitId":"Clin-lyx"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":93,"author":{"gitId":"Clin-lyx"},"content":"                \u003cLabel fx:id\u003d\"findRecords\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":94,"author":{"gitId":"Clin-lyx"},"content":"                    \u003cVBox.margin\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":95,"author":{"gitId":"Clin-lyx"},"content":"                        \u003cInsets top\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":96,"author":{"gitId":"Clin-lyx"},"content":"                    \u003c/VBox.margin\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":97,"author":{"gitId":"Clin-lyx"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":98,"author":{"gitId":"Clin-lyx"},"content":"                \u003cLabel fx:id\u003d\"pin\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":99,"author":{"gitId":"Clin-lyx"},"content":"                    \u003cVBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":100,"author":{"gitId":"Clin-lyx"},"content":"                        \u003cInsets top\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":101,"author":{"gitId":"Clin-lyx"},"content":"                    \u003c/VBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":102,"author":{"gitId":"Clin-lyx"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":103,"author":{"gitId":"Clin-lyx"},"content":"                \u003cLabel fx:id\u003d\"unpin\" text\u003d\"Label\" textFill\u003d\"white\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":104,"author":{"gitId":"Clin-lyx"},"content":"                    \u003cVBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":105,"author":{"gitId":"Clin-lyx"},"content":"                        \u003cInsets top\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":106,"author":{"gitId":"Clin-lyx"},"content":"                    \u003c/VBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":107,"author":{"gitId":"Clin-lyx"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":108,"author":{"gitId":"Clin-lyx"},"content":"                \u003cLabel fx:id\u003d\"view\" text\u003d\"Label\" textFill\u003d\"white\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":109,"author":{"gitId":"Clin-lyx"},"content":"                    \u003cVBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":110,"author":{"gitId":"Clin-lyx"},"content":"                        \u003cInsets top\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":111,"author":{"gitId":"Clin-lyx"},"content":"                    \u003c/VBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":112,"author":{"gitId":"Clin-lyx"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":113,"author":{"gitId":"Clin-lyx"},"content":"                \u003cLabel fx:id\u003d\"viewAppointment\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":114,"author":{"gitId":"Clin-lyx"},"content":"                    \u003cVBox.margin\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":115,"author":{"gitId":"Clin-lyx"},"content":"                        \u003cInsets top\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":116,"author":{"gitId":"Clin-lyx"},"content":"                    \u003c/VBox.margin\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":117,"author":{"gitId":"Clin-lyx"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":118,"author":{"gitId":"Clin-lyx"},"content":"                \u003cLabel fx:id\u003d\"delete\" text\u003d\"Label\" textFill\u003d\"white\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":119,"author":{"gitId":"Clin-lyx"},"content":"                    \u003cVBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":120,"author":{"gitId":"Clin-lyx"},"content":"                        \u003cInsets top\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":121,"author":{"gitId":"Clin-lyx"},"content":"                    \u003c/VBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":122,"author":{"gitId":"Clin-lyx"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":123,"author":{"gitId":"Clin-lyx"},"content":"                \u003cLabel fx:id\u003d\"deleteRecord\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":124,"author":{"gitId":"Clin-lyx"},"content":"                    \u003cVBox.margin\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":125,"author":{"gitId":"Clin-lyx"},"content":"                        \u003cInsets top\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":126,"author":{"gitId":"Clin-lyx"},"content":"                    \u003c/VBox.margin\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":127,"author":{"gitId":"Clin-lyx"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":128,"author":{"gitId":"Clin-lyx"},"content":"                \u003cLabel fx:id\u003d\"deleteAppointment\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":129,"author":{"gitId":"Clin-lyx"},"content":"                    \u003cVBox.margin\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":130,"author":{"gitId":"Clin-lyx"},"content":"                        \u003cInsets top\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":131,"author":{"gitId":"Clin-lyx"},"content":"                    \u003c/VBox.margin\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":132,"author":{"gitId":"Clin-lyx"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":133,"author":{"gitId":"Clin-lyx"},"content":"                \u003cLabel fx:id\u003d\"list\" text\u003d\"Label\" textFill\u003d\"WHITE\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":134,"author":{"gitId":"Clin-lyx"},"content":"                    \u003cVBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":135,"author":{"gitId":"Clin-lyx"},"content":"                        \u003cInsets top\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":136,"author":{"gitId":"Clin-lyx"},"content":"                    \u003c/VBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":137,"author":{"gitId":"Clin-lyx"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":138,"author":{"gitId":"Clin-lyx"},"content":"                \u003cLabel fx:id\u003d\"exit\" text\u003d\"Label\" textFill\u003d\"WHITE\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":139,"author":{"gitId":"Clin-lyx"},"content":"                    \u003cVBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":140,"author":{"gitId":"Clin-lyx"},"content":"                        \u003cInsets top\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":141,"author":{"gitId":"Clin-lyx"},"content":"                    \u003c/VBox.margin\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":142,"author":{"gitId":"Clin-lyx"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":143,"author":{"gitId":"Clin-lyx"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":144,"author":{"gitId":"Clin-lyx"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":148,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-12-01"}],"authorContributionMap":{"Clin-lyx":107,"-":41}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"Clin-lyx"},"content":"\u003c?import javafx.scene.text.Text?\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":15,"author":{"gitId":"Clin-lyx"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/17\"","lastModifiedDate":"2023-10-22"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"    xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2023-10-22"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"    title\u003d\"Medbook\" minWidth\u003d\"1280\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                    \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\"","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"                            onAction\u003d\"#handleHelp\"","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"                            text\u003d\"Help\" /\u003e","lastModifiedDate":"2023-10-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                    \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\"","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"                    styleClass\u003d\"pane-with-border\"","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                    minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"                \u003cSplitPane dividerPositions\u003d\"0.3, 0.7\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-22"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"                    \u003cVBox fx:id\u003d\"recordList\" styleClass\u003d\"pane_with-border\" minWidth\u003d\"340\"","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"                        prefWidth\u003d\"340\"","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"                        VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-22"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"                        \u003cLabel text\u003d\"PATIENT BEING VIEWED\" styleClass\u003d\"cell_big_label\"","lastModifiedDate":"2023-10-22"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"                            style\u003d\"-fx-text-fill:#FFFF\" /\u003e","lastModifiedDate":"2023-10-22"},{"lineNumber":55,"author":{"gitId":"Clin-lyx"},"content":"                        \u003cStackPane fx:id\u003d\"personBeingViewedPanelPlaceholder\" minHeight\u003d\"110\" /\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"                        \u003cLabel text\u003d\"RECORDS\" styleClass\u003d\"cell_big_label\"","lastModifiedDate":"2023-11-01"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"                            style\u003d\"-fx-text-fill:#FFFF\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"                        \u003cStackPane fx:id\u003d\"recordListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"                            prefHeight\u003d\"850\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":60,"author":{"gitId":"Clin-lyx"},"content":"                    \u003c/VBox\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":61,"author":{"gitId":"Clin-lyx"},"content":"                    \u003cVBox\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":62,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"                        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\"","lastModifiedDate":"2023-11-01"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"                            prefWidth\u003d\"600\"","lastModifiedDate":"2023-11-01"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"                            VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                            \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                            \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2017-06-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                        \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"                    \u003cVBox fx:id\u003d\"pinnedPersonList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\"","lastModifiedDate":"2023-10-22"},{"lineNumber":75,"author":{"gitId":"Darren159"},"content":"                        prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-22"},{"lineNumber":76,"author":{"gitId":"Darren159"},"content":"                        \u003cLabel text\u003d\"PINNED PATIENT\" styleClass\u003d\"cell_big_label\"","lastModifiedDate":"2023-11-01"},{"lineNumber":77,"author":{"gitId":"Darren159"},"content":"                            style\u003d\"-fx-text-fill:#FFFF\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":78,"author":{"gitId":"Darren159"},"content":"                        \u003cStackPane fx:id\u003d\"pinnedPersonListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"                    \u003c/VBox\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"Darren159"},"content":"                \u003c/SplitPane\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"Darren159"},"content":"                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\"","lastModifiedDate":"2023-11-01"},{"lineNumber":82,"author":{"gitId":"Darren159"},"content":"                    styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":83,"author":{"gitId":"Clin-lyx"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":84,"author":{"gitId":"Clin-lyx"},"content":"                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":85,"author":{"gitId":"Clin-lyx"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":86,"author":{"gitId":"Clin-lyx"},"content":"                \u003c/StackPane\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":87,"author":{"gitId":"Darren159"},"content":"                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2023-10-22"},{"lineNumber":88,"author":{"gitId":"Darren159"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"Darren159":33,"Clin-lyx":10,"-":48}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"Clin-lyx"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":13,"author":{"gitId":"Clin-lyx"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"Clin-lyx"},"content":"        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"Clin-lyx"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":23,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":24,"author":{"gitId":"Clin-lyx"},"content":"        \u003cVBox prefWidth\u003d\"300\"\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":25,"author":{"gitId":"Clin-lyx"},"content":"          \u003cHBox\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"              \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"              \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":32,"author":{"gitId":"Clin-lyx"},"content":"            \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":34,"author":{"gitId":"Clin-lyx"},"content":"          \u003cHBox\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":35,"author":{"gitId":"Clin-lyx"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":36,"author":{"gitId":"Clin-lyx"},"content":"              \u003cInsets bottom\u003d\"5\" left\u003d\"20\" top\u003d\"5\" /\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":37,"author":{"gitId":"Clin-lyx"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":38,"author":{"gitId":"Clin-lyx"},"content":"            \u003cLabel fx:id\u003d\"gender\" prefWidth\u003d\"25\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$gender\" /\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":39,"author":{"gitId":"Clin-lyx"},"content":"            \u003cLabel fx:id\u003d\"age\" prefWidth\u003d\"25\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$age\" /\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":40,"author":{"gitId":"Clin-lyx"},"content":"            \u003cLabel fx:id\u003d\"bloodType\" prefWidth\u003d\"30\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$bloodType\" /\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":41,"author":{"gitId":"Clin-lyx"},"content":"          \u003c/HBox\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"          \u003cHBox\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":44,"author":{"gitId":"Clin-lyx"},"content":"              \u003cInsets bottom\u003d\"5\" left\u003d\"20\" /\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"          \u003cLabel fx:id\u003d\"nric\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$nric\" /\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"          \u003c/HBox\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":48,"author":{"gitId":"Clin-lyx"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":49,"author":{"gitId":"Clin-lyx"},"content":"        \u003cVBox prefWidth\u003d\"300\"\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":50,"author":{"gitId":"Clin-lyx"},"content":"          \u003cLabel styleClass\u003d\"cell_big_label\" text\u003d\"Contacts\" /\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":51,"author":{"gitId":"Clin-lyx"},"content":"          \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\"\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":52,"author":{"gitId":"Clin-lyx"},"content":"                  \u003cVBox.margin\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":53,"author":{"gitId":"Clin-lyx"},"content":"                     \u003cInsets top\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":54,"author":{"gitId":"Clin-lyx"},"content":"                  \u003c/VBox.margin\u003e\u003c/Label\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":55,"author":{"gitId":"Clin-lyx"},"content":"          \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\"\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":56,"author":{"gitId":"Clin-lyx"},"content":"                  \u003cVBox.margin\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":57,"author":{"gitId":"Clin-lyx"},"content":"                     \u003cInsets top\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":58,"author":{"gitId":"Clin-lyx"},"content":"                  \u003c/VBox.margin\u003e\u003c/Label\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":59,"author":{"gitId":"Clin-lyx"},"content":"               \u003cHBox.margin\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":60,"author":{"gitId":"Clin-lyx"},"content":"                  \u003cInsets /\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":61,"author":{"gitId":"Clin-lyx"},"content":"               \u003c/HBox.margin\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":62,"author":{"gitId":"Clin-lyx"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":63,"author":{"gitId":"Clin-lyx"},"content":"        \u003cVBox prefWidth\u003d\"300\"\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":64,"author":{"gitId":"Clin-lyx"},"content":"          \u003cLabel styleClass\u003d\"cell_big_label\" text\u003d\"Allergies\" /\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":65,"author":{"gitId":"Clin-lyx"},"content":"          \u003cFlowPane fx:id\u003d\"allergies\" /\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":66,"author":{"gitId":"Clin-lyx"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"Clin-lyx"},"content":"      \u003crowConstraints\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":70,"author":{"gitId":"Clin-lyx"},"content":"         \u003cRowConstraints /\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":71,"author":{"gitId":"Clin-lyx"},"content":"      \u003c/rowConstraints\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Darren159":5,"Clin-lyx":39,"-":29}},{"path":"src/main/resources/view/PinnedPersonListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"  \u003cListView fx:id\u003d\"pinnedPersonListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"Darren159":8}},{"path":"src/main/resources/view/RecordListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Clin-lyx"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":2,"author":{"gitId":"Clin-lyx"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":3,"author":{"gitId":"ryanongwx"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"ryanongwx"},"content":"\u003c?import javafx.scene.control.Hyperlink?\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"Clin-lyx"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":6,"author":{"gitId":"Clin-lyx"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":7,"author":{"gitId":"Clin-lyx"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":8,"author":{"gitId":"Clin-lyx"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":9,"author":{"gitId":"Clin-lyx"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":10,"author":{"gitId":"Clin-lyx"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":11,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":12,"author":{"gitId":"Clin-lyx"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":13,"author":{"gitId":"Clin-lyx"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":14,"author":{"gitId":"Clin-lyx"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":15,"author":{"gitId":"Clin-lyx"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":16,"author":{"gitId":"Clin-lyx"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":17,"author":{"gitId":"Clin-lyx"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":18,"author":{"gitId":"Clin-lyx"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":19,"author":{"gitId":"Clin-lyx"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":20,"author":{"gitId":"Clin-lyx"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":21,"author":{"gitId":"Clin-lyx"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":22,"author":{"gitId":"Clin-lyx"},"content":"                \u003cVBox prefWidth\u003d\"300\"\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":23,"author":{"gitId":"Clin-lyx"},"content":"                    \u003cHBox\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":24,"author":{"gitId":"Clin-lyx"},"content":"                        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":25,"author":{"gitId":"Clin-lyx"},"content":"                            \u003cminWidth\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":26,"author":{"gitId":"Clin-lyx"},"content":"                                \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":27,"author":{"gitId":"Clin-lyx"},"content":"                                \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":28,"author":{"gitId":"Clin-lyx"},"content":"                            \u003c/minWidth\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":29,"author":{"gitId":"Clin-lyx"},"content":"                        \u003c/Label\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":30,"author":{"gitId":"ryanongwx"},"content":"                        \u003cLabel fx:id\u003d\"dateTime\" text\u003d\"$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"Clin-lyx"},"content":"                    \u003c/HBox\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":32,"author":{"gitId":"ryanongwx"},"content":"                    \u003c!-- Displaying the filePath if not null --\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"ryanongwx"},"content":"                    \u003cHyperlink style\u003d\"-fx-text-fill: lightblue;\" fx:id\u003d\"filePathLabel\" onAction\u003d\"#handleOpenFile\" styleClass\u003d\"cell_small_label\" /\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"Clin-lyx"},"content":"                \u003c/VBox\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":36,"author":{"gitId":"ryanongwx"},"content":"                \u003c!-- Button to attach files --\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"ryanongwx"},"content":"                \u003cButton text\u003d\"Attach File\" onAction\u003d\"#handleAttachFile\"/\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"Clin-lyx"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":39,"author":{"gitId":"ryanongwx"},"content":"            \u003cLabel fx:id\u003d\"condition\" styleClass\u003d\"cell_small_label\" text\u003d\"$condition\"/\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"            \u003cLabel fx:id\u003d\"medication\" styleClass\u003d\"cell_small_label\" text \u003d\"\\$medication\"/\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"Clin-lyx"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":42,"author":{"gitId":"Clin-lyx"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":43,"author":{"gitId":"Clin-lyx"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2023-10-21"}],"authorContributionMap":{"hjoneweek":1,"Clin-lyx":33,"ryanongwx":9}},{"path":"src/main/resources/view/RecordListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Clin-lyx"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":2,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":3,"author":{"gitId":"Clin-lyx"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":4,"author":{"gitId":"Clin-lyx"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":5,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":6,"author":{"gitId":"Clin-lyx"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":7,"author":{"gitId":"Clin-lyx"},"content":"    \u003cListView fx:id\u003d\"recordListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2023-10-21"},{"lineNumber":8,"author":{"gitId":"Clin-lyx"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-10-21"}],"authorContributionMap":{"Clin-lyx":8}},{"path":"src/main/resources/view/ViewedPersonPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Clin-lyx"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-11-07"},{"lineNumber":2,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":3,"author":{"gitId":"Clin-lyx"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2023-11-07"},{"lineNumber":4,"author":{"gitId":"Clin-lyx"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-11-07"},{"lineNumber":5,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":6,"author":{"gitId":"Clin-lyx"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-11-07"},{"lineNumber":7,"author":{"gitId":"Clin-lyx"},"content":"    \u003cListView fx:id\u003d\"viewedPerson\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-11-07"},{"lineNumber":8,"author":{"gitId":"Clin-lyx"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-11-07"}],"authorContributionMap":{"Clin-lyx":8}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"Clin-lyx"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2023-11-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2023-07-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AGE_DESC_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALLERGY_DESC_DUST;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;","lastModifiedDate":"2023-10-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.nio.file.AccessDeniedException;","lastModifiedDate":"2023-06-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy IO exception\");","lastModifiedDate":"2023-06-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_AD_EXCEPTION \u003d new AccessDeniedException(\"dummy access denied exception\");","lastModifiedDate":"2023-06-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(temporaryFolder.resolve(\"medbook.json\"));","lastModifiedDate":"2023-10-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":68,"author":{"gitId":"ryanongwx"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX","lastModifiedDate":"2023-11-08"},{"lineNumber":69,"author":{"gitId":"ryanongwx"},"content":"                + \". Please ensure that it is within 1 and \" + model.getFilteredPersonList().size() + \".\");","lastModifiedDate":"2023-11-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertCommandFailureForExceptionFromStorage(DUMMY_IO_EXCEPTION, String.format(","lastModifiedDate":"2023-06-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                LogicManager.FILE_OPS_ERROR_FORMAT, DUMMY_IO_EXCEPTION.getMessage()));","lastModifiedDate":"2023-06-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-06-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-06-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsAdException_throwsCommandException() {","lastModifiedDate":"2023-06-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertCommandFailureForExceptionFromStorage(DUMMY_AD_EXCEPTION, String.format(","lastModifiedDate":"2023-06-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                LogicManager.FILE_OPS_PERMISSION_ERROR_FORMAT, DUMMY_AD_EXCEPTION.getMessage()));","lastModifiedDate":"2023-06-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":96,"author":{"gitId":"Darren159"},"content":"    public void getFilteredAppointmentList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":97,"author":{"gitId":"Darren159"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredAppointmentList().remove(0));","lastModifiedDate":"2023-11-01"},{"lineNumber":98,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":99,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":100,"author":{"gitId":"Clin-lyx"},"content":"    @Test","lastModifiedDate":"2023-10-22"},{"lineNumber":101,"author":{"gitId":"Clin-lyx"},"content":"    public void getRecordList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-22"},{"lineNumber":102,"author":{"gitId":"Clin-lyx"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getRecordList().remove(0));","lastModifiedDate":"2023-10-22"},{"lineNumber":103,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-22"},{"lineNumber":104,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":105,"author":{"gitId":"Clin-lyx"},"content":"    @Test","lastModifiedDate":"2023-10-22"},{"lineNumber":106,"author":{"gitId":"Clin-lyx"},"content":"    public void getPersonBeingViewed_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-22"},{"lineNumber":107,"author":{"gitId":"Clin-lyx"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getPersonBeingViewed().remove(0));","lastModifiedDate":"2023-10-22"},{"lineNumber":108,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-22"},{"lineNumber":109,"author":{"gitId":"Clin-lyx"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":110,"author":{"gitId":"Clin-lyx"},"content":"    public void nonNullArray() {","lastModifiedDate":"2023-11-08"},{"lineNumber":111,"author":{"gitId":"Clin-lyx"},"content":"        assertNotNull(logic.getPatientIndex());","lastModifiedDate":"2023-11-08"},{"lineNumber":112,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":113,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":118,"author":{"gitId":"ryanongwx"},"content":"     * - the internal model manager state is the same as that in","lastModifiedDate":"2023-10-24"},{"lineNumber":119,"author":{"gitId":"ryanongwx"},"content":"     * {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":120,"author":{"gitId":"ryanongwx"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":131,"author":{"gitId":"ryanongwx"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the","lastModifiedDate":"2023-10-24"},{"lineNumber":132,"author":{"gitId":"ryanongwx"},"content":"     * result message is correct.","lastModifiedDate":"2023-10-24"},{"lineNumber":133,"author":{"gitId":"ryanongwx"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":141,"author":{"gitId":"ryanongwx"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the","lastModifiedDate":"2023-10-24"},{"lineNumber":142,"author":{"gitId":"ryanongwx"},"content":"     * result message is correct.","lastModifiedDate":"2023-10-24"},{"lineNumber":143,"author":{"gitId":"ryanongwx"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":151,"author":{"gitId":"ryanongwx"},"content":"     * Executes the command, confirms that the exception is thrown and that the","lastModifiedDate":"2023-10-24"},{"lineNumber":152,"author":{"gitId":"ryanongwx"},"content":"     * result message is correct.","lastModifiedDate":"2023-10-24"},{"lineNumber":153,"author":{"gitId":"ryanongwx"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":166,"author":{"gitId":"ryanongwx"},"content":"     * - the internal model manager state is the same as that in","lastModifiedDate":"2023-10-24"},{"lineNumber":167,"author":{"gitId":"ryanongwx"},"content":"     * {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":168,"author":{"gitId":"ryanongwx"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":178,"author":{"gitId":"ryanongwx"},"content":"     * Tests the Logic component\u0027s handling of an {@code IOException} thrown by the","lastModifiedDate":"2023-10-24"},{"lineNumber":179,"author":{"gitId":"ryanongwx"},"content":"     * Storage component.","lastModifiedDate":"2023-10-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-06-13"},{"lineNumber":181,"author":{"gitId":"Darren159"},"content":"     * @param e","lastModifiedDate":"2023-11-01"},{"lineNumber":182,"author":{"gitId":"Darren159"},"content":"     *                        the exception to be thrown by the Storage component","lastModifiedDate":"2023-11-01"},{"lineNumber":183,"author":{"gitId":"Darren159"},"content":"     * @param expectedMessage","lastModifiedDate":"2023-11-01"},{"lineNumber":184,"author":{"gitId":"Darren159"},"content":"     *                        the message expected inside exception thrown by the","lastModifiedDate":"2023-11-01"},{"lineNumber":185,"author":{"gitId":"ryanongwx"},"content":"     *                        Logic component","lastModifiedDate":"2023-10-24"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    private void assertCommandFailureForExceptionFromStorage(IOException e, String expectedMessage) {","lastModifiedDate":"2023-06-13"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        Path prefPath \u003d temporaryFolder.resolve(\"ExceptionUserPrefs.json\");","lastModifiedDate":"2023-06-13"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":190,"author":{"gitId":"ryanongwx"},"content":"        // Inject LogicManager with an AddressBookStorage that throws the IOException e","lastModifiedDate":"2023-10-24"},{"lineNumber":191,"author":{"gitId":"ryanongwx"},"content":"        // when saving","lastModifiedDate":"2023-10-24"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(prefPath) {","lastModifiedDate":"2023-10-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath)","lastModifiedDate":"2023-06-13"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                    throws IOException {","lastModifiedDate":"2023-06-13"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                throw e;","lastModifiedDate":"2023-06-13"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2023-06-13"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":200,"author":{"gitId":"ryanongwx"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(","lastModifiedDate":"2023-10-24"},{"lineNumber":201,"author":{"gitId":"ryanongwx"},"content":"                temporaryFolder.resolve(\"ExceptionUserPrefs.json\"));","lastModifiedDate":"2023-10-24"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2023-06-13"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2023-06-13"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        // Triggers the saveAddressBook method by executing an add command","lastModifiedDate":"2023-06-13"},{"lineNumber":207,"author":{"gitId":"Darren159"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + EMAIL_DESC_AMY + PHONE_DESC_AMY","lastModifiedDate":"2023-10-30"},{"lineNumber":208,"author":{"gitId":"adammangzijun"},"content":"                + GENDER_DESC_AMY + AGE_DESC_AMY + BLOODTYPE_DESC_AMY + ALLERGY_DESC_DUST;","lastModifiedDate":"2023-10-14"},{"lineNumber":209,"author":{"gitId":"ryanongwx"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).build();","lastModifiedDate":"2023-10-17"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2023-06-13"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2023-06-13"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2023-06-13"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"Darren159":14,"Clin-lyx":15,"-":157,"adammangzijun":3,"ryanongwx":25}},{"path":"src/test/java/seedu/address/logic/commands/AddAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"import seedu.address.testutil.AppointmentBuilder;","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"public class AddAppointmentCommandTest {","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddAppointmentCommand(INDEX_FIRST_PERSON, null));","lastModifiedDate":"2023-10-19"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2023-10-19"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"        Person personToAddAppointment \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-10-19"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().withNric(personToAddAppointment.getNric().toString())","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"                .build();","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"        AddAppointmentCommand addAppointmentCommand \u003d new AddAppointmentCommand(INDEX_FIRST_PERSON, validAppointment);","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"        UniqueAppointmentList newAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2023-10-19"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"        newAppointmentList.setAppointments(personToAddAppointment.getAppointments());","lastModifiedDate":"2023-10-19"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"        newAppointmentList.add(validAppointment);","lastModifiedDate":"2023-10-19"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"        Person editedPerson \u003d new PersonBuilder(personToAddAppointment).withAppointments(newAppointmentList).build();","lastModifiedDate":"2023-10-19"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"        String expectedMessage \u003d String.format(AddAppointmentCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2023-10-19"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"                Messages.format(validAppointment, editedPerson));","lastModifiedDate":"2023-10-19"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"        ModelManager expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2023-10-19"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"        expectedModel.resetAppointmentList();","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"        assertCommandSuccess(addAppointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-19"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();","lastModifiedDate":"2023-10-19"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2023-10-19"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"        AddAppointmentCommand addAppointmentCommand \u003d new AddAppointmentCommand(outOfBoundIndex, validAppointment);","lastModifiedDate":"2023-10-19"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":69,"author":{"gitId":"ryanongwx"},"content":"        assertCommandFailure(addAppointmentCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX","lastModifiedDate":"2023-11-08"},{"lineNumber":70,"author":{"gitId":"ryanongwx"},"content":"                + \". Please ensure that it is within 1 and \" + model.getFilteredPersonList().size() + \".\");","lastModifiedDate":"2023-11-08"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2023-10-19"},{"lineNumber":75,"author":{"gitId":"Darren159"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-19"},{"lineNumber":76,"author":{"gitId":"Darren159"},"content":"        Person personToAddAppointment \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-11-01"},{"lineNumber":77,"author":{"gitId":"Darren159"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().withNric(personToAddAppointment.getNric().toString())","lastModifiedDate":"2023-11-01"},{"lineNumber":78,"author":{"gitId":"Darren159"},"content":"                .build();","lastModifiedDate":"2023-11-01"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":80,"author":{"gitId":"Darren159"},"content":"        AddAppointmentCommand addAppointmentCommand \u003d new AddAppointmentCommand(INDEX_FIRST_PERSON, validAppointment);","lastModifiedDate":"2023-10-19"},{"lineNumber":81,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":82,"author":{"gitId":"Darren159"},"content":"        UniqueAppointmentList newAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2023-10-19"},{"lineNumber":83,"author":{"gitId":"Darren159"},"content":"        newAppointmentList.setAppointments(personToAddAppointment.getAppointments());","lastModifiedDate":"2023-10-19"},{"lineNumber":84,"author":{"gitId":"Darren159"},"content":"        newAppointmentList.add(validAppointment);","lastModifiedDate":"2023-10-19"},{"lineNumber":85,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":86,"author":{"gitId":"Darren159"},"content":"        Person editedPerson \u003d new PersonBuilder(personToAddAppointment).withAppointments(newAppointmentList).build();","lastModifiedDate":"2023-10-19"},{"lineNumber":87,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":88,"author":{"gitId":"Darren159"},"content":"        String expectedMessage \u003d String.format(AddAppointmentCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2023-10-19"},{"lineNumber":89,"author":{"gitId":"Darren159"},"content":"                Messages.format(validAppointment, editedPerson));","lastModifiedDate":"2023-10-19"},{"lineNumber":90,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":91,"author":{"gitId":"Darren159"},"content":"        ModelManager expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":92,"author":{"gitId":"Darren159"},"content":"        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-19"},{"lineNumber":93,"author":{"gitId":"Darren159"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2023-10-19"},{"lineNumber":94,"author":{"gitId":"Darren159"},"content":"        expectedModel.resetAppointmentList();","lastModifiedDate":"2023-11-02"},{"lineNumber":95,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":96,"author":{"gitId":"Darren159"},"content":"        assertCommandSuccess(addAppointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-19"},{"lineNumber":97,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":98,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":99,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":100,"author":{"gitId":"Darren159"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":101,"author":{"gitId":"Darren159"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-19"},{"lineNumber":102,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":103,"author":{"gitId":"Darren159"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();","lastModifiedDate":"2023-10-19"},{"lineNumber":104,"author":{"gitId":"Darren159"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2023-10-19"},{"lineNumber":105,"author":{"gitId":"Darren159"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2023-10-19"},{"lineNumber":106,"author":{"gitId":"Darren159"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2023-10-19"},{"lineNumber":107,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":108,"author":{"gitId":"Darren159"},"content":"        AddAppointmentCommand addAppointmentCommand \u003d new AddAppointmentCommand(outOfBoundIndex, validAppointment);","lastModifiedDate":"2023-10-19"},{"lineNumber":109,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":110,"author":{"gitId":"ryanongwx"},"content":"        assertCommandFailure(addAppointmentCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX","lastModifiedDate":"2023-11-08"},{"lineNumber":111,"author":{"gitId":"ryanongwx"},"content":"                + \". Please ensure that it is within 1 and \" + model.getFilteredPersonList().size() + \".\");","lastModifiedDate":"2023-11-08"},{"lineNumber":112,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":113,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":114,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":115,"author":{"gitId":"Darren159"},"content":"    public void execute_duplicateAppointmentUnfilteredList_failure() {","lastModifiedDate":"2023-11-01"},{"lineNumber":116,"author":{"gitId":"Darren159"},"content":"        Appointment appointment \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased())","lastModifiedDate":"2023-10-19"},{"lineNumber":117,"author":{"gitId":"Darren159"},"content":"                .getAppointments().asUnmodifiableObservableList().get(0);","lastModifiedDate":"2023-10-19"},{"lineNumber":118,"author":{"gitId":"Darren159"},"content":"        AddAppointmentCommand addAppointmentCommand \u003d new AddAppointmentCommand(INDEX_FIRST_PERSON, appointment);","lastModifiedDate":"2023-10-19"},{"lineNumber":119,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":120,"author":{"gitId":"Darren159"},"content":"        assertCommandFailure(addAppointmentCommand, model, AddAppointmentCommand.MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2023-10-19"},{"lineNumber":121,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":122,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":123,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":124,"author":{"gitId":"Darren159"},"content":"    public void equals() {","lastModifiedDate":"2023-10-19"},{"lineNumber":125,"author":{"gitId":"Darren159"},"content":"        Appointment eyeExam \u003d new AppointmentBuilder().withName(\"Eye Exam\").build();","lastModifiedDate":"2023-10-19"},{"lineNumber":126,"author":{"gitId":"Darren159"},"content":"        Appointment earExam \u003d new AppointmentBuilder().withName(\"Ear Exam\").build();","lastModifiedDate":"2023-10-19"},{"lineNumber":127,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":128,"author":{"gitId":"Darren159"},"content":"        final AddAppointmentCommand standardCommand \u003d new AddAppointmentCommand(INDEX_FIRST_PERSON, eyeExam);","lastModifiedDate":"2023-10-19"},{"lineNumber":129,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":130,"author":{"gitId":"Darren159"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-19"},{"lineNumber":131,"author":{"gitId":"Darren159"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2023-10-19"},{"lineNumber":132,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":133,"author":{"gitId":"Darren159"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-19"},{"lineNumber":134,"author":{"gitId":"Darren159"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2023-10-19"},{"lineNumber":135,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":136,"author":{"gitId":"Darren159"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-19"},{"lineNumber":137,"author":{"gitId":"Darren159"},"content":"        assertFalse(standardCommand.equals(new HelpCommand()));","lastModifiedDate":"2023-11-02"},{"lineNumber":138,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":139,"author":{"gitId":"Darren159"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2023-10-19"},{"lineNumber":140,"author":{"gitId":"Darren159"},"content":"        assertFalse(standardCommand.equals(new AddAppointmentCommand(INDEX_SECOND_PERSON, eyeExam)));","lastModifiedDate":"2023-10-19"},{"lineNumber":141,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":142,"author":{"gitId":"Darren159"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2023-10-19"},{"lineNumber":143,"author":{"gitId":"Darren159"},"content":"        assertFalse(standardCommand.equals(new AddAppointmentCommand(INDEX_FIRST_PERSON, earExam)));","lastModifiedDate":"2023-10-19"},{"lineNumber":144,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":145,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":146,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":147,"author":{"gitId":"Darren159"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-19"},{"lineNumber":148,"author":{"gitId":"Darren159"},"content":"        Index targetIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-10-19"},{"lineNumber":149,"author":{"gitId":"Darren159"},"content":"        Appointment appointment \u003d new AppointmentBuilder().build();","lastModifiedDate":"2023-10-19"},{"lineNumber":150,"author":{"gitId":"Darren159"},"content":"        AddAppointmentCommand addAppointmentCommand \u003d new AddAppointmentCommand(targetIndex, appointment);","lastModifiedDate":"2023-10-19"},{"lineNumber":151,"author":{"gitId":"Darren159"},"content":"        String expected \u003d new ToStringBuilder(addAppointmentCommand)","lastModifiedDate":"2023-10-19"},{"lineNumber":152,"author":{"gitId":"Darren159"},"content":"                .add(\"toAdd\", appointment)","lastModifiedDate":"2023-10-19"},{"lineNumber":153,"author":{"gitId":"Darren159"},"content":"                .toString();","lastModifiedDate":"2023-10-19"},{"lineNumber":154,"author":{"gitId":"Darren159"},"content":"        assertEquals(expected, addAppointmentCommand.toString());","lastModifiedDate":"2023-10-19"},{"lineNumber":155,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":156,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"Darren159":152,"ryanongwx":4}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);","lastModifiedDate":"2017-06-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new AddCommand(validPerson), model,","lastModifiedDate":"2019-01-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, Messages.format(validPerson)),","lastModifiedDate":"2019-02-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                expectedModel);","lastModifiedDate":"2019-02-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);","lastModifiedDate":"2018-01-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertCommandFailure(new AddCommand(personInList), model,","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                AddCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"Darren159":2,"-":47}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":13,"author":{"gitId":"Clin-lyx"},"content":"import java.util.List;","lastModifiedDate":"2023-11-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2023-10-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, Messages.format(validPerson)),","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2019-05-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(ALICE);","lastModifiedDate":"2019-02-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String expected \u003d AddCommand.class.getCanonicalName() + \"{toAdd\u003d\" + ALICE + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertEquals(expected, addCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":145,"author":{"gitId":"hjoneweek"},"content":"        @Override","lastModifiedDate":"2023-11-08"},{"lineNumber":146,"author":{"gitId":"hjoneweek"},"content":"        public boolean hasRecord(Record record, Index index) {","lastModifiedDate":"2023-11-08"},{"lineNumber":147,"author":{"gitId":"hjoneweek"},"content":"            throw new AssertionError(\"This method should not be called\");","lastModifiedDate":"2023-11-08"},{"lineNumber":148,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-11-08"},{"lineNumber":149,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":169,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":170,"author":{"gitId":"Darren159"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":171,"author":{"gitId":"Darren159"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":172,"author":{"gitId":"Darren159"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":173,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":174,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":175,"author":{"gitId":"Darren159"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":176,"author":{"gitId":"Darren159"},"content":"        public void resetAppointmentList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":177,"author":{"gitId":"Darren159"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":178,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":179,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":180,"author":{"gitId":"Darren159"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":181,"author":{"gitId":"Darren159"},"content":"        public ObservableList\u003cPerson\u003e getPinnedPersonList() {","lastModifiedDate":"2023-10-13"},{"lineNumber":182,"author":{"gitId":"Darren159"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":183,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":184,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":185,"author":{"gitId":"Clin-lyx"},"content":"        @Override","lastModifiedDate":"2023-10-21"},{"lineNumber":186,"author":{"gitId":"Clin-lyx"},"content":"        public ObservableList\u003cRecord\u003e getRecordList() {","lastModifiedDate":"2023-10-21"},{"lineNumber":187,"author":{"gitId":"Clin-lyx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-21"},{"lineNumber":188,"author":{"gitId":"Clin-lyx"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":189,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":190,"author":{"gitId":"Clin-lyx"},"content":"        @Override","lastModifiedDate":"2023-10-21"},{"lineNumber":191,"author":{"gitId":"Clin-lyx"},"content":"        public void updateRecordList(Person person, Index index) {","lastModifiedDate":"2023-11-08"},{"lineNumber":192,"author":{"gitId":"Clin-lyx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-21"},{"lineNumber":193,"author":{"gitId":"Clin-lyx"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":194,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":195,"author":{"gitId":"Clin-lyx"},"content":"        @Override","lastModifiedDate":"2023-10-21"},{"lineNumber":196,"author":{"gitId":"Clin-lyx"},"content":"        public ObservableList\u003cPerson\u003e getPersonBeingViewed() {","lastModifiedDate":"2023-10-21"},{"lineNumber":197,"author":{"gitId":"Clin-lyx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-21"},{"lineNumber":198,"author":{"gitId":"Clin-lyx"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":199,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":200,"author":{"gitId":"Darren159"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":201,"author":{"gitId":"Darren159"},"content":"        public ObservableList\u003cRecord\u003e getFilteredRecordList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":202,"author":{"gitId":"Darren159"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":203,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":204,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":205,"author":{"gitId":"Darren159"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":206,"author":{"gitId":"Darren159"},"content":"        public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {","lastModifiedDate":"2023-11-01"},{"lineNumber":207,"author":{"gitId":"Darren159"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":208,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":209,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":210,"author":{"gitId":"Clin-lyx"},"content":"        @Override","lastModifiedDate":"2023-11-08"},{"lineNumber":211,"author":{"gitId":"Clin-lyx"},"content":"        public List\u003cIndex\u003e getPatientIndex() {","lastModifiedDate":"2023-11-08"},{"lineNumber":212,"author":{"gitId":"Clin-lyx"},"content":"            // TODO Auto-generated method stub","lastModifiedDate":"2023-11-08"},{"lineNumber":213,"author":{"gitId":"Clin-lyx"},"content":"            throw new AssertionError(\"Unimplemented method \u0027getPatientIndex\u0027\");","lastModifiedDate":"2023-11-08"},{"lineNumber":214,"author":{"gitId":"Clin-lyx"},"content":"        }","lastModifiedDate":"2023-11-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":218,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":219,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":236,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":237,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":243,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":244,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":250,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":255,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":259,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"Darren159":26,"hjoneweek":5,"Clin-lyx":24,"-":204}},{"path":"src/test/java/seedu/address/logic/commands/AddRecordCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"ryanongwx"},"content":"import static seedu.address.testutil.TypicalRecords.ALLERGIC_REACTION2;","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ryanongwx"},"content":"import static seedu.address.testutil.TypicalRecords.FEVER0;","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"ryanongwx"},"content":"import static seedu.address.testutil.TypicalRecords.FEVER_AND_COLD0;","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ryanongwx"},"content":"import static seedu.address.testutil.TypicalRecords.FEVER_AND_COLD2;","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.UniqueRecordList;","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"public class AddRecordCommandTest {","lastModifiedDate":"2023-10-19"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2023-10-19"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"        Person personToAddRecord \u003d model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased());","lastModifiedDate":"2023-10-19"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"        UniqueRecordList records \u003d new UniqueRecordList();","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"        records.setRecords(personToAddRecord.getRecords());","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"ryanongwx"},"content":"        records.add(FEVER_AND_COLD2);","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"        Person personWithAddedRecord \u003d new PersonBuilder(personToAddRecord).withRecords(records).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"ryanongwx"},"content":"        AddRecordCommand addRecordCommand \u003d new AddRecordCommand(INDEX_THIRD_PERSON, FEVER_AND_COLD2);","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"        String expectedMessage \u003d String.format(AddRecordCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"ryanongwx"},"content":"                Messages.format(FEVER_AND_COLD2, personWithAddedRecord));","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(2), personWithAddedRecord);","lastModifiedDate":"2023-10-19"},{"lineNumber":48,"author":{"gitId":"Clin-lyx"},"content":"        expectedModel.updateRecordList(personWithAddedRecord, INDEX_THIRD_PERSON);","lastModifiedDate":"2023-11-08"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"        assertCommandSuccess(addRecordCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-19"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2023-10-19"},{"lineNumber":55,"author":{"gitId":"ryanongwx"},"content":"        AddRecordCommand addRecordCommand \u003d new AddRecordCommand(outOfBoundIndex, ALLERGIC_REACTION2);","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":57,"author":{"gitId":"ryanongwx"},"content":"        assertCommandFailure(addRecordCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX","lastModifiedDate":"2023-11-08"},{"lineNumber":58,"author":{"gitId":"ryanongwx"},"content":"                + \". Please ensure that it is within 1 and \" + model.getFilteredPersonList().size() + \".\");","lastModifiedDate":"2023-11-08"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":62,"author":{"gitId":"hjoneweek"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2023-10-19"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-19"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":65,"author":{"gitId":"hjoneweek"},"content":"        Person personToAddRecord \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-10-19"},{"lineNumber":66,"author":{"gitId":"hjoneweek"},"content":"        UniqueRecordList records \u003d new UniqueRecordList();","lastModifiedDate":"2023-10-20"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"        records.setRecords(personToAddRecord.getRecords());","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"ryanongwx"},"content":"        records.add(FEVER_AND_COLD0);","lastModifiedDate":"2023-10-24"},{"lineNumber":69,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"        Person personWithAddedRecord \u003d new PersonBuilder(personToAddRecord).withRecords(records).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"ryanongwx"},"content":"        AddRecordCommand addRecordCommand \u003d new AddRecordCommand(INDEX_FIRST_PERSON, FEVER_AND_COLD0);","lastModifiedDate":"2023-10-24"},{"lineNumber":72,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"        String expectedMessage \u003d String.format(AddRecordCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"ryanongwx"},"content":"                Messages.format(FEVER_AND_COLD0, personWithAddedRecord));","lastModifiedDate":"2023-10-24"},{"lineNumber":75,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":76,"author":{"gitId":"hjoneweek"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":77,"author":{"gitId":"hjoneweek"},"content":"        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-19"},{"lineNumber":78,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":79,"author":{"gitId":"hjoneweek"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), personWithAddedRecord);","lastModifiedDate":"2023-10-19"},{"lineNumber":80,"author":{"gitId":"Clin-lyx"},"content":"        expectedModel.updateRecordList(personWithAddedRecord, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-11-08"},{"lineNumber":81,"author":{"gitId":"hjoneweek"},"content":"        assertCommandSuccess(addRecordCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-19"},{"lineNumber":82,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":83,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":84,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":85,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":86,"author":{"gitId":"hjoneweek"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":87,"author":{"gitId":"hjoneweek"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-19"},{"lineNumber":88,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":89,"author":{"gitId":"hjoneweek"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2023-10-19"},{"lineNumber":90,"author":{"gitId":"hjoneweek"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2023-10-19"},{"lineNumber":91,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2023-10-19"},{"lineNumber":92,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":93,"author":{"gitId":"ryanongwx"},"content":"        AddRecordCommand addRecordCommand \u003d new AddRecordCommand(outOfBoundIndex, FEVER0);","lastModifiedDate":"2023-10-24"},{"lineNumber":94,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":95,"author":{"gitId":"ryanongwx"},"content":"        assertCommandFailure(addRecordCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX","lastModifiedDate":"2023-11-08"},{"lineNumber":96,"author":{"gitId":"ryanongwx"},"content":"                + \". Please ensure that it is within 1 and \" + model.getFilteredPersonList().size() + \".\");","lastModifiedDate":"2023-11-08"},{"lineNumber":97,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":98,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":99,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":100,"author":{"gitId":"hjoneweek"},"content":"    public void execute_duplicateRecord_throwsCommandException() {","lastModifiedDate":"2023-11-08"},{"lineNumber":101,"author":{"gitId":"hjoneweek"},"content":"        Index validIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2023-11-08"},{"lineNumber":102,"author":{"gitId":"hjoneweek"},"content":"        AddRecordCommand addrecordCommand \u003d new AddRecordCommand(validIndex, FEVER0);","lastModifiedDate":"2023-11-08"},{"lineNumber":103,"author":{"gitId":"hjoneweek"},"content":"        assertCommandFailure(addrecordCommand, model, AddRecordCommand.MESSAGE_DUPLICATE_RECORDS);","lastModifiedDate":"2023-11-08"},{"lineNumber":104,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":105,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":106,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":107,"author":{"gitId":"hjoneweek"},"content":"    public void equals() {","lastModifiedDate":"2023-10-19"},{"lineNumber":108,"author":{"gitId":"ryanongwx"},"content":"        AddRecordCommand addRecordCommand1 \u003d new AddRecordCommand(INDEX_FIRST_PERSON, FEVER0);","lastModifiedDate":"2023-10-24"},{"lineNumber":109,"author":{"gitId":"ryanongwx"},"content":"        AddRecordCommand addRecordCommand2 \u003d new AddRecordCommand(INDEX_FIRST_PERSON, FEVER0);","lastModifiedDate":"2023-10-24"},{"lineNumber":110,"author":{"gitId":"ryanongwx"},"content":"        AddRecordCommand addRecordCommand3 \u003d new AddRecordCommand(INDEX_THIRD_PERSON, ALLERGIC_REACTION2);","lastModifiedDate":"2023-10-24"},{"lineNumber":111,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":112,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(addRecordCommand1.equals(addRecordCommand1));","lastModifiedDate":"2023-10-19"},{"lineNumber":113,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(addRecordCommand1.equals(addRecordCommand2));","lastModifiedDate":"2023-10-19"},{"lineNumber":114,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(addRecordCommand1.equals(1));","lastModifiedDate":"2023-10-19"},{"lineNumber":115,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(addRecordCommand1.equals(null));","lastModifiedDate":"2023-10-19"},{"lineNumber":116,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(addRecordCommand1.equals(addRecordCommand3));","lastModifiedDate":"2023-10-19"},{"lineNumber":117,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":118,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":119,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":120,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":121,"author":{"gitId":"hjoneweek"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-20"},{"lineNumber":122,"author":{"gitId":"ryanongwx"},"content":"        AddRecordCommand addRecordCommand \u003d new AddRecordCommand(INDEX_FIRST_PERSON, FEVER0);","lastModifiedDate":"2023-10-24"},{"lineNumber":123,"author":{"gitId":"hjoneweek"},"content":"        String expected \u003d AddRecordCommand.class.getCanonicalName() + \"{index\u003d\" + INDEX_FIRST_PERSON + \", \"","lastModifiedDate":"2023-10-20"},{"lineNumber":124,"author":{"gitId":"ryanongwx"},"content":"                + \"record\u003d\" + FEVER0 + \"}\";","lastModifiedDate":"2023-10-24"},{"lineNumber":125,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":126,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(expected, addRecordCommand.toString());","lastModifiedDate":"2023-10-20"},{"lineNumber":127,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":128,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":129,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"hjoneweek":99,"Darren159":6,"Clin-lyx":2,"ryanongwx":22}},{"path":"src/test/java/seedu/address/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2018-12-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"        // different showAppointment value -\u003e returns false","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true)));","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void hashcode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"        // different showAppointments value -\u003e returns different hashcode","lastModifiedDate":"2023-11-01"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());","lastModifiedDate":"2023-11-01"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, true).hashCode());","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2019-02-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String expected \u003d CommandResult.class.getCanonicalName() + \"{feedbackToUser\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"                + commandResult.getFeedbackToUser() + \", showHelp\u003d\" + commandResult.isShowHelp() + \", showAppointments\u003d\"","lastModifiedDate":"2023-11-01"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"                + commandResult.isShowAppointments()","lastModifiedDate":"2023-11-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                + \", exit\u003d\" + commandResult.isExit() + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertEquals(expected, commandResult.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-12-09"}],"authorContributionMap":{"Darren159":13,"-":57}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;","lastModifiedDate":"2023-10-15"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;","lastModifiedDate":"2023-10-15"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;","lastModifiedDate":"2023-10-15"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CONDITION;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;","lastModifiedDate":"2023-10-15"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICATION;","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-15"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-10-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-07-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.DateTime;","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Name;","lastModifiedDate":"2023-10-22"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Nric;","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.testutil.EditRecordDescriptorBuilder;","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"    public static final String VALID_NRIC_AMY \u003d \"T0000000A\";","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"    public static final String VALID_NRIC_BOB \u003d \"S0000000A\";","lastModifiedDate":"2023-10-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2023-10-14"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"    public static final String VALID_GENDER_AMY \u003d \"F\";","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"    public static final String VALID_GENDER_BOB \u003d \"M\";","lastModifiedDate":"2023-10-14"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"    public static final int VALID_AGE_AMY \u003d 20;","lastModifiedDate":"2023-10-14"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"    public static final int VALID_AGE_BOB \u003d 31;","lastModifiedDate":"2023-10-14"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"    public static final String VALID_BLOODTYPE_AMY \u003d \"B+\";","lastModifiedDate":"2023-10-14"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"    public static final String VALID_BLOODTYPE_BOB \u003d \"A-\";","lastModifiedDate":"2023-10-14"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"    public static final String VALID_ALLERGY_DUST \u003d \"Dust\";","lastModifiedDate":"2023-10-14"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"    public static final String VALID_ALLERGY_PEANUTS \u003d \"Peanuts\";","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"    public static final String VALID_NAME_THYROID_CHECK \u003d \"Thyroid Check\";","lastModifiedDate":"2023-10-19"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"    public static final String VALID_NAME_SLEEP_STUDY \u003d \"Sleep Study\";","lastModifiedDate":"2023-10-19"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"    public static final String VALID_DATETIME_THYROID_CHECK \u003d \"01-01-2001 1200\";","lastModifiedDate":"2023-10-19"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"    public static final String VALID_DATETIME_SLEEP_STUDY \u003d \"11-09-2001 1200\";","lastModifiedDate":"2023-10-19"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"    public static final String VALID_CONDITION_DIARRHEA \u003d \"Diarrhea\";","lastModifiedDate":"2023-10-24"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"    public static final String VALID_CONDITION_HEAT_STROKE \u003d \"Heat stroke\";","lastModifiedDate":"2023-10-24"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"    public static final String VALID_MEDICATION_DIARRHEA \u003d \"Loperamide\";","lastModifiedDate":"2023-10-26"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"    public static final String VALID_MEDICATION_HEAT_STROKE \u003d \"Phenobarbital\";","lastModifiedDate":"2023-10-26"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"    public static final Appointment VALID_APPOINTMENT_THYROID_CHECK \u003d new Appointment(","lastModifiedDate":"2023-10-30"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"            new Name(VALID_NAME_THYROID_CHECK), new DateTime(VALID_DATETIME_THYROID_CHECK), new Nric(VALID_NRIC_AMY));","lastModifiedDate":"2023-11-01"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"    public static final Appointment VALID_APPOINTMENT_SLEEP_STUDY \u003d new Appointment(","lastModifiedDate":"2023-10-30"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"            new Name(VALID_NAME_SLEEP_STUDY),","lastModifiedDate":"2023-10-30"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"            new DateTime(VALID_DATETIME_SLEEP_STUDY), new Nric(VALID_NRIC_BOB));","lastModifiedDate":"2023-11-01"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;","lastModifiedDate":"2023-10-30"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;","lastModifiedDate":"2023-10-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":77,"author":{"gitId":"adammangzijun"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":78,"author":{"gitId":"adammangzijun"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2023-10-14"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"    public static final String GENDER_DESC_AMY \u003d \" \" + PREFIX_GENDER + VALID_GENDER_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":80,"author":{"gitId":"adammangzijun"},"content":"    public static final String GENDER_DESC_BOB \u003d \" \" + PREFIX_GENDER + VALID_GENDER_BOB;","lastModifiedDate":"2023-10-14"},{"lineNumber":81,"author":{"gitId":"adammangzijun"},"content":"    public static final String AGE_DESC_AMY \u003d \" \" + PREFIX_AGE + VALID_AGE_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":82,"author":{"gitId":"adammangzijun"},"content":"    public static final String AGE_DESC_BOB \u003d \" \" + PREFIX_AGE + VALID_AGE_BOB;","lastModifiedDate":"2023-10-14"},{"lineNumber":83,"author":{"gitId":"adammangzijun"},"content":"    public static final String BLOODTYPE_DESC_AMY \u003d \" \" + PREFIX_BLOODTYPE + VALID_BLOODTYPE_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":84,"author":{"gitId":"adammangzijun"},"content":"    public static final String BLOODTYPE_DESC_BOB \u003d \" \" + PREFIX_BLOODTYPE + VALID_BLOODTYPE_BOB;","lastModifiedDate":"2023-10-14"},{"lineNumber":85,"author":{"gitId":"adammangzijun"},"content":"    public static final String ALLERGY_DESC_DUST \u003d \" \" + PREFIX_ALLERGIES + VALID_ALLERGY_DUST;","lastModifiedDate":"2023-10-14"},{"lineNumber":86,"author":{"gitId":"adammangzijun"},"content":"    public static final String ALLERGY_DESC_PEANUTS \u003d \" \" + PREFIX_ALLERGIES + VALID_ALLERGY_PEANUTS;","lastModifiedDate":"2023-10-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":88,"author":{"gitId":"Darren159"},"content":"    public static final String NAME_DESC_SLEEP_STUDY \u003d \" \" + PREFIX_NAME + VALID_NAME_SLEEP_STUDY;","lastModifiedDate":"2023-10-19"},{"lineNumber":89,"author":{"gitId":"Darren159"},"content":"    public static final String NAME_DESC_THYROID_CHECK \u003d \" \" + PREFIX_NAME + VALID_NAME_THYROID_CHECK;","lastModifiedDate":"2023-10-19"},{"lineNumber":90,"author":{"gitId":"Darren159"},"content":"    public static final String DATETIME_DESC_SLEEP_STUDY \u003d \" \" + PREFIX_DATE + VALID_DATETIME_SLEEP_STUDY;","lastModifiedDate":"2023-10-19"},{"lineNumber":91,"author":{"gitId":"Darren159"},"content":"    public static final String DATETIME_DESC_THYROID_CHECK \u003d \" \" + PREFIX_DATE + VALID_DATETIME_THYROID_CHECK;","lastModifiedDate":"2023-10-19"},{"lineNumber":92,"author":{"gitId":"hjoneweek"},"content":"    public static final String CONDITION_DESC_HEAT_STROKE \u003d \" \" + PREFIX_CONDITION + VALID_CONDITION_HEAT_STROKE;","lastModifiedDate":"2023-10-26"},{"lineNumber":93,"author":{"gitId":"adammangzijun"},"content":"    public static final String CONDITION_DESC_DIARRHEA \u003d \" \" + PREFIX_CONDITION + VALID_CONDITION_DIARRHEA;","lastModifiedDate":"2023-10-24"},{"lineNumber":94,"author":{"gitId":"hjoneweek"},"content":"    public static final String MEDICATION_DESC_HEAT_STROKE \u003d \" \" + PREFIX_MEDICATION + VALID_MEDICATION_HEAT_STROKE;","lastModifiedDate":"2023-10-26"},{"lineNumber":95,"author":{"gitId":"hjoneweek"},"content":"    public static final String MEDICATION_DESC_DIARRHEA \u003d \" \" + PREFIX_MEDICATION + VALID_MEDICATION_DIARRHEA;","lastModifiedDate":"2023-10-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":98,"author":{"gitId":"Darren159"},"content":"    public static final String INVALID_NRIC_DESC \u003d \" \" + PREFIX_NRIC + \"A123456*A\"; // \u0027*\u0027 not allowed in NRIC","lastModifiedDate":"2023-10-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":100,"author":{"gitId":"adammangzijun"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2023-10-14"},{"lineNumber":101,"author":{"gitId":"adammangzijun"},"content":"    public static final String INVALID_GENDER_DESC \u003d \" \" + PREFIX_GENDER + \"A\"; // \u0027A\u0027 not allowed in gender","lastModifiedDate":"2023-10-14"},{"lineNumber":102,"author":{"gitId":"Clin-lyx"},"content":"    public static final String INVALID_AGE_DESC \u003d \" \" + PREFIX_AGE + \"-1\"; // age must be more than or equal to 0","lastModifiedDate":"2023-11-08"},{"lineNumber":103,"author":{"gitId":"adammangzijun"},"content":"    public static final String INVALID_BLOODTYPE_DESC \u003d \" \" + PREFIX_BLOODTYPE + \"G\"; // \u0027G\u0027 not allowed in bloodtype","lastModifiedDate":"2023-10-14"},{"lineNumber":104,"author":{"gitId":"Darren159"},"content":"    public static final String INVALID_ALLERGY_DESC \u003d \" \" + PREFIX_ALLERGIES + \"Peanuts*\";","lastModifiedDate":"2023-10-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":106,"author":{"gitId":"Darren159"},"content":"    public static final String INVALID_DATETIME_DESC \u003d \" \" + PREFIX_DATE","lastModifiedDate":"2023-10-19"},{"lineNumber":107,"author":{"gitId":"Darren159"},"content":"            + \"11/1/01 1200\"; // date must be in the format dd-mm-yyyy","lastModifiedDate":"2023-10-19"},{"lineNumber":108,"author":{"gitId":"adammangzijun"},"content":"    public static final String INVALID_CONDITION_DESC \u003d \" \" + PREFIX_CONDITION","lastModifiedDate":"2023-10-24"},{"lineNumber":109,"author":{"gitId":"adammangzijun"},"content":"            + \"Fever*\"; // \u0027*\u0027 not allowed in conditions","lastModifiedDate":"2023-10-24"},{"lineNumber":110,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":111,"author":{"gitId":"hjoneweek"},"content":"    public static final String INVALID_MEDICATION_DESC \u003d \" \" + PREFIX_MEDICATION","lastModifiedDate":"2023-10-26"},{"lineNumber":112,"author":{"gitId":"hjoneweek"},"content":"            + \"Tylenol+\";","lastModifiedDate":"2023-10-26"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":120,"author":{"gitId":"adammangzijun"},"content":"    public static final EditRecordCommand.EditRecordDescriptor DESC_FIRST_REC;","lastModifiedDate":"2023-10-24"},{"lineNumber":121,"author":{"gitId":"adammangzijun"},"content":"    public static final EditRecordCommand.EditRecordDescriptor DESC_SECOND_REC;","lastModifiedDate":"2023-10-24"},{"lineNumber":122,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":124,"author":{"gitId":"Darren159"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).withNric(VALID_NRIC_AMY)","lastModifiedDate":"2023-10-30"},{"lineNumber":125,"author":{"gitId":"adammangzijun"},"content":"                .withEmail(VALID_EMAIL_AMY).withPhone(VALID_PHONE_AMY).withGender(VALID_GENDER_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":126,"author":{"gitId":"adammangzijun"},"content":"                .withAge(VALID_AGE_AMY).withBloodType(VALID_BLOODTYPE_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":127,"author":{"gitId":"adammangzijun"},"content":"                .withAllergies(VALID_ALLERGY_DUST).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":128,"author":{"gitId":"Darren159"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withNric(VALID_NRIC_BOB)","lastModifiedDate":"2023-10-30"},{"lineNumber":129,"author":{"gitId":"adammangzijun"},"content":"                .withEmail(VALID_EMAIL_BOB).withPhone(VALID_PHONE_BOB).withGender(VALID_GENDER_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":130,"author":{"gitId":"adammangzijun"},"content":"                .withAge(VALID_AGE_BOB).withBloodType(VALID_BLOODTYPE_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":131,"author":{"gitId":"adammangzijun"},"content":"                .withAllergies(VALID_ALLERGY_DUST, VALID_ALLERGY_PEANUTS).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":132,"author":{"gitId":"adammangzijun"},"content":"        DESC_FIRST_REC \u003d new EditRecordDescriptorBuilder()","lastModifiedDate":"2023-10-24"},{"lineNumber":133,"author":{"gitId":"adammangzijun"},"content":"                .withDateTime(VALID_DATETIME_SLEEP_STUDY)","lastModifiedDate":"2023-10-24"},{"lineNumber":134,"author":{"gitId":"hjoneweek"},"content":"                .withConditions(VALID_CONDITION_DIARRHEA)","lastModifiedDate":"2023-10-26"},{"lineNumber":135,"author":{"gitId":"hjoneweek"},"content":"                .withMedications(VALID_MEDICATION_DIARRHEA).build();","lastModifiedDate":"2023-10-26"},{"lineNumber":136,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":137,"author":{"gitId":"adammangzijun"},"content":"        DESC_SECOND_REC \u003d new EditRecordDescriptorBuilder()","lastModifiedDate":"2023-10-24"},{"lineNumber":138,"author":{"gitId":"adammangzijun"},"content":"                .withDateTime(VALID_DATETIME_THYROID_CHECK)","lastModifiedDate":"2023-10-24"},{"lineNumber":139,"author":{"gitId":"hjoneweek"},"content":"                .withConditions(VALID_CONDITION_HEAT_STROKE)","lastModifiedDate":"2023-10-26"},{"lineNumber":140,"author":{"gitId":"hjoneweek"},"content":"                .withMedications(VALID_MEDICATION_HEAT_STROKE).build();","lastModifiedDate":"2023-10-26"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":145,"author":{"gitId":"ryanongwx"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult}","lastModifiedDate":"2023-10-17"},{"lineNumber":146,"author":{"gitId":"ryanongwx"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-10-17"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"ryanongwx"},"content":"     * Convenience wrapper to","lastModifiedDate":"2023-10-17"},{"lineNumber":162,"author":{"gitId":"ryanongwx"},"content":"     * {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2023-10-17"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":175,"author":{"gitId":"ryanongwx"},"content":"     * - the address book, filtered person list and selected person in","lastModifiedDate":"2023-10-17"},{"lineNumber":176,"author":{"gitId":"ryanongwx"},"content":"     * {@code actualModel} remain unchanged","lastModifiedDate":"2023-10-17"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":187,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":189,"author":{"gitId":"ryanongwx"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given","lastModifiedDate":"2023-10-17"},{"lineNumber":190,"author":{"gitId":"ryanongwx"},"content":"     * {@code targetIndex} in the","lastModifiedDate":"2023-10-17"},{"lineNumber":191,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":192,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":203,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"Darren159":34,"hjoneweek":12,"Clin-lyx":1,"-":103,"adammangzijun":44,"ryanongwx":9}},{"path":"src/test/java/seedu/address/logic/commands/DeleteAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Nric;","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":" * {@code DeleteAppointmentCommand}.","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"public class DeleteAppointmentCommandTest {","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"    public void execute_validIndex_success() {","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"        Appointment appointmentToDelete \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"        Nric patientNric \u003d appointmentToDelete.getNric();","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"        Person personWithAppointment \u003d model.getFilteredPersonList().stream()","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"                .filter(person -\u003e person.getNric().equals(patientNric))","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"                .findFirst()","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"                .orElse(null);","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"        String expectedMessage \u003d String.format(DeleteAppointmentCommand.MESSAGE_DELETE_APPOINTMENT_SUCCESS,","lastModifiedDate":"2023-11-02"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"                Messages.format(appointmentToDelete, personWithAppointment));","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"        UniqueAppointmentList newAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"        newAppointmentList.setAppointments(personWithAppointment.getAppointments());","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"        newAppointmentList.remove(appointmentToDelete);","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"        Person editedPerson \u003d new PersonBuilder(personWithAppointment).withAppointments(newAppointmentList).build();","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"        ModelManager expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"        expectedModel.setPerson(personWithAppointment, editedPerson);","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"        expectedModel.resetAppointmentList();","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"        assertCommandSuccess(deleteAppointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"    public void execute_invalidIndex_throwsCommandException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAppointmentList().size() + 1);","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand(outOfBoundIndex);","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"        assertCommandFailure(deleteAppointmentCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"    public void execute_invalidNric_throwsCommandException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"        Appointment appointmentToDelete \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-11-02"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"        Nric patientNric \u003d appointmentToDelete.getNric();","lastModifiedDate":"2023-11-02"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"        Person personWithAppointment \u003d model.getFilteredPersonList().stream()","lastModifiedDate":"2023-11-02"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"                .filter(person -\u003e person.getNric().equals(patientNric))","lastModifiedDate":"2023-11-02"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"                .findFirst()","lastModifiedDate":"2023-11-02"},{"lineNumber":75,"author":{"gitId":"Darren159"},"content":"                .orElse(null);","lastModifiedDate":"2023-11-02"},{"lineNumber":76,"author":{"gitId":"Darren159"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-11-02"},{"lineNumber":77,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":78,"author":{"gitId":"Darren159"},"content":"        Person newPerson \u003d new PersonBuilder(personWithAppointment).withNric(\"S9999999A\").build();","lastModifiedDate":"2023-11-02"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"        model.setPerson(personWithAppointment, newPerson);","lastModifiedDate":"2023-11-02"},{"lineNumber":80,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":81,"author":{"gitId":"Darren159"},"content":"        assertCommandFailure(deleteAppointmentCommand, model, DeleteAppointmentCommand.MESSAGE_INVALID_NRIC);","lastModifiedDate":"2023-11-02"},{"lineNumber":82,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":83,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":84,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":85,"author":{"gitId":"Darren159"},"content":"    public void equals() {","lastModifiedDate":"2023-11-02"},{"lineNumber":86,"author":{"gitId":"Darren159"},"content":"        DeleteAppointmentCommand deleteFirstCommand \u003d new DeleteAppointmentCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-11-02"},{"lineNumber":87,"author":{"gitId":"Darren159"},"content":"        DeleteAppointmentCommand deleteSecondCommand \u003d new DeleteAppointmentCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2023-11-02"},{"lineNumber":88,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":89,"author":{"gitId":"Darren159"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-11-02"},{"lineNumber":90,"author":{"gitId":"Darren159"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2023-11-02"},{"lineNumber":91,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":92,"author":{"gitId":"Darren159"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-11-02"},{"lineNumber":93,"author":{"gitId":"Darren159"},"content":"        DeleteAppointmentCommand deleteFirstCommandCopy \u003d new DeleteAppointmentCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-11-02"},{"lineNumber":94,"author":{"gitId":"Darren159"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2023-11-02"},{"lineNumber":95,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":96,"author":{"gitId":"Darren159"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-11-02"},{"lineNumber":97,"author":{"gitId":"Darren159"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2023-11-02"},{"lineNumber":98,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":99,"author":{"gitId":"Darren159"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-11-02"},{"lineNumber":100,"author":{"gitId":"Darren159"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2023-11-02"},{"lineNumber":101,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":102,"author":{"gitId":"Darren159"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-11-02"},{"lineNumber":103,"author":{"gitId":"Darren159"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2023-11-02"},{"lineNumber":104,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":105,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":106,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":107,"author":{"gitId":"Darren159"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-11-02"},{"lineNumber":108,"author":{"gitId":"Darren159"},"content":"        Index targetIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-11-02"},{"lineNumber":109,"author":{"gitId":"Darren159"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand(targetIndex);","lastModifiedDate":"2023-11-02"},{"lineNumber":110,"author":{"gitId":"Darren159"},"content":"        String expected \u003d DeleteAppointmentCommand.class.getCanonicalName() + \"{targetIndex\u003d\" + targetIndex + \"}\";","lastModifiedDate":"2023-11-02"},{"lineNumber":111,"author":{"gitId":"Darren159"},"content":"        assertEquals(expected, deleteAppointmentCommand.toString());","lastModifiedDate":"2023-11-02"},{"lineNumber":112,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":113,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"Darren159":113}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS,","lastModifiedDate":"2019-02-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                Messages.format(personToDelete));","lastModifiedDate":"2019-02-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"        ModelManager expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"        expectedModel.resetAppointmentList();","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-06-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"ryanongwx"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX","lastModifiedDate":"2023-11-08"},{"lineNumber":52,"author":{"gitId":"ryanongwx"},"content":"                + \". Please ensure that it is within 1 and \" + model.getFilteredPersonList().size() + \".\");","lastModifiedDate":"2023-11-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS,","lastModifiedDate":"2019-02-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                Messages.format(personToDelete));","lastModifiedDate":"2019-02-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"        expectedModel.resetAppointmentList();","lastModifiedDate":"2023-11-02"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-06-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":83,"author":{"gitId":"ryanongwx"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX","lastModifiedDate":"2023-11-08"},{"lineNumber":84,"author":{"gitId":"ryanongwx"},"content":"                + \". Please ensure that it is within 1 and \" + model.getFilteredPersonList().size() + \".\");","lastModifiedDate":"2023-11-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2019-02-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(targetIndex);","lastModifiedDate":"2019-02-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        String expected \u003d DeleteCommand.class.getCanonicalName() + \"{targetIndex\u003d\" + targetIndex + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(expected, deleteCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"Darren159":5,"-":116,"ryanongwx":4}},{"path":"src/test/java/seedu/address/logic/commands/DeleteRecordCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.commons.core.index.Index.fromOneBased;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.commons.core.index.Index.fromZeroBased;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.testutil.TypicalRecords.FEVER_AND_COLD0;","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.UniqueRecordList;","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"public class DeleteRecordCommandTest {","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"    public void execute_validIndices_success() {","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"        Person personToDeleteRecord \u003d model.getFilteredPersonList().get(3);","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"        UniqueRecordList records \u003d new UniqueRecordList();","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"        records.setRecords(personToDeleteRecord.getRecords());","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"        records.remove(FEVER_AND_COLD0);","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"        Person personWithDeletedRecord \u003d new PersonBuilder(personToDeleteRecord).withRecords(records).build();","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"        DeleteRecordCommand deleteRecordCommand \u003d new DeleteRecordCommand(fromZeroBased(3), fromZeroBased(2));","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"        String expectedMessage \u003d String.format(DeleteRecordCommand.MESSAGE_DELETE_RECORD_SUCCESS,","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"                Messages.format(FEVER_AND_COLD0, personWithDeletedRecord));","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(3), personWithDeletedRecord);","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"Clin-lyx"},"content":"        expectedModel.updateRecordList(personWithDeletedRecord, fromZeroBased(3));","lastModifiedDate":"2023-11-08"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"        assertCommandSuccess(deleteRecordCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"    public void execute_invalidPatientIndex_throwsCommandException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"        Index outOfBoundPatientIndex \u003d fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"        Index validRecordIndex \u003d fromOneBased(3);","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"        DeleteRecordCommand deleteRecordCommand \u003d new DeleteRecordCommand(outOfBoundPatientIndex, validRecordIndex);","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"ryanongwx"},"content":"        assertCommandFailure(deleteRecordCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX","lastModifiedDate":"2023-11-08"},{"lineNumber":55,"author":{"gitId":"ryanongwx"},"content":"                + \". Please ensure that it is within 1 and \" + model.getFilteredPersonList().size() + \".\");","lastModifiedDate":"2023-11-08"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"    public void execute_invalidRecordIndex_throwsCommandException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"        Index outOfBoundPatientIndex \u003d fromOneBased(4);","lastModifiedDate":"2023-11-01"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"        Index validRecordIndex \u003d fromOneBased(model.getFilteredPersonList().get(3).getRecords().size() + 1);","lastModifiedDate":"2023-11-01"},{"lineNumber":62,"author":{"gitId":"hjoneweek"},"content":"        DeleteRecordCommand deleteRecordCommand \u003d new DeleteRecordCommand(outOfBoundPatientIndex, validRecordIndex);","lastModifiedDate":"2023-11-01"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"        assertCommandFailure(deleteRecordCommand, model, Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);","lastModifiedDate":"2023-11-01"},{"lineNumber":65,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":66,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":67,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":68,"author":{"gitId":"hjoneweek"},"content":"    public void equals() {","lastModifiedDate":"2023-11-01"},{"lineNumber":69,"author":{"gitId":"hjoneweek"},"content":"        DeleteRecordCommand deleteRecordCommand1 \u003d new DeleteRecordCommand(fromOneBased(4), fromOneBased(3));","lastModifiedDate":"2023-11-01"},{"lineNumber":70,"author":{"gitId":"hjoneweek"},"content":"        DeleteRecordCommand deleteRecordCommand2 \u003d new DeleteRecordCommand(fromOneBased(1), fromOneBased(1));","lastModifiedDate":"2023-11-01"},{"lineNumber":71,"author":{"gitId":"hjoneweek"},"content":"        DeleteRecordCommand deleteRecordCommand1Copy \u003d new DeleteRecordCommand(fromOneBased(4), fromOneBased(3));","lastModifiedDate":"2023-11-01"},{"lineNumber":72,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":73,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(deleteRecordCommand1.equals(deleteRecordCommand1));","lastModifiedDate":"2023-11-01"},{"lineNumber":74,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(deleteRecordCommand1.equals(deleteRecordCommand1Copy));","lastModifiedDate":"2023-11-01"},{"lineNumber":75,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(deleteRecordCommand1.equals(deleteRecordCommand2));","lastModifiedDate":"2023-11-01"},{"lineNumber":76,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(deleteRecordCommand1.equals(1));","lastModifiedDate":"2023-11-01"},{"lineNumber":77,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":78,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":79,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":80,"author":{"gitId":"hjoneweek"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-11-01"},{"lineNumber":81,"author":{"gitId":"hjoneweek"},"content":"        Index patientIndex \u003d fromOneBased(4);","lastModifiedDate":"2023-11-01"},{"lineNumber":82,"author":{"gitId":"hjoneweek"},"content":"        Index recordIndex \u003d fromOneBased(3);","lastModifiedDate":"2023-11-01"},{"lineNumber":83,"author":{"gitId":"hjoneweek"},"content":"        DeleteRecordCommand deleteRecordCommand \u003d new DeleteRecordCommand(patientIndex, recordIndex);","lastModifiedDate":"2023-11-01"},{"lineNumber":84,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":85,"author":{"gitId":"hjoneweek"},"content":"        String expected \u003d DeleteRecordCommand.class.getCanonicalName()","lastModifiedDate":"2023-11-01"},{"lineNumber":86,"author":{"gitId":"hjoneweek"},"content":"                + \"{targetPatientIndex\u003d\" + patientIndex + \", \"","lastModifiedDate":"2023-11-01"},{"lineNumber":87,"author":{"gitId":"hjoneweek"},"content":"                + \"targetRecordIndex\u003d\" + recordIndex + \"}\";","lastModifiedDate":"2023-11-01"},{"lineNumber":88,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":89,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(expected, deleteRecordCommand.toString());","lastModifiedDate":"2023-11-01"},{"lineNumber":90,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":91,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":92,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"hjoneweek":89,"Clin-lyx":1,"ryanongwx":2}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_DUST;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-05-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":32,"author":{"gitId":"ryanongwx"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2023-10-17"},{"lineNumber":33,"author":{"gitId":"ryanongwx"},"content":" * EditCommand.","lastModifiedDate":"2023-10-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-10-19"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"        Person editedPerson \u003d new PersonBuilder().withRecords(personToEdit.getRecords())","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"                .withAppointments(personToEdit.getAppointments()).withIsPinned(personToEdit.isPinned()).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":52,"author":{"gitId":"Clin-lyx"},"content":"        expectedModel.updateRecordList(editedPerson, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-11-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"                .withAllergies(VALID_ALLERGY_DUST).withIsPinned(lastPerson.isPinned())","lastModifiedDate":"2023-10-19"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"                .withAppointments(lastPerson.getAppointments()).build();","lastModifiedDate":"2023-10-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":68,"author":{"gitId":"adammangzijun"},"content":"                .withPhone(VALID_PHONE_BOB).withAllergies(VALID_ALLERGY_DUST).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2019-02-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":87,"author":{"gitId":"Clin-lyx"},"content":"        expectedModel.updateRecordList(editedPerson, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-11-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":97,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":98,"author":{"gitId":"Darren159"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB)","lastModifiedDate":"2023-10-19"},{"lineNumber":99,"author":{"gitId":"Darren159"},"content":"                .withIsPinned(personInFilteredList.isPinned())","lastModifiedDate":"2023-10-19"},{"lineNumber":100,"author":{"gitId":"Darren159"},"content":"                .withAppointments(personInFilteredList.getAppointments()).build();","lastModifiedDate":"2023-10-19"},{"lineNumber":101,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2019-02-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":108,"author":{"gitId":"Clin-lyx"},"content":"        expectedModel.updateRecordList(editedPerson, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-11-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":140,"author":{"gitId":"ryanongwx"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX","lastModifiedDate":"2023-11-08"},{"lineNumber":141,"author":{"gitId":"ryanongwx"},"content":"                + \". Please ensure that it is within 1 and \" + model.getFilteredPersonList().size() + \".\");","lastModifiedDate":"2023-11-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":158,"author":{"gitId":"ryanongwx"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX","lastModifiedDate":"2023-11-08"},{"lineNumber":159,"author":{"gitId":"ryanongwx"},"content":"                + \". Please ensure that it is within 1 and \" + model.getFilteredPersonList().size() + \".\");","lastModifiedDate":"2023-11-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2018-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":178,"author":{"gitId":"Darren159"},"content":"        assertFalse(standardCommand.equals(new HelpCommand()));","lastModifiedDate":"2023-11-02"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2017-05-25"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2017-05-25"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2019-02-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2019-02-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2019-02-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        String expected \u003d EditCommand.class.getCanonicalName() + \"{index\u003d\" + index + \", editPersonDescriptor\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"                + editPersonDescriptor + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertEquals(expected, editCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"Darren159":9,"Clin-lyx":3,"-":174,"adammangzijun":2,"ryanongwx":9}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_BOB;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_PEANUTS;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2023-10-14"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"        // different gender -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withGender(VALID_GENDER_BOB).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"        // different age -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAge(VALID_AGE_BOB).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"        // different bloodType -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withBloodType(VALID_BLOODTYPE_BOB).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"        // different allergies -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAllergies(VALID_ALLERGY_PEANUTS).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2019-02-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        String expected \u003d EditPersonDescriptor.class.getCanonicalName() + \"{name\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"                + editPersonDescriptor.getNric().orElse(null) + \", nric\u003d\"","lastModifiedDate":"2023-11-02"},{"lineNumber":75,"author":{"gitId":"adammangzijun"},"content":"                + editPersonDescriptor.getName().orElse(null) + \", email\u003d\"","lastModifiedDate":"2023-10-14"},{"lineNumber":76,"author":{"gitId":"adammangzijun"},"content":"                + editPersonDescriptor.getEmail().orElse(null) + \", phone\u003d\"","lastModifiedDate":"2023-10-14"},{"lineNumber":77,"author":{"gitId":"adammangzijun"},"content":"                + editPersonDescriptor.getPhone().orElse(null) + \", gender\u003d\"","lastModifiedDate":"2023-10-14"},{"lineNumber":78,"author":{"gitId":"adammangzijun"},"content":"                + editPersonDescriptor.getGender().orElse(null) + \", age\u003d\"","lastModifiedDate":"2023-10-14"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"                + editPersonDescriptor.getAge().orElse(null) + \", bloodType\u003d\"","lastModifiedDate":"2023-10-14"},{"lineNumber":80,"author":{"gitId":"adammangzijun"},"content":"                + editPersonDescriptor.getBloodType().orElse(null) + \", allergies\u003d\"","lastModifiedDate":"2023-10-14"},{"lineNumber":81,"author":{"gitId":"Darren159"},"content":"                + editPersonDescriptor.getAllergies().orElse(null) + \"}\";","lastModifiedDate":"2023-10-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expected, editPersonDescriptor.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"Darren159":4,"-":58,"adammangzijun":22}},{"path":"src/test/java/seedu/address/logic/commands/EditRecordCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_FIRST_REC;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CONDITION_DIARRHEA;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CONDITION_HEAT_STROKE;","lastModifiedDate":"2023-10-30"},{"lineNumber":7,"author":{"gitId":"ryanongwx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATETIME_SLEEP_STUDY;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATETIME_THYROID_CHECK;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECORD;","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-10-30"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.EditRecordCommand.EditRecordDescriptor;","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.record.UniqueRecordList;","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.testutil.EditRecordDescriptorBuilder;","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.testutil.RecordBuilder;","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"public class EditRecordCommandTest {","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"        UniqueRecordList oldList \u003d personToEdit.getRecords();","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"        Record recordToEdit \u003d oldList.asUnmodifiableObservableList().get(INDEX_FIRST_RECORD.getZeroBased());","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"        Record editedRecord \u003d new RecordBuilder(recordToEdit)","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"                .withDateTime(VALID_DATETIME_THYROID_CHECK)","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"ryanongwx"},"content":"                .withConditions(VALID_CONDITION_DIARRHEA).withPersonIndex(0).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"        UniqueRecordList newList \u003d new UniqueRecordList();","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"        newList.setRecords(oldList);","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"        newList.setRecord(recordToEdit, editedRecord);","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"        Person editedPerson \u003d new PersonBuilder(personToEdit).withRecords(newList).build();","lastModifiedDate":"2023-10-30"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"        EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder(recordToEdit)","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"                .withDateTime(VALID_DATETIME_THYROID_CHECK)","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"                .withConditions(VALID_CONDITION_DIARRHEA).withPatientIndex(0).build();","lastModifiedDate":"2023-10-30"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"        EditRecordCommand editRecordCommand \u003d new EditRecordCommand(INDEX_FIRST_PERSON, INDEX_FIRST_RECORD,","lastModifiedDate":"2023-10-30"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"                descriptor);","lastModifiedDate":"2023-10-30"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"        String expectedMessage \u003d String.format(EditRecordCommand.MESSAGE_EDIT_RECORD_SUCCESS,","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"                Messages.format(editedRecord, editedPerson));","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"Clin-lyx"},"content":"        expectedModel.updateRecordList(editedPerson, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-11-08"},{"lineNumber":60,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"        assertCommandSuccess(editRecordCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-24"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":63,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":64,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2023-10-24"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-10-24"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"        UniqueRecordList oldList \u003d firstPerson.getRecords();","lastModifiedDate":"2023-10-30"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"        Record recordToEdit \u003d oldList.asUnmodifiableObservableList().get(INDEX_FIRST_RECORD.getZeroBased());","lastModifiedDate":"2023-10-30"},{"lineNumber":69,"author":{"gitId":"adammangzijun"},"content":"        Record editedRecord \u003d new RecordBuilder(recordToEdit)","lastModifiedDate":"2023-10-24"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"                .withDateTime(VALID_DATETIME_SLEEP_STUDY).build();","lastModifiedDate":"2023-10-30"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"        UniqueRecordList newList \u003d new UniqueRecordList();","lastModifiedDate":"2023-10-30"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"        newList.setRecords(oldList);","lastModifiedDate":"2023-10-30"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"        newList.setRecord(recordToEdit, editedRecord);","lastModifiedDate":"2023-10-30"},{"lineNumber":74,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":75,"author":{"gitId":"adammangzijun"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(firstPerson);","lastModifiedDate":"2023-10-24"},{"lineNumber":76,"author":{"gitId":"Darren159"},"content":"        Person editedPerson \u003d personInList.withRecords(newList).build();","lastModifiedDate":"2023-10-30"},{"lineNumber":77,"author":{"gitId":"Darren159"},"content":"        EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder()","lastModifiedDate":"2023-10-30"},{"lineNumber":78,"author":{"gitId":"Darren159"},"content":"                .withDateTime(VALID_DATETIME_SLEEP_STUDY).build();","lastModifiedDate":"2023-10-30"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"        EditRecordCommand editRecordCommand \u003d new EditRecordCommand(INDEX_FIRST_PERSON, INDEX_FIRST_RECORD,","lastModifiedDate":"2023-10-30"},{"lineNumber":80,"author":{"gitId":"Darren159"},"content":"                descriptor);","lastModifiedDate":"2023-10-30"},{"lineNumber":81,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":82,"author":{"gitId":"ryanongwx"},"content":"        String expectedMessage \u003d String.format(EditRecordCommand.MESSAGE_EDIT_RECORD_SUCCESS, Messages.format(","lastModifiedDate":"2023-10-24"},{"lineNumber":83,"author":{"gitId":"ryanongwx"},"content":"                editedRecord, editedPerson));","lastModifiedDate":"2023-10-24"},{"lineNumber":84,"author":{"gitId":"adammangzijun"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2023-10-24"},{"lineNumber":85,"author":{"gitId":"Darren159"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2023-10-30"},{"lineNumber":86,"author":{"gitId":"Clin-lyx"},"content":"        expectedModel.updateRecordList(editedPerson, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-11-08"},{"lineNumber":87,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":88,"author":{"gitId":"adammangzijun"},"content":"        assertCommandSuccess(editRecordCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-24"},{"lineNumber":89,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":90,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":91,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":92,"author":{"gitId":"ryanongwx"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_failure() {","lastModifiedDate":"2023-10-24"},{"lineNumber":93,"author":{"gitId":"ryanongwx"},"content":"        EditRecordCommand editRecordCommand \u003d new EditRecordCommand(INDEX_FIRST_PERSON, INDEX_FIRST_RECORD,","lastModifiedDate":"2023-10-24"},{"lineNumber":94,"author":{"gitId":"ryanongwx"},"content":"                new EditRecordCommand.EditRecordDescriptor());","lastModifiedDate":"2023-10-24"},{"lineNumber":95,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":96,"author":{"gitId":"ryanongwx"},"content":"        assertCommandFailure(editRecordCommand, model, EditRecordCommand.MESSAGE_DUPLICATE_RECORD);","lastModifiedDate":"2023-10-24"},{"lineNumber":97,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":98,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":99,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":100,"author":{"gitId":"adammangzijun"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2023-10-24"},{"lineNumber":101,"author":{"gitId":"adammangzijun"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-24"},{"lineNumber":102,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":103,"author":{"gitId":"adammangzijun"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-10-24"},{"lineNumber":104,"author":{"gitId":"Darren159"},"content":"        UniqueRecordList oldList \u003d personInFilteredList.getRecords();","lastModifiedDate":"2023-10-30"},{"lineNumber":105,"author":{"gitId":"Darren159"},"content":"        Record recordToEdit \u003d oldList.asUnmodifiableObservableList().get(INDEX_FIRST_RECORD.getZeroBased());","lastModifiedDate":"2023-10-30"},{"lineNumber":106,"author":{"gitId":"Darren159"},"content":"        Record editedRecord \u003d new RecordBuilder(recordToEdit).withConditions(VALID_CONDITION_HEAT_STROKE)","lastModifiedDate":"2023-10-30"},{"lineNumber":107,"author":{"gitId":"Darren159"},"content":"                .withDateTime(VALID_DATETIME_THYROID_CHECK)","lastModifiedDate":"2023-10-30"},{"lineNumber":108,"author":{"gitId":"ryanongwx"},"content":"                .withPersonIndex(0).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":109,"author":{"gitId":"Darren159"},"content":"        UniqueRecordList newList \u003d new UniqueRecordList();","lastModifiedDate":"2023-10-30"},{"lineNumber":110,"author":{"gitId":"Darren159"},"content":"        newList.setRecords(oldList);","lastModifiedDate":"2023-10-30"},{"lineNumber":111,"author":{"gitId":"Darren159"},"content":"        newList.setRecord(recordToEdit, editedRecord);","lastModifiedDate":"2023-10-30"},{"lineNumber":112,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":113,"author":{"gitId":"Darren159"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withRecords(newList).build();","lastModifiedDate":"2023-10-30"},{"lineNumber":114,"author":{"gitId":"adammangzijun"},"content":"        EditRecordCommand editRecordCommand \u003d new EditRecordCommand(INDEX_FIRST_PERSON, INDEX_FIRST_RECORD,","lastModifiedDate":"2023-10-24"},{"lineNumber":115,"author":{"gitId":"Darren159"},"content":"                new EditRecordDescriptorBuilder().withConditions(VALID_CONDITION_HEAT_STROKE)","lastModifiedDate":"2023-10-30"},{"lineNumber":116,"author":{"gitId":"Darren159"},"content":"                        .withDateTime(VALID_DATETIME_THYROID_CHECK)","lastModifiedDate":"2023-10-30"},{"lineNumber":117,"author":{"gitId":"Darren159"},"content":"                        .withPatientIndex(0).build());","lastModifiedDate":"2023-10-30"},{"lineNumber":118,"author":{"gitId":"adammangzijun"},"content":"        String expectedMessage \u003d String.format(EditRecordCommand.MESSAGE_EDIT_RECORD_SUCCESS,","lastModifiedDate":"2023-10-24"},{"lineNumber":119,"author":{"gitId":"adammangzijun"},"content":"                Messages.format(editedRecord, editedPerson));","lastModifiedDate":"2023-10-24"},{"lineNumber":120,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":121,"author":{"gitId":"adammangzijun"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2023-10-24"},{"lineNumber":122,"author":{"gitId":"Darren159"},"content":"        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-30"},{"lineNumber":123,"author":{"gitId":"Darren159"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2023-10-30"},{"lineNumber":124,"author":{"gitId":"Clin-lyx"},"content":"        expectedModel.updateRecordList(editedPerson, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-11-08"},{"lineNumber":125,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":126,"author":{"gitId":"adammangzijun"},"content":"        assertCommandSuccess(editRecordCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-24"},{"lineNumber":127,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":128,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":129,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":130,"author":{"gitId":"adammangzijun"},"content":"    public void execute_duplicateRecordUnfilteredList_failure() {","lastModifiedDate":"2023-10-24"},{"lineNumber":131,"author":{"gitId":"adammangzijun"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-10-24"},{"lineNumber":132,"author":{"gitId":"adammangzijun"},"content":"        UniqueRecordList uniqueRecordList \u003d firstPerson.getRecords();","lastModifiedDate":"2023-10-24"},{"lineNumber":133,"author":{"gitId":"Darren159"},"content":"        Record firstRecord \u003d uniqueRecordList.asUnmodifiableObservableList()","lastModifiedDate":"2023-10-30"},{"lineNumber":134,"author":{"gitId":"Darren159"},"content":"                .get(INDEX_FIRST_RECORD.getZeroBased());","lastModifiedDate":"2023-10-30"},{"lineNumber":135,"author":{"gitId":"Darren159"},"content":"        EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder(firstRecord)","lastModifiedDate":"2023-10-30"},{"lineNumber":136,"author":{"gitId":"Darren159"},"content":"                .build();","lastModifiedDate":"2023-10-30"},{"lineNumber":137,"author":{"gitId":"adammangzijun"},"content":"        EditRecordCommand editRecordCommand \u003d new EditRecordCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2023-10-24"},{"lineNumber":138,"author":{"gitId":"ryanongwx"},"content":"                INDEX_FIRST_RECORD, descriptor);","lastModifiedDate":"2023-10-24"},{"lineNumber":139,"author":{"gitId":"adammangzijun"},"content":"        assertCommandFailure(editRecordCommand, model, EditRecordCommand.MESSAGE_DUPLICATE_RECORD);","lastModifiedDate":"2023-10-24"},{"lineNumber":140,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":141,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":142,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":143,"author":{"gitId":"adammangzijun"},"content":"    public void execute_duplicateRecordFilteredList_failure() {","lastModifiedDate":"2023-10-24"},{"lineNumber":144,"author":{"gitId":"adammangzijun"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-24"},{"lineNumber":145,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":146,"author":{"gitId":"adammangzijun"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-10-24"},{"lineNumber":147,"author":{"gitId":"adammangzijun"},"content":"        UniqueRecordList uniqueRecordList \u003d personInList.getRecords();","lastModifiedDate":"2023-10-24"},{"lineNumber":148,"author":{"gitId":"Darren159"},"content":"        Record firstRecord \u003d uniqueRecordList.asUnmodifiableObservableList()","lastModifiedDate":"2023-10-30"},{"lineNumber":149,"author":{"gitId":"Darren159"},"content":"                .get(INDEX_FIRST_RECORD.getZeroBased());","lastModifiedDate":"2023-10-30"},{"lineNumber":150,"author":{"gitId":"adammangzijun"},"content":"        EditRecordCommand editRecordCommand \u003d new EditRecordCommand(INDEX_FIRST_PERSON, INDEX_FIRST_RECORD,","lastModifiedDate":"2023-10-24"},{"lineNumber":151,"author":{"gitId":"ryanongwx"},"content":"                new EditRecordDescriptorBuilder(firstRecord).build());","lastModifiedDate":"2023-10-24"},{"lineNumber":152,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":153,"author":{"gitId":"adammangzijun"},"content":"        assertCommandFailure(editRecordCommand, model, EditRecordCommand.MESSAGE_DUPLICATE_RECORD);","lastModifiedDate":"2023-10-24"},{"lineNumber":154,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":155,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":156,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":157,"author":{"gitId":"adammangzijun"},"content":"    public void execute_invalidRecordIndexUnfilteredList_failure() {","lastModifiedDate":"2023-10-24"},{"lineNumber":158,"author":{"gitId":"ryanongwx"},"content":"        Index outOfBoundIndex \u003d Index.fromZeroBased(model.getFilteredPersonList().get(","lastModifiedDate":"2023-10-24"},{"lineNumber":159,"author":{"gitId":"Darren159"},"content":"                INDEX_FIRST_PERSON.getZeroBased()).getRecords().asUnmodifiableObservableList().size());","lastModifiedDate":"2023-10-30"},{"lineNumber":160,"author":{"gitId":"Darren159"},"content":"        EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder()","lastModifiedDate":"2023-10-30"},{"lineNumber":161,"author":{"gitId":"adammangzijun"},"content":"                .withDateTime(VALID_DATETIME_THYROID_CHECK).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":162,"author":{"gitId":"Darren159"},"content":"        EditRecordCommand editRecordCommand \u003d new EditRecordCommand(INDEX_FIRST_PERSON, outOfBoundIndex,","lastModifiedDate":"2023-10-30"},{"lineNumber":163,"author":{"gitId":"Darren159"},"content":"                descriptor);","lastModifiedDate":"2023-10-30"},{"lineNumber":164,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":165,"author":{"gitId":"adammangzijun"},"content":"        assertCommandFailure(editRecordCommand, model, Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-24"},{"lineNumber":166,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":167,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":168,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":169,"author":{"gitId":"adammangzijun"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2023-10-24"},{"lineNumber":170,"author":{"gitId":"adammangzijun"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2023-10-24"},{"lineNumber":171,"author":{"gitId":"Darren159"},"content":"        EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder()","lastModifiedDate":"2023-10-30"},{"lineNumber":172,"author":{"gitId":"adammangzijun"},"content":"                .withDateTime(VALID_DATETIME_THYROID_CHECK).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":173,"author":{"gitId":"Darren159"},"content":"        EditRecordCommand editRecordCommand \u003d new EditRecordCommand(outOfBoundIndex, INDEX_FIRST_RECORD,","lastModifiedDate":"2023-10-30"},{"lineNumber":174,"author":{"gitId":"Darren159"},"content":"                descriptor);","lastModifiedDate":"2023-10-30"},{"lineNumber":175,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":176,"author":{"gitId":"ryanongwx"},"content":"        assertCommandFailure(editRecordCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX","lastModifiedDate":"2023-11-08"},{"lineNumber":177,"author":{"gitId":"ryanongwx"},"content":"            + \". Please ensure that it is within 1 and \" + model.getFilteredPersonList().size() + \".\");","lastModifiedDate":"2023-11-08"},{"lineNumber":178,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":179,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":180,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":181,"author":{"gitId":"hjoneweek"},"content":"    public void toStringTest() {","lastModifiedDate":"2023-10-26"},{"lineNumber":182,"author":{"gitId":"Darren159"},"content":"        EditRecordDescriptor editedFirstRecord \u003d new EditRecordDescriptorBuilder(","lastModifiedDate":"2023-10-30"},{"lineNumber":183,"author":{"gitId":"Darren159"},"content":"                DESC_FIRST_REC)","lastModifiedDate":"2023-10-30"},{"lineNumber":184,"author":{"gitId":"ryanongwx"},"content":"                        .withDateTime(VALID_DATETIME_THYROID_CHECK).build();","lastModifiedDate":"2023-10-26"},{"lineNumber":185,"author":{"gitId":"hjoneweek"},"content":"        EditRecordCommand editRecordCommand \u003d new EditRecordCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2023-10-26"},{"lineNumber":186,"author":{"gitId":"hjoneweek"},"content":"                INDEX_FIRST_RECORD, editedFirstRecord);","lastModifiedDate":"2023-10-26"},{"lineNumber":187,"author":{"gitId":"Darren159"},"content":"        String expected \u003d EditRecordCommand.class.getCanonicalName() + \"{patientIndex\u003d\" + INDEX_FIRST_PERSON","lastModifiedDate":"2023-10-30"},{"lineNumber":188,"author":{"gitId":"Darren159"},"content":"                + \", \"","lastModifiedDate":"2023-10-30"},{"lineNumber":189,"author":{"gitId":"hjoneweek"},"content":"                + \"recordIndex\u003d\" + INDEX_FIRST_RECORD + \", \"","lastModifiedDate":"2023-10-26"},{"lineNumber":190,"author":{"gitId":"hjoneweek"},"content":"                + \"editRecordDescriptor\u003d\" + editedFirstRecord + \"}\";","lastModifiedDate":"2023-10-26"},{"lineNumber":191,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":192,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(expected, editRecordCommand.toString());","lastModifiedDate":"2023-10-26"},{"lineNumber":193,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":194,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":195,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"hjoneweek":11,"Darren159":57,"Clin-lyx":3,"adammangzijun":108,"ryanongwx":16}},{"path":"src/test/java/seedu/address/logic/commands/EditRecordDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_FIRST_REC;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_SECOND_REC;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CONDITION_DIARRHEA;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATETIME_THYROID_CHECK;","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.testutil.EditRecordDescriptorBuilder;","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"public class EditRecordDescriptorTest {","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"    public void equals() {","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"ryanongwx"},"content":"        EditRecordCommand.EditRecordDescriptor descriptorWithSameValues \u003d","lastModifiedDate":"2023-10-27"},{"lineNumber":20,"author":{"gitId":"ryanongwx"},"content":"                new EditRecordCommand.EditRecordDescriptor(DESC_FIRST_REC);","lastModifiedDate":"2023-10-27"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"        assertTrue(DESC_FIRST_REC.equals(descriptorWithSameValues));","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"        assertTrue(DESC_FIRST_REC.equals(DESC_FIRST_REC));","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"        assertFalse(DESC_FIRST_REC.equals(null));","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"        assertFalse(DESC_FIRST_REC.equals(5));","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"        assertFalse(DESC_FIRST_REC.equals(DESC_SECOND_REC));","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"        // different dateTime -\u003e returns false","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"ryanongwx"},"content":"        EditRecordCommand.EditRecordDescriptor editedFirstRecord \u003d","lastModifiedDate":"2023-10-27"},{"lineNumber":37,"author":{"gitId":"ryanongwx"},"content":"                new EditRecordDescriptorBuilder(DESC_FIRST_REC).withDateTime(VALID_DATETIME_THYROID_CHECK).build();","lastModifiedDate":"2023-10-27"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"        assertFalse(DESC_FIRST_REC.equals(editedFirstRecord));","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"        // different condition -\u003e returns false","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"ryanongwx"},"content":"        EditRecordCommand.EditRecordDescriptor editedSecondRecord \u003d","lastModifiedDate":"2023-10-27"},{"lineNumber":42,"author":{"gitId":"ryanongwx"},"content":"                new EditRecordDescriptorBuilder(DESC_SECOND_REC).withConditions(VALID_CONDITION_DIARRHEA).build();","lastModifiedDate":"2023-10-27"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"        assertFalse(DESC_SECOND_REC.equals(editedSecondRecord));","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"        EditRecordCommand.EditRecordDescriptor editRecordDescriptor \u003d new EditRecordCommand.EditRecordDescriptor();","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"        String expected \u003d EditRecordCommand.EditRecordDescriptor.class.getCanonicalName() + \"{dateTime\u003d\"","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"ryanongwx"},"content":"                + editRecordDescriptor.getDateTime().orElse(null) + \", conditions\u003d\"","lastModifiedDate":"2023-10-27"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"                + editRecordDescriptor.getConditions().orElse(null) + \", medications\u003d\"","lastModifiedDate":"2023-10-26"},{"lineNumber":52,"author":{"gitId":"ryanongwx"},"content":"                + editRecordDescriptor.getMedications().orElse(null) + \", filePath\u003d\"","lastModifiedDate":"2023-10-27"},{"lineNumber":53,"author":{"gitId":"ryanongwx"},"content":"                + editRecordDescriptor.getFilePath().orElse(null) + \", patientIndex\u003d\"","lastModifiedDate":"2023-10-27"},{"lineNumber":54,"author":{"gitId":"ryanongwx"},"content":"                + editRecordDescriptor.getPatientIndex().orElse(null) + \"}\";","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expected, editRecordDescriptor.toString());","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"hjoneweek":1,"adammangzijun":48,"ryanongwx":10}},{"path":"src/test/java/seedu/address/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;","lastModifiedDate":"2017-06-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ExitCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"Darren159":1,"-":19}},{"path":"src/test/java/seedu/address/logic/commands/FindRecordCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.commons.core.index.Index.fromZeroBased;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.Messages.MESSAGE_RECORDS_LISTED_OVERVIEW;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"import java.util.Collections;","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.RecordContainsKeywordsPredicate;","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"public class FindRecordCommandTest {","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"    // ViewCommand needs to be executed first for FindRecordCommand","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"    private ViewCommand viewCommand \u003d new ViewCommand(fromZeroBased(3));","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"    private CommandResult cr \u003d viewCommand.execute(model);","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    public FindRecordCommandTest() throws CommandException {","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"    public void equals() {","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"        RecordContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"                new RecordContainsKeywordsPredicate(Arrays.asList(\"Tylenol\", \"Pepto-Bismol\"));","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"        RecordContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"                new RecordContainsKeywordsPredicate(Arrays.asList(\"Tylenol\"));","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"        FindRecordCommand findRecordCommand1 \u003d new FindRecordCommand(firstPredicate);","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"        FindRecordCommand findRecordCommand2 \u003d new FindRecordCommand(secondPredicate);","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(findRecordCommand1.equals(findRecordCommand1));","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"        FindRecordCommand findRecordCommand1Copy \u003d new FindRecordCommand(firstPredicate);","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(findRecordCommand1.equals(findRecordCommand1Copy));","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(findRecordCommand1.equals(findRecordCommand2));","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(findRecordCommand1.equals(firstPredicate));","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"    public void execute_zeroKeywords_noPersonFound() throws CommandException {","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RECORDS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"        RecordContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2023-11-01"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"        FindRecordCommand findRecordCommand \u003d new FindRecordCommand(predicate);","lastModifiedDate":"2023-11-01"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"        viewCommand.execute(expectedModel);","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"        findRecordCommand.execute(expectedModel);","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"        expectedModel.updateFilteredRecordList(predicate);","lastModifiedDate":"2023-11-01"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"        assertCommandSuccess(findRecordCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-11-01"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredRecordList());","lastModifiedDate":"2023-11-01"},{"lineNumber":62,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":65,"author":{"gitId":"hjoneweek"},"content":"    public void execute_multipleKeywords_singleRecordsFound() throws CommandException {","lastModifiedDate":"2023-11-01"},{"lineNumber":66,"author":{"gitId":"hjoneweek"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RECORDS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2023-11-01"},{"lineNumber":67,"author":{"gitId":"hjoneweek"},"content":"        RecordContainsKeywordsPredicate predicate \u003d preparePredicate(\"Tylenol\");","lastModifiedDate":"2023-11-01"},{"lineNumber":68,"author":{"gitId":"hjoneweek"},"content":"        FindRecordCommand findRecordCommand \u003d new FindRecordCommand(predicate);","lastModifiedDate":"2023-11-01"},{"lineNumber":69,"author":{"gitId":"hjoneweek"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":70,"author":{"gitId":"hjoneweek"},"content":"        viewCommand.execute(expectedModel);","lastModifiedDate":"2023-11-01"},{"lineNumber":71,"author":{"gitId":"hjoneweek"},"content":"        findRecordCommand.execute(expectedModel);","lastModifiedDate":"2023-11-01"},{"lineNumber":72,"author":{"gitId":"hjoneweek"},"content":"        expectedModel.updateFilteredRecordList(predicate);","lastModifiedDate":"2023-11-01"},{"lineNumber":73,"author":{"gitId":"hjoneweek"},"content":"        assertCommandSuccess(findRecordCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-11-01"},{"lineNumber":74,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":75,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":76,"author":{"gitId":"hjoneweek"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-11-01"},{"lineNumber":77,"author":{"gitId":"hjoneweek"},"content":"        RecordContainsKeywordsPredicate predicate \u003d preparePredicate(\"Tylenol\");","lastModifiedDate":"2023-11-01"},{"lineNumber":78,"author":{"gitId":"hjoneweek"},"content":"        FindRecordCommand command \u003d new FindRecordCommand(predicate);","lastModifiedDate":"2023-11-01"},{"lineNumber":79,"author":{"gitId":"hjoneweek"},"content":"        String expected \u003d FindRecordCommand.class.getCanonicalName() + \"{predicate\u003d\" + predicate + \"}\";","lastModifiedDate":"2023-11-01"},{"lineNumber":80,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(expected, command.toString());","lastModifiedDate":"2023-11-01"},{"lineNumber":81,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":82,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":83,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":84,"author":{"gitId":"hjoneweek"},"content":"     * Parses {@code userInput} into a {@code RecordContainsKeywordsPredicate}.","lastModifiedDate":"2023-11-01"},{"lineNumber":85,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":86,"author":{"gitId":"hjoneweek"},"content":"    private RecordContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2023-11-01"},{"lineNumber":87,"author":{"gitId":"hjoneweek"},"content":"        return new RecordContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2023-11-01"},{"lineNumber":88,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":89,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"hjoneweek":89}},{"path":"src/test/java/seedu/address/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;","lastModifiedDate":"2017-06-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class HelpCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_help_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"Darren159":1,"-":19}},{"path":"src/test/java/seedu/address/logic/commands/PinCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-14"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"ryanongwx"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2023-11-08"},{"lineNumber":26,"author":{"gitId":"ryanongwx"},"content":" * PinCommand.","lastModifiedDate":"2023-11-08"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"public class PinCommandTest {","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2023-10-14"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"        Person personToPin \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"        Person pinnedPerson \u003d new PersonBuilder(personToPin).withIsPinned(true).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"        PinCommand pinCommand \u003d new PinCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-14"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"        String expectedMessage \u003d String.format(PinCommand.MESSAGE_PIN_PERSON_SUCCESS, Messages.format(personToPin));","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), pinnedPerson);","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"        assertCommandSuccess(pinCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"        PinCommand pinCommand \u003d new PinCommand(outOfBoundIndex);","lastModifiedDate":"2023-10-14"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":51,"author":{"gitId":"ryanongwx"},"content":"        assertCommandFailure(pinCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX","lastModifiedDate":"2023-11-08"},{"lineNumber":52,"author":{"gitId":"ryanongwx"},"content":"                + \". Please ensure that it is within 1 and \" + model.getFilteredPersonList().size() + \".\");","lastModifiedDate":"2023-11-08"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":54,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"        Person personToPin \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-10-14"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"        Person pinnedPerson \u003d new PersonBuilder(personToPin).withIsPinned(true).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"        PinCommand pinCommand \u003d new PinCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-14"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"        String expectedMessage \u003d String.format(PinCommand.MESSAGE_PIN_PERSON_SUCCESS, Messages.format(personToPin));","lastModifiedDate":"2023-10-14"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2023-10-14"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-14"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), pinnedPerson);","lastModifiedDate":"2023-10-14"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"        assertCommandSuccess(pinCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-14"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":70,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-14"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":75,"author":{"gitId":"Darren159"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2023-10-14"},{"lineNumber":76,"author":{"gitId":"Darren159"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2023-10-14"},{"lineNumber":77,"author":{"gitId":"Darren159"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2023-10-14"},{"lineNumber":78,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"        PinCommand pinCommand \u003d new PinCommand(outOfBoundIndex);","lastModifiedDate":"2023-10-14"},{"lineNumber":80,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":81,"author":{"gitId":"ryanongwx"},"content":"        assertCommandFailure(pinCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX","lastModifiedDate":"2023-11-08"},{"lineNumber":82,"author":{"gitId":"ryanongwx"},"content":"                + \". Please ensure that it is within 1 and \" + model.getPinnedPersonList().size() + \".\");","lastModifiedDate":"2023-11-08"},{"lineNumber":83,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":84,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":85,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":86,"author":{"gitId":"Darren159"},"content":"    public void equals() {","lastModifiedDate":"2023-10-14"},{"lineNumber":87,"author":{"gitId":"Darren159"},"content":"        PinCommand pinFirstCommand \u003d new PinCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-14"},{"lineNumber":88,"author":{"gitId":"Darren159"},"content":"        PinCommand pinSecondCommand \u003d new PinCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2023-10-14"},{"lineNumber":89,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":90,"author":{"gitId":"Darren159"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-14"},{"lineNumber":91,"author":{"gitId":"Darren159"},"content":"        assertTrue(pinFirstCommand.equals(pinFirstCommand));","lastModifiedDate":"2023-10-14"},{"lineNumber":92,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":93,"author":{"gitId":"Darren159"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-14"},{"lineNumber":94,"author":{"gitId":"Darren159"},"content":"        PinCommand unpinFirstCommandCopy \u003d new PinCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-14"},{"lineNumber":95,"author":{"gitId":"Darren159"},"content":"        assertTrue(pinFirstCommand.equals(unpinFirstCommandCopy));","lastModifiedDate":"2023-10-14"},{"lineNumber":96,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":97,"author":{"gitId":"Darren159"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":98,"author":{"gitId":"Darren159"},"content":"        assertFalse(pinFirstCommand.equals(1));","lastModifiedDate":"2023-10-14"},{"lineNumber":99,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":100,"author":{"gitId":"Darren159"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":101,"author":{"gitId":"Darren159"},"content":"        assertFalse(pinFirstCommand.equals(null));","lastModifiedDate":"2023-10-14"},{"lineNumber":102,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":103,"author":{"gitId":"Darren159"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":104,"author":{"gitId":"Darren159"},"content":"        assertFalse(pinFirstCommand.equals(pinSecondCommand));","lastModifiedDate":"2023-10-14"},{"lineNumber":105,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":106,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":107,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":108,"author":{"gitId":"Darren159"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-14"},{"lineNumber":109,"author":{"gitId":"Darren159"},"content":"        Index targetIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-10-14"},{"lineNumber":110,"author":{"gitId":"Darren159"},"content":"        PinCommand pinCommand \u003d new PinCommand(targetIndex);","lastModifiedDate":"2023-10-14"},{"lineNumber":111,"author":{"gitId":"Darren159"},"content":"        String expected \u003d PinCommand.class.getCanonicalName() + \"{targetIndex\u003d\" + targetIndex + \"}\";","lastModifiedDate":"2023-10-14"},{"lineNumber":112,"author":{"gitId":"Darren159"},"content":"        assertEquals(expected, pinCommand.toString());","lastModifiedDate":"2023-10-14"},{"lineNumber":113,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":114,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":115,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-14"}],"authorContributionMap":{"Darren159":107,"ryanongwx":8}},{"path":"src/test/java/seedu/address/logic/commands/UnpinCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-14"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"ryanongwx"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2023-11-08"},{"lineNumber":25,"author":{"gitId":"ryanongwx"},"content":" * UnpinCommand.","lastModifiedDate":"2023-11-08"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"public class UnpinCommandTest {","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"    public void execute_validIndex_success() {","lastModifiedDate":"2023-10-14"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"        Person personToUnpin \u003d model.getPinnedPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-10-14"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"        Person unpinnedPerson \u003d new PersonBuilder(personToUnpin).withIsPinned(false).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"        UnpinCommand unpinCommand \u003d new UnpinCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"        String expectedMessage \u003d String.format(UnpinCommand.MESSAGE_UNPIN_PERSON_SUCCESS,","lastModifiedDate":"2023-10-15"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"                Messages.format(personToUnpin));","lastModifiedDate":"2023-10-15"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"        expectedModel.setPerson(model.getPinnedPersonList().get(0), unpinnedPerson);","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"        assertCommandSuccess(unpinCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getPinnedPersonList().size() + 1);","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"        UnpinCommand unpinCommand \u003d new UnpinCommand(outOfBoundIndex);","lastModifiedDate":"2023-10-14"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":51,"author":{"gitId":"ryanongwx"},"content":"        assertCommandFailure(unpinCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX","lastModifiedDate":"2023-11-08"},{"lineNumber":52,"author":{"gitId":"ryanongwx"},"content":"                + \". Please ensure that it is within 1 and \" + model.getPinnedPersonList().size() + \".\");","lastModifiedDate":"2023-11-08"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"    public void equals() {","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"        UnpinCommand unpinFirstCommand \u003d new UnpinCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"        UnpinCommand unpinSecondCommand \u003d new UnpinCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-14"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"        assertTrue(unpinFirstCommand.equals(unpinFirstCommand));","lastModifiedDate":"2023-10-14"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-14"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"        UnpinCommand unpinFirstCommandCopy \u003d new UnpinCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-14"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"        assertTrue(unpinFirstCommand.equals(unpinFirstCommandCopy));","lastModifiedDate":"2023-10-14"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"        assertFalse(unpinFirstCommand.equals(1));","lastModifiedDate":"2023-10-14"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"        assertFalse(unpinFirstCommand.equals(null));","lastModifiedDate":"2023-10-14"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"        assertFalse(unpinFirstCommand.equals(unpinSecondCommand));","lastModifiedDate":"2023-10-14"},{"lineNumber":75,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":76,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":77,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":78,"author":{"gitId":"Darren159"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-14"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"        Index targetIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-10-14"},{"lineNumber":80,"author":{"gitId":"Darren159"},"content":"        UnpinCommand unpinCommand \u003d new UnpinCommand(targetIndex);","lastModifiedDate":"2023-10-14"},{"lineNumber":81,"author":{"gitId":"Darren159"},"content":"        String expected \u003d UnpinCommand.class.getCanonicalName() + \"{targetIndex\u003d\" + targetIndex + \"}\";","lastModifiedDate":"2023-10-14"},{"lineNumber":82,"author":{"gitId":"Darren159"},"content":"        assertEquals(expected, unpinCommand.toString());","lastModifiedDate":"2023-10-14"},{"lineNumber":83,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":84,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":85,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-14"}],"authorContributionMap":{"Darren159":81,"ryanongwx":4}},{"path":"src/test/java/seedu/address/logic/commands/ViewAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.ViewAppointmentCommand.SHOWING_APPOINTMENTS_MESSAGE;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"public class ViewAppointmentCommandTest {","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"    public void execute_help_success() {","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_APPOINTMENTS_MESSAGE, false, true, false);","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"        assertCommandSuccess(new ViewAppointmentCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"Darren159":20}},{"path":"src/test/java/seedu/address/logic/commands/ViewCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Clin-lyx"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-21"},{"lineNumber":2,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":3,"author":{"gitId":"Clin-lyx"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-21"},{"lineNumber":4,"author":{"gitId":"Clin-lyx"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-21"},{"lineNumber":5,"author":{"gitId":"Clin-lyx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-10-21"},{"lineNumber":6,"author":{"gitId":"Clin-lyx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-21"},{"lineNumber":7,"author":{"gitId":"Clin-lyx"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-21"},{"lineNumber":8,"author":{"gitId":"Clin-lyx"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-10-21"},{"lineNumber":9,"author":{"gitId":"Clin-lyx"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-10-21"},{"lineNumber":10,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":11,"author":{"gitId":"Clin-lyx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-21"},{"lineNumber":12,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":13,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-21"},{"lineNumber":14,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-21"},{"lineNumber":15,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-21"},{"lineNumber":16,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-21"},{"lineNumber":17,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-10-21"},{"lineNumber":18,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-21"},{"lineNumber":19,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-21"},{"lineNumber":20,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":21,"author":{"gitId":"Clin-lyx"},"content":"public class ViewCommandTest {","lastModifiedDate":"2023-10-21"},{"lineNumber":22,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":23,"author":{"gitId":"Clin-lyx"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-10-21"},{"lineNumber":24,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":25,"author":{"gitId":"Clin-lyx"},"content":"    @Test","lastModifiedDate":"2023-10-21"},{"lineNumber":26,"author":{"gitId":"Clin-lyx"},"content":"    public void executeValidIndex_success() {","lastModifiedDate":"2023-10-21"},{"lineNumber":27,"author":{"gitId":"Clin-lyx"},"content":"        Person personToView \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-10-21"},{"lineNumber":28,"author":{"gitId":"Clin-lyx"},"content":"        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-21"},{"lineNumber":29,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":30,"author":{"gitId":"Clin-lyx"},"content":"        String expectedMessage \u003d String.format(ViewCommand.MESSAGE_VIEW_PERSON_SUCCESS, Messages.format(personToView));","lastModifiedDate":"2023-10-21"},{"lineNumber":31,"author":{"gitId":"Clin-lyx"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2023-10-21"},{"lineNumber":32,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":33,"author":{"gitId":"Clin-lyx"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), personToView);","lastModifiedDate":"2023-10-21"},{"lineNumber":34,"author":{"gitId":"Clin-lyx"},"content":"        expectedModel.updateRecordList(personToView, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-11-08"},{"lineNumber":35,"author":{"gitId":"Clin-lyx"},"content":"        assertCommandSuccess(viewCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-21"},{"lineNumber":36,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":37,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":38,"author":{"gitId":"Clin-lyx"},"content":"    @Test","lastModifiedDate":"2023-10-21"},{"lineNumber":39,"author":{"gitId":"Clin-lyx"},"content":"    public void executeInvalidIndex_throwsCommandException() {","lastModifiedDate":"2023-10-21"},{"lineNumber":40,"author":{"gitId":"Clin-lyx"},"content":"        Index indexOutOfBounds \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2023-10-21"},{"lineNumber":41,"author":{"gitId":"Clin-lyx"},"content":"        ViewCommand viewCommand \u003d new ViewCommand(indexOutOfBounds);","lastModifiedDate":"2023-10-21"},{"lineNumber":42,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":43,"author":{"gitId":"ryanongwx"},"content":"        assertCommandFailure(viewCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX","lastModifiedDate":"2023-11-08"},{"lineNumber":44,"author":{"gitId":"ryanongwx"},"content":"                + \". Please ensure that it is within 1 and \" + model.getFilteredPersonList().size() + \".\");","lastModifiedDate":"2023-11-08"},{"lineNumber":45,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":46,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":47,"author":{"gitId":"Clin-lyx"},"content":"    @Test","lastModifiedDate":"2023-10-21"},{"lineNumber":48,"author":{"gitId":"Clin-lyx"},"content":"    public void execute_validIndexRecordList_success() {","lastModifiedDate":"2023-10-22"},{"lineNumber":49,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":50,"author":{"gitId":"Clin-lyx"},"content":"        Person personToView \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-10-21"},{"lineNumber":51,"author":{"gitId":"Clin-lyx"},"content":"        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-21"},{"lineNumber":52,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":53,"author":{"gitId":"Clin-lyx"},"content":"        String expectedMessage \u003d String.format(ViewCommand.MESSAGE_VIEW_PERSON_SUCCESS,","lastModifiedDate":"2023-10-21"},{"lineNumber":54,"author":{"gitId":"Clin-lyx"},"content":"                Messages.format(personToView));","lastModifiedDate":"2023-10-21"},{"lineNumber":55,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":56,"author":{"gitId":"Clin-lyx"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2023-10-21"},{"lineNumber":57,"author":{"gitId":"Clin-lyx"},"content":"        try {","lastModifiedDate":"2023-10-21"},{"lineNumber":58,"author":{"gitId":"Clin-lyx"},"content":"            viewCommand.execute(model);","lastModifiedDate":"2023-10-21"},{"lineNumber":59,"author":{"gitId":"Clin-lyx"},"content":"            viewCommand.execute(expectedModel);","lastModifiedDate":"2023-10-21"},{"lineNumber":60,"author":{"gitId":"Clin-lyx"},"content":"        } catch (Exception ignore) {","lastModifiedDate":"2023-10-21"},{"lineNumber":61,"author":{"gitId":"Clin-lyx"},"content":"            return;","lastModifiedDate":"2023-10-21"},{"lineNumber":62,"author":{"gitId":"Clin-lyx"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":63,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":64,"author":{"gitId":"Clin-lyx"},"content":"        sameRecordList(model, expectedModel);","lastModifiedDate":"2023-10-21"},{"lineNumber":65,"author":{"gitId":"Clin-lyx"},"content":"        assertCommandSuccess(viewCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-21"},{"lineNumber":66,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":67,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":68,"author":{"gitId":"Clin-lyx"},"content":"    @Test","lastModifiedDate":"2023-10-22"},{"lineNumber":69,"author":{"gitId":"Clin-lyx"},"content":"    public void execute_validIndexSamePerson_success() {","lastModifiedDate":"2023-10-22"},{"lineNumber":70,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":71,"author":{"gitId":"Clin-lyx"},"content":"        Person personToView \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-10-22"},{"lineNumber":72,"author":{"gitId":"Clin-lyx"},"content":"        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-22"},{"lineNumber":73,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":74,"author":{"gitId":"Clin-lyx"},"content":"        String expectedMessage \u003d String.format(ViewCommand.MESSAGE_VIEW_PERSON_SUCCESS,","lastModifiedDate":"2023-10-22"},{"lineNumber":75,"author":{"gitId":"Clin-lyx"},"content":"                Messages.format(personToView));","lastModifiedDate":"2023-10-22"},{"lineNumber":76,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":77,"author":{"gitId":"Clin-lyx"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2023-10-22"},{"lineNumber":78,"author":{"gitId":"Clin-lyx"},"content":"        try {","lastModifiedDate":"2023-10-22"},{"lineNumber":79,"author":{"gitId":"Clin-lyx"},"content":"            viewCommand.execute(model);","lastModifiedDate":"2023-10-22"},{"lineNumber":80,"author":{"gitId":"Clin-lyx"},"content":"            viewCommand.execute(expectedModel);","lastModifiedDate":"2023-10-22"},{"lineNumber":81,"author":{"gitId":"Clin-lyx"},"content":"        } catch (Exception ignore) {","lastModifiedDate":"2023-10-22"},{"lineNumber":82,"author":{"gitId":"Clin-lyx"},"content":"            return;","lastModifiedDate":"2023-10-22"},{"lineNumber":83,"author":{"gitId":"Clin-lyx"},"content":"        }","lastModifiedDate":"2023-10-22"},{"lineNumber":84,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":85,"author":{"gitId":"Clin-lyx"},"content":"        samePersonViewed(model, expectedModel);","lastModifiedDate":"2023-10-22"},{"lineNumber":86,"author":{"gitId":"Clin-lyx"},"content":"        assertCommandSuccess(viewCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-22"},{"lineNumber":87,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-22"},{"lineNumber":88,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":89,"author":{"gitId":"Clin-lyx"},"content":"    @Test","lastModifiedDate":"2023-10-21"},{"lineNumber":90,"author":{"gitId":"Clin-lyx"},"content":"    public void equals() {","lastModifiedDate":"2023-10-21"},{"lineNumber":91,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":92,"author":{"gitId":"Clin-lyx"},"content":"        ViewCommand viewCommand1 \u003d new ViewCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-21"},{"lineNumber":93,"author":{"gitId":"Clin-lyx"},"content":"        ViewCommand viewCommand2 \u003d new ViewCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2023-10-21"},{"lineNumber":94,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":95,"author":{"gitId":"Clin-lyx"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-21"},{"lineNumber":96,"author":{"gitId":"Clin-lyx"},"content":"        assertTrue(viewCommand1.equals(viewCommand1));","lastModifiedDate":"2023-10-21"},{"lineNumber":97,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":98,"author":{"gitId":"Clin-lyx"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-21"},{"lineNumber":99,"author":{"gitId":"Clin-lyx"},"content":"        ViewCommand viewFirstCommandCopy \u003d new ViewCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-21"},{"lineNumber":100,"author":{"gitId":"Clin-lyx"},"content":"        assertTrue(viewCommand1.equals(viewFirstCommandCopy));","lastModifiedDate":"2023-10-21"},{"lineNumber":101,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":102,"author":{"gitId":"Clin-lyx"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-21"},{"lineNumber":103,"author":{"gitId":"Clin-lyx"},"content":"        assertFalse(viewCommand1.equals(1));","lastModifiedDate":"2023-10-21"},{"lineNumber":104,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":105,"author":{"gitId":"Clin-lyx"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-21"},{"lineNumber":106,"author":{"gitId":"Clin-lyx"},"content":"        assertFalse(viewCommand1.equals(null));","lastModifiedDate":"2023-10-21"},{"lineNumber":107,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":108,"author":{"gitId":"Clin-lyx"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-10-21"},{"lineNumber":109,"author":{"gitId":"Clin-lyx"},"content":"        assertFalse(viewCommand1.equals(viewCommand2));","lastModifiedDate":"2023-10-21"},{"lineNumber":110,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":111,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":112,"author":{"gitId":"Clin-lyx"},"content":"    private void sameRecordList(Model model1, Model model2) {","lastModifiedDate":"2023-10-21"},{"lineNumber":113,"author":{"gitId":"Clin-lyx"},"content":"        assertTrue(model1.getRecordList().equals(model2.getRecordList()));","lastModifiedDate":"2023-10-21"},{"lineNumber":114,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":115,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":116,"author":{"gitId":"Clin-lyx"},"content":"    private void samePersonViewed(Model model1, Model model2) {","lastModifiedDate":"2023-10-22"},{"lineNumber":117,"author":{"gitId":"Clin-lyx"},"content":"        assertTrue(model1.getPersonBeingViewed().equals(model2.getPersonBeingViewed()));","lastModifiedDate":"2023-10-22"},{"lineNumber":118,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-22"},{"lineNumber":119,"author":{"gitId":"Clin-lyx"},"content":"}","lastModifiedDate":"2023-10-21"}],"authorContributionMap":{"Clin-lyx":117,"ryanongwx":2}},{"path":"src/test/java/seedu/address/logic/parser/AddAppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATETIME_DESC_SLEEP_STUDY;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATETIME_DESC;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_SLEEP_STUDY;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATETIME_SLEEP_STUDY;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_SLEEP_STUDY;","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.DateTime;","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Name;","lastModifiedDate":"2023-10-22"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"public class AddAppointmentCommandParserTest {","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"            AddAppointmentCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"    private AddAppointmentCommandParser parser \u003d new AddAppointmentCommandParser();","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"        // no index specified","lastModifiedDate":"2023-10-19"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser, NAME_DESC_SLEEP_STUDY + DATETIME_DESC_SLEEP_STUDY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"        // no field specified","lastModifiedDate":"2023-10-19"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-19"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"        // no index and no field specified","lastModifiedDate":"2023-10-19"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-19"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2023-10-19"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"        // negative index","lastModifiedDate":"2023-10-19"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_SLEEP_STUDY + DATETIME_DESC_SLEEP_STUDY,","lastModifiedDate":"2023-10-19"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"                MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-19"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"        // zero index","lastModifiedDate":"2023-10-19"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_SLEEP_STUDY + DATETIME_DESC_SLEEP_STUDY,","lastModifiedDate":"2023-10-19"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"                MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-19"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2023-10-19"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-19"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2023-10-19"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-19"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2023-10-19"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + DATETIME_DESC_SLEEP_STUDY,","lastModifiedDate":"2023-10-19"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"                Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2023-10-19"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser, \"1\" + NAME_DESC_SLEEP_STUDY + INVALID_DATETIME_DESC,","lastModifiedDate":"2023-10-19"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"                DateTime.MESSAGE_CONSTRAINTS); // invalid datetime","lastModifiedDate":"2023-10-19"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2023-10-19"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_DATETIME_DESC,","lastModifiedDate":"2023-10-19"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-19"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2023-10-19"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2023-10-19"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_SLEEP_STUDY + DATETIME_DESC_SLEEP_STUDY;","lastModifiedDate":"2023-10-19"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"        Appointment appointment \u003d new Appointment(new Name(VALID_NAME_SLEEP_STUDY),","lastModifiedDate":"2023-10-19"},{"lineNumber":75,"author":{"gitId":"Darren159"},"content":"                new DateTime(VALID_DATETIME_SLEEP_STUDY), null);","lastModifiedDate":"2023-11-01"},{"lineNumber":76,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":77,"author":{"gitId":"Darren159"},"content":"        AddAppointmentCommand expectedCommand \u003d new AddAppointmentCommand(targetIndex, appointment);","lastModifiedDate":"2023-10-19"},{"lineNumber":78,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-10-19"},{"lineNumber":80,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":81,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"Darren159":81}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AGE_DESC_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AGE_DESC_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALLERGY_DESC_DUST;","lastModifiedDate":"2023-10-15"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALLERGY_DESC_PEANUTS;","lastModifiedDate":"2023-10-15"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_AGE_DESC;","lastModifiedDate":"2023-10-15"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ALLERGY_DESC;","lastModifiedDate":"2023-10-15"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BLOODTYPE_DESC;","lastModifiedDate":"2023-10-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2023-10-15"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;","lastModifiedDate":"2023-10-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2023-10-15"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2023-10-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2023-10-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2023-10-15"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_DUST;","lastModifiedDate":"2023-10-15"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_PEANUTS;","lastModifiedDate":"2023-10-15"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-07-14"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-07-14"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-10-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-07-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-07-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-07-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-15"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Age;","lastModifiedDate":"2023-10-15"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-15"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.BloodType;","lastModifiedDate":"2023-10-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-10-15"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Gender;","lastModifiedDate":"2023-10-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-15"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Name;","lastModifiedDate":"2023-10-22"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Nric;","lastModifiedDate":"2023-11-01"},{"lineNumber":63,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"adammangzijun"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withAllergies(VALID_ALLERGY_DUST).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + NRIC_DESC_BOB","lastModifiedDate":"2023-10-30"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"                + EMAIL_DESC_BOB + PHONE_DESC_BOB","lastModifiedDate":"2023-10-30"},{"lineNumber":75,"author":{"gitId":"Darren159"},"content":"                + GENDER_DESC_BOB + AGE_DESC_BOB + BLOODTYPE_DESC_BOB","lastModifiedDate":"2023-10-30"},{"lineNumber":76,"author":{"gitId":"Darren159"},"content":"                + ALLERGY_DESC_DUST,","lastModifiedDate":"2023-10-30"},{"lineNumber":77,"author":{"gitId":"adammangzijun"},"content":"                new AddCommand(expectedPerson));","lastModifiedDate":"2023-10-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":80,"author":{"gitId":"Darren159"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withAllergies(VALID_ALLERGY_DUST,","lastModifiedDate":"2023-10-15"},{"lineNumber":81,"author":{"gitId":"Darren159"},"content":"                VALID_ALLERGY_PEANUTS)","lastModifiedDate":"2023-10-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-07-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2023-07-14"},{"lineNumber":84,"author":{"gitId":"Darren159"},"content":"                NAME_DESC_BOB + NRIC_DESC_BOB + EMAIL_DESC_BOB + PHONE_DESC_BOB + GENDER_DESC_BOB","lastModifiedDate":"2023-10-30"},{"lineNumber":85,"author":{"gitId":"Darren159"},"content":"                        + AGE_DESC_BOB + BLOODTYPE_DESC_BOB + ALLERGY_DESC_DUST","lastModifiedDate":"2023-10-30"},{"lineNumber":86,"author":{"gitId":"Darren159"},"content":"                        + ALLERGY_DESC_PEANUTS,","lastModifiedDate":"2023-10-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPersonMultipleTags));","lastModifiedDate":"2023-07-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-07-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void parse_repeatedNonTagValue_failure() {","lastModifiedDate":"2023-07-14"},{"lineNumber":92,"author":{"gitId":"Darren159"},"content":"        String validExpectedPersonString \u003d NAME_DESC_BOB + NRIC_DESC_BOB + EMAIL_DESC_BOB + PHONE_DESC_BOB","lastModifiedDate":"2023-10-30"},{"lineNumber":93,"author":{"gitId":"adammangzijun"},"content":"                + GENDER_DESC_BOB + AGE_DESC_BOB + BLOODTYPE_DESC_BOB + ALLERGY_DESC_DUST;","lastModifiedDate":"2023-10-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // multiple names","lastModifiedDate":"2023-07-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":99,"author":{"gitId":"adammangzijun"},"content":"        // multiple emails","lastModifiedDate":"2023-10-14"},{"lineNumber":100,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, EMAIL_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-10-14"},{"lineNumber":101,"author":{"gitId":"adammangzijun"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));","lastModifiedDate":"2023-10-14"},{"lineNumber":102,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // multiple phones","lastModifiedDate":"2023-07-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PHONE_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":107,"author":{"gitId":"adammangzijun"},"content":"        // multiple genders","lastModifiedDate":"2023-10-14"},{"lineNumber":108,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, GENDER_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-10-14"},{"lineNumber":109,"author":{"gitId":"adammangzijun"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_GENDER));","lastModifiedDate":"2023-10-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":111,"author":{"gitId":"adammangzijun"},"content":"        // multiple ages","lastModifiedDate":"2023-10-14"},{"lineNumber":112,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, AGE_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-10-14"},{"lineNumber":113,"author":{"gitId":"adammangzijun"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_AGE));","lastModifiedDate":"2023-10-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":115,"author":{"gitId":"adammangzijun"},"content":"        // multiple bloodTypes","lastModifiedDate":"2023-10-14"},{"lineNumber":116,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, BLOODTYPE_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-10-14"},{"lineNumber":117,"author":{"gitId":"adammangzijun"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_BLOODTYPE));","lastModifiedDate":"2023-10-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // multiple fields repeated","lastModifiedDate":"2023-07-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2023-07-14"},{"lineNumber":121,"author":{"gitId":"Darren159"},"content":"                validExpectedPersonString + NRIC_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2023-10-30"},{"lineNumber":122,"author":{"gitId":"adammangzijun"},"content":"                        + NAME_DESC_AMY + PREFIX_GENDER + PREFIX_AGE + PREFIX_BLOODTYPE","lastModifiedDate":"2023-10-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                        + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":124,"author":{"gitId":"Darren159"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME, PREFIX_NRIC, PREFIX_EMAIL,","lastModifiedDate":"2023-10-30"},{"lineNumber":125,"author":{"gitId":"Darren159"},"content":"                        PREFIX_PHONE,","lastModifiedDate":"2023-10-30"},{"lineNumber":126,"author":{"gitId":"adammangzijun"},"content":"                        PREFIX_GENDER, PREFIX_AGE, PREFIX_BLOODTYPE));","lastModifiedDate":"2023-10-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // invalid value followed by valid value","lastModifiedDate":"2023-07-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2023-07-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2023-07-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_EMAIL_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));","lastModifiedDate":"2023-07-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2023-07-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_PHONE_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":142,"author":{"gitId":"adammangzijun"},"content":"        // invalid gender","lastModifiedDate":"2023-10-14"},{"lineNumber":143,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, INVALID_GENDER_DESC + validExpectedPersonString,","lastModifiedDate":"2023-10-14"},{"lineNumber":144,"author":{"gitId":"adammangzijun"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_GENDER));","lastModifiedDate":"2023-10-14"},{"lineNumber":145,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":146,"author":{"gitId":"adammangzijun"},"content":"        // invalid age","lastModifiedDate":"2023-10-14"},{"lineNumber":147,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, INVALID_AGE_DESC + validExpectedPersonString,","lastModifiedDate":"2023-10-14"},{"lineNumber":148,"author":{"gitId":"adammangzijun"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_AGE));","lastModifiedDate":"2023-10-14"},{"lineNumber":149,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":150,"author":{"gitId":"adammangzijun"},"content":"        // invalid bloodType","lastModifiedDate":"2023-10-14"},{"lineNumber":151,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, INVALID_BLOODTYPE_DESC + validExpectedPersonString,","lastModifiedDate":"2023-10-14"},{"lineNumber":152,"author":{"gitId":"adammangzijun"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_BLOODTYPE));","lastModifiedDate":"2023-10-14"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        // valid value followed by invalid value","lastModifiedDate":"2023-07-14"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2023-07-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_NAME_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2023-07-14"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_EMAIL_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":162,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));","lastModifiedDate":"2023-07-14"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2023-07-14"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_PHONE_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":166,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":168,"author":{"gitId":"adammangzijun"},"content":"        // invalid gender","lastModifiedDate":"2023-10-14"},{"lineNumber":169,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_GENDER_DESC,","lastModifiedDate":"2023-10-14"},{"lineNumber":170,"author":{"gitId":"adammangzijun"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_GENDER));","lastModifiedDate":"2023-10-14"},{"lineNumber":171,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":172,"author":{"gitId":"adammangzijun"},"content":"        // invalid age","lastModifiedDate":"2023-10-14"},{"lineNumber":173,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_AGE_DESC,","lastModifiedDate":"2023-10-14"},{"lineNumber":174,"author":{"gitId":"adammangzijun"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_AGE));","lastModifiedDate":"2023-10-14"},{"lineNumber":175,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":176,"author":{"gitId":"adammangzijun"},"content":"        // invalid bloodtype","lastModifiedDate":"2023-10-14"},{"lineNumber":177,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_BLOODTYPE_DESC,","lastModifiedDate":"2023-10-14"},{"lineNumber":178,"author":{"gitId":"adammangzijun"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_BLOODTYPE));","lastModifiedDate":"2023-10-14"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":184,"author":{"gitId":"adammangzijun"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withAllergies().build();","lastModifiedDate":"2023-10-14"},{"lineNumber":185,"author":{"gitId":"Darren159"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NRIC_DESC_AMY + EMAIL_DESC_AMY + PHONE_DESC_AMY","lastModifiedDate":"2023-10-30"},{"lineNumber":186,"author":{"gitId":"adammangzijun"},"content":"                + GENDER_DESC_AMY + AGE_DESC_AMY + BLOODTYPE_DESC_AMY,","lastModifiedDate":"2023-10-14"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":195,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-10-14"},{"lineNumber":196,"author":{"gitId":"adammangzijun"},"content":"                + GENDER_DESC_BOB + AGE_DESC_BOB + BLOODTYPE_DESC_BOB,","lastModifiedDate":"2023-10-14"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":200,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + EMAIL_DESC_BOB + VALID_PHONE_BOB","lastModifiedDate":"2023-10-14"},{"lineNumber":201,"author":{"gitId":"adammangzijun"},"content":"                + GENDER_DESC_BOB + AGE_DESC_BOB + BLOODTYPE_DESC_BOB,","lastModifiedDate":"2023-10-14"},{"lineNumber":202,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":205,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_EMAIL_BOB + PHONE_DESC_BOB","lastModifiedDate":"2023-10-14"},{"lineNumber":206,"author":{"gitId":"adammangzijun"},"content":"                + GENDER_DESC_BOB + AGE_DESC_BOB + BLOODTYPE_DESC_BOB,","lastModifiedDate":"2023-10-14"},{"lineNumber":207,"author":{"gitId":"adammangzijun"},"content":"                expectedMessage);","lastModifiedDate":"2023-10-14"},{"lineNumber":208,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":209,"author":{"gitId":"adammangzijun"},"content":"        // missing gender prefix","lastModifiedDate":"2023-10-14"},{"lineNumber":210,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + EMAIL_DESC_BOB + PHONE_DESC_BOB","lastModifiedDate":"2023-10-14"},{"lineNumber":211,"author":{"gitId":"adammangzijun"},"content":"                + VALID_GENDER_BOB + AGE_DESC_BOB + BLOODTYPE_DESC_BOB,","lastModifiedDate":"2023-10-14"},{"lineNumber":212,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":214,"author":{"gitId":"adammangzijun"},"content":"        // missing age prefix","lastModifiedDate":"2023-10-14"},{"lineNumber":215,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_EMAIL_BOB + PHONE_DESC_BOB","lastModifiedDate":"2023-10-14"},{"lineNumber":216,"author":{"gitId":"adammangzijun"},"content":"                + GENDER_DESC_BOB + VALID_AGE_BOB + BLOODTYPE_DESC_BOB,","lastModifiedDate":"2023-10-14"},{"lineNumber":217,"author":{"gitId":"adammangzijun"},"content":"                expectedMessage);","lastModifiedDate":"2023-10-14"},{"lineNumber":218,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":219,"author":{"gitId":"adammangzijun"},"content":"        // missing bloodType prefix","lastModifiedDate":"2023-10-14"},{"lineNumber":220,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_EMAIL_BOB + PHONE_DESC_BOB","lastModifiedDate":"2023-10-14"},{"lineNumber":221,"author":{"gitId":"adammangzijun"},"content":"                + GENDER_DESC_BOB + VALID_AGE_BOB + VALID_BLOODTYPE_BOB,","lastModifiedDate":"2023-10-14"},{"lineNumber":222,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":225,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_EMAIL_BOB + VALID_PHONE_BOB","lastModifiedDate":"2023-10-14"},{"lineNumber":226,"author":{"gitId":"adammangzijun"},"content":"                + VALID_GENDER_BOB + VALID_AGE_BOB + VALID_BLOODTYPE_BOB,","lastModifiedDate":"2023-10-14"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":233,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2023-10-30"},{"lineNumber":234,"author":{"gitId":"Darren159"},"content":"                INVALID_NAME_DESC + NRIC_DESC_BOB + EMAIL_DESC_BOB + PHONE_DESC_BOB + GENDER_DESC_BOB","lastModifiedDate":"2023-10-30"},{"lineNumber":235,"author":{"gitId":"Darren159"},"content":"                        + AGE_DESC_BOB + BLOODTYPE_DESC_BOB,","lastModifiedDate":"2023-10-30"},{"lineNumber":236,"author":{"gitId":"Darren159"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-30"},{"lineNumber":237,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":238,"author":{"gitId":"Darren159"},"content":"        // invalid nric","lastModifiedDate":"2023-10-30"},{"lineNumber":239,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2023-10-30"},{"lineNumber":240,"author":{"gitId":"Darren159"},"content":"                NAME_DESC_BOB + INVALID_NRIC_DESC + EMAIL_DESC_BOB + PHONE_DESC_BOB + GENDER_DESC_BOB","lastModifiedDate":"2023-10-30"},{"lineNumber":241,"author":{"gitId":"Darren159"},"content":"                        + AGE_DESC_BOB + BLOODTYPE_DESC_BOB,","lastModifiedDate":"2023-10-30"},{"lineNumber":242,"author":{"gitId":"Darren159"},"content":"                Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-30"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":245,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2023-10-30"},{"lineNumber":246,"author":{"gitId":"Darren159"},"content":"                NAME_DESC_BOB + NRIC_DESC_BOB + EMAIL_DESC_BOB + INVALID_PHONE_DESC + GENDER_DESC_BOB","lastModifiedDate":"2023-10-30"},{"lineNumber":247,"author":{"gitId":"Darren159"},"content":"                        + AGE_DESC_BOB + BLOODTYPE_DESC_BOB,","lastModifiedDate":"2023-10-30"},{"lineNumber":248,"author":{"gitId":"Darren159"},"content":"                Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-30"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":251,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2023-10-30"},{"lineNumber":252,"author":{"gitId":"Darren159"},"content":"                NAME_DESC_BOB + NRIC_DESC_BOB + INVALID_EMAIL_DESC + PHONE_DESC_BOB + GENDER_DESC_BOB","lastModifiedDate":"2023-10-30"},{"lineNumber":253,"author":{"gitId":"Darren159"},"content":"                        + AGE_DESC_BOB + BLOODTYPE_DESC_BOB,","lastModifiedDate":"2023-10-30"},{"lineNumber":254,"author":{"gitId":"Darren159"},"content":"                Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-30"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":256,"author":{"gitId":"adammangzijun"},"content":"        // invalid gender","lastModifiedDate":"2023-10-14"},{"lineNumber":257,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2023-10-30"},{"lineNumber":258,"author":{"gitId":"Darren159"},"content":"                NAME_DESC_BOB + NRIC_DESC_BOB + EMAIL_DESC_BOB + PHONE_DESC_BOB + INVALID_GENDER_DESC","lastModifiedDate":"2023-10-30"},{"lineNumber":259,"author":{"gitId":"Darren159"},"content":"                        + AGE_DESC_BOB + BLOODTYPE_DESC_BOB,","lastModifiedDate":"2023-10-30"},{"lineNumber":260,"author":{"gitId":"Darren159"},"content":"                Gender.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-30"},{"lineNumber":261,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":262,"author":{"gitId":"adammangzijun"},"content":"        // invalid age","lastModifiedDate":"2023-10-14"},{"lineNumber":263,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2023-10-30"},{"lineNumber":264,"author":{"gitId":"Darren159"},"content":"                NAME_DESC_BOB + NRIC_DESC_BOB + EMAIL_DESC_BOB + PHONE_DESC_BOB + GENDER_DESC_BOB","lastModifiedDate":"2023-10-30"},{"lineNumber":265,"author":{"gitId":"Darren159"},"content":"                        + INVALID_AGE_DESC + BLOODTYPE_DESC_BOB,","lastModifiedDate":"2023-10-30"},{"lineNumber":266,"author":{"gitId":"Darren159"},"content":"                Age.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-30"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":268,"author":{"gitId":"adammangzijun"},"content":"        // invalid bloodType","lastModifiedDate":"2023-10-14"},{"lineNumber":269,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2023-10-30"},{"lineNumber":270,"author":{"gitId":"Darren159"},"content":"                NAME_DESC_BOB + NRIC_DESC_BOB + EMAIL_DESC_BOB + PHONE_DESC_BOB + GENDER_DESC_BOB","lastModifiedDate":"2023-10-30"},{"lineNumber":271,"author":{"gitId":"Darren159"},"content":"                        + AGE_DESC_BOB + INVALID_BLOODTYPE_DESC,","lastModifiedDate":"2023-10-30"},{"lineNumber":272,"author":{"gitId":"Darren159"},"content":"                BloodType.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-30"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":274,"author":{"gitId":"ryanongwx"},"content":"        // invalid Allergy","lastModifiedDate":"2023-10-17"},{"lineNumber":275,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2023-10-30"},{"lineNumber":276,"author":{"gitId":"Darren159"},"content":"                NAME_DESC_BOB + NRIC_DESC_BOB + EMAIL_DESC_BOB + PHONE_DESC_BOB + GENDER_DESC_BOB","lastModifiedDate":"2023-10-30"},{"lineNumber":277,"author":{"gitId":"Darren159"},"content":"                        + AGE_DESC_BOB + BLOODTYPE_DESC_BOB + INVALID_ALLERGY_DESC,","lastModifiedDate":"2023-10-30"},{"lineNumber":278,"author":{"gitId":"Darren159"},"content":"                Allergy.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-30"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":281,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + NRIC_DESC_BOB + EMAIL_DESC_BOB + PHONE_DESC_BOB","lastModifiedDate":"2023-10-30"},{"lineNumber":282,"author":{"gitId":"adammangzijun"},"content":"                + INVALID_GENDER_DESC + AGE_DESC_BOB + BLOODTYPE_DESC_BOB,","lastModifiedDate":"2023-10-14"},{"lineNumber":283,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":286,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2023-10-30"},{"lineNumber":287,"author":{"gitId":"Darren159"},"content":"                PREAMBLE_NON_EMPTY + NAME_DESC_BOB + NRIC_DESC_BOB + EMAIL_DESC_BOB + PHONE_DESC_BOB","lastModifiedDate":"2023-10-30"},{"lineNumber":288,"author":{"gitId":"adammangzijun"},"content":"                        + GENDER_DESC_BOB + AGE_DESC_BOB + BLOODTYPE_DESC_BOB,","lastModifiedDate":"2023-10-14"},{"lineNumber":289,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-12-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":291,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"Darren159":78,"-":140,"adammangzijun":72,"ryanongwx":1}},{"path":"src/test/java/seedu/address/logic/parser/AddRecordCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"ryanongwx"},"content":"import static seedu.address.testutil.TypicalRecords.FEVER0;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.logic.commands.AddRecordCommand;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"public class AddRecordCommandParserTest {","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"    private AddRecordCommandParser parser \u003d new AddRecordCommandParser();","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    public void parse_validArgs_returnsAddRecordCommand() {","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"        assertParseSuccess(parser, \"1 d/09-10-2023 1800 c/Fever m/Tylenol\",","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"ryanongwx"},"content":"                new AddRecordCommand(INDEX_FIRST_PERSON, FEVER0));","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRecordCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"hjoneweek":23,"ryanongwx":3}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.DeleteAppointmentCommand;","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.PinCommand;","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.UnpinCommand;","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.ViewAppointmentCommand;","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.logic.commands.ViewCommand;","lastModifiedDate":"2023-10-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"import seedu.address.testutil.AppointmentBuilder;","lastModifiedDate":"2023-10-19"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"import seedu.address.testutil.AppointmentUtil;","lastModifiedDate":"2023-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).withNullNric().build();","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-06-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":94,"author":{"gitId":"Darren159"},"content":"    public void parseCommand_pin() throws Exception {","lastModifiedDate":"2023-10-19"},{"lineNumber":95,"author":{"gitId":"Darren159"},"content":"        PinCommand command \u003d (PinCommand) parser.parseCommand(","lastModifiedDate":"2023-10-19"},{"lineNumber":96,"author":{"gitId":"Darren159"},"content":"                PinCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2023-10-19"},{"lineNumber":97,"author":{"gitId":"Darren159"},"content":"        assertEquals(new PinCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2023-10-19"},{"lineNumber":98,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":99,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":100,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":101,"author":{"gitId":"Darren159"},"content":"    public void parseCommand_unpin() throws Exception {","lastModifiedDate":"2023-10-19"},{"lineNumber":102,"author":{"gitId":"Darren159"},"content":"        UnpinCommand command \u003d (UnpinCommand) parser.parseCommand(","lastModifiedDate":"2023-10-19"},{"lineNumber":103,"author":{"gitId":"Darren159"},"content":"                UnpinCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2023-10-19"},{"lineNumber":104,"author":{"gitId":"Darren159"},"content":"        assertEquals(new UnpinCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2023-10-19"},{"lineNumber":105,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":106,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":107,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":108,"author":{"gitId":"Darren159"},"content":"    public void parseCommand_addAppointment() throws Exception {","lastModifiedDate":"2023-10-19"},{"lineNumber":109,"author":{"gitId":"Darren159"},"content":"        Appointment appointment \u003d new AppointmentBuilder().withNric(null).build();","lastModifiedDate":"2023-11-01"},{"lineNumber":110,"author":{"gitId":"Darren159"},"content":"        AddAppointmentCommand command \u003d (AddAppointmentCommand) parser","lastModifiedDate":"2023-10-19"},{"lineNumber":111,"author":{"gitId":"Darren159"},"content":"                .parseCommand(AppointmentUtil.getAddAppointmentCommand(appointment));","lastModifiedDate":"2023-10-19"},{"lineNumber":112,"author":{"gitId":"Darren159"},"content":"        assertEquals(new AddAppointmentCommand(INDEX_FIRST_PERSON, appointment), command);","lastModifiedDate":"2023-10-19"},{"lineNumber":113,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":114,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":115,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":116,"author":{"gitId":"Darren159"},"content":"    public void parseCommand_viewAppointment() throws Exception {","lastModifiedDate":"2023-11-01"},{"lineNumber":117,"author":{"gitId":"Darren159"},"content":"        assertTrue(parser.parseCommand(ViewAppointmentCommand.COMMAND_WORD) instanceof ViewAppointmentCommand);","lastModifiedDate":"2023-11-01"},{"lineNumber":118,"author":{"gitId":"Darren159"},"content":"        assertTrue(parser.parseCommand(ViewAppointmentCommand.COMMAND_WORD + \" 3\") instanceof ViewAppointmentCommand);","lastModifiedDate":"2023-11-01"},{"lineNumber":119,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":120,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":121,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":122,"author":{"gitId":"Darren159"},"content":"    public void parseCommand_deleteAppointment() throws Exception {","lastModifiedDate":"2023-11-02"},{"lineNumber":123,"author":{"gitId":"Darren159"},"content":"        DeleteAppointmentCommand command \u003d (DeleteAppointmentCommand) parser.parseCommand(","lastModifiedDate":"2023-11-02"},{"lineNumber":124,"author":{"gitId":"Darren159"},"content":"                DeleteAppointmentCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2023-11-02"},{"lineNumber":125,"author":{"gitId":"Darren159"},"content":"        assertEquals(new DeleteAppointmentCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2023-11-02"},{"lineNumber":126,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":127,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":128,"author":{"gitId":"Clin-lyx"},"content":"    @Test","lastModifiedDate":"2023-10-22"},{"lineNumber":129,"author":{"gitId":"Clin-lyx"},"content":"    public void parseCommand_view() throws Exception {","lastModifiedDate":"2023-10-22"},{"lineNumber":130,"author":{"gitId":"Clin-lyx"},"content":"        ViewCommand viewCommand \u003d (ViewCommand) parser.parseCommand(","lastModifiedDate":"2023-10-22"},{"lineNumber":131,"author":{"gitId":"Clin-lyx"},"content":"                ViewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2023-10-22"},{"lineNumber":132,"author":{"gitId":"Clin-lyx"},"content":"        assertEquals(new ViewCommand(INDEX_FIRST_PERSON), viewCommand);","lastModifiedDate":"2023-10-22"},{"lineNumber":133,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-22"},{"lineNumber":134,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2023-11-02"},{"lineNumber":138,"author":{"gitId":"Darren159"},"content":"                -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":145,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"Darren159":45,"Clin-lyx":8,"-":92}},{"path":"src/test/java/seedu/address/logic/parser/DeleteAppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.DeleteAppointmentCommand;","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":" * As we are only doing white-box testing, our test cases do not cover path","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":" * variations","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":" * outside of the DeleteAppointmentCommand code. For example, inputs \"1\" and \"1","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":" * abc\" take the","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":" * same path through the DeleteAppointmentCommand, and therefore we test only","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":" * one of them.","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"public class DeleteAppointmentCommandParserTest {","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"    private DeleteAppointmentCommandParser parser \u003d new DeleteAppointmentCommandParser();","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"    public void parse_validArgs_returnsDeleteAppointmentCommand() {","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"        assertParseSuccess(parser, \"1\", new DeleteAppointmentCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser, \"a\",","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"Darren159":36}},{"path":"src/test/java/seedu/address/logic/parser/DeleteRecordCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECORD;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.logic.commands.DeleteRecordCommand;","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"public class DeleteRecordCommandParserTest {","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    private DeleteRecordCommandParser parser \u003d new DeleteRecordCommandParser();","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    public void parse_invalidUserInput_failure() {","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"        assertParseFailure(parser, \"1\",","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteRecordCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"    public void parse_validUserInput_success() {","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"        assertParseSuccess(parser, \"1/1\", new DeleteRecordCommand(INDEX_FIRST_PERSON, INDEX_FIRST_RECORD));","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"hjoneweek":25}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AGE_DESC_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALLERGY_DESC_DUST;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALLERGY_DESC_PEANUTS;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_AGE_DESC;","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ALLERGY_DESC;","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BLOODTYPE_DESC;","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_DUST;","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_PEANUTS;","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-07-14"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-07-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Age;","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.BloodType;","lastModifiedDate":"2023-10-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Gender;","lastModifiedDate":"2023-10-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Name;","lastModifiedDate":"2023-10-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"    private static final String ALLERGY_EMPTY \u003d \" \" + PREFIX_ALLERGIES;","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"            EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2017-05-04"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-07-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":87,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser, \"1 z/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":94,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2023-10-14"},{"lineNumber":95,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, \"1\" + INVALID_GENDER_DESC, Gender.MESSAGE_CONSTRAINTS); // invalid gender","lastModifiedDate":"2023-10-14"},{"lineNumber":96,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, \"1\" + INVALID_AGE_DESC, Age.MESSAGE_CONSTRAINTS); // invalid age","lastModifiedDate":"2023-10-14"},{"lineNumber":97,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, \"1\" + INVALID_BLOODTYPE_DESC, BloodType.MESSAGE_CONSTRAINTS); // invalid bloodType","lastModifiedDate":"2023-10-14"},{"lineNumber":98,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ALLERGY_DESC, Allergy.MESSAGE_CONSTRAINTS); // invalid allergy","lastModifiedDate":"2023-10-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":100,"author":{"gitId":"adammangzijun"},"content":"        // invalid email followed by valid phone","lastModifiedDate":"2023-10-14"},{"lineNumber":101,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC + VALID_PHONE_AMY, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":103,"author":{"gitId":"Darren159"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code","lastModifiedDate":"2023-10-30"},{"lineNumber":104,"author":{"gitId":"Darren159"},"content":"        // Person} being edited,","lastModifiedDate":"2023-10-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":106,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser, \"1\" + ALLERGY_DESC_DUST + ALLERGY_DESC_PEANUTS + ALLERGY_EMPTY,","lastModifiedDate":"2023-10-15"},{"lineNumber":107,"author":{"gitId":"Darren159"},"content":"                Allergy.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-15"},{"lineNumber":108,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser, \"1\" + ALLERGY_DESC_DUST + ALLERGY_EMPTY + ALLERGY_DESC_PEANUTS,","lastModifiedDate":"2023-10-15"},{"lineNumber":109,"author":{"gitId":"Darren159"},"content":"                Allergy.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-15"},{"lineNumber":110,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser, \"1\" + ALLERGY_EMPTY + ALLERGY_DESC_DUST + ALLERGY_DESC_PEANUTS,","lastModifiedDate":"2023-10-15"},{"lineNumber":111,"author":{"gitId":"Darren159"},"content":"                Allergy.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-15"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY","lastModifiedDate":"2023-10-14"},{"lineNumber":115,"author":{"gitId":"adammangzijun"},"content":"                + VALID_GENDER_AMY + VALID_AGE_AMY + VALID_BLOODTYPE_AMY,","lastModifiedDate":"2023-10-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":122,"author":{"gitId":"adammangzijun"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ALLERGY_DESC_DUST","lastModifiedDate":"2023-10-14"},{"lineNumber":123,"author":{"gitId":"adammangzijun"},"content":"                + EMAIL_DESC_AMY + GENDER_DESC_AMY + NAME_DESC_AMY + ALLERGY_DESC_PEANUTS","lastModifiedDate":"2023-10-14"},{"lineNumber":124,"author":{"gitId":"adammangzijun"},"content":"                + AGE_DESC_AMY + BLOODTYPE_DESC_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":127,"author":{"gitId":"adammangzijun"},"content":"                .withEmail(VALID_EMAIL_AMY).withPhone(VALID_PHONE_AMY).withGender(VALID_GENDER_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":128,"author":{"gitId":"adammangzijun"},"content":"                .withAge(VALID_AGE_AMY).withBloodType(VALID_BLOODTYPE_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":129,"author":{"gitId":"adammangzijun"},"content":"                .withAllergies(VALID_ALLERGY_DUST, VALID_ALLERGY_PEANUTS).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":138,"author":{"gitId":"adammangzijun"},"content":"        String userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY + PHONE_DESC_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":140,"author":{"gitId":"adammangzijun"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":141,"author":{"gitId":"adammangzijun"},"content":"                .withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":156,"author":{"gitId":"adammangzijun"},"content":"        // email","lastModifiedDate":"2023-10-14"},{"lineNumber":157,"author":{"gitId":"adammangzijun"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":158,"author":{"gitId":"adammangzijun"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":159,"author":{"gitId":"adammangzijun"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2023-10-14"},{"lineNumber":160,"author":{"gitId":"adammangzijun"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-10-14"},{"lineNumber":161,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":168,"author":{"gitId":"adammangzijun"},"content":"        // gender","lastModifiedDate":"2023-10-14"},{"lineNumber":169,"author":{"gitId":"adammangzijun"},"content":"        userInput \u003d targetIndex.getOneBased() + GENDER_DESC_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":170,"author":{"gitId":"adammangzijun"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withGender(VALID_GENDER_AMY).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":171,"author":{"gitId":"adammangzijun"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2023-10-14"},{"lineNumber":172,"author":{"gitId":"adammangzijun"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-10-14"},{"lineNumber":173,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":174,"author":{"gitId":"adammangzijun"},"content":"        // age","lastModifiedDate":"2023-10-14"},{"lineNumber":175,"author":{"gitId":"adammangzijun"},"content":"        userInput \u003d targetIndex.getOneBased() + AGE_DESC_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":176,"author":{"gitId":"adammangzijun"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAge(VALID_AGE_AMY).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":180,"author":{"gitId":"adammangzijun"},"content":"        // bloodType","lastModifiedDate":"2023-10-14"},{"lineNumber":181,"author":{"gitId":"adammangzijun"},"content":"        userInput \u003d targetIndex.getOneBased() + BLOODTYPE_DESC_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":182,"author":{"gitId":"adammangzijun"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withBloodType(VALID_BLOODTYPE_AMY).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":187,"author":{"gitId":"adammangzijun"},"content":"        userInput \u003d targetIndex.getOneBased() + ALLERGY_DESC_DUST;","lastModifiedDate":"2023-10-14"},{"lineNumber":188,"author":{"gitId":"adammangzijun"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAllergies(VALID_ALLERGY_DUST).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_failure() {","lastModifiedDate":"2023-07-14"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        // More extensive testing of duplicate parameter detections is done in","lastModifiedDate":"2023-07-14"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        // AddCommandParserTest#parse_repeatedNonTagValue_failure()","lastModifiedDate":"2023-07-14"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        // valid followed by invalid","lastModifiedDate":"2023-07-14"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2023-07-14"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput, Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        // invalid followed by valid","lastModifiedDate":"2023-07-14"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + INVALID_PHONE_DESC;","lastModifiedDate":"2023-07-14"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput, Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":209,"author":{"gitId":"adammangzijun"},"content":"        // multiple valid fields repeated","lastModifiedDate":"2023-10-24"},{"lineNumber":210,"author":{"gitId":"adammangzijun"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + GENDER_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2023-10-14"},{"lineNumber":211,"author":{"gitId":"Darren159"},"content":"                + ALLERGY_DESC_DUST + PHONE_DESC_AMY + GENDER_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2023-10-30"},{"lineNumber":212,"author":{"gitId":"Darren159"},"content":"                + ALLERGY_DESC_DUST","lastModifiedDate":"2023-10-30"},{"lineNumber":213,"author":{"gitId":"adammangzijun"},"content":"                + PHONE_DESC_BOB + GENDER_DESC_AMY + EMAIL_DESC_BOB + ALLERGY_DESC_PEANUTS;","lastModifiedDate":"2023-10-14"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput,","lastModifiedDate":"2023-07-14"},{"lineNumber":216,"author":{"gitId":"Darren159"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE, PREFIX_EMAIL,","lastModifiedDate":"2023-10-30"},{"lineNumber":217,"author":{"gitId":"Darren159"},"content":"                        PREFIX_GENDER));","lastModifiedDate":"2023-10-30"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        // multiple invalid values","lastModifiedDate":"2023-07-14"},{"lineNumber":220,"author":{"gitId":"adammangzijun"},"content":"        userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + INVALID_GENDER_DESC + INVALID_EMAIL_DESC","lastModifiedDate":"2023-10-14"},{"lineNumber":221,"author":{"gitId":"adammangzijun"},"content":"                + INVALID_PHONE_DESC + INVALID_GENDER_DESC + INVALID_EMAIL_DESC;","lastModifiedDate":"2023-10-14"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput,","lastModifiedDate":"2023-07-14"},{"lineNumber":224,"author":{"gitId":"Darren159"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE, PREFIX_EMAIL,","lastModifiedDate":"2023-10-30"},{"lineNumber":225,"author":{"gitId":"Darren159"},"content":"                        PREFIX_GENDER));","lastModifiedDate":"2023-10-30"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":231,"author":{"gitId":"adammangzijun"},"content":"        String userInput \u003d targetIndex.getOneBased() + ALLERGY_EMPTY;","lastModifiedDate":"2023-10-14"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":233,"author":{"gitId":"adammangzijun"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withAllergies().build();","lastModifiedDate":"2023-10-14"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"Darren159":19,"-":154,"adammangzijun":65}},{"path":"src/test/java/seedu/address/logic/parser/EditRecordCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CONDITION_DESC_DIARRHEA;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CONDITION_DESC_HEAT_STROKE;","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATETIME_DESC_SLEEP_STUDY;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATETIME_DESC_THYROID_CHECK;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_CONDITION_DESC;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATETIME_DESC;","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_MEDICATION_DESC;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MEDICATION_DESC_DIARRHEA;","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CONDITION_DIARRHEA;","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CONDITION_HEAT_STROKE;","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATETIME_SLEEP_STUDY;","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICATION_DIARRHEA;","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICATION_HEAT_STROKE;","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CONDITION;","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECORD;","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.logic.commands.EditRecordCommand;","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.record.Condition;","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.shared.DateTime;","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.testutil.EditRecordDescriptorBuilder;","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"public class EditRecordCommandParserTest {","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"    private static final String CONDITION_EMPTY \u003d \" \" + PREFIX_CONDITION;","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditRecordCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"    private EditRecordCommandParser parser \u003d new EditRecordCommandParser();","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"        // no index specified","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, VALID_DATETIME_SLEEP_STUDY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"        // no field specified","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, \"1/1\", EditRecordCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"        // no index and no field specified","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"        // negative index","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, \"-5/1\" + DATETIME_DESC_SLEEP_STUDY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"adammangzijun"},"content":"        // zero index","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, \"0/1\" + DATETIME_DESC_THYROID_CHECK, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-24"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2023-10-24"},{"lineNumber":63,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-24"},{"lineNumber":64,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2023-10-24"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-24"},{"lineNumber":67,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":68,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":69,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":70,"author":{"gitId":"adammangzijun"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2023-10-24"},{"lineNumber":71,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, \"1/1\" + INVALID_DATETIME_DESC, DateTime.MESSAGE_CONSTRAINTS); // invalid dateTime","lastModifiedDate":"2023-10-24"},{"lineNumber":72,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, \"1/1\" + INVALID_CONDITION_DESC, Condition.MESSAGE_CONSTRAINTS); // invalid condition","lastModifiedDate":"2023-10-24"},{"lineNumber":73,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":74,"author":{"gitId":"adammangzijun"},"content":"        // invalid dateTime followed by valid condition","lastModifiedDate":"2023-10-24"},{"lineNumber":75,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, \"1/1\" + INVALID_DATETIME_DESC","lastModifiedDate":"2023-10-24"},{"lineNumber":76,"author":{"gitId":"hjoneweek"},"content":"                + VALID_CONDITION_HEAT_STROKE + VALID_MEDICATION_HEAT_STROKE, DateTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-26"},{"lineNumber":77,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":78,"author":{"gitId":"adammangzijun"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2023-10-24"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2023-10-24"},{"lineNumber":80,"author":{"gitId":"hjoneweek"},"content":"        assertParseFailure(parser, \"1/1\" + CONDITION_DESC_HEAT_STROKE + CONDITION_DESC_DIARRHEA + CONDITION_EMPTY,","lastModifiedDate":"2023-10-26"},{"lineNumber":81,"author":{"gitId":"adammangzijun"},"content":"                Condition.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-24"},{"lineNumber":82,"author":{"gitId":"hjoneweek"},"content":"        assertParseFailure(parser, \"1/1\" + CONDITION_DESC_HEAT_STROKE + CONDITION_EMPTY + CONDITION_DESC_DIARRHEA,","lastModifiedDate":"2023-10-26"},{"lineNumber":83,"author":{"gitId":"adammangzijun"},"content":"                Condition.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-24"},{"lineNumber":84,"author":{"gitId":"hjoneweek"},"content":"        assertParseFailure(parser, \"1/1\" + CONDITION_EMPTY + CONDITION_DESC_HEAT_STROKE + CONDITION_DESC_DIARRHEA,","lastModifiedDate":"2023-10-26"},{"lineNumber":85,"author":{"gitId":"adammangzijun"},"content":"                Condition.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-24"},{"lineNumber":86,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":87,"author":{"gitId":"adammangzijun"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2023-10-24"},{"lineNumber":88,"author":{"gitId":"hjoneweek"},"content":"        assertParseFailure(parser, \"1/1\" + INVALID_DATETIME_DESC + INVALID_CONDITION_DESC + INVALID_MEDICATION_DESC,","lastModifiedDate":"2023-10-26"},{"lineNumber":89,"author":{"gitId":"adammangzijun"},"content":"                DateTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-24"},{"lineNumber":90,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":91,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":92,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":93,"author":{"gitId":"adammangzijun"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2023-10-24"},{"lineNumber":94,"author":{"gitId":"adammangzijun"},"content":"        Index patientIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-24"},{"lineNumber":95,"author":{"gitId":"adammangzijun"},"content":"        Index recordIndex \u003d INDEX_FIRST_RECORD;","lastModifiedDate":"2023-10-24"},{"lineNumber":96,"author":{"gitId":"adammangzijun"},"content":"        String userInput \u003d patientIndex.getOneBased() + \"/\" + recordIndex.getOneBased()","lastModifiedDate":"2023-10-24"},{"lineNumber":97,"author":{"gitId":"hjoneweek"},"content":"                + DATETIME_DESC_SLEEP_STUDY + CONDITION_DESC_DIARRHEA + MEDICATION_DESC_DIARRHEA;","lastModifiedDate":"2023-10-26"},{"lineNumber":98,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":99,"author":{"gitId":"adammangzijun"},"content":"        EditRecordCommand.EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder()","lastModifiedDate":"2023-10-24"},{"lineNumber":100,"author":{"gitId":"hjoneweek"},"content":"                .withDateTime(VALID_DATETIME_SLEEP_STUDY)","lastModifiedDate":"2023-10-26"},{"lineNumber":101,"author":{"gitId":"hjoneweek"},"content":"                .withConditions(VALID_CONDITION_DIARRHEA)","lastModifiedDate":"2023-10-26"},{"lineNumber":102,"author":{"gitId":"hjoneweek"},"content":"                .withMedications(VALID_MEDICATION_DIARRHEA).build();","lastModifiedDate":"2023-10-26"},{"lineNumber":103,"author":{"gitId":"adammangzijun"},"content":"        EditRecordCommand expectedCommand \u003d new EditRecordCommand(patientIndex, recordIndex, descriptor);","lastModifiedDate":"2023-10-24"},{"lineNumber":104,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":105,"author":{"gitId":"adammangzijun"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-10-24"},{"lineNumber":106,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":107,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":108,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":109,"author":{"gitId":"adammangzijun"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2023-10-24"},{"lineNumber":110,"author":{"gitId":"adammangzijun"},"content":"        Index patientIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-24"},{"lineNumber":111,"author":{"gitId":"adammangzijun"},"content":"        Index recordIndex \u003d INDEX_FIRST_RECORD;","lastModifiedDate":"2023-10-24"},{"lineNumber":112,"author":{"gitId":"adammangzijun"},"content":"        String userInput \u003d patientIndex.getOneBased() + \"/\" + recordIndex.getOneBased() + DATETIME_DESC_SLEEP_STUDY;","lastModifiedDate":"2023-10-24"},{"lineNumber":113,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":114,"author":{"gitId":"adammangzijun"},"content":"        EditRecordCommand.EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder()","lastModifiedDate":"2023-10-24"},{"lineNumber":115,"author":{"gitId":"adammangzijun"},"content":"                .withDateTime(VALID_DATETIME_SLEEP_STUDY).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":116,"author":{"gitId":"adammangzijun"},"content":"        EditRecordCommand expectedCommand \u003d new EditRecordCommand(patientIndex, recordIndex, descriptor);","lastModifiedDate":"2023-10-24"},{"lineNumber":117,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":118,"author":{"gitId":"adammangzijun"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-10-24"},{"lineNumber":119,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":120,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":121,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":122,"author":{"gitId":"adammangzijun"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2023-10-24"},{"lineNumber":123,"author":{"gitId":"adammangzijun"},"content":"        // dateTime","lastModifiedDate":"2023-10-24"},{"lineNumber":124,"author":{"gitId":"adammangzijun"},"content":"        Index patientIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-24"},{"lineNumber":125,"author":{"gitId":"adammangzijun"},"content":"        Index recordIndex \u003d INDEX_FIRST_RECORD;","lastModifiedDate":"2023-10-24"},{"lineNumber":126,"author":{"gitId":"adammangzijun"},"content":"        String userInput \u003d patientIndex.getOneBased() + \"/\" + recordIndex.getOneBased() + DATETIME_DESC_SLEEP_STUDY;","lastModifiedDate":"2023-10-24"},{"lineNumber":127,"author":{"gitId":"adammangzijun"},"content":"        EditRecordCommand.EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder()","lastModifiedDate":"2023-10-24"},{"lineNumber":128,"author":{"gitId":"adammangzijun"},"content":"                .withDateTime(VALID_DATETIME_SLEEP_STUDY).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":129,"author":{"gitId":"adammangzijun"},"content":"        EditRecordCommand expectedCommand \u003d new EditRecordCommand(patientIndex, recordIndex, descriptor);","lastModifiedDate":"2023-10-24"},{"lineNumber":130,"author":{"gitId":"adammangzijun"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-10-24"},{"lineNumber":131,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":132,"author":{"gitId":"adammangzijun"},"content":"        // condition","lastModifiedDate":"2023-10-24"},{"lineNumber":133,"author":{"gitId":"adammangzijun"},"content":"        userInput \u003d patientIndex.getOneBased() + \"/\" + recordIndex.getOneBased() + CONDITION_DESC_DIARRHEA;","lastModifiedDate":"2023-10-24"},{"lineNumber":134,"author":{"gitId":"adammangzijun"},"content":"        descriptor \u003d new EditRecordDescriptorBuilder().withConditions(VALID_CONDITION_DIARRHEA).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":135,"author":{"gitId":"adammangzijun"},"content":"        expectedCommand \u003d new EditRecordCommand(patientIndex, recordIndex, descriptor);","lastModifiedDate":"2023-10-24"},{"lineNumber":136,"author":{"gitId":"adammangzijun"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-10-24"},{"lineNumber":137,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":138,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":139,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":140,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":141,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":142,"author":{"gitId":"adammangzijun"},"content":"    public void parse_multipleRepeatedFields_failure() {","lastModifiedDate":"2023-10-24"},{"lineNumber":143,"author":{"gitId":"adammangzijun"},"content":"        // valid followed by invalid","lastModifiedDate":"2023-10-24"},{"lineNumber":144,"author":{"gitId":"adammangzijun"},"content":"        Index patientIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-24"},{"lineNumber":145,"author":{"gitId":"adammangzijun"},"content":"        Index recordIndex \u003d INDEX_FIRST_RECORD;","lastModifiedDate":"2023-10-24"},{"lineNumber":146,"author":{"gitId":"adammangzijun"},"content":"        String userInput \u003d patientIndex.getOneBased() + \"/\" + recordIndex.getOneBased()","lastModifiedDate":"2023-10-24"},{"lineNumber":147,"author":{"gitId":"adammangzijun"},"content":"                + INVALID_DATETIME_DESC + DATETIME_DESC_THYROID_CHECK;","lastModifiedDate":"2023-10-24"},{"lineNumber":148,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":149,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, userInput, Messages.getErrorMessageForDuplicatePrefixes(PREFIX_DATE));","lastModifiedDate":"2023-10-24"},{"lineNumber":150,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":151,"author":{"gitId":"adammangzijun"},"content":"        // invalid followed by valid","lastModifiedDate":"2023-10-24"},{"lineNumber":152,"author":{"gitId":"adammangzijun"},"content":"        userInput \u003d patientIndex.getOneBased() + \"/\" + recordIndex.getOneBased()","lastModifiedDate":"2023-10-24"},{"lineNumber":153,"author":{"gitId":"adammangzijun"},"content":"                + DATETIME_DESC_THYROID_CHECK + INVALID_DATETIME_DESC;","lastModifiedDate":"2023-10-24"},{"lineNumber":154,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":155,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, userInput, Messages.getErrorMessageForDuplicatePrefixes(PREFIX_DATE));","lastModifiedDate":"2023-10-24"},{"lineNumber":156,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":157,"author":{"gitId":"adammangzijun"},"content":"        // mulltiple valid fields repeated","lastModifiedDate":"2023-10-24"},{"lineNumber":158,"author":{"gitId":"adammangzijun"},"content":"        userInput \u003d patientIndex.getOneBased() + \"/\" + recordIndex.getOneBased()","lastModifiedDate":"2023-10-24"},{"lineNumber":159,"author":{"gitId":"adammangzijun"},"content":"                + DATETIME_DESC_THYROID_CHECK + DATETIME_DESC_SLEEP_STUDY + CONDITION_DESC_DIARRHEA","lastModifiedDate":"2023-10-24"},{"lineNumber":160,"author":{"gitId":"hjoneweek"},"content":"                + CONDITION_DESC_HEAT_STROKE;","lastModifiedDate":"2023-10-26"},{"lineNumber":161,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":162,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, userInput,","lastModifiedDate":"2023-10-24"},{"lineNumber":163,"author":{"gitId":"adammangzijun"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_DATE));","lastModifiedDate":"2023-10-24"},{"lineNumber":164,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":165,"author":{"gitId":"adammangzijun"},"content":"        // multiple invalid values","lastModifiedDate":"2023-10-24"},{"lineNumber":166,"author":{"gitId":"adammangzijun"},"content":"        userInput \u003d patientIndex.getOneBased() + \"/\" + recordIndex.getOneBased()","lastModifiedDate":"2023-10-24"},{"lineNumber":167,"author":{"gitId":"adammangzijun"},"content":"                + INVALID_DATETIME_DESC + INVALID_DATETIME_DESC + INVALID_CONDITION_DESC;","lastModifiedDate":"2023-10-24"},{"lineNumber":168,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":169,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, userInput,","lastModifiedDate":"2023-10-24"},{"lineNumber":170,"author":{"gitId":"adammangzijun"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_DATE));","lastModifiedDate":"2023-10-24"},{"lineNumber":171,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":172,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":173,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":174,"author":{"gitId":"adammangzijun"},"content":"    public void parse_resetConditions_success() {","lastModifiedDate":"2023-10-24"},{"lineNumber":175,"author":{"gitId":"adammangzijun"},"content":"        Index patientIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-24"},{"lineNumber":176,"author":{"gitId":"adammangzijun"},"content":"        Index recordIndex \u003d INDEX_FIRST_RECORD;","lastModifiedDate":"2023-10-24"},{"lineNumber":177,"author":{"gitId":"adammangzijun"},"content":"        String userInput \u003d patientIndex.getOneBased() + \"/\" + recordIndex.getOneBased() + CONDITION_EMPTY;","lastModifiedDate":"2023-10-24"},{"lineNumber":178,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":179,"author":{"gitId":"adammangzijun"},"content":"        EditRecordCommand.EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder().withConditions().build();","lastModifiedDate":"2023-10-24"},{"lineNumber":180,"author":{"gitId":"adammangzijun"},"content":"        EditRecordCommand expectedCommand \u003d new EditRecordCommand(patientIndex, recordIndex, descriptor);","lastModifiedDate":"2023-10-24"},{"lineNumber":181,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":182,"author":{"gitId":"adammangzijun"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-10-24"},{"lineNumber":183,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":184,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"hjoneweek":15,"adammangzijun":169}},{"path":"src/test/java/seedu/address/logic/parser/FindRecordCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.logic.commands.FindRecordCommand;","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.RecordContainsKeywordsPredicate;","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"public class FindRecordCommandParserTest {","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    private FindRecordCommandParser parser \u003d new FindRecordCommandParser();","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"                FindRecordCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"    public void parse_validArgs_returnsFindRecordCommand() {","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"        FindRecordCommand expectedFindRecordCommand \u003d","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"                new FindRecordCommand(new RecordContainsKeywordsPredicate(Arrays.asList(\"Tylenol\")));","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"        assertParseSuccess(parser, \"Tylenol\", expectedFindRecordCommand);","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"        assertParseSuccess(parser, \" \\n Tylenol \\n\", expectedFindRecordCommand);","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"hjoneweek":33}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2017-06-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"import java.util.List;","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Age;","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.BloodType;","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Gender;","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Condition;","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Medication;","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Name;","lastModifiedDate":"2023-10-22"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2023-10-14"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"    private static final String INVALID_GENDER \u003d \" \";","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"    private static final String INVALID_AGE \u003d \" \";","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"    private static final String INVALID_BLOODTYPE \u003d \"D\";","lastModifiedDate":"2023-10-14"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"    private static final String INVALID_ALLERGY \u003d \"#dust\";","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"    private static final String INVALID_CONDITION \u003d \"Fever*\";","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"    private static final String INVALID_MEDICATION \u003d \"Tylenol+\";","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"    private static final String VALID_GENDER \u003d \"M\";","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"    private static final int VALID_AGE \u003d 10;","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"    private static final String VALID_AGE_STRING \u003d \"10\";","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"    private static final String VALID_BLOODTYPE \u003d \"A+\";","lastModifiedDate":"2023-10-15"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"    private static final String VALID_ALLERGY_1 \u003d \"Nuts\";","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"    private static final String VALID_ALLERGY_2 \u003d \"Coconut\";","lastModifiedDate":"2023-10-14"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"    private static final String VALID_CONDITION \u003d \"Fever\";","lastModifiedDate":"2023-10-26"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"    private static final String VALID_MEDICATION \u003d \"Tylenol\";","lastModifiedDate":"2023-10-26"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":99,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":100,"author":{"gitId":"adammangzijun"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":101,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2023-10-14"},{"lineNumber":102,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":103,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":104,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":105,"author":{"gitId":"adammangzijun"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":106,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2023-10-14"},{"lineNumber":107,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":108,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":109,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":110,"author":{"gitId":"adammangzijun"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2023-10-14"},{"lineNumber":111,"author":{"gitId":"adammangzijun"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2023-10-14"},{"lineNumber":112,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2023-10-14"},{"lineNumber":113,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":114,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":115,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":116,"author":{"gitId":"adammangzijun"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2023-10-14"},{"lineNumber":117,"author":{"gitId":"adammangzijun"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2023-10-14"},{"lineNumber":118,"author":{"gitId":"adammangzijun"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2023-10-14"},{"lineNumber":119,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2023-10-14"},{"lineNumber":120,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":121,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":146,"author":{"gitId":"adammangzijun"},"content":"    public void parseGender_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":147,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGender((String) null));","lastModifiedDate":"2023-10-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"adammangzijun"},"content":"    public void parseGender_invalidValue_throwsParseException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":152,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseGender(INVALID_GENDER));","lastModifiedDate":"2023-10-14"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":156,"author":{"gitId":"adammangzijun"},"content":"    public void parseGender_validValueWithoutWhitespace_returnsGender() throws Exception {","lastModifiedDate":"2023-10-14"},{"lineNumber":157,"author":{"gitId":"adammangzijun"},"content":"        Gender expectedGender \u003d new Gender(VALID_GENDER);","lastModifiedDate":"2023-10-14"},{"lineNumber":158,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expectedGender, ParserUtil.parseGender(VALID_GENDER));","lastModifiedDate":"2023-10-14"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":162,"author":{"gitId":"adammangzijun"},"content":"    public void parseGender_validValueWithWhitespace_returnsTrimmedGender() throws Exception {","lastModifiedDate":"2023-10-14"},{"lineNumber":163,"author":{"gitId":"adammangzijun"},"content":"        String genderWithWhitespace \u003d WHITESPACE + VALID_GENDER + WHITESPACE;","lastModifiedDate":"2023-10-14"},{"lineNumber":164,"author":{"gitId":"adammangzijun"},"content":"        Gender expectedGender \u003d new Gender(VALID_GENDER);","lastModifiedDate":"2023-10-14"},{"lineNumber":165,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expectedGender, ParserUtil.parseGender(genderWithWhitespace));","lastModifiedDate":"2023-10-14"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":169,"author":{"gitId":"adammangzijun"},"content":"    public void parseAge_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":170,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAge((String) null));","lastModifiedDate":"2023-10-14"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":174,"author":{"gitId":"adammangzijun"},"content":"    public void parseAge_invalidValue_throwsParseException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":175,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAge(INVALID_AGE));","lastModifiedDate":"2023-10-14"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":179,"author":{"gitId":"adammangzijun"},"content":"    public void parseAge_validValueWithoutWhitespace_returnsAge() throws Exception {","lastModifiedDate":"2023-10-14"},{"lineNumber":180,"author":{"gitId":"adammangzijun"},"content":"        Age expectedAge \u003d new Age(VALID_AGE);","lastModifiedDate":"2023-10-14"},{"lineNumber":181,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expectedAge, ParserUtil.parseAge(VALID_AGE_STRING));","lastModifiedDate":"2023-10-14"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":185,"author":{"gitId":"adammangzijun"},"content":"    public void parseAge_validValueWithWhitespace_returnsTrimmedAge() throws Exception {","lastModifiedDate":"2023-10-14"},{"lineNumber":186,"author":{"gitId":"adammangzijun"},"content":"        String ageWithWhitespace \u003d WHITESPACE + VALID_AGE + WHITESPACE;","lastModifiedDate":"2023-10-14"},{"lineNumber":187,"author":{"gitId":"adammangzijun"},"content":"        Age expectedAge \u003d new Age(VALID_AGE);","lastModifiedDate":"2023-10-14"},{"lineNumber":188,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expectedAge, ParserUtil.parseAge(ageWithWhitespace));","lastModifiedDate":"2023-10-14"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":192,"author":{"gitId":"adammangzijun"},"content":"    public void parseBloodType_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":193,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBloodType((String) null));","lastModifiedDate":"2023-10-14"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":197,"author":{"gitId":"adammangzijun"},"content":"    public void parseBloodType_invalidValue_throwsParseException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":198,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseBloodType(INVALID_BLOODTYPE));","lastModifiedDate":"2023-10-14"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":202,"author":{"gitId":"adammangzijun"},"content":"    public void parseBloodType_validValueWithoutWhitespace_returnsBloodType() throws Exception {","lastModifiedDate":"2023-10-14"},{"lineNumber":203,"author":{"gitId":"adammangzijun"},"content":"        BloodType expectedBloodType \u003d new BloodType(VALID_BLOODTYPE);","lastModifiedDate":"2023-10-14"},{"lineNumber":204,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expectedBloodType, ParserUtil.parseBloodType(VALID_BLOODTYPE));","lastModifiedDate":"2023-10-14"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":208,"author":{"gitId":"adammangzijun"},"content":"    public void parseBloodType_validValueWithWhitespace_returnsTrimmedBloodType() throws Exception {","lastModifiedDate":"2023-10-14"},{"lineNumber":209,"author":{"gitId":"adammangzijun"},"content":"        String bloodTypeWithWhitespace \u003d WHITESPACE + VALID_BLOODTYPE + WHITESPACE;","lastModifiedDate":"2023-10-14"},{"lineNumber":210,"author":{"gitId":"adammangzijun"},"content":"        BloodType expectedBloodType \u003d new BloodType(VALID_BLOODTYPE);","lastModifiedDate":"2023-10-14"},{"lineNumber":211,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expectedBloodType, ParserUtil.parseBloodType(bloodTypeWithWhitespace));","lastModifiedDate":"2023-10-14"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":215,"author":{"gitId":"adammangzijun"},"content":"    public void parseAllergy_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":216,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAllergy(null));","lastModifiedDate":"2023-10-14"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":220,"author":{"gitId":"adammangzijun"},"content":"    public void parseAllergy_invalidValue_throwsParseException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":221,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAllergy(INVALID_ALLERGY));","lastModifiedDate":"2023-10-14"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":225,"author":{"gitId":"adammangzijun"},"content":"    public void parseAllergy_validValueWithoutWhitespace_returnsAllergy() throws Exception {","lastModifiedDate":"2023-10-14"},{"lineNumber":226,"author":{"gitId":"adammangzijun"},"content":"        Allergy expectedAllergy \u003d new Allergy(VALID_ALLERGY_1);","lastModifiedDate":"2023-10-14"},{"lineNumber":227,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expectedAllergy, ParserUtil.parseAllergy(VALID_ALLERGY_1));","lastModifiedDate":"2023-10-14"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":231,"author":{"gitId":"adammangzijun"},"content":"    public void parseAllergy_validValueWithWhitespace_returnsTrimmedAllergy() throws Exception {","lastModifiedDate":"2023-10-14"},{"lineNumber":232,"author":{"gitId":"adammangzijun"},"content":"        String allergyWithWhitespace \u003d WHITESPACE + VALID_ALLERGY_1 + WHITESPACE;","lastModifiedDate":"2023-10-14"},{"lineNumber":233,"author":{"gitId":"adammangzijun"},"content":"        Allergy expectedAllergy \u003d new Allergy(VALID_ALLERGY_1);","lastModifiedDate":"2023-10-14"},{"lineNumber":234,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expectedAllergy, ParserUtil.parseAllergy(allergyWithWhitespace));","lastModifiedDate":"2023-10-14"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":238,"author":{"gitId":"adammangzijun"},"content":"    public void parseAllergies_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":239,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAllergies(null));","lastModifiedDate":"2023-10-14"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":243,"author":{"gitId":"adammangzijun"},"content":"    public void parseAllergies_collectionWithInvalidAllergies_throwsParseException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":244,"author":{"gitId":"Darren159"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAllergies(Arrays.asList(VALID_ALLERGY_1,","lastModifiedDate":"2023-10-15"},{"lineNumber":245,"author":{"gitId":"Darren159"},"content":"                INVALID_ALLERGY)));","lastModifiedDate":"2023-10-15"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":249,"author":{"gitId":"adammangzijun"},"content":"    public void parseAllergies_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2023-10-14"},{"lineNumber":250,"author":{"gitId":"adammangzijun"},"content":"        assertTrue(ParserUtil.parseAllergies(Collections.emptyList()).isEmpty());","lastModifiedDate":"2023-10-14"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":254,"author":{"gitId":"adammangzijun"},"content":"    public void parseAllergies_collectionWithValidAllergies_returnsAllergySet() throws Exception {","lastModifiedDate":"2023-10-14"},{"lineNumber":255,"author":{"gitId":"adammangzijun"},"content":"        Set\u003cAllergy\u003e actualAllergySet \u003d ParserUtil.parseAllergies(Arrays.asList(VALID_ALLERGY_1, VALID_ALLERGY_2));","lastModifiedDate":"2023-10-14"},{"lineNumber":256,"author":{"gitId":"Darren159"},"content":"        Set\u003cAllergy\u003e expectedAllergySet \u003d new HashSet\u003cAllergy\u003e(Arrays.asList(new Allergy(VALID_ALLERGY_1),","lastModifiedDate":"2023-10-15"},{"lineNumber":257,"author":{"gitId":"Darren159"},"content":"                new Allergy(VALID_ALLERGY_2)));","lastModifiedDate":"2023-10-15"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":259,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expectedAllergySet, actualAllergySet);","lastModifiedDate":"2023-10-14"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":261,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":262,"author":{"gitId":"hjoneweek"},"content":"    public void parseCondition_validCondition_returnsCondition() throws Exception {","lastModifiedDate":"2023-10-26"},{"lineNumber":263,"author":{"gitId":"hjoneweek"},"content":"        Condition expectedCondition \u003d new Condition(VALID_CONDITION);","lastModifiedDate":"2023-10-26"},{"lineNumber":264,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(expectedCondition, ParserUtil.parseCondition(VALID_CONDITION));","lastModifiedDate":"2023-10-26"},{"lineNumber":265,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":266,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":267,"author":{"gitId":"hjoneweek"},"content":"    public void parseCondition_validValueWithWhitespace_returnsTrimmedCondition() throws Exception {","lastModifiedDate":"2023-10-26"},{"lineNumber":268,"author":{"gitId":"hjoneweek"},"content":"        String conditionWithWhitespace \u003d WHITESPACE + VALID_CONDITION + WHITESPACE;","lastModifiedDate":"2023-10-26"},{"lineNumber":269,"author":{"gitId":"hjoneweek"},"content":"        Condition expectedCondition \u003d new Condition(VALID_CONDITION);","lastModifiedDate":"2023-10-26"},{"lineNumber":270,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(expectedCondition, ParserUtil.parseCondition(conditionWithWhitespace));","lastModifiedDate":"2023-10-26"},{"lineNumber":271,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":272,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":273,"author":{"gitId":"hjoneweek"},"content":"    public void parseCondition_withInvalidCondition_throwsParseException() {","lastModifiedDate":"2023-10-26"},{"lineNumber":274,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCondition(INVALID_CONDITION));","lastModifiedDate":"2023-10-26"},{"lineNumber":275,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":276,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":277,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":278,"author":{"gitId":"hjoneweek"},"content":"    public void parseMedication_validMedication_returnsMedication() throws Exception {","lastModifiedDate":"2023-10-26"},{"lineNumber":279,"author":{"gitId":"hjoneweek"},"content":"        Medication expectedMedication \u003d new Medication(VALID_MEDICATION);","lastModifiedDate":"2023-10-26"},{"lineNumber":280,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(expectedMedication, ParserUtil.parseMedication(VALID_MEDICATION));","lastModifiedDate":"2023-10-26"},{"lineNumber":281,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":282,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":283,"author":{"gitId":"hjoneweek"},"content":"    public void parseCondition_withNullCondition_throwsParseException() {","lastModifiedDate":"2023-10-26"},{"lineNumber":284,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCondition(null));","lastModifiedDate":"2023-10-26"},{"lineNumber":285,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":286,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":287,"author":{"gitId":"hjoneweek"},"content":"    public void parseConditions_listWithValidConditions_returnsConditionsList() throws Exception {","lastModifiedDate":"2023-10-26"},{"lineNumber":288,"author":{"gitId":"hjoneweek"},"content":"        List\u003cCondition\u003e conditionList \u003d ParserUtil.parseConditions(Arrays.asList(VALID_CONDITION));","lastModifiedDate":"2023-10-26"},{"lineNumber":289,"author":{"gitId":"hjoneweek"},"content":"        List\u003cCondition\u003e expectedConditionList \u003d new ArrayList\u003c\u003e(Arrays.asList(new Condition(VALID_CONDITION)));","lastModifiedDate":"2023-10-26"},{"lineNumber":290,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":291,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(expectedConditionList, conditionList);","lastModifiedDate":"2023-10-26"},{"lineNumber":292,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":293,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":294,"author":{"gitId":"hjoneweek"},"content":"    public void parseConditions_listWithInvalidCondition_throwsParseException() {","lastModifiedDate":"2023-10-26"},{"lineNumber":295,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseConditions(Arrays.asList(VALID_CONDITION,","lastModifiedDate":"2023-10-26"},{"lineNumber":296,"author":{"gitId":"hjoneweek"},"content":"                INVALID_CONDITION)));","lastModifiedDate":"2023-10-26"},{"lineNumber":297,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":298,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":299,"author":{"gitId":"hjoneweek"},"content":"    public void parseMedication_validValueWithWhitespace_returnsTrimmedMedication() throws Exception {","lastModifiedDate":"2023-10-26"},{"lineNumber":300,"author":{"gitId":"hjoneweek"},"content":"        String medicationWithWhitespace \u003d WHITESPACE + VALID_MEDICATION + WHITESPACE;","lastModifiedDate":"2023-10-26"},{"lineNumber":301,"author":{"gitId":"hjoneweek"},"content":"        Medication expectedMedication \u003d new Medication(VALID_MEDICATION);","lastModifiedDate":"2023-10-26"},{"lineNumber":302,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(expectedMedication, ParserUtil.parseMedication(medicationWithWhitespace));","lastModifiedDate":"2023-10-26"},{"lineNumber":303,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":304,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":305,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":306,"author":{"gitId":"hjoneweek"},"content":"    public void parseMedication_withInvalidMedication_throwsParseException() {","lastModifiedDate":"2023-10-26"},{"lineNumber":307,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMedication(INVALID_MEDICATION));","lastModifiedDate":"2023-10-26"},{"lineNumber":308,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":309,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":310,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":311,"author":{"gitId":"hjoneweek"},"content":"    public void parseMedication_withNullMedication_throwsParseException() {","lastModifiedDate":"2023-10-26"},{"lineNumber":312,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMedication(null));","lastModifiedDate":"2023-10-26"},{"lineNumber":313,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":314,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":315,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":316,"author":{"gitId":"hjoneweek"},"content":"    public void parseMedications_listWithValidMedications_returnsMedicationsList() throws Exception {","lastModifiedDate":"2023-10-26"},{"lineNumber":317,"author":{"gitId":"hjoneweek"},"content":"        List\u003cMedication\u003e medicationList \u003d ParserUtil.parseMedications(Arrays.asList(VALID_MEDICATION));","lastModifiedDate":"2023-10-26"},{"lineNumber":318,"author":{"gitId":"hjoneweek"},"content":"        List\u003cMedication\u003e expectedMedicationList \u003d new ArrayList\u003c\u003e(Arrays.asList(new Medication(VALID_MEDICATION)));","lastModifiedDate":"2023-10-26"},{"lineNumber":319,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":320,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(expectedMedicationList, medicationList);","lastModifiedDate":"2023-10-26"},{"lineNumber":321,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":322,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":323,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":324,"author":{"gitId":"hjoneweek"},"content":"    public void parseMedications_listWithInvalidMedications_throwsParseException() {","lastModifiedDate":"2023-10-26"},{"lineNumber":325,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMedications(Arrays.asList(VALID_MEDICATION,","lastModifiedDate":"2023-10-26"},{"lineNumber":326,"author":{"gitId":"hjoneweek"},"content":"                INVALID_MEDICATION)));","lastModifiedDate":"2023-10-26"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":328,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"hjoneweek":75,"Darren159":6,"-":156,"adammangzijun":91}},{"path":"src/test/java/seedu/address/logic/parser/PinCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-14"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.PinCommand;","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":" * outside of the PinCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":" * same path through the PinCommand, and therefore we test only one of them.","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"public class PinCommandParserTest {","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"    private PinCommandParser parser \u003d new PinCommandParser();","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"    public void parse_validArgs_returnsPinCommand() {","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"        assertParseSuccess(parser, \"1\", new PinCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, PinCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-14"}],"authorContributionMap":{"Darren159":32}},{"path":"src/test/java/seedu/address/logic/parser/UnpinCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-14"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.UnpinCommand;","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":" * outside of the UnpinCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":" * same path through the UnpinCommand, and therefore we test only one of them.","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"public class UnpinCommandParserTest {","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"    private UnpinCommandParser parser \u003d new UnpinCommandParser();","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"    public void parse_validArgs_returnsUnpinCommand() {","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"        assertParseSuccess(parser, \"1\", new UnpinCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnpinCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-14"}],"authorContributionMap":{"Darren159":32}},{"path":"src/test/java/seedu/address/logic/parser/ViewCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Clin-lyx"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-22"},{"lineNumber":2,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":3,"author":{"gitId":"Clin-lyx"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-22"},{"lineNumber":4,"author":{"gitId":"Clin-lyx"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-22"},{"lineNumber":5,"author":{"gitId":"Clin-lyx"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-22"},{"lineNumber":6,"author":{"gitId":"Clin-lyx"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-22"},{"lineNumber":7,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":8,"author":{"gitId":"Clin-lyx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-22"},{"lineNumber":9,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":10,"author":{"gitId":"Clin-lyx"},"content":"import seedu.address.logic.commands.ViewCommand;","lastModifiedDate":"2023-10-22"},{"lineNumber":11,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":12,"author":{"gitId":"Clin-lyx"},"content":"public class ViewCommandParserTest {","lastModifiedDate":"2023-10-22"},{"lineNumber":13,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":14,"author":{"gitId":"Clin-lyx"},"content":"    private ViewCommandParser parser \u003d new ViewCommandParser();","lastModifiedDate":"2023-10-22"},{"lineNumber":15,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":16,"author":{"gitId":"Clin-lyx"},"content":"    @Test","lastModifiedDate":"2023-10-22"},{"lineNumber":17,"author":{"gitId":"Clin-lyx"},"content":"    public void parser_validArgs_returnViewCommand() {","lastModifiedDate":"2023-10-22"},{"lineNumber":18,"author":{"gitId":"Clin-lyx"},"content":"        assertParseSuccess(parser, \"1\", new ViewCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2023-10-22"},{"lineNumber":19,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-22"},{"lineNumber":20,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":21,"author":{"gitId":"Clin-lyx"},"content":"    @Test","lastModifiedDate":"2023-10-22"},{"lineNumber":22,"author":{"gitId":"Clin-lyx"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2023-10-22"},{"lineNumber":23,"author":{"gitId":"Clin-lyx"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-22"},{"lineNumber":24,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-10-22"},{"lineNumber":25,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":26,"author":{"gitId":"Clin-lyx"},"content":"}","lastModifiedDate":"2023-10-22"}],"authorContributionMap":{"Clin-lyx":26}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_PEANUTS;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"Clin-lyx"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-11-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE)","lastModifiedDate":"2023-10-14"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"                .withGender(VALID_GENDER_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"                .withAllergies(VALID_ALLERGY_PEANUTS)","lastModifiedDate":"2023-10-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);","lastModifiedDate":"2018-03-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE)","lastModifiedDate":"2023-10-14"},{"lineNumber":80,"author":{"gitId":"adammangzijun"},"content":"                .withGender(VALID_GENDER_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":81,"author":{"gitId":"adammangzijun"},"content":"                .withAllergies(VALID_ALLERGY_PEANUTS)","lastModifiedDate":"2023-10-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String expected \u003d AddressBook.class.getCanonicalName() + \"{persons\u003d\" + addressBook.getPersonList() + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertEquals(expected, addressBook.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":97,"author":{"gitId":"Clin-lyx"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":98,"author":{"gitId":"Clin-lyx"},"content":"    public void indexUpdated() {","lastModifiedDate":"2023-11-08"},{"lineNumber":99,"author":{"gitId":"Clin-lyx"},"content":"        this.addressBook.setRecords(ALICE, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-11-08"},{"lineNumber":100,"author":{"gitId":"Clin-lyx"},"content":"        assertEquals(INDEX_FIRST_PERSON, this.addressBook.getPatientIndex().get(0));","lastModifiedDate":"2023-11-08"},{"lineNumber":101,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":102,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":103,"author":{"gitId":"Clin-lyx"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":104,"author":{"gitId":"Clin-lyx"},"content":"    void correctSizeOfIndexZero() {","lastModifiedDate":"2023-11-08"},{"lineNumber":105,"author":{"gitId":"Clin-lyx"},"content":"        assertEquals(0, this.addressBook.getPatientIndex().size());","lastModifiedDate":"2023-11-08"},{"lineNumber":106,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":107,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":108,"author":{"gitId":"Clin-lyx"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":109,"author":{"gitId":"Clin-lyx"},"content":"    void correctSizeOfIndexOne() {","lastModifiedDate":"2023-11-08"},{"lineNumber":110,"author":{"gitId":"Clin-lyx"},"content":"        this.addressBook.setRecords(ALICE, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-11-08"},{"lineNumber":111,"author":{"gitId":"Clin-lyx"},"content":"        assertEquals(1, this.addressBook.getPatientIndex().size());","lastModifiedDate":"2023-11-08"},{"lineNumber":112,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":113,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":115,"author":{"gitId":"Darren159"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface","lastModifiedDate":"2023-11-01"},{"lineNumber":116,"author":{"gitId":"Darren159"},"content":"     * constraints.","lastModifiedDate":"2023-11-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2018-03-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"Darren159":3,"Clin-lyx":18,"-":103,"adammangzijun":7}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2017-05-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"Clin-lyx"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2023-11-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":97,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":98,"author":{"gitId":"Darren159"},"content":"    public void getFilteredAppointmentList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":99,"author":{"gitId":"Darren159"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredAppointmentList().remove(0));","lastModifiedDate":"2023-11-01"},{"lineNumber":100,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":101,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":102,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":103,"author":{"gitId":"Darren159"},"content":"    public void getPinnedPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":104,"author":{"gitId":"Darren159"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getPinnedPersonList().remove(0));","lastModifiedDate":"2023-10-14"},{"lineNumber":105,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":106,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":107,"author":{"gitId":"Clin-lyx"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":108,"author":{"gitId":"Clin-lyx"},"content":"    public void nonNullArray() {","lastModifiedDate":"2023-11-08"},{"lineNumber":109,"author":{"gitId":"Clin-lyx"},"content":"        assertNotNull(modelManager.getPatientIndex());","lastModifiedDate":"2023-11-08"},{"lineNumber":110,"author":{"gitId":"Clin-lyx"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":111,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2017-07-19"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2018-08-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2017-05-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));","lastModifiedDate":"2018-11-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"Darren159":10,"Clin-lyx":6,"-":132}},{"path":"src/test/java/seedu/address/model/appointment/AppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_SLEEP_STUDY;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalAppointments.EYE_EXAM;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalAppointments.SLEEP_STUDY;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import seedu.address.testutil.AppointmentBuilder;","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"public class AppointmentTest {","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"    public void equals() {","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"        assertTrue(EYE_EXAM.equals(EYE_EXAM));","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"        assertFalse(EYE_EXAM.equals(null));","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"        // different name, same date -\u003e returns false","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"        Appointment editedEyeExam \u003d new AppointmentBuilder(EYE_EXAM).withName(VALID_NAME_SLEEP_STUDY).build();","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"        assertFalse(EYE_EXAM.equals(editedEyeExam));","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"        // name differs in case, same date -\u003e returns false","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"        Appointment editedSleepStudy \u003d new AppointmentBuilder(SLEEP_STUDY).withName(VALID_NAME_SLEEP_STUDY","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"                .toLowerCase()).build();","lastModifiedDate":"2023-10-19"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"        assertFalse(SLEEP_STUDY.equals(editedSleepStudy));","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2023-10-19"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_SLEEP_STUDY + \" \";","lastModifiedDate":"2023-10-19"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"        editedSleepStudy \u003d new AppointmentBuilder(SLEEP_STUDY).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2023-10-19"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"        assertFalse(SLEEP_STUDY.equals(editedSleepStudy));","lastModifiedDate":"2023-10-19"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"        // different date, same name -\u003e returns false","lastModifiedDate":"2023-10-19"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"        editedSleepStudy \u003d new AppointmentBuilder(SLEEP_STUDY).withDateTime(\"01-01-2001 1200\").build();","lastModifiedDate":"2023-10-19"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"        assertFalse(SLEEP_STUDY.equals(editedSleepStudy));","lastModifiedDate":"2023-10-19"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-19"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"        Appointment eyeExamCopy \u003d new AppointmentBuilder(EYE_EXAM).build();","lastModifiedDate":"2023-10-19"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"        assertTrue(EYE_EXAM.equals(eyeExamCopy));","lastModifiedDate":"2023-10-19"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2023-10-19"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"        assertFalse(EYE_EXAM.equals(5));","lastModifiedDate":"2023-10-19"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"        // different Appointment -\u003e returns false","lastModifiedDate":"2023-10-19"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"        assertFalse(EYE_EXAM.equals(SLEEP_STUDY));","lastModifiedDate":"2023-10-19"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-19"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"        String expected \u003d Appointment.class.getCanonicalName() + \"{name\u003d\" + EYE_EXAM.getName()","lastModifiedDate":"2023-10-19"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"                + \", dateTime\u003d\" + EYE_EXAM.getDateTime() + \", nric\u003d\" + EYE_EXAM.getNric()","lastModifiedDate":"2023-11-01"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"                + \"}\";","lastModifiedDate":"2023-10-19"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"        assertEquals(expected, EYE_EXAM.toString());","lastModifiedDate":"2023-10-19"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"Darren159":60}},{"path":"src/test/java/seedu/address/model/appointment/UniqueAppointmentListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalAppointments.EYE_EXAM;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalAppointments.SLEEP_STUDY;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import java.util.Collections;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import java.util.List;","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"public class UniqueAppointmentListTest {","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"    private final UniqueAppointmentList uniqueAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"    public void contains_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.contains(null));","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"    public void contains_appointmentNotInList_returnsFalse() {","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"        assertFalse(uniqueAppointmentList.contains(EYE_EXAM));","lastModifiedDate":"2023-10-19"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"    public void contains_appointmentInList_returnsTrue() {","lastModifiedDate":"2023-10-19"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"        uniqueAppointmentList.add(EYE_EXAM);","lastModifiedDate":"2023-10-19"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"        assertTrue(uniqueAppointmentList.contains(EYE_EXAM));","lastModifiedDate":"2023-10-19"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"    public void add_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.add(null));","lastModifiedDate":"2023-10-19"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"    public void add_duplicateAppointment_throwsDuplicateappointmentException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"        uniqueAppointmentList.add(EYE_EXAM);","lastModifiedDate":"2023-10-19"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"        assertThrows(DuplicateAppointmentException.class, () -\u003e uniqueAppointmentList.add(EYE_EXAM));","lastModifiedDate":"2023-10-19"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"    public void setAppointment_nullTargetAppointment_throwsNullPointerException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.setAppointment(null, EYE_EXAM));","lastModifiedDate":"2023-10-19"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"    public void setAppointment_nullEditedAppointment_throwsNullPointerException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.setAppointment(EYE_EXAM, null));","lastModifiedDate":"2023-10-19"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"    public void setAppointment_targetAppointmentNotInList_throwsappointmentNotFoundException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"        assertThrows(AppointmentNotFoundException.class, () -\u003e uniqueAppointmentList","lastModifiedDate":"2023-10-19"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"                .setAppointment(EYE_EXAM, EYE_EXAM));","lastModifiedDate":"2023-10-19"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"    public void setAppointment_editedAppointmentIsSameappointment_success() {","lastModifiedDate":"2023-10-19"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"        uniqueAppointmentList.add(EYE_EXAM);","lastModifiedDate":"2023-10-19"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"        uniqueAppointmentList.setAppointment(EYE_EXAM, EYE_EXAM);","lastModifiedDate":"2023-10-19"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2023-10-19"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"        expectedUniqueAppointmentList.add(EYE_EXAM);","lastModifiedDate":"2023-10-19"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);","lastModifiedDate":"2023-10-19"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":75,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":76,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":77,"author":{"gitId":"Darren159"},"content":"    public void setAppointment_editedAppointmentHasNonUniqueIdentity_throwsDuplicateappointmentException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":78,"author":{"gitId":"Darren159"},"content":"        uniqueAppointmentList.add(EYE_EXAM);","lastModifiedDate":"2023-10-19"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"        uniqueAppointmentList.add(SLEEP_STUDY);","lastModifiedDate":"2023-10-19"},{"lineNumber":80,"author":{"gitId":"Darren159"},"content":"        assertThrows(DuplicateAppointmentException.class, () -\u003e","lastModifiedDate":"2023-10-19"},{"lineNumber":81,"author":{"gitId":"Darren159"},"content":"                uniqueAppointmentList.setAppointment(EYE_EXAM, SLEEP_STUDY));","lastModifiedDate":"2023-10-19"},{"lineNumber":82,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":83,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":84,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":85,"author":{"gitId":"Darren159"},"content":"    public void remove_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":86,"author":{"gitId":"Darren159"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.remove(null));","lastModifiedDate":"2023-10-19"},{"lineNumber":87,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":88,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":89,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":90,"author":{"gitId":"Darren159"},"content":"    public void remove_appointmentDoesNotExist_throwsappointmentNotFoundException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":91,"author":{"gitId":"Darren159"},"content":"        assertThrows(AppointmentNotFoundException.class, () -\u003e uniqueAppointmentList.remove(EYE_EXAM));","lastModifiedDate":"2023-10-19"},{"lineNumber":92,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":93,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":94,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":95,"author":{"gitId":"Darren159"},"content":"    public void remove_existingappointment_removesappointment() {","lastModifiedDate":"2023-10-19"},{"lineNumber":96,"author":{"gitId":"Darren159"},"content":"        uniqueAppointmentList.add(EYE_EXAM);","lastModifiedDate":"2023-10-19"},{"lineNumber":97,"author":{"gitId":"Darren159"},"content":"        uniqueAppointmentList.remove(EYE_EXAM);","lastModifiedDate":"2023-10-19"},{"lineNumber":98,"author":{"gitId":"Darren159"},"content":"        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2023-10-19"},{"lineNumber":99,"author":{"gitId":"Darren159"},"content":"        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);","lastModifiedDate":"2023-10-19"},{"lineNumber":100,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":101,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":102,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":103,"author":{"gitId":"Darren159"},"content":"    public void setAppointments_nullUniqueAppointmentList_throwsNullPointerException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":104,"author":{"gitId":"Darren159"},"content":"        assertThrows(NullPointerException.class, () -\u003e","lastModifiedDate":"2023-10-19"},{"lineNumber":105,"author":{"gitId":"Darren159"},"content":"                uniqueAppointmentList.setAppointments((UniqueAppointmentList) null));","lastModifiedDate":"2023-10-19"},{"lineNumber":106,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":107,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":108,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":109,"author":{"gitId":"Darren159"},"content":"    public void setAppointments_uniqueAppointmentList_replacesOwnListWithProvidedUniqueAppointmentList() {","lastModifiedDate":"2023-10-19"},{"lineNumber":110,"author":{"gitId":"Darren159"},"content":"        uniqueAppointmentList.add(EYE_EXAM);","lastModifiedDate":"2023-10-19"},{"lineNumber":111,"author":{"gitId":"Darren159"},"content":"        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2023-10-19"},{"lineNumber":112,"author":{"gitId":"Darren159"},"content":"        expectedUniqueAppointmentList.add(SLEEP_STUDY);","lastModifiedDate":"2023-10-19"},{"lineNumber":113,"author":{"gitId":"Darren159"},"content":"        uniqueAppointmentList.setAppointments(expectedUniqueAppointmentList);","lastModifiedDate":"2023-10-19"},{"lineNumber":114,"author":{"gitId":"Darren159"},"content":"        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);","lastModifiedDate":"2023-10-19"},{"lineNumber":115,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":116,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":117,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":118,"author":{"gitId":"Darren159"},"content":"    public void setAppointments_nullList_throwsNullPointerException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":119,"author":{"gitId":"Darren159"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.setAppointments((List\u003cAppointment\u003e) null));","lastModifiedDate":"2023-10-19"},{"lineNumber":120,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":121,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":122,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":123,"author":{"gitId":"Darren159"},"content":"    public void setappointments_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2023-10-19"},{"lineNumber":124,"author":{"gitId":"Darren159"},"content":"        uniqueAppointmentList.add(EYE_EXAM);","lastModifiedDate":"2023-10-19"},{"lineNumber":125,"author":{"gitId":"Darren159"},"content":"        List\u003cAppointment\u003e appointmentList \u003d Collections.singletonList(SLEEP_STUDY);","lastModifiedDate":"2023-10-19"},{"lineNumber":126,"author":{"gitId":"Darren159"},"content":"        uniqueAppointmentList.setAppointments(appointmentList);","lastModifiedDate":"2023-10-19"},{"lineNumber":127,"author":{"gitId":"Darren159"},"content":"        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2023-10-19"},{"lineNumber":128,"author":{"gitId":"Darren159"},"content":"        expectedUniqueAppointmentList.add(SLEEP_STUDY);","lastModifiedDate":"2023-10-19"},{"lineNumber":129,"author":{"gitId":"Darren159"},"content":"        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);","lastModifiedDate":"2023-10-19"},{"lineNumber":130,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":131,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":132,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":133,"author":{"gitId":"Darren159"},"content":"    public void setappointments_listWithDuplicateappointments_throwsDuplicateappointmentException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":134,"author":{"gitId":"Darren159"},"content":"        List\u003cAppointment\u003e listWithDuplicateappointments \u003d Arrays.asList(EYE_EXAM, EYE_EXAM);","lastModifiedDate":"2023-10-19"},{"lineNumber":135,"author":{"gitId":"Darren159"},"content":"        assertThrows(DuplicateAppointmentException.class, () -\u003e","lastModifiedDate":"2023-10-19"},{"lineNumber":136,"author":{"gitId":"Darren159"},"content":"                uniqueAppointmentList.setAppointments(listWithDuplicateappointments));","lastModifiedDate":"2023-10-19"},{"lineNumber":137,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":138,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":139,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":140,"author":{"gitId":"Darren159"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":141,"author":{"gitId":"Darren159"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2023-10-19"},{"lineNumber":142,"author":{"gitId":"Darren159"},"content":"            -\u003e uniqueAppointmentList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2023-10-19"},{"lineNumber":143,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":144,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":145,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":146,"author":{"gitId":"Darren159"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-19"},{"lineNumber":147,"author":{"gitId":"Darren159"},"content":"        assertEquals(uniqueAppointmentList.asUnmodifiableObservableList().toString(), uniqueAppointmentList.toString());","lastModifiedDate":"2023-10-19"},{"lineNumber":148,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":149,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"Darren159":149}},{"path":"src/test/java/seedu/address/model/person/AgeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.shared.Name;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"public class AgeTest {","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Age(null));","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    public void constructor_invalidAge_throwsIllegalArgumentException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"        Integer invalidAge \u003d -1;","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Age(invalidAge));","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    public void isValidAge() {","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"        // null tag name","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(NullPointerException.class, () -\u003e Age.isValidAge(null));","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    public void equals() {","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"        Age age \u003d new Age(18);","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(age.equals(age));","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(age.equals(new Age(18)));","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(age.equals(new Age(20)));","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(age.equals(new Name(\"Alice Pauline\")));","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"hjoneweek":39}},{"path":"src/test/java/seedu/address/model/person/AllergyTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanongwx"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.shared.Name;","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":11,"author":{"gitId":"ryanongwx"},"content":"public class AllergyTest {","lastModifiedDate":"2023-10-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"ryanongwx"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Allergy(null));","lastModifiedDate":"2023-10-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        String invalidTagName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"ryanongwx"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Allergy(invalidTagName));","lastModifiedDate":"2023-10-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void isValidTagName() {","lastModifiedDate":"2017-12-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // null tag name","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"ryanongwx"},"content":"        assertThrows(NullPointerException.class, () -\u003e Allergy.isValidAllergy(null));","lastModifiedDate":"2023-10-17"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    public void equals() {","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"        Allergy allergy \u003d new Allergy(\"Peanut\");","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(allergy.equals(allergy));","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(allergy.equals(new Allergy(\"Peanut\")));","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(allergy.equals(new Allergy(\"Dust\")));","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(allergy.equals(new Name(\"Alice Pauline\")));","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-12-04"}],"authorContributionMap":{"hjoneweek":13,"ryanongwx":5,"-":21}},{"path":"src/test/java/seedu/address/model/person/BloodTypeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.shared.Name;","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"public class BloodTypeTest {","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(NullPointerException.class, () -\u003e new BloodType(null));","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    public void constructor_invalidAge_throwsIllegalArgumentException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"        String invalidBloodType \u003d \"C\";","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new BloodType(invalidBloodType));","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    public void isValidBloodType() {","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"        // null tag name","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(NullPointerException.class, () -\u003e BloodType.isValidBloodType(null));","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    public void equals() {","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"        BloodType bt \u003d new BloodType(\"AB+\");","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(bt.equals(bt));","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(bt.equals(new BloodType(\"AB+\")));","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(bt.equals(new BloodType(\"AB-\")));","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(bt.equals(new Name(\"Alice Pauline\")));","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"hjoneweek":38}},{"path":"src/test/java/seedu/address/model/person/GenderTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.shared.Name;","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"public class GenderTest {","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Gender(null));","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    public void constructor_invalidAge_throwsIllegalArgumentException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"        String invalidGender \u003d \"C\";","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Gender(invalidGender));","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    public void isValidGender() {","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"        // null tag name","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(NullPointerException.class, () -\u003e Gender.isValidGender(null));","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"    public void equals() {","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"        Gender gender \u003d new Gender(\"M\");","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(gender.equals(gender));","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(gender.equals(new Gender(\"M\")));","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(gender.equals(new Gender(\"F\")));","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(gender.equals(new Name(\"Alice Pauline\")));","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"hjoneweek":37}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":43,"author":{"gitId":"ryanongwx"},"content":"    public void test_fieldsContainsKeywords_returnsTrue() {","lastModifiedDate":"2023-10-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":62,"author":{"gitId":"ryanongwx"},"content":"    public void test_fieldsDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2023-10-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"adammangzijun"},"content":"        // Keywords match phone, email and gender, but does not match name","lastModifiedDate":"2023-10-14"},{"lineNumber":72,"author":{"gitId":"ryanongwx"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"qewr\", \"qewr@email.com\", \"qewr\", \"qwer\"));","lastModifiedDate":"2023-10-17"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"adammangzijun"},"content":"                .withEmail(\"alice@email.com\").withGender(\"F\").build()));","lastModifiedDate":"2023-10-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d List.of(\"keyword1\", \"keyword2\");","lastModifiedDate":"2019-02-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(keywords);","lastModifiedDate":"2019-02-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String expected \u003d NameContainsKeywordsPredicate.class.getCanonicalName() + \"{keywords\u003d\" + keywords + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertEquals(expected, predicate.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"-":80,"ryanongwx":3,"adammangzijun":2}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_PEANUTS;","lastModifiedDate":"2023-10-15"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2023-10-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-04-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-03-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2018-03-26"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getAllergies().remove(0));","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"        // same nric, all other attributes different -\u003e returns true","lastModifiedDate":"2023-10-30"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"                .withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"                .withGender(VALID_GENDER_BOB).withAge(VALID_AGE_BOB).withBloodType(VALID_BLOODTYPE_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"                .withAllergies(VALID_ALLERGY_PEANUTS).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"        // different nric, all other attributes same -\u003e returns false","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withNric(VALID_NRIC_BOB).build();","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"        // name differs in case, all other attributes same -\u003e returns true","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withNric(VALID_NRIC_BOB.toLowerCase()).build();","lastModifiedDate":"2023-10-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"adammangzijun"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":77,"author":{"gitId":"adammangzijun"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":78,"author":{"gitId":"adammangzijun"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2023-10-14"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"adammangzijun"},"content":"        // different gender -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":85,"author":{"gitId":"adammangzijun"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withGender(VALID_GENDER_BOB).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":86,"author":{"gitId":"adammangzijun"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2023-10-14"},{"lineNumber":87,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":88,"author":{"gitId":"adammangzijun"},"content":"        // different age -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":89,"author":{"gitId":"adammangzijun"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAge(VALID_AGE_BOB).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":92,"author":{"gitId":"adammangzijun"},"content":"        // different bloodType -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":93,"author":{"gitId":"adammangzijun"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withBloodType(VALID_BLOODTYPE_BOB).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":96,"author":{"gitId":"adammangzijun"},"content":"        // different allergies -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":97,"author":{"gitId":"adammangzijun"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAllergies(VALID_ALLERGY_PEANUTS).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":103,"author":{"gitId":"adammangzijun"},"content":"        String expected \u003d Person.class.getCanonicalName() + \"{name\u003d\" + ALICE.getName()","lastModifiedDate":"2023-10-14"},{"lineNumber":104,"author":{"gitId":"Darren159"},"content":"                + \", nric\u003d\" + ALICE.getNric()","lastModifiedDate":"2023-10-30"},{"lineNumber":105,"author":{"gitId":"adammangzijun"},"content":"                + \", email\u003d\" + ALICE.getEmail()","lastModifiedDate":"2023-10-14"},{"lineNumber":106,"author":{"gitId":"adammangzijun"},"content":"                + \", phone\u003d\" + ALICE.getPhone()","lastModifiedDate":"2023-10-14"},{"lineNumber":107,"author":{"gitId":"adammangzijun"},"content":"                + \", gender\u003d\" + ALICE.getGender()","lastModifiedDate":"2023-10-14"},{"lineNumber":108,"author":{"gitId":"adammangzijun"},"content":"                + \", age\u003d\" + ALICE.getAge()","lastModifiedDate":"2023-10-14"},{"lineNumber":109,"author":{"gitId":"adammangzijun"},"content":"                + \", bloodType\u003d\" + ALICE.getBloodType()","lastModifiedDate":"2023-10-14"},{"lineNumber":110,"author":{"gitId":"adammangzijun"},"content":"                + \", allergies\u003d\" + ALICE.getAllergies()","lastModifiedDate":"2023-10-14"},{"lineNumber":111,"author":{"gitId":"hjoneweek"},"content":"                + \", records\u003d\" + ALICE.getRecords()","lastModifiedDate":"2023-10-19"},{"lineNumber":112,"author":{"gitId":"Darren159"},"content":"                + \", appointments\u003d\" + ALICE.getAppointments()","lastModifiedDate":"2023-10-19"},{"lineNumber":113,"author":{"gitId":"Darren159"},"content":"                + \", isPinned\u003d\" + ALICE.isPinned()","lastModifiedDate":"2023-10-30"},{"lineNumber":114,"author":{"gitId":"adammangzijun"},"content":"                + \"}\";","lastModifiedDate":"2023-10-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertEquals(expected, ALICE.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"Darren159":15,"hjoneweek":1,"-":76,"adammangzijun":25}},{"path":"src/test/java/seedu/address/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-08-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_PEANUTS;","lastModifiedDate":"2023-10-15"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withGender(VALID_GENDER_BOB).withAllergies(VALID_ALLERGY_PEANUTS)","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));","lastModifiedDate":"2019-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"adammangzijun"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE)","lastModifiedDate":"2023-10-14"},{"lineNumber":89,"author":{"gitId":"adammangzijun"},"content":"                .withGender(VALID_GENDER_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":90,"author":{"gitId":"adammangzijun"},"content":"                .withAllergies(VALID_ALLERGY_PEANUTS)","lastModifiedDate":"2023-10-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));","lastModifiedDate":"2019-03-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));","lastModifiedDate":"2019-03-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-24"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-24"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-24"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        assertEquals(uniquePersonList.asUnmodifiableObservableList().toString(), uniquePersonList.toString());","lastModifiedDate":"2019-02-24"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-24"},{"lineNumber":177,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"Darren159":2,"-":171,"adammangzijun":4}},{"path":"src/test/java/seedu/address/model/record/ConditionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.model.record;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.shared.Name;","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"public class ConditionTest {","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Condition(null));","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    public void isValidCondition_success() {","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"        String validCondition \u003d \"Allergic reaction\";","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(Condition.isValidCondition(validCondition));","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"    public void isValidCondtion_failure() {","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"        String inValidCondition \u003d \"\";","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(Condition.isValidCondition(inValidCondition));","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"    public void isValidCondtion_failure2() {","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"        String inValidCondition \u003d \"Fever+\";","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(Condition.isValidCondition(inValidCondition));","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"    public void equals() {","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"        Condition condition \u003d new Condition(\"Allergic Reaction\");","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(condition.equals(condition));","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(condition.equals(new Condition(\"Allergic Reaction\")));","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(condition.equals(null));","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(condition.equals(new Name(\"Alice Pauline\")));","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"hjoneweek":45}},{"path":"src/test/java/seedu/address/model/record/MedicationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.model.record;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"public class MedicationTest {","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Medication(null));","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    public void isValidMedication_success() {","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"        String validMedication \u003d \"Tylenol\";","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(Medication.isValidMedication(validMedication));","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"    public void isValidMedication_failure() {","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"        String invalidMedication \u003d \"\";","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(Medication.isValidMedication(invalidMedication));","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"    public void equals() {","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"        Medication medication \u003d new Medication(\"Tylenol\");","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(medication.equals(medication));","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(medication.equals(new Medication(\"Tylenol\")));","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(medication.equals(null));","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(medication.equals(new Condition(\"Allergic Reaction\")));","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"hjoneweek":38}},{"path":"src/test/java/seedu/address/model/record/RecordContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.model.record;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.testutil.TypicalRecords.ALLERGIC_REACTION2;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.testutil.TypicalRecords.FEVER0;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.testutil.TypicalRecords.FEVER_AND_COLD0;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"import java.util.Collections;","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"import java.util.List;","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"public class RecordContainsKeywordsPredicateTest {","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    public void equals() {","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"        RecordContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"                new RecordContainsKeywordsPredicate(Arrays.asList(\"Tylenol\", \"Pepto-Bismol\"));","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"        RecordContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"                new RecordContainsKeywordsPredicate(Arrays.asList(\"Tylenol\"));","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"        RecordContainsKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"                new RecordContainsKeywordsPredicate(Arrays.asList(\"Tylenol\", \"Pepto-Bismol\"));","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(firstPredicate.equals(0));","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"    public void test_fieldContainsKeywords_returnsTrue() {","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"        RecordContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"                new RecordContainsKeywordsPredicate(Arrays.asList(\"Tylenol\"));","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(predicate.test(FEVER0));","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"        predicate \u003d new RecordContainsKeywordsPredicate(Arrays.asList(\"Fever\", \"Cold\"));","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(predicate.test(FEVER_AND_COLD0));","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"        predicate \u003d new RecordContainsKeywordsPredicate(Arrays.asList(\"Fever\", \"Allergic Reaction\"));","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(predicate.test(FEVER_AND_COLD0));","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"        predicate \u003d new RecordContainsKeywordsPredicate(Arrays.asList(\"FeVer\", \"cOLd\"));","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(predicate.test(FEVER_AND_COLD0));","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"    public void test_fieldDoesNotContainKeywords_returnFalse() {","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"        RecordContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"                new RecordContainsKeywordsPredicate(Arrays.asList(\"Tylenol\"));","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(predicate.test(ALLERGIC_REACTION2));","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"        predicate \u003d new RecordContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(predicate.test(ALLERGIC_REACTION2));","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"        List\u003cString\u003e keywords \u003d List.of(\"Tylenol\", \"Pepto-Bismol\");","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"        RecordContainsKeywordsPredicate predicate \u003d new RecordContainsKeywordsPredicate(keywords);","lastModifiedDate":"2023-11-01"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"        String expected \u003d RecordContainsKeywordsPredicate.class.getCanonicalName() + \"{keywords\u003d\" + keywords + \"}\";","lastModifiedDate":"2023-11-01"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(expected, predicate.toString());","lastModifiedDate":"2023-11-01"},{"lineNumber":62,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"hjoneweek":63}},{"path":"src/test/java/seedu/address/model/record/RecordTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.model.record;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-27"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-29"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-29"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.model.record.Record.removeDuplicates;","lastModifiedDate":"2023-11-08"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"import java.util.List;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.DateTime;","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.shared.Name;","lastModifiedDate":"2023-10-29"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"public class RecordTest {","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"    private List\u003cCondition\u003e validConditions \u003d new ArrayList\u003c\u003e(Arrays.asList(new Condition(\"Fever\"),","lastModifiedDate":"2023-10-27"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"            new Condition(\"Cold\")));","lastModifiedDate":"2023-10-27"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"    private List\u003cMedication\u003e validMedications \u003d new ArrayList\u003c\u003e(Arrays.asList(new Medication(\"Tylenol\"),","lastModifiedDate":"2023-10-27"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"            new Medication(\"Ibuprofen\")));","lastModifiedDate":"2023-10-27"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"    private Record record \u003d new Record(new DateTime(\"09-10-2023 1800\"), validConditions, validMedications,","lastModifiedDate":"2023-10-27"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"            null, 1);","lastModifiedDate":"2023-10-27"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"ryanongwx"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Record(null, null, null, null, null));","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"ryanongwx"},"content":"        assertThrows(NullPointerException.class, () -\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":30,"author":{"gitId":"ryanongwx"},"content":"            new Record(new DateTime(\"09-10-2023 1800\"), null, null, null, null));","lastModifiedDate":"2023-10-27"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"        List\u003cCondition\u003e validConditions \u003d new ArrayList\u003c\u003e(Arrays.asList(new Condition(\"Fever\"), new Condition(\"Cold\")));","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"ryanongwx"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Record(null, validConditions, null, null, null));","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"    public void removeDuplicates_noDuplicates() {","lastModifiedDate":"2023-11-08"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"        List\u003cCondition\u003e expectedConditions \u003d new ArrayList\u003c\u003e(Arrays.asList(new Condition(\"Fever\"),","lastModifiedDate":"2023-11-08"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"                new Condition(\"Cold\")));","lastModifiedDate":"2023-11-08"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"        List\u003cMedication\u003e expectedMedications \u003d new ArrayList\u003c\u003e(Arrays.asList(new Medication(\"Tylenol\"),","lastModifiedDate":"2023-11-08"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"                new Medication(\"Ibuprofen\")));","lastModifiedDate":"2023-11-08"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(expectedConditions.equals(removeDuplicates(validConditions)));","lastModifiedDate":"2023-11-08"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(expectedMedications.equals(removeDuplicates(validMedications)));","lastModifiedDate":"2023-11-08"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"    public void removeDuplicates_conditions_withDuplicates() {","lastModifiedDate":"2023-11-08"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"        List\u003cCondition\u003e validConditionsWithDuplicates \u003d new ArrayList\u003c\u003e(Arrays.asList(new Condition(\"Flu\"),","lastModifiedDate":"2023-11-08"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"                new Condition(\"Flu\"), new Condition(\"Flu\"), new Condition(\"Fever\"), new Condition(\"Headache\"),","lastModifiedDate":"2023-11-08"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"                new Condition(\"Fever\")));","lastModifiedDate":"2023-11-08"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"        List\u003cCondition\u003e expectedConditions \u003d new ArrayList\u003c\u003e(Arrays.asList(new Condition(\"Flu\"),","lastModifiedDate":"2023-11-08"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"                new Condition(\"Fever\"), new Condition(\"Headache\")));","lastModifiedDate":"2023-11-08"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"        List\u003cMedication\u003e validMedicationsWithDuplicates \u003d new ArrayList\u003c\u003e(Arrays.asList(new Medication(\"Tylenol\"),","lastModifiedDate":"2023-11-08"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"                new Medication(\"Ibuprofen\"), new Medication(\"Tylenol\"), new Medication(\"Penicillin\"),","lastModifiedDate":"2023-11-08"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"                new Medication(\"Ibuprofen\")));","lastModifiedDate":"2023-11-08"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"        List\u003cMedication\u003e expectedMedications \u003d new ArrayList\u003c\u003e(Arrays.asList(new Medication(\"Tylenol\"),","lastModifiedDate":"2023-11-08"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"                new Medication(\"Ibuprofen\"), new Medication(\"Penicillin\")));","lastModifiedDate":"2023-11-08"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":62,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(expectedConditions.equals(removeDuplicates(validConditionsWithDuplicates)));","lastModifiedDate":"2023-11-08"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(expectedMedications.equals(removeDuplicates(validMedicationsWithDuplicates)));","lastModifiedDate":"2023-11-08"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":65,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":66,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":67,"author":{"gitId":"hjoneweek"},"content":"    public void equals() {","lastModifiedDate":"2023-10-29"},{"lineNumber":68,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(record.equals(record));","lastModifiedDate":"2023-10-29"},{"lineNumber":69,"author":{"gitId":"hjoneweek"},"content":"        Record anotherRecord \u003d new Record(new DateTime(\"09-10-2023 1800\"), validConditions, validMedications, null, 1);","lastModifiedDate":"2023-10-29"},{"lineNumber":70,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(record.equals(anotherRecord));","lastModifiedDate":"2023-10-29"},{"lineNumber":71,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(record.equals(new Name(\"Alice Pauline\")));","lastModifiedDate":"2023-10-29"},{"lineNumber":72,"author":{"gitId":"hjoneweek"},"content":"        Record anotherRecord2 \u003d new Record(new DateTime(\"10-10-2023 1800\"), validConditions, validMedications, null, 1);","lastModifiedDate":"2023-10-29"},{"lineNumber":73,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(record.equals(anotherRecord2));","lastModifiedDate":"2023-10-29"},{"lineNumber":74,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":75,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":76,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":77,"author":{"gitId":"hjoneweek"},"content":"    public void toString_success() {","lastModifiedDate":"2023-10-27"},{"lineNumber":78,"author":{"gitId":"hjoneweek"},"content":"        String expected \u003d Record.class.getCanonicalName()","lastModifiedDate":"2023-10-27"},{"lineNumber":79,"author":{"gitId":"hjoneweek"},"content":"                + \"{dateTime\u003d\" + record.getDateTime()","lastModifiedDate":"2023-10-27"},{"lineNumber":80,"author":{"gitId":"hjoneweek"},"content":"                + \", conditions\u003d\" + record.getConditions()","lastModifiedDate":"2023-10-27"},{"lineNumber":81,"author":{"gitId":"hjoneweek"},"content":"                + \", medications\u003d\" + record.getMedications()","lastModifiedDate":"2023-10-27"},{"lineNumber":82,"author":{"gitId":"hjoneweek"},"content":"                + \", filePath\u003d\" + record.getFilePath()","lastModifiedDate":"2023-10-27"},{"lineNumber":83,"author":{"gitId":"hjoneweek"},"content":"                + \", personIndex\u003d\" + record.getPersonIndex()","lastModifiedDate":"2023-10-27"},{"lineNumber":84,"author":{"gitId":"hjoneweek"},"content":"                + \"}\";","lastModifiedDate":"2023-10-27"},{"lineNumber":85,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":86,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(expected, record.toString());","lastModifiedDate":"2023-10-27"},{"lineNumber":87,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":88,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"hjoneweek":82,"Darren159":2,"ryanongwx":4}},{"path":"src/test/java/seedu/address/model/record/UniqueRecordListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.model.record;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"ryanongwx"},"content":"import static seedu.address.testutil.TypicalRecords.ALLERGIC_REACTION2;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"ryanongwx"},"content":"import static seedu.address.testutil.TypicalRecords.FEVER0;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"import java.util.Collections;","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"import java.util.List;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2023-10-27"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.exceptions.DuplicateRecordException;","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.exceptions.RecordNotFoundException;","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"public class UniqueRecordListTest {","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"    private final UniqueRecordList uniqueRecordList \u003d new UniqueRecordList();","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"    public void contains_nullRecord_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueRecordList.contains(null));","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"    public void contains_recordNotInList_returnsFalse() {","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"ryanongwx"},"content":"        assertFalse(uniqueRecordList.contains(FEVER0));","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"    public void contains_recordInList_returnsTrue() {","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"ryanongwx"},"content":"        uniqueRecordList.add(FEVER0);","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"ryanongwx"},"content":"        assertTrue(uniqueRecordList.contains(FEVER0));","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"    public void add_nullRecord_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueRecordList.add(null));","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"    public void add_duplicateRecord_throwsDuplicateRecordException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"ryanongwx"},"content":"        uniqueRecordList.add(FEVER0);","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"ryanongwx"},"content":"        assertThrows(DuplicateRecordException.class, () -\u003e uniqueRecordList.add(FEVER0));","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"    public void setPerson_nullTargetRecord_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":52,"author":{"gitId":"ryanongwx"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueRecordList.setRecord(null, FEVER0));","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"    public void setPerson_nullEditedRecord_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"ryanongwx"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueRecordList.setRecord(FEVER0, null));","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"    public void setPerson_targetPersonNotInList_throwsRecordNotFoundException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":62,"author":{"gitId":"ryanongwx"},"content":"        assertThrows(RecordNotFoundException.class, () -\u003e uniqueRecordList.setRecord(FEVER0, FEVER0));","lastModifiedDate":"2023-10-24"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"hjoneweek"},"content":"    public void setRecord_editedRecordIsSameRecord_success() {","lastModifiedDate":"2023-10-20"},{"lineNumber":67,"author":{"gitId":"ryanongwx"},"content":"        uniqueRecordList.add(FEVER0);","lastModifiedDate":"2023-10-24"},{"lineNumber":68,"author":{"gitId":"ryanongwx"},"content":"        uniqueRecordList.setRecord(FEVER0, FEVER0);","lastModifiedDate":"2023-10-24"},{"lineNumber":69,"author":{"gitId":"hjoneweek"},"content":"        UniqueRecordList expectedUniqueRecordList \u003d new UniqueRecordList();","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"ryanongwx"},"content":"        expectedUniqueRecordList.add(FEVER0);","lastModifiedDate":"2023-10-24"},{"lineNumber":71,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(expectedUniqueRecordList, uniqueRecordList);","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"hjoneweek"},"content":"    public void setRecord_editedRecordIsDifferentRecord_success() {","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"ryanongwx"},"content":"        uniqueRecordList.add(FEVER0);","lastModifiedDate":"2023-10-24"},{"lineNumber":77,"author":{"gitId":"ryanongwx"},"content":"        uniqueRecordList.setRecord(FEVER0, ALLERGIC_REACTION2);","lastModifiedDate":"2023-10-24"},{"lineNumber":78,"author":{"gitId":"hjoneweek"},"content":"        UniqueRecordList expectedUniqueRecordList \u003d new UniqueRecordList();","lastModifiedDate":"2023-10-20"},{"lineNumber":79,"author":{"gitId":"ryanongwx"},"content":"        expectedUniqueRecordList.add(ALLERGIC_REACTION2);","lastModifiedDate":"2023-10-24"},{"lineNumber":80,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(expectedUniqueRecordList, uniqueRecordList);","lastModifiedDate":"2023-10-20"},{"lineNumber":81,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":82,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":83,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":84,"author":{"gitId":"hjoneweek"},"content":"    public void setPerson_editedRecordIsTheSame_throwsDuplicateRecordException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":85,"author":{"gitId":"ryanongwx"},"content":"        uniqueRecordList.add(FEVER0);","lastModifiedDate":"2023-10-24"},{"lineNumber":86,"author":{"gitId":"ryanongwx"},"content":"        uniqueRecordList.add(ALLERGIC_REACTION2);","lastModifiedDate":"2023-10-24"},{"lineNumber":87,"author":{"gitId":"ryanongwx"},"content":"        assertThrows(DuplicateRecordException.class, () -\u003e uniqueRecordList.setRecord(FEVER0, ALLERGIC_REACTION2));","lastModifiedDate":"2023-10-24"},{"lineNumber":88,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":89,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":90,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":91,"author":{"gitId":"hjoneweek"},"content":"    public void remove_nullRecord_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":92,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueRecordList.remove(null));","lastModifiedDate":"2023-10-20"},{"lineNumber":93,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":94,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":95,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":96,"author":{"gitId":"hjoneweek"},"content":"    public void remove_recordDoesNotExist_throwsRecordNotFoundException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":97,"author":{"gitId":"ryanongwx"},"content":"        assertThrows(RecordNotFoundException.class, () -\u003e uniqueRecordList.remove(FEVER0));","lastModifiedDate":"2023-10-24"},{"lineNumber":98,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":99,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":100,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":101,"author":{"gitId":"hjoneweek"},"content":"    public void remove_existingRecord_removesRecord() {","lastModifiedDate":"2023-10-20"},{"lineNumber":102,"author":{"gitId":"ryanongwx"},"content":"        uniqueRecordList.add(FEVER0);","lastModifiedDate":"2023-10-24"},{"lineNumber":103,"author":{"gitId":"ryanongwx"},"content":"        uniqueRecordList.remove(FEVER0);","lastModifiedDate":"2023-10-24"},{"lineNumber":104,"author":{"gitId":"hjoneweek"},"content":"        UniqueRecordList expectedUniqueRecordList \u003d new UniqueRecordList();","lastModifiedDate":"2023-10-20"},{"lineNumber":105,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(expectedUniqueRecordList, uniqueRecordList);","lastModifiedDate":"2023-10-20"},{"lineNumber":106,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":107,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":108,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":109,"author":{"gitId":"hjoneweek"},"content":"    public void setRecords_nullUniqueRecordList_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":110,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueRecordList.setRecords((UniqueRecordList) null));","lastModifiedDate":"2023-10-20"},{"lineNumber":111,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":112,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":113,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":114,"author":{"gitId":"hjoneweek"},"content":"    public void setRecords_uniqueRecordList_replacesOwnListWithProvidedUniqueRecordList() {","lastModifiedDate":"2023-10-20"},{"lineNumber":115,"author":{"gitId":"ryanongwx"},"content":"        uniqueRecordList.add(FEVER0);","lastModifiedDate":"2023-10-24"},{"lineNumber":116,"author":{"gitId":"hjoneweek"},"content":"        UniqueRecordList expectedUniqueRecordList \u003d new UniqueRecordList();","lastModifiedDate":"2023-10-20"},{"lineNumber":117,"author":{"gitId":"ryanongwx"},"content":"        expectedUniqueRecordList.add(ALLERGIC_REACTION2);","lastModifiedDate":"2023-10-24"},{"lineNumber":118,"author":{"gitId":"hjoneweek"},"content":"        uniqueRecordList.setRecords(expectedUniqueRecordList);","lastModifiedDate":"2023-10-20"},{"lineNumber":119,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(expectedUniqueRecordList, uniqueRecordList);","lastModifiedDate":"2023-10-20"},{"lineNumber":120,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":121,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":122,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":123,"author":{"gitId":"hjoneweek"},"content":"    public void setRecords_nullList_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":124,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueRecordList.setRecords((List\u003cRecord\u003e) null));","lastModifiedDate":"2023-10-20"},{"lineNumber":125,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":126,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":127,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":128,"author":{"gitId":"hjoneweek"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2023-10-20"},{"lineNumber":129,"author":{"gitId":"ryanongwx"},"content":"        uniqueRecordList.add(FEVER0);","lastModifiedDate":"2023-10-24"},{"lineNumber":130,"author":{"gitId":"ryanongwx"},"content":"        List\u003cRecord\u003e recordList \u003d Collections.singletonList(FEVER0);","lastModifiedDate":"2023-10-24"},{"lineNumber":131,"author":{"gitId":"hjoneweek"},"content":"        uniqueRecordList.setRecords(recordList);","lastModifiedDate":"2023-10-20"},{"lineNumber":132,"author":{"gitId":"hjoneweek"},"content":"        UniqueRecordList expectedUniqueRecordList \u003d new UniqueRecordList();","lastModifiedDate":"2023-10-20"},{"lineNumber":133,"author":{"gitId":"ryanongwx"},"content":"        expectedUniqueRecordList.add(FEVER0);","lastModifiedDate":"2023-10-24"},{"lineNumber":134,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(expectedUniqueRecordList, uniqueRecordList);","lastModifiedDate":"2023-10-20"},{"lineNumber":135,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":136,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":137,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":138,"author":{"gitId":"hjoneweek"},"content":"    public void setRecords_listWithDuplicateRecords_throwsDuplicateRecordException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":139,"author":{"gitId":"ryanongwx"},"content":"        List\u003cRecord\u003e listWithDuplicateRecords \u003d Arrays.asList(FEVER0, FEVER0);","lastModifiedDate":"2023-10-24"},{"lineNumber":140,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(DuplicateRecordException.class, () -\u003e uniqueRecordList.setRecords(listWithDuplicateRecords));","lastModifiedDate":"2023-10-20"},{"lineNumber":141,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":142,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":143,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":144,"author":{"gitId":"hjoneweek"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":145,"author":{"gitId":"ryanongwx"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e uniqueRecordList","lastModifiedDate":"2023-10-24"},{"lineNumber":146,"author":{"gitId":"ryanongwx"},"content":"            .asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2023-10-24"},{"lineNumber":147,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":148,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":149,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":150,"author":{"gitId":"hjoneweek"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-20"},{"lineNumber":151,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(uniqueRecordList.asUnmodifiableObservableList().toString(), uniqueRecordList.toString());","lastModifiedDate":"2023-10-20"},{"lineNumber":152,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":153,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":154,"author":{"gitId":"hjoneweek"},"content":"    public void equals() {","lastModifiedDate":"2023-10-27"},{"lineNumber":155,"author":{"gitId":"hjoneweek"},"content":"        assertTrue(uniqueRecordList.equals(uniqueRecordList));","lastModifiedDate":"2023-10-27"},{"lineNumber":156,"author":{"gitId":"hjoneweek"},"content":"        assertFalse(uniqueRecordList.equals(new UniquePersonList()));","lastModifiedDate":"2023-10-27"},{"lineNumber":157,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":158,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":159,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"hjoneweek":126,"ryanongwx":33}},{"path":"src/test/java/seedu/address/model/shared/DateTimeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.model.shared;","lastModifiedDate":"2023-10-22"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"public class DateTimeTest {","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DateTime(null));","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"    public void constructor_invalidDateTime_throwsIllegalArgumentException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"        String invalidDateTime \u003d \"\";","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(invalidDateTime));","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"    public void isValidDateTime() {","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"        // null DateTime","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateTime.isValidDateTime(null));","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"        // in21-10-2001 1900","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"        assertFalse(DateTime.isValidDateTime(\"\")); // empty string","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"        assertFalse(DateTime.isValidDateTime(\" \")); // spaces only","lastModifiedDate":"2023-10-19"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"        assertFalse(DateTime.isValidDateTime(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"        assertFalse(DateTime.isValidDateTime(\"21-10-2001 1900h\")); // contains alphabet characters","lastModifiedDate":"2023-10-19"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"        assertFalse(DateTime.isValidDateTime(\"21-10-2001 1900*\")); // contains non-alphanumeric characters","lastModifiedDate":"2023-10-19"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"        assertFalse(DateTime.isValidDateTime(\"1900 21-10-2001\")); // wrong format","lastModifiedDate":"2023-10-19"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"        assertFalse(DateTime.isValidDateTime(\"21/10/2001 1900\")); // wrong format","lastModifiedDate":"2023-10-19"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"        assertFalse(DateTime.isValidDateTime(\"21-10-2001\")); // missing time","lastModifiedDate":"2023-10-19"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"        assertFalse(DateTime.isValidDateTime(\"1900\")); // missing date","lastModifiedDate":"2023-10-19"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"        // 21-10-2001 1900","lastModifiedDate":"2023-10-19"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"        assertTrue(DateTime.isValidDateTime(\"21-10-2001 1900\")); // alphabets only","lastModifiedDate":"2023-10-19"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"    public void equals() {","lastModifiedDate":"2023-10-19"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"        DateTime dateTime \u003d new DateTime(\"21-10-2001 1900\");","lastModifiedDate":"2023-10-19"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-19"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"        assertTrue(dateTime.equals(new DateTime(\"21-10-2001 1900\")));","lastModifiedDate":"2023-10-19"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-19"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"        assertTrue(dateTime.equals(dateTime));","lastModifiedDate":"2023-10-19"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-19"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"        assertFalse(dateTime.equals(null));","lastModifiedDate":"2023-10-19"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-19"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"        assertFalse(dateTime.equals(5.0f));","lastModifiedDate":"2023-10-19"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2023-10-19"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"        assertFalse(dateTime.equals(new DateTime(\"22-10-2001 1900\")));","lastModifiedDate":"2023-10-19"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":62,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"    public void toString_success() {","lastModifiedDate":"2023-11-01"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"        DateTime dateTime \u003d new DateTime(\"21-10-2001 1900\");","lastModifiedDate":"2023-11-01"},{"lineNumber":65,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(dateTime.toString(), \"21-10-2001 1900\");","lastModifiedDate":"2023-11-01"},{"lineNumber":66,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"Darren159":61,"hjoneweek":6}},{"path":"src/test/java/seedu/address/model/shared/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.model.shared;","lastModifiedDate":"2023-10-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Name name \u003d new Name(\"Valid Name\");","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(name.equals(new Name(\"Valid Name\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(name.equals(name));","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(name.equals(null));","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(name.equals(5.0f));","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(name.equals(new Name(\"Other Valid Name\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"Darren159":1,"-":59}},{"path":"src/test/java/seedu/address/model/shared/NricTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.model.shared;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-30"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-30"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-30"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"public class NricTest {","lastModifiedDate":"2023-10-30"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-30"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Nric(null));","lastModifiedDate":"2023-10-30"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"    public void constructor_invalidnric_throwsIllegalArgumentException() {","lastModifiedDate":"2023-10-30"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"        String invalidNric \u003d \"\";","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Nric(invalidNric));","lastModifiedDate":"2023-10-30"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"    public void isValidNric() {","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"        // null nric number","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"        assertThrows(NullPointerException.class, () -\u003e Nric.isValidNric(null));","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"        // invalid nric numbers","lastModifiedDate":"2023-10-30"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"        assertFalse(Nric.isValidNric(\"\")); // empty string","lastModifiedDate":"2023-10-30"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"        assertFalse(Nric.isValidNric(\" \")); // spaces only","lastModifiedDate":"2023-10-30"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"        assertFalse(Nric.isValidNric(\"S91T\")); // less than 7 numbers","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"        assertFalse(Nric.isValidNric(\"S12345671A\")); // more than 7 numbers","lastModifiedDate":"2023-10-30"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"        assertFalse(Nric.isValidNric(\"S1234567\")); // less than 2 alphabets","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"        assertFalse(Nric.isValidNric(\"SA1234567A\")); // more than 2 alphabet","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"        assertFalse(Nric.isValidNric(\"SA1234567\")); // alphabets in wrong position","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"        assertFalse(Nric.isValidNric(\"T9312 153A\")); // spaces within nric","lastModifiedDate":"2023-10-30"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"        // valid nric","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"        assertTrue(Nric.isValidNric(\"S1234567A\"));","lastModifiedDate":"2023-10-30"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"        assertTrue(Nric.isValidNric(\"t9312153a\")); // lower case","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"    public void equals() {","lastModifiedDate":"2023-10-30"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"        Nric nric \u003d new Nric(\"S1234567A\");","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"        assertTrue(nric.equals(new Nric(\"S1234567A\")));","lastModifiedDate":"2023-10-30"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"        assertTrue(nric.equals(nric));","lastModifiedDate":"2023-10-30"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-30"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"        assertFalse(nric.equals(null));","lastModifiedDate":"2023-10-30"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-30"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"        assertFalse(nric.equals(5.0f));","lastModifiedDate":"2023-10-30"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"        assertFalse(nric.equals(new Nric(\"T1234567A\")));","lastModifiedDate":"2023-10-30"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-30"}],"authorContributionMap":{"Darren159":61}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedAllergyTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"public class JsonAdaptedAllergyTest {","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"    private static final String INVALID_ALLERGY \u003d \"Dust+\";","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"    private static final String INVALID_ALLERGY2 \u003d \"\";","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    private static final Allergy VALID_ALLERGY \u003d new Allergy(\"Dust\");","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"    public void toModelType_validRecordDetails_returnsCondition() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"        JsonAdaptedAllergy allergy \u003d new JsonAdaptedAllergy(VALID_ALLERGY);","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(VALID_ALLERGY, allergy.toModelType());","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    public void toModelType_invalidCondition_throwsIllegalArgumentException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"        JsonAdaptedAllergy allergy \u003d new JsonAdaptedAllergy(INVALID_ALLERGY);","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"        String expectedMessage \u003d Allergy.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, allergy::toModelType);","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"    public void toModelType_invalidCondition2_throwsIllegalArgumentException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"        JsonAdaptedAllergy allergy \u003d new JsonAdaptedAllergy(INVALID_ALLERGY2);","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"        String expectedMessage \u003d Allergy.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, allergy::toModelType);","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"    public void toModelType_nullCondition_throwsIllegalValueException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"        JsonAdaptedAllergy allergy \u003d new JsonAdaptedAllergy((String) null);","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"        String expectedMessage \u003d Allergy.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, allergy::toModelType);","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"hjoneweek":44}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedAppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static seedu.address.storage.JsonAdaptedAppointment.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalAppointments.VACCINATION;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.DateTime;","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Name;","lastModifiedDate":"2023-10-22"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Nric;","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"public class JsonAdaptedAppointmentTest {","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"    private static final String INVALID_NAME \u003d \"Sl@@p Study\";","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"    private static final String INVALID_DATETIME \u003d \"10/10/2001 1900\";","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"    private static final String INVALID_NRIC \u003d \"SXXXXXXXA\";","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"    private static final String VALID_NAME \u003d VACCINATION.getName().toString();","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"    private static final String VALID_DATETIME \u003d VACCINATION.getDateTime().toString();","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"    private static final String VALID_NRIC \u003d VACCINATION.getNric().toString();","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"    public void toModelType_validAppointmentDetails_returnsAppointment() throws Exception {","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(VACCINATION);","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"        assertEquals(VACCINATION, appointment.toModelType());","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(INVALID_NAME, VALID_DATETIME, VALID_NRIC);","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-19"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2023-10-19"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(null, VALID_DATETIME, VALID_NRIC);","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2023-10-19"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2023-10-19"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"    public void toModelType_invalidDateTime_throwsIllegalValueException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(VALID_NAME, INVALID_DATETIME, VALID_NRIC);","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"        String expectedMessage \u003d DateTime.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-19"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2023-10-19"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"    public void toModelType_nullDateTime_throwsIllegalValueException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(VALID_NAME, null, VALID_NRIC);","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName());","lastModifiedDate":"2023-10-19"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2023-10-19"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"    public void toModelType_invalidNric_throwsIllegalValueException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(VALID_NAME, VALID_DATETIME, INVALID_NRIC);","lastModifiedDate":"2023-11-01"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"        String expectedMessage \u003d Nric.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-11-01"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2023-11-01"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"    public void toModelType_nullNric_throwsIllegalValueException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(VALID_NAME, VALID_DATETIME, null);","lastModifiedDate":"2023-11-01"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());","lastModifiedDate":"2023-11-01"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2023-11-01"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"Darren159":71}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedConditionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Condition;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"public class JsonAdaptedConditionTest {","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"    private static final String INVALID_CONDITION \u003d \"\";","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"    private static final String INVALID_CONDITION2 \u003d \"Fever+\";","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    private static final Condition VALID_CONDITION \u003d new Condition(\"Allergic Reaction\");","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    public void toModelType_validRecordDetails_returnsCondition() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"        JsonAdaptedCondition condition \u003d new JsonAdaptedCondition(VALID_CONDITION);","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(VALID_CONDITION, condition.toModelType());","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"    public void toModelType_invalidCondition_throwsIllegalArgumentException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"        JsonAdaptedCondition condition \u003d new JsonAdaptedCondition(INVALID_CONDITION);","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"        String expectedMessage \u003d Condition.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, condition::toModelType);","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"    public void toModelType_invalidCondition2_throwsIllegalArgumentException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"        JsonAdaptedCondition condition \u003d new JsonAdaptedCondition(INVALID_CONDITION2);","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"        String expectedMessage \u003d Condition.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, condition::toModelType);","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"    public void toModelType_nullCondition_throwsIllegalValueException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"        JsonAdaptedCondition condition \u003d new JsonAdaptedCondition((String) null);","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"        String expectedMessage \u003d Condition.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, condition::toModelType);","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"hjoneweek":39}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedMedicationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Medication;","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"public class JsonAdaptedMedicationTest {","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"    private static final String INVALID_MEDICATION \u003d \"\";","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"    private static final String INVALID_MEDICATION2 \u003d \"Tylenol+\";","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    private static final Medication VALID_MEDICATION \u003d new Medication(\"Tylenol\");","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    public void toModelType_validRecordDetails_returnsMedication() throws Exception {","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"        JsonAdaptedMedication medication \u003d new JsonAdaptedMedication(VALID_MEDICATION);","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(VALID_MEDICATION, medication.toModelType());","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"    public void toModelType_invalidMedication_throwsIllegalArgumentException() {","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"        JsonAdaptedMedication medication \u003d new JsonAdaptedMedication(INVALID_MEDICATION);","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"        String expectedMessage \u003d Medication.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, medication::toModelType);","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"    public void toModelType_invalidMedication2_throwsIllegalArgumentException() {","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"        JsonAdaptedMedication medication \u003d new JsonAdaptedMedication(INVALID_MEDICATION2);","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"        String expectedMessage \u003d Medication.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, medication::toModelType);","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"    public void toModelType_nullMedication_throwsIllegalValueException() {","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"        JsonAdaptedMedication medication \u003d new JsonAdaptedMedication((String) null);","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"        String expectedMessage \u003d Medication.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, medication::toModelType);","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"hjoneweek":39}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"ryanongwx"},"content":"import seedu.address.model.person.Age;","lastModifiedDate":"2023-10-17"},{"lineNumber":16,"author":{"gitId":"ryanongwx"},"content":"import seedu.address.model.person.BloodType;","lastModifiedDate":"2023-10-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"ryanongwx"},"content":"import seedu.address.model.person.Gender;","lastModifiedDate":"2023-10-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Name;","lastModifiedDate":"2023-10-22"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Nric;","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"    private static final String INVALID_NRIC \u003d \"S*234567A\";","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"    private static final String INVALID_GENDER \u003d \"G\";","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"Clin-lyx"},"content":"    private static final Integer INVALID_AGE \u003d -1;","lastModifiedDate":"2023-11-08"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"    private static final String INVALID_BLOODTYPE \u003d \"C\";","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"    private static final String INVALID_ALLERGY \u003d \"#friend\";","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"    private static final String VALID_NRIC \u003d BENSON.getNric().toString();","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2023-10-14"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"    private static final String VALID_GENDER \u003d BENSON.getGender().toString();","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"    private static final Integer VALID_AGE \u003d BENSON.getAge().age;","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"    private static final String VALID_BLOODTYPE \u003d BENSON.getBloodType().toString();","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"    private static final List\u003cJsonAdaptedAllergy\u003e VALID_ALLERGIES \u003d BENSON.getAllergies().stream()","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"            .map(JsonAdaptedAllergy::new)","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"    private static final Boolean VALID_ISPINNED \u003d BENSON.isPinned();","lastModifiedDate":"2023-10-18"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"    private static final List\u003cJsonAdaptedRecord\u003e VALID_RECORDS \u003d BENSON.getRecords().asUnmodifiableObservableList()","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"            .stream()","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"            .map(JsonAdaptedRecord::new)","lastModifiedDate":"2023-10-19"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2023-10-19"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"    private static final List\u003cJsonAdaptedAppointment\u003e VALID_APPOINTMENTS \u003d BENSON.getAppointments()","lastModifiedDate":"2023-10-18"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"            .asUnmodifiableObservableList().stream().map(JsonAdaptedAppointment::new)","lastModifiedDate":"2023-10-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2023-10-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(INVALID_NAME, VALID_NRIC, VALID_EMAIL, VALID_PHONE,","lastModifiedDate":"2023-10-30"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"                VALID_GENDER, VALID_AGE, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_RECORDS,","lastModifiedDate":"2023-10-30"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"                VALID_APPOINTMENTS,","lastModifiedDate":"2023-10-30"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"                VALID_ISPINNED);","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_NRIC, VALID_EMAIL, VALID_PHONE,","lastModifiedDate":"2023-10-30"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"                VALID_GENDER, VALID_AGE, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_RECORDS,","lastModifiedDate":"2023-10-30"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"                VALID_APPOINTMENTS,","lastModifiedDate":"2023-10-30"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"                VALID_ISPINNED);","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":80,"author":{"gitId":"Darren159"},"content":"    public void toModelType_invalidNric_throwsIllegalValueException() {","lastModifiedDate":"2023-10-30"},{"lineNumber":81,"author":{"gitId":"Darren159"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, INVALID_NRIC, VALID_EMAIL, VALID_PHONE,","lastModifiedDate":"2023-10-30"},{"lineNumber":82,"author":{"gitId":"Darren159"},"content":"                VALID_GENDER, VALID_AGE, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_RECORDS,","lastModifiedDate":"2023-10-30"},{"lineNumber":83,"author":{"gitId":"Darren159"},"content":"                VALID_APPOINTMENTS,","lastModifiedDate":"2023-10-30"},{"lineNumber":84,"author":{"gitId":"Darren159"},"content":"                VALID_ISPINNED);","lastModifiedDate":"2023-10-30"},{"lineNumber":85,"author":{"gitId":"Darren159"},"content":"        String expectedMessage \u003d Nric.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-30"},{"lineNumber":86,"author":{"gitId":"Darren159"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-10-30"},{"lineNumber":87,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":88,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":89,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":90,"author":{"gitId":"Darren159"},"content":"    public void toModelType_nullNric_throwsIllegalValueException() {","lastModifiedDate":"2023-10-30"},{"lineNumber":91,"author":{"gitId":"Darren159"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_PHONE,","lastModifiedDate":"2023-10-30"},{"lineNumber":92,"author":{"gitId":"Darren159"},"content":"                VALID_GENDER, VALID_AGE, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_RECORDS,","lastModifiedDate":"2023-10-30"},{"lineNumber":93,"author":{"gitId":"Darren159"},"content":"                VALID_APPOINTMENTS,","lastModifiedDate":"2023-10-30"},{"lineNumber":94,"author":{"gitId":"Darren159"},"content":"                VALID_ISPINNED);","lastModifiedDate":"2023-10-30"},{"lineNumber":95,"author":{"gitId":"Darren159"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());","lastModifiedDate":"2023-10-30"},{"lineNumber":96,"author":{"gitId":"Darren159"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-10-30"},{"lineNumber":97,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":98,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"Darren159"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_EMAIL, INVALID_PHONE,","lastModifiedDate":"2023-10-30"},{"lineNumber":102,"author":{"gitId":"Darren159"},"content":"                VALID_GENDER, VALID_AGE, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_RECORDS,","lastModifiedDate":"2023-10-30"},{"lineNumber":103,"author":{"gitId":"Darren159"},"content":"                VALID_APPOINTMENTS,","lastModifiedDate":"2023-10-30"},{"lineNumber":104,"author":{"gitId":"Darren159"},"content":"                VALID_ISPINNED);","lastModifiedDate":"2023-10-20"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"Darren159"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_EMAIL, null,","lastModifiedDate":"2023-10-30"},{"lineNumber":112,"author":{"gitId":"Darren159"},"content":"                VALID_GENDER, VALID_AGE, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_RECORDS,","lastModifiedDate":"2023-10-30"},{"lineNumber":113,"author":{"gitId":"Darren159"},"content":"                VALID_APPOINTMENTS,","lastModifiedDate":"2023-10-30"},{"lineNumber":114,"author":{"gitId":"Darren159"},"content":"                VALID_ISPINNED);","lastModifiedDate":"2023-10-20"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"Darren159"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, INVALID_EMAIL, VALID_PHONE,","lastModifiedDate":"2023-10-30"},{"lineNumber":122,"author":{"gitId":"Darren159"},"content":"                VALID_GENDER, VALID_AGE, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_RECORDS,","lastModifiedDate":"2023-10-30"},{"lineNumber":123,"author":{"gitId":"Darren159"},"content":"                VALID_APPOINTMENTS,","lastModifiedDate":"2023-10-30"},{"lineNumber":124,"author":{"gitId":"Darren159"},"content":"                VALID_ISPINNED);","lastModifiedDate":"2023-10-20"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":131,"author":{"gitId":"Darren159"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, null, VALID_PHONE,","lastModifiedDate":"2023-10-30"},{"lineNumber":132,"author":{"gitId":"Darren159"},"content":"                VALID_GENDER, VALID_AGE, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_RECORDS,","lastModifiedDate":"2023-10-30"},{"lineNumber":133,"author":{"gitId":"Darren159"},"content":"                VALID_APPOINTMENTS,","lastModifiedDate":"2023-10-30"},{"lineNumber":134,"author":{"gitId":"Darren159"},"content":"                VALID_ISPINNED);","lastModifiedDate":"2023-10-20"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":140,"author":{"gitId":"adammangzijun"},"content":"    public void toModelType_invalidGender_throwsIllegalValueException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":141,"author":{"gitId":"Darren159"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_EMAIL, VALID_PHONE,","lastModifiedDate":"2023-10-30"},{"lineNumber":142,"author":{"gitId":"Darren159"},"content":"                INVALID_GENDER, VALID_AGE, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_RECORDS,","lastModifiedDate":"2023-10-30"},{"lineNumber":143,"author":{"gitId":"Darren159"},"content":"                VALID_APPOINTMENTS,","lastModifiedDate":"2023-10-30"},{"lineNumber":144,"author":{"gitId":"Darren159"},"content":"                VALID_ISPINNED);","lastModifiedDate":"2023-10-20"},{"lineNumber":145,"author":{"gitId":"ryanongwx"},"content":"        String expectedMessage \u003d Gender.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-17"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":150,"author":{"gitId":"adammangzijun"},"content":"    public void toModelType_nullGender_throwsIllegalValueException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":151,"author":{"gitId":"Darren159"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_EMAIL, VALID_PHONE,","lastModifiedDate":"2023-10-30"},{"lineNumber":152,"author":{"gitId":"Darren159"},"content":"                null, VALID_AGE, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_RECORDS, VALID_APPOINTMENTS,","lastModifiedDate":"2023-10-30"},{"lineNumber":153,"author":{"gitId":"Darren159"},"content":"                VALID_ISPINNED);","lastModifiedDate":"2023-10-30"},{"lineNumber":154,"author":{"gitId":"ryanongwx"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName());","lastModifiedDate":"2023-10-17"},{"lineNumber":155,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-10-14"},{"lineNumber":156,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":157,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":158,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":159,"author":{"gitId":"adammangzijun"},"content":"    public void toModelType_invalidAge_throwsIllegalValueException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":160,"author":{"gitId":"Darren159"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_EMAIL, VALID_PHONE,","lastModifiedDate":"2023-10-30"},{"lineNumber":161,"author":{"gitId":"Darren159"},"content":"                VALID_GENDER, INVALID_AGE, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_RECORDS,","lastModifiedDate":"2023-10-30"},{"lineNumber":162,"author":{"gitId":"Darren159"},"content":"                VALID_APPOINTMENTS,","lastModifiedDate":"2023-10-30"},{"lineNumber":163,"author":{"gitId":"Darren159"},"content":"                VALID_ISPINNED);","lastModifiedDate":"2023-10-20"},{"lineNumber":164,"author":{"gitId":"ryanongwx"},"content":"        String expectedMessage \u003d Age.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-17"},{"lineNumber":165,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-10-14"},{"lineNumber":166,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":167,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":168,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":169,"author":{"gitId":"adammangzijun"},"content":"    public void toModelType_nullAge_throwsIllegalValueException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":170,"author":{"gitId":"Darren159"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_EMAIL, VALID_PHONE,","lastModifiedDate":"2023-10-30"},{"lineNumber":171,"author":{"gitId":"Darren159"},"content":"                VALID_GENDER, null, VALID_BLOODTYPE, VALID_ALLERGIES, VALID_RECORDS, VALID_APPOINTMENTS,","lastModifiedDate":"2023-10-20"},{"lineNumber":172,"author":{"gitId":"Darren159"},"content":"                VALID_ISPINNED);","lastModifiedDate":"2023-10-20"},{"lineNumber":173,"author":{"gitId":"ryanongwx"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Age.class.getSimpleName());","lastModifiedDate":"2023-10-17"},{"lineNumber":174,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-10-14"},{"lineNumber":175,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":176,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":177,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":178,"author":{"gitId":"adammangzijun"},"content":"    public void toModelType_invalidBloodType_throwsIllegalValueException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":179,"author":{"gitId":"Darren159"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_EMAIL, VALID_PHONE,","lastModifiedDate":"2023-10-30"},{"lineNumber":180,"author":{"gitId":"Darren159"},"content":"                VALID_GENDER, VALID_AGE, INVALID_BLOODTYPE, VALID_ALLERGIES, VALID_RECORDS,","lastModifiedDate":"2023-10-30"},{"lineNumber":181,"author":{"gitId":"Darren159"},"content":"                VALID_APPOINTMENTS,","lastModifiedDate":"2023-10-30"},{"lineNumber":182,"author":{"gitId":"Darren159"},"content":"                VALID_ISPINNED);","lastModifiedDate":"2023-10-20"},{"lineNumber":183,"author":{"gitId":"ryanongwx"},"content":"        String expectedMessage \u003d BloodType.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-17"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-10-14"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":188,"author":{"gitId":"adammangzijun"},"content":"    public void toModelType_nullBloodType_throwsIllegalValueException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":189,"author":{"gitId":"Darren159"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_EMAIL, VALID_PHONE,","lastModifiedDate":"2023-10-30"},{"lineNumber":190,"author":{"gitId":"Darren159"},"content":"                VALID_GENDER, VALID_AGE, null, VALID_ALLERGIES, VALID_RECORDS, VALID_APPOINTMENTS,","lastModifiedDate":"2023-10-20"},{"lineNumber":191,"author":{"gitId":"Darren159"},"content":"                VALID_ISPINNED);","lastModifiedDate":"2023-10-20"},{"lineNumber":192,"author":{"gitId":"ryanongwx"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, BloodType.class.getSimpleName());","lastModifiedDate":"2023-10-17"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":197,"author":{"gitId":"Darren159"},"content":"    public void toModelType_invalidAllergies_throwsIllegalValueException() {","lastModifiedDate":"2023-10-30"},{"lineNumber":198,"author":{"gitId":"adammangzijun"},"content":"        List\u003cJsonAdaptedAllergy\u003e invalidAllergies \u003d new ArrayList\u003c\u003e(VALID_ALLERGIES);","lastModifiedDate":"2023-10-14"},{"lineNumber":199,"author":{"gitId":"adammangzijun"},"content":"        invalidAllergies.add(new JsonAdaptedAllergy(INVALID_ALLERGY));","lastModifiedDate":"2023-10-14"},{"lineNumber":200,"author":{"gitId":"Darren159"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_EMAIL, VALID_PHONE,","lastModifiedDate":"2023-10-30"},{"lineNumber":201,"author":{"gitId":"Darren159"},"content":"                VALID_GENDER, VALID_AGE, VALID_BLOODTYPE, invalidAllergies, VALID_RECORDS,","lastModifiedDate":"2023-10-30"},{"lineNumber":202,"author":{"gitId":"Darren159"},"content":"                VALID_APPOINTMENTS, VALID_ISPINNED);","lastModifiedDate":"2023-10-30"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":206,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Darren159":76,"hjoneweek":5,"Clin-lyx":1,"-":85,"ryanongwx":9,"adammangzijun":30}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedRecordTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.storage.JsonAdaptedRecord.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"ryanongwx"},"content":"import static seedu.address.testutil.TypicalRecords.FEVER0;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import java.util.List;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Condition;","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Medication;","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.DateTime;","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"public class JsonAdaptedRecordTest {","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"ryanongwx"},"content":"    private static final String VALID_DATETIME \u003d FEVER0.getDateTime().toString();","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"ryanongwx"},"content":"    private static final List\u003cJsonAdaptedCondition\u003e VALID_CONDITIONS \u003d FEVER0.getConditions()","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"            .stream()","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"            .map(JsonAdaptedCondition::new)","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"ryanongwx"},"content":"    private static final List\u003cJsonAdaptedMedication\u003e VALID_MEDICATIONS \u003d FEVER0.getMedications()","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"            .stream()","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"            .map(JsonAdaptedMedication::new)","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"    public void toModelType_validRecordDetails_returnsRecord() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"ryanongwx"},"content":"        JsonAdaptedRecord record \u003d new JsonAdaptedRecord(FEVER0);","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"ryanongwx"},"content":"        assertEquals(FEVER0, record.toModelType());","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"    public void toModelType_nullDateTime_throwsIllegalValueException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"ryanongwx"},"content":"        JsonAdaptedRecord record \u003d new JsonAdaptedRecord(null, VALID_CONDITIONS, VALID_MEDICATIONS, null, null);","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"                DateTime.class.getSimpleName());","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, record::toModelType);","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"    public void toModelType_nullCondition_throwsIllegalValueException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"        List\u003cJsonAdaptedCondition\u003e invalidCondition \u003d new ArrayList\u003c\u003e(VALID_CONDITIONS);","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"        invalidCondition.add(null);","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2023-10-20"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"                Condition.class.getSimpleName());","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"ryanongwx"},"content":"        JsonAdaptedRecord record \u003d new JsonAdaptedRecord(VALID_DATETIME,","lastModifiedDate":"2023-10-27"},{"lineNumber":52,"author":{"gitId":"ryanongwx"},"content":"            invalidCondition, VALID_MEDICATIONS, null, null);","lastModifiedDate":"2023-10-27"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, record::toModelType);","lastModifiedDate":"2023-10-26"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"    public void toModelType_nullMedication_throwsIllegalValueException() {","lastModifiedDate":"2023-10-26"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"        List\u003cJsonAdaptedMedication\u003e invalidMedications \u003d new ArrayList\u003c\u003e(VALID_MEDICATIONS);","lastModifiedDate":"2023-10-26"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"        invalidMedications.add(null);","lastModifiedDate":"2023-10-26"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"                Medication.class.getSimpleName());","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"ryanongwx"},"content":"        JsonAdaptedRecord record \u003d new JsonAdaptedRecord(VALID_DATETIME,","lastModifiedDate":"2023-10-27"},{"lineNumber":63,"author":{"gitId":"ryanongwx"},"content":"            VALID_CONDITIONS, invalidMedications, null, null);","lastModifiedDate":"2023-10-27"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, record::toModelType);","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"hjoneweek":53,"Darren159":1,"ryanongwx":12}},{"path":"src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"ryanongwx"},"content":"import static org.junit.jupiter.api.Assertions.assertNotSame;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"ryanongwx"},"content":"import java.nio.charset.StandardCharsets;","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ryanongwx"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"ryanongwx"},"content":"import java.util.Base64;","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ryanongwx"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":24,"author":{"gitId":"ryanongwx"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorageTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"        return new JsonAddressBookStorage(Paths.get(filePath))","lastModifiedDate":"2023-10-29"},{"lineNumber":41,"author":{"gitId":"ryanongwx"},"content":"                .readAddressBook(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));","lastModifiedDate":"2023-06-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataLoadingException() {","lastModifiedDate":"2023-06-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));","lastModifiedDate":"2023-06-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataLoadingException() {","lastModifiedDate":"2023-06-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));","lastModifiedDate":"2023-06-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"ryanongwx"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":71,"author":{"gitId":"ryanongwx"},"content":"    public void readAddressBook_invalidJson_throwsDataLoadingException() throws Exception {","lastModifiedDate":"2023-10-24"},{"lineNumber":72,"author":{"gitId":"ryanongwx"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readAddressBook(\"invalidJson.json\"));","lastModifiedDate":"2023-10-24"},{"lineNumber":73,"author":{"gitId":"ryanongwx"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":74,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":75,"author":{"gitId":"ryanongwx"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":76,"author":{"gitId":"ryanongwx"},"content":"    public void readAddressBook_nonExistentFile_returnsOptionalEmpty() throws Exception {","lastModifiedDate":"2023-10-24"},{"lineNumber":77,"author":{"gitId":"ryanongwx"},"content":"        assertFalse(readAddressBook(\"invalidInvalid.json\").isPresent());","lastModifiedDate":"2023-10-24"},{"lineNumber":78,"author":{"gitId":"ryanongwx"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":79,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);","lastModifiedDate":"2023-10-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // Save in new file and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        original.addPerson(HOON);","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        original.removePerson(ALICE);","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        original.addPerson(IDA);","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}.","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            new JsonAddressBookStorage(Paths.get(filePath))","lastModifiedDate":"2023-10-29"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":127,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":128,"author":{"gitId":"ryanongwx"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":129,"author":{"gitId":"ryanongwx"},"content":"    public void saveAndRead_encryptionDecryption_success() throws Exception {","lastModifiedDate":"2023-10-24"},{"lineNumber":130,"author":{"gitId":"ryanongwx"},"content":"        Path filePath \u003d testFolder.resolve(\"TempEncryptedAddressBook.json\");","lastModifiedDate":"2023-10-24"},{"lineNumber":131,"author":{"gitId":"ryanongwx"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2023-10-24"},{"lineNumber":132,"author":{"gitId":"Darren159"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);","lastModifiedDate":"2023-10-29"},{"lineNumber":133,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":134,"author":{"gitId":"ryanongwx"},"content":"        // Save in new file","lastModifiedDate":"2023-10-24"},{"lineNumber":135,"author":{"gitId":"ryanongwx"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2023-10-24"},{"lineNumber":136,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":137,"author":{"gitId":"ryanongwx"},"content":"        // Check if file content is encrypted","lastModifiedDate":"2023-10-24"},{"lineNumber":138,"author":{"gitId":"ryanongwx"},"content":"        String content \u003d new String(Files.readAllBytes(filePath), StandardCharsets.UTF_8);","lastModifiedDate":"2023-10-24"},{"lineNumber":139,"author":{"gitId":"ryanongwx"},"content":"        String originalJson \u003d JsonUtil.toJsonString(new JsonSerializableAddressBook(original));","lastModifiedDate":"2023-10-24"},{"lineNumber":140,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":141,"author":{"gitId":"ryanongwx"},"content":"        // Use JUnit\u0027s assertion to check that the content is not equal to the original","lastModifiedDate":"2023-10-24"},{"lineNumber":142,"author":{"gitId":"ryanongwx"},"content":"        // JSON","lastModifiedDate":"2023-10-24"},{"lineNumber":143,"author":{"gitId":"ryanongwx"},"content":"        assertNotSame(originalJson, content);","lastModifiedDate":"2023-10-24"},{"lineNumber":144,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":145,"author":{"gitId":"ryanongwx"},"content":"        // Read back and decrypt","lastModifiedDate":"2023-10-24"},{"lineNumber":146,"author":{"gitId":"ryanongwx"},"content":"        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2023-10-24"},{"lineNumber":147,"author":{"gitId":"ryanongwx"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2023-10-24"},{"lineNumber":148,"author":{"gitId":"ryanongwx"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":149,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":150,"author":{"gitId":"ryanongwx"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":151,"author":{"gitId":"ryanongwx"},"content":"    public void read_corruptedData_throwDataLoadingException() throws Exception {","lastModifiedDate":"2023-10-24"},{"lineNumber":152,"author":{"gitId":"ryanongwx"},"content":"        Path filePath \u003d testFolder.resolve(\"CorruptedEncryptedAddressBook.json\");","lastModifiedDate":"2023-10-24"},{"lineNumber":153,"author":{"gitId":"ryanongwx"},"content":"        String corruptedData \u003d Base64.getEncoder().encodeToString(\"corrupted data\".getBytes(StandardCharsets.UTF_8));","lastModifiedDate":"2023-10-24"},{"lineNumber":154,"author":{"gitId":"ryanongwx"},"content":"        Files.write(filePath, corruptedData.getBytes(StandardCharsets.UTF_8));","lastModifiedDate":"2023-10-24"},{"lineNumber":155,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":156,"author":{"gitId":"Darren159"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);","lastModifiedDate":"2023-10-29"},{"lineNumber":157,"author":{"gitId":"ryanongwx"},"content":"        assertThrows(DataLoadingException.class, () -\u003e jsonAddressBookStorage.readAddressBook(filePath));","lastModifiedDate":"2023-10-24"},{"lineNumber":158,"author":{"gitId":"ryanongwx"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":159,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":160,"author":{"gitId":"ryanongwx"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":161,"author":{"gitId":"ryanongwx"},"content":"    public void readAddressBook_jsonDeserializationReturnsNull_returnsEmptyOptional() throws DataLoadingException {","lastModifiedDate":"2023-10-24"},{"lineNumber":162,"author":{"gitId":"ryanongwx"},"content":"        // Create an instance of JsonAddressBookStorage with MockJsonUtil","lastModifiedDate":"2023-10-24"},{"lineNumber":163,"author":{"gitId":"ryanongwx"},"content":"        Path testFilePath \u003d Paths.get(\"path_to_some_test_file_with_encrypted_content\");","lastModifiedDate":"2023-10-24"},{"lineNumber":164,"author":{"gitId":"Darren159"},"content":"        JsonAddressBookStorage storage \u003d new JsonAddressBookStorage(testFilePath);","lastModifiedDate":"2023-10-29"},{"lineNumber":165,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":166,"author":{"gitId":"ryanongwx"},"content":"        // Ensure the file exists with some encrypted content","lastModifiedDate":"2023-10-24"},{"lineNumber":167,"author":{"gitId":"ryanongwx"},"content":"        // (Note: This step might require you to actually have some encrypted data in","lastModifiedDate":"2023-10-24"},{"lineNumber":168,"author":{"gitId":"ryanongwx"},"content":"        // the test file)","lastModifiedDate":"2023-10-24"},{"lineNumber":169,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":170,"author":{"gitId":"ryanongwx"},"content":"        Optional\u003cReadOnlyAddressBook\u003e result \u003d storage.readAddressBook(testFilePath);","lastModifiedDate":"2023-10-24"},{"lineNumber":171,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":172,"author":{"gitId":"ryanongwx"},"content":"        // Assert that the result is an empty Optional","lastModifiedDate":"2023-10-24"},{"lineNumber":173,"author":{"gitId":"ryanongwx"},"content":"        assertFalse(result.isPresent());","lastModifiedDate":"2023-10-24"},{"lineNumber":174,"author":{"gitId":"ryanongwx"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":175,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":176,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Darren159":4,"-":109,"ryanongwx":63}},{"path":"src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.testutil.TypicalPersons;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonSerializableAddressBookTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"-":47,"ryanongwx":3}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2023-10-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"ryanongwx"},"content":"         * Note: This is an integration test that verifies the StorageManager is","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"ryanongwx"},"content":"         * properly wired to the","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"ryanongwx"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"ryanongwx"},"content":"         * JsonUserPrefsStorageTest} class.","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":55,"author":{"gitId":"ryanongwx"},"content":"         * Note: This is an integration test that verifies the StorageManager is","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"ryanongwx"},"content":"         * properly wired to the","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"ryanongwx"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"ryanongwx"},"content":"         * JsonAddressBookStorageTest} class.","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2016-10-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":64,"ryanongwx":8}},{"path":"src/test/java/seedu/address/testutil/AppointmentBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.DateTime;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Name;","lastModifiedDate":"2023-10-22"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Nric;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":" * A utility class to help with building Appointment objects.","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"public class AppointmentBuilder {","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"    public static final String DEFAULT_NAME \u003d \"Nose Exam\";","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"    public static final String DEFAULT_DATETIME \u003d \"27-10-2010 1200\";","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"    public static final String DEFAULT_NRIC \u003d \"B1234567A\";","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"    private Name name;","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"    private DateTime dateTime;","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"    private Nric nric;","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"     * Creates a {@code AppoointmentBuilder} with the default details.","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"    public AppointmentBuilder() {","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"        dateTime \u003d new DateTime(DEFAULT_DATETIME);","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"        nric \u003d new Nric(DEFAULT_NRIC);","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"     * InitializesAppointment with the data of {@code personToCopy}.","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"    public AppointmentBuilder(Appointment appointmentToCopy) {","lastModifiedDate":"2023-10-19"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"        name \u003d appointmentToCopy.getName();","lastModifiedDate":"2023-10-19"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"        dateTime \u003d appointmentToCopy.getDateTime();","lastModifiedDate":"2023-10-19"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"        nric \u003d appointmentToCopy.getNric();","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2023-10-19"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"    public AppointmentBuilder withName(String name) {","lastModifiedDate":"2023-10-19"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2023-10-19"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"        return this;","lastModifiedDate":"2023-10-19"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"     * Sets the {@code DateTime} of the {@code Appointment} that we are building.","lastModifiedDate":"2023-10-19"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"    public AppointmentBuilder withDateTime(String dateTime) {","lastModifiedDate":"2023-10-19"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"        this.dateTime \u003d new DateTime(dateTime);","lastModifiedDate":"2023-10-19"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"        return this;","lastModifiedDate":"2023-10-19"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"     * Sets the {@code Nric} of the {@code Appointment} that we are building.","lastModifiedDate":"2023-11-01"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"    public AppointmentBuilder withNric(String nric) {","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"        if (nric \u003d\u003d null) {","lastModifiedDate":"2023-11-01"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"            this.nric \u003d null;","lastModifiedDate":"2023-11-01"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"            return this;","lastModifiedDate":"2023-11-01"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"        this.nric \u003d new Nric(nric);","lastModifiedDate":"2023-11-01"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"        return this;","lastModifiedDate":"2023-11-01"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"    public Appointment build() {","lastModifiedDate":"2023-10-19"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"        return new Appointment(name, dateTime, nric);","lastModifiedDate":"2023-11-01"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"Darren159":71}},{"path":"src/test/java/seedu/address/testutil/AppointmentUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":" * A utility class for Appointment.","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"public class AppointmentUtil {","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"     * Returns an add command string for adding the {@code Appointment}.","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"    public static String getAddAppointmentCommand(Appointment appointment) {","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"        return AddAppointmentCommand.COMMAND_WORD + \" 1 \" + getAppointmentDetails(appointment);","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"     * Returns the part of command string for the given {@code Appointment}\u0027s details.","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"    public static String getAppointmentDetails(Appointment appointment) {","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"        sb.append(PREFIX_NAME + appointment.getName().fullName + \" \");","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"        sb.append(PREFIX_DATE + appointment.getDateTime().toString());","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"        return sb.toString();","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"Darren159":29}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Age;","lastModifiedDate":"2023-10-15"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-15"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.BloodType;","lastModifiedDate":"2023-10-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-10-15"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Gender;","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-15"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Name;","lastModifiedDate":"2023-10-22"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Nric;","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"     * {@code person}\u0027s details","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"        descriptor.setNric(person.getNric());","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"        descriptor.setGender(person.getGender());","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"        descriptor.setAge(person.getAge());","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"        descriptor.setBloodType(person.getBloodType());","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"        descriptor.setAllergies(person.getAllergies());","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"     * building.","lastModifiedDate":"2023-10-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"     * Sets the {@code Nric} of the {@code EditPersonDescriptor} that we are","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"     * building.","lastModifiedDate":"2023-10-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-10-30"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"    public EditPersonDescriptorBuilder withNric(String nric) {","lastModifiedDate":"2023-10-30"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"        descriptor.setNric(new Nric(nric));","lastModifiedDate":"2023-10-30"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2023-10-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"     * Sets the {@code Nric} of the {@code EditPersonDescriptor} that we are","lastModifiedDate":"2023-11-02"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"     * building to null.","lastModifiedDate":"2023-11-02"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"    public EditPersonDescriptorBuilder withNullNric() {","lastModifiedDate":"2023-11-02"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"        descriptor.setNric(null);","lastModifiedDate":"2023-11-02"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"        return this;","lastModifiedDate":"2023-11-02"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":75,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-30"},{"lineNumber":76,"author":{"gitId":"Darren159"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are","lastModifiedDate":"2023-10-30"},{"lineNumber":77,"author":{"gitId":"Darren159"},"content":"     * building.","lastModifiedDate":"2023-10-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2023-10-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2023-10-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2023-10-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":85,"author":{"gitId":"Darren159"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are","lastModifiedDate":"2023-10-30"},{"lineNumber":86,"author":{"gitId":"Darren159"},"content":"     * building.","lastModifiedDate":"2023-10-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":94,"author":{"gitId":"Darren159"},"content":"     * Sets the {@code Gender} of the {@code EditPersonDescriptor} that we are","lastModifiedDate":"2023-10-30"},{"lineNumber":95,"author":{"gitId":"Darren159"},"content":"     * building.","lastModifiedDate":"2023-10-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":97,"author":{"gitId":"adammangzijun"},"content":"    public EditPersonDescriptorBuilder withGender(String gender) {","lastModifiedDate":"2023-10-14"},{"lineNumber":98,"author":{"gitId":"adammangzijun"},"content":"        descriptor.setGender(new Gender(gender));","lastModifiedDate":"2023-10-14"},{"lineNumber":99,"author":{"gitId":"adammangzijun"},"content":"        return this;","lastModifiedDate":"2023-10-14"},{"lineNumber":100,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":101,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":102,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":103,"author":{"gitId":"Darren159"},"content":"     * Sets the {@code Age} of the {@code EditPersonDescriptor} that we are","lastModifiedDate":"2023-10-30"},{"lineNumber":104,"author":{"gitId":"Darren159"},"content":"     * building.","lastModifiedDate":"2023-10-30"},{"lineNumber":105,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":106,"author":{"gitId":"adammangzijun"},"content":"    public EditPersonDescriptorBuilder withAge(int age) {","lastModifiedDate":"2023-10-14"},{"lineNumber":107,"author":{"gitId":"adammangzijun"},"content":"        descriptor.setAge(new Age(age));","lastModifiedDate":"2023-10-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":112,"author":{"gitId":"Darren159"},"content":"     * Sets the {@code BloodType} of the {@code EditPersonDescriptor} that we are","lastModifiedDate":"2023-10-30"},{"lineNumber":113,"author":{"gitId":"Darren159"},"content":"     * building.","lastModifiedDate":"2023-10-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":115,"author":{"gitId":"adammangzijun"},"content":"    public EditPersonDescriptorBuilder withBloodType(String bloodType) {","lastModifiedDate":"2023-10-14"},{"lineNumber":116,"author":{"gitId":"adammangzijun"},"content":"        descriptor.setBloodType(new BloodType(bloodType));","lastModifiedDate":"2023-10-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":121,"author":{"gitId":"Darren159"},"content":"     * Parses the {@code allergies} into a {@code Set\u003cAllergy\u003e} and set it to the","lastModifiedDate":"2023-10-30"},{"lineNumber":122,"author":{"gitId":"Darren159"},"content":"     * {@code EditPersonDescriptor}","lastModifiedDate":"2023-10-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":125,"author":{"gitId":"adammangzijun"},"content":"    public EditPersonDescriptorBuilder withAllergies(String... allergies) {","lastModifiedDate":"2023-10-14"},{"lineNumber":126,"author":{"gitId":"Darren159"},"content":"        Set\u003cAllergy\u003e allergySet \u003d SampleDataUtil.getAllergySet(allergies);","lastModifiedDate":"2023-10-19"},{"lineNumber":127,"author":{"gitId":"adammangzijun"},"content":"        descriptor.setAllergies(allergySet);","lastModifiedDate":"2023-10-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"Darren159":38,"-":78,"adammangzijun":18}},{"path":"src/test/java/seedu/address/testutil/EditRecordDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import java.util.List;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.EditRecordCommand.EditRecordDescriptor;","lastModifiedDate":"2023-10-30"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.record.Condition;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Medication;","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.shared.DateTime;","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":" * A utility class to help with building EditRecordDescriptor objects.","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"public class EditRecordDescriptorBuilder {","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"    private EditRecordDescriptor descriptor;","lastModifiedDate":"2023-10-30"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"    public EditRecordDescriptorBuilder() {","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"        descriptor \u003d new EditRecordDescriptor();","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"    public EditRecordDescriptorBuilder(EditRecordDescriptor descriptor) {","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"        this.descriptor \u003d new EditRecordDescriptor(descriptor);","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"     * Returns an {@code EditRecordDescriptor} with fields containing","lastModifiedDate":"2023-10-30"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"     * {@code record}\u0027s details","lastModifiedDate":"2023-10-30"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"    public EditRecordDescriptorBuilder(Record record) {","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"        descriptor \u003d new EditRecordDescriptor();","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"        descriptor.setDateTime(record.getDateTime());","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"        descriptor.setConditions(record.getConditions());","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"        descriptor.setMedications(record.getMedications());","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"     * Sets the {@code DateTime} of the {@code EditRecordDescriptor} that we are","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"     * building.","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"    public EditRecordDescriptorBuilder withDateTime(String dateTime) {","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"        DateTime newDateTime \u003d new DateTime(dateTime);","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"        descriptor.setDateTime(newDateTime);","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"        return this;","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"ryanongwx"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"     * Sets the {@code patientIndex} of the {@code EditRecordDescriptor} that we are","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"     * building.","lastModifiedDate":"2023-10-30"},{"lineNumber":51,"author":{"gitId":"ryanongwx"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"ryanongwx"},"content":"    public EditRecordDescriptorBuilder withPatientIndex(Integer patientIndex) {","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"ryanongwx"},"content":"        descriptor.setPatientIndex(patientIndex);","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"ryanongwx"},"content":"        return this;","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"ryanongwx"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"     * Parses the {@code conditions} into a {@code ArrayList\u003cCondition\u003e} and set it","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"     * to the {@code EditRecordDescriptor}","lastModifiedDate":"2023-10-30"},{"lineNumber":60,"author":{"gitId":"adammangzijun"},"content":"     * that we are building.","lastModifiedDate":"2023-10-24"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"    public EditRecordDescriptorBuilder withConditions(String... conditions) {","lastModifiedDate":"2023-10-24"},{"lineNumber":63,"author":{"gitId":"adammangzijun"},"content":"        List\u003cCondition\u003e conditionList \u003d SampleDataUtil.getConditionList(conditions);","lastModifiedDate":"2023-10-24"},{"lineNumber":64,"author":{"gitId":"adammangzijun"},"content":"        descriptor.setConditions(conditionList);","lastModifiedDate":"2023-10-24"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"        return this;","lastModifiedDate":"2023-10-24"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":67,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":68,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":69,"author":{"gitId":"hjoneweek"},"content":"     * Parses the {@code medications} into a {@code ArrayList\u003cMedication\u003e}","lastModifiedDate":"2023-10-26"},{"lineNumber":70,"author":{"gitId":"hjoneweek"},"content":"     * and set it to the {@code EditRecordDescriptor} that we are building","lastModifiedDate":"2023-10-26"},{"lineNumber":71,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":72,"author":{"gitId":"hjoneweek"},"content":"    public EditRecordDescriptorBuilder withMedications(String... medications) {","lastModifiedDate":"2023-10-26"},{"lineNumber":73,"author":{"gitId":"hjoneweek"},"content":"        List\u003cMedication\u003e medicationList \u003d SampleDataUtil.getMedicationList(medications);","lastModifiedDate":"2023-10-26"},{"lineNumber":74,"author":{"gitId":"hjoneweek"},"content":"        descriptor.setMedications(medicationList);","lastModifiedDate":"2023-10-26"},{"lineNumber":75,"author":{"gitId":"hjoneweek"},"content":"        return this;","lastModifiedDate":"2023-10-26"},{"lineNumber":76,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":77,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":78,"author":{"gitId":"Darren159"},"content":"    public EditRecordDescriptor build() {","lastModifiedDate":"2023-10-30"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"        return descriptor;","lastModifiedDate":"2023-10-24"},{"lineNumber":80,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":81,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"Darren159":15,"hjoneweek":12,"adammangzijun":47,"ryanongwx":7}},{"path":"src/test/java/seedu/address/testutil/MockJsonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanongwx"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ryanongwx"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"ryanongwx"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"ryanongwx"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"ryanongwx"},"content":" * A mock version of {@link JsonUtil} used for testing.","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"ryanongwx"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ryanongwx"},"content":"public class MockJsonUtil extends JsonUtil {","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ryanongwx"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ryanongwx"},"content":"     * Overrides the {@code fromJsonString} method of {@link JsonUtil} to always","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ryanongwx"},"content":"     * return null.","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"ryanongwx"},"content":"     * This behavior can be useful to simulate certain test conditions where","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ryanongwx"},"content":"     * deserialization fails to produce an object.","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ryanongwx"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ryanongwx"},"content":"     * @param \u003cT\u003e        The type of the object to be deserialized.","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"ryanongwx"},"content":"     * @param jsonString The JSON string to deserialize.","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"ryanongwx"},"content":"     * @param classOfT   The class of type T.","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"ryanongwx"},"content":"     * @return Always returns null irrespective of input parameters.","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"ryanongwx"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"ryanongwx"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"ryanongwx"},"content":"    public static \u003cT\u003e T fromJsonString(String jsonString, Class\u003cT\u003e classOfT) throws IOException {","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"ryanongwx"},"content":"        return null;","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"ryanongwx"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"ryanongwx"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ryanongwx":27}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Age;","lastModifiedDate":"2023-10-15"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-15"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.BloodType;","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-10-15"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Gender;","lastModifiedDate":"2023-10-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-15"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.UniqueRecordList;","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Name;","lastModifiedDate":"2023-10-22"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.Nric;","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"    public static final String DEFAULT_NRIC \u003d \"Z1234567Z\";","lastModifiedDate":"2023-10-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"    public static final String DEFAULT_GENDER \u003d \"F\";","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"    public static final int DEFAULT_AGE \u003d 21;","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"    public static final String DEFAULT_BLOODTYPE \u003d \"O+\";","lastModifiedDate":"2023-10-15"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"    public static final String DEFAULT_ALLERGY \u003d \"Ants\";","lastModifiedDate":"2023-10-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"    private Nric nric;","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"    private Phone phone;","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"    private Gender gender;","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"    private Age age;","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"    private BloodType bloodType;","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"    private Set\u003cAllergy\u003e allergies;","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"    private UniqueRecordList records;","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"    private UniqueAppointmentList appointments;","lastModifiedDate":"2023-10-18"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"    private boolean isPinned;","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"        nric \u003d new Nric(DEFAULT_NRIC);","lastModifiedDate":"2023-10-30"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2023-10-14"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"        gender \u003d new Gender(DEFAULT_GENDER);","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"        age \u003d new Age(DEFAULT_AGE);","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"        bloodType \u003d new BloodType(DEFAULT_BLOODTYPE);","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"        allergies \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"        records \u003d new UniqueRecordList();","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"        appointments \u003d new UniqueAppointmentList();","lastModifiedDate":"2023-10-18"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"        isPinned \u003d false;","lastModifiedDate":"2023-10-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"        nric \u003d personToCopy.getNric();","lastModifiedDate":"2023-10-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":71,"author":{"gitId":"adammangzijun"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2023-10-14"},{"lineNumber":72,"author":{"gitId":"adammangzijun"},"content":"        gender \u003d personToCopy.getGender();","lastModifiedDate":"2023-10-14"},{"lineNumber":73,"author":{"gitId":"adammangzijun"},"content":"        age \u003d personToCopy.getAge();","lastModifiedDate":"2023-10-14"},{"lineNumber":74,"author":{"gitId":"adammangzijun"},"content":"        bloodType \u003d personToCopy.getBloodType();","lastModifiedDate":"2023-10-14"},{"lineNumber":75,"author":{"gitId":"adammangzijun"},"content":"        allergies \u003d new HashSet\u003c\u003e(personToCopy.getAllergies());","lastModifiedDate":"2023-10-14"},{"lineNumber":76,"author":{"gitId":"hjoneweek"},"content":"        records \u003d new UniqueRecordList();","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"hjoneweek"},"content":"        records.setRecords(personToCopy.getRecords());","lastModifiedDate":"2023-10-20"},{"lineNumber":78,"author":{"gitId":"Darren159"},"content":"        appointments \u003d new UniqueAppointmentList();","lastModifiedDate":"2023-10-20"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"        appointments.setAppointments(personToCopy.getAppointments());","lastModifiedDate":"2023-10-30"},{"lineNumber":80,"author":{"gitId":"Darren159"},"content":"        ;","lastModifiedDate":"2023-10-30"},{"lineNumber":81,"author":{"gitId":"Darren159"},"content":"        isPinned \u003d personToCopy.isPinned();","lastModifiedDate":"2023-10-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-10-30"},{"lineNumber":93,"author":{"gitId":"Darren159"},"content":"     * Sets the {@code Nric} of the {@code Person} that we are building.","lastModifiedDate":"2023-10-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-10-30"},{"lineNumber":95,"author":{"gitId":"Darren159"},"content":"    public PersonBuilder withNric(String nric) {","lastModifiedDate":"2023-10-30"},{"lineNumber":96,"author":{"gitId":"Darren159"},"content":"        this.nric \u003d new Nric(nric);","lastModifiedDate":"2023-10-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2023-10-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":101,"author":{"gitId":"adammangzijun"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2023-10-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":103,"author":{"gitId":"adammangzijun"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2023-10-14"},{"lineNumber":104,"author":{"gitId":"adammangzijun"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2023-10-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2023-10-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2023-10-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2023-10-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":117,"author":{"gitId":"adammangzijun"},"content":"     * Sets the {@code Gender} of the {@code Person} that we are building.","lastModifiedDate":"2023-10-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":119,"author":{"gitId":"adammangzijun"},"content":"    public PersonBuilder withGender(String gender) {","lastModifiedDate":"2023-10-14"},{"lineNumber":120,"author":{"gitId":"adammangzijun"},"content":"        this.gender \u003d new Gender(gender);","lastModifiedDate":"2023-10-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":125,"author":{"gitId":"adammangzijun"},"content":"     * Sets the {@code Age} of the {@code Person} that we are building.","lastModifiedDate":"2023-10-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":127,"author":{"gitId":"adammangzijun"},"content":"    public PersonBuilder withAge(int age) {","lastModifiedDate":"2023-10-14"},{"lineNumber":128,"author":{"gitId":"adammangzijun"},"content":"        this.age \u003d new Age(age);","lastModifiedDate":"2023-10-14"},{"lineNumber":129,"author":{"gitId":"adammangzijun"},"content":"        return this;","lastModifiedDate":"2023-10-14"},{"lineNumber":130,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":131,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":132,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":133,"author":{"gitId":"adammangzijun"},"content":"     * Sets the {@code BloodType} of the {@code Person} that we are building.","lastModifiedDate":"2023-10-14"},{"lineNumber":134,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":135,"author":{"gitId":"adammangzijun"},"content":"    public PersonBuilder withBloodType(String bloodType) {","lastModifiedDate":"2023-10-14"},{"lineNumber":136,"author":{"gitId":"adammangzijun"},"content":"        this.bloodType \u003d new BloodType(bloodType);","lastModifiedDate":"2023-10-14"},{"lineNumber":137,"author":{"gitId":"adammangzijun"},"content":"        return this;","lastModifiedDate":"2023-10-14"},{"lineNumber":138,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":139,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":140,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":141,"author":{"gitId":"Darren159"},"content":"     * Parses the {@code allergies} into a {@code Set\u003cAllergy\u003e} and set it to the","lastModifiedDate":"2023-10-30"},{"lineNumber":142,"author":{"gitId":"Darren159"},"content":"     * {@code Person} that we are building.","lastModifiedDate":"2023-10-30"},{"lineNumber":143,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":144,"author":{"gitId":"adammangzijun"},"content":"    public PersonBuilder withAllergies(String... allergies) {","lastModifiedDate":"2023-10-14"},{"lineNumber":145,"author":{"gitId":"adammangzijun"},"content":"        this.allergies \u003d SampleDataUtil.getAllergySet(allergies);","lastModifiedDate":"2023-10-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":149,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":150,"author":{"gitId":"hjoneweek"},"content":"     * Sets the {@code records} of the {@code Person} that we are building.","lastModifiedDate":"2023-10-19"},{"lineNumber":151,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":152,"author":{"gitId":"hjoneweek"},"content":"    public PersonBuilder withRecords(Record... records) {","lastModifiedDate":"2023-10-19"},{"lineNumber":153,"author":{"gitId":"hjoneweek"},"content":"        this.records \u003d SampleDataUtil.getRecordList(records);","lastModifiedDate":"2023-10-19"},{"lineNumber":154,"author":{"gitId":"hjoneweek"},"content":"        return this;","lastModifiedDate":"2023-10-19"},{"lineNumber":155,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":156,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":157,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":158,"author":{"gitId":"hjoneweek"},"content":"     * Sets the {@code records} of the {@code Person} that we are building.","lastModifiedDate":"2023-10-19"},{"lineNumber":159,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":160,"author":{"gitId":"hjoneweek"},"content":"    public PersonBuilder withRecords(UniqueRecordList records) {","lastModifiedDate":"2023-10-20"},{"lineNumber":161,"author":{"gitId":"hjoneweek"},"content":"        this.records \u003d records;","lastModifiedDate":"2023-10-19"},{"lineNumber":162,"author":{"gitId":"hjoneweek"},"content":"        return this;","lastModifiedDate":"2023-10-19"},{"lineNumber":163,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":164,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":165,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-15"},{"lineNumber":166,"author":{"gitId":"Darren159"},"content":"     * Sets the {@code isPinned} of the {@code Person} that we are building.","lastModifiedDate":"2023-10-15"},{"lineNumber":167,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-15"},{"lineNumber":168,"author":{"gitId":"Darren159"},"content":"    public PersonBuilder withIsPinned(boolean isPinned) {","lastModifiedDate":"2023-10-15"},{"lineNumber":169,"author":{"gitId":"Darren159"},"content":"        this.isPinned \u003d isPinned;","lastModifiedDate":"2023-10-15"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":173,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-18"},{"lineNumber":174,"author":{"gitId":"Darren159"},"content":"     * Sets the {@code appointments} of the {@code Person} that we are building.","lastModifiedDate":"2023-10-18"},{"lineNumber":175,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-18"},{"lineNumber":176,"author":{"gitId":"Darren159"},"content":"    public PersonBuilder withAppointments(UniqueAppointmentList appointment) {","lastModifiedDate":"2023-10-19"},{"lineNumber":177,"author":{"gitId":"Darren159"},"content":"        this.appointments \u003d appointment;","lastModifiedDate":"2023-10-19"},{"lineNumber":178,"author":{"gitId":"Darren159"},"content":"        return this;","lastModifiedDate":"2023-10-18"},{"lineNumber":179,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":180,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":181,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":182,"author":{"gitId":"Darren159"},"content":"     * Sets the {@code appointments} of the {@code Person} that we are building.","lastModifiedDate":"2023-10-19"},{"lineNumber":183,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":184,"author":{"gitId":"Darren159"},"content":"    public PersonBuilder withAppointments(Appointment... appointments) {","lastModifiedDate":"2023-10-19"},{"lineNumber":185,"author":{"gitId":"Darren159"},"content":"        this.appointments \u003d SampleDataUtil.getAppointmentList(appointments);","lastModifiedDate":"2023-10-19"},{"lineNumber":186,"author":{"gitId":"Darren159"},"content":"        return this;","lastModifiedDate":"2023-10-19"},{"lineNumber":187,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":188,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":190,"author":{"gitId":"Darren159"},"content":"        return new Person(name, nric, email, phone, gender, age, bloodType, allergies, records, appointments, isPinned);","lastModifiedDate":"2023-10-30"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":192,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"Darren159":48,"hjoneweek":22,"-":79,"adammangzijun":43}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-04-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;","lastModifiedDate":"2023-10-15"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;","lastModifiedDate":"2023-10-15"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;","lastModifiedDate":"2023-10-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-10-15"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;","lastModifiedDate":"2023-10-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-15"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-10-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-03-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2018-03-26"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2017-03-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"        sb.append(PREFIX_NRIC + person.getNric().nric + \" \");","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"        sb.append(PREFIX_GENDER + person.getGender().gender + \" \");","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"        sb.append(PREFIX_AGE + person.getAge().age.toString() + \" \");","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"        sb.append(PREFIX_BLOODTYPE + person.getBloodType().bloodType + \" \");","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"        person.getAllergies().stream().forEach(","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"                s -\u003e sb.append(PREFIX_ALLERGIES + s.allergy + \" \"));","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"     * Returns the part of command string for the given","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"     * {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2023-10-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"        descriptor.getGender().ifPresent(gender -\u003e sb.append(PREFIX_GENDER).append(gender.gender).append(\" \"));","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"        descriptor.getAge().ifPresent(age -\u003e sb.append(PREFIX_AGE).append(age.age).append(\" \"));","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"        descriptor.getBloodType().ifPresent(bloodType -\u003e sb.append(PREFIX_BLOODTYPE).append(bloodType.bloodType)","lastModifiedDate":"2023-10-15"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"                .append(\" \"));","lastModifiedDate":"2023-10-15"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"        if (descriptor.getAllergies().isPresent()) {","lastModifiedDate":"2023-10-14"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"            Set\u003cAllergy\u003e allergies \u003d descriptor.getAllergies().get();","lastModifiedDate":"2023-10-14"},{"lineNumber":63,"author":{"gitId":"adammangzijun"},"content":"            if (allergies.isEmpty()) {","lastModifiedDate":"2023-10-14"},{"lineNumber":64,"author":{"gitId":"adammangzijun"},"content":"                sb.append(PREFIX_ALLERGIES);","lastModifiedDate":"2023-10-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"                allergies.forEach(s -\u003e sb.append(PREFIX_ALLERGIES).append(s.allergy).append(\" \"));","lastModifiedDate":"2023-10-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"Darren159":11,"-":46,"adammangzijun":14}},{"path":"src/test/java/seedu/address/testutil/RecordBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"ryanongwx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import java.util.List;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Condition;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Medication;","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.shared.DateTime;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":" * A utility class to help with building Record objects.","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"public class RecordBuilder {","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    private List\u003cCondition\u003e conditions;","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    private List\u003cMedication\u003e medications;","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"    private DateTime dateTime;","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"ryanongwx"},"content":"    private Path filePath;","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"ryanongwx"},"content":"    private Integer personIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"     * Creates a {@code RecordBuilder} with the default details.","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"    public RecordBuilder() {","lastModifiedDate":"2023-10-19"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"        conditions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"        dateTime \u003d new DateTime(\"09-10-2023 1800\");","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"     * Initializes the RecordBuilder with the data of {@code recordToCopy}.","lastModifiedDate":"2023-10-19"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"    public RecordBuilder(Record recordToCopy) {","lastModifiedDate":"2023-10-19"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"        conditions \u003d recordToCopy.getConditions();","lastModifiedDate":"2023-10-19"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"        dateTime \u003d recordToCopy.getDateTime();","lastModifiedDate":"2023-10-19"},{"lineNumber":42,"author":{"gitId":"ryanongwx"},"content":"        filePath \u003d recordToCopy.getFilePath();","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"ryanongwx"},"content":"        personIndex \u003d recordToCopy.getPersonIndex();","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"        medications \u003d recordToCopy.getMedications();","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"     * Parses the {@code conditions} into a {@code List\u003cCondition\u003e}","lastModifiedDate":"2023-10-19"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"     * and set it to the {@code Record} that we are building.","lastModifiedDate":"2023-10-19"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"    public RecordBuilder withConditions(String... conditions) {","lastModifiedDate":"2023-10-19"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"        this.conditions \u003d SampleDataUtil.getConditionList(conditions);","lastModifiedDate":"2023-10-19"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"        return this;","lastModifiedDate":"2023-10-19"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"     * Parses the {@code medications} into a {@code List\u003cMedication\u003e}","lastModifiedDate":"2023-10-26"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"     * and set it to the {@code Record} that we are building.","lastModifiedDate":"2023-10-26"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"    public RecordBuilder withMedications(String... medications) {","lastModifiedDate":"2023-10-26"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"        this.medications \u003d SampleDataUtil.getMedicationList(medications);","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"        return this;","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":65,"author":{"gitId":"hjoneweek"},"content":"     * Sets the {@code dateTime} of the {@code Record} that we are building.","lastModifiedDate":"2023-10-19"},{"lineNumber":66,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":67,"author":{"gitId":"hjoneweek"},"content":"    public RecordBuilder withDateTime(String dateTime) {","lastModifiedDate":"2023-10-19"},{"lineNumber":68,"author":{"gitId":"hjoneweek"},"content":"        this.dateTime \u003d new DateTime(dateTime);","lastModifiedDate":"2023-10-19"},{"lineNumber":69,"author":{"gitId":"hjoneweek"},"content":"        return this;","lastModifiedDate":"2023-10-19"},{"lineNumber":70,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":71,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":72,"author":{"gitId":"ryanongwx"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":73,"author":{"gitId":"ryanongwx"},"content":"     * Sets the {@code filePath} of the {@code Record} that we are building.","lastModifiedDate":"2023-10-24"},{"lineNumber":74,"author":{"gitId":"ryanongwx"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":75,"author":{"gitId":"ryanongwx"},"content":"    public RecordBuilder withFilePath(Path filePath) {","lastModifiedDate":"2023-10-24"},{"lineNumber":76,"author":{"gitId":"ryanongwx"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-10-24"},{"lineNumber":77,"author":{"gitId":"ryanongwx"},"content":"        return this;","lastModifiedDate":"2023-10-24"},{"lineNumber":78,"author":{"gitId":"ryanongwx"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":79,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":80,"author":{"gitId":"ryanongwx"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":81,"author":{"gitId":"ryanongwx"},"content":"     * Sets the {@code personIndex} of the {@code Record} that we are building.","lastModifiedDate":"2023-10-24"},{"lineNumber":82,"author":{"gitId":"ryanongwx"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":83,"author":{"gitId":"ryanongwx"},"content":"    public RecordBuilder withPersonIndex(Integer personIndex) {","lastModifiedDate":"2023-10-24"},{"lineNumber":84,"author":{"gitId":"ryanongwx"},"content":"        this.personIndex \u003d personIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":85,"author":{"gitId":"ryanongwx"},"content":"        return this;","lastModifiedDate":"2023-10-24"},{"lineNumber":86,"author":{"gitId":"ryanongwx"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":87,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":88,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":89,"author":{"gitId":"hjoneweek"},"content":"     * Builds a new record","lastModifiedDate":"2023-10-19"},{"lineNumber":90,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":91,"author":{"gitId":"hjoneweek"},"content":"    public Record build() {","lastModifiedDate":"2023-10-19"},{"lineNumber":92,"author":{"gitId":"ryanongwx"},"content":"        return new Record(dateTime, conditions, medications, filePath, personIndex);","lastModifiedDate":"2023-10-26"},{"lineNumber":93,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":94,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":95,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"hjoneweek":68,"Darren159":2,"ryanongwx":25}},{"path":"src/test/java/seedu/address/testutil/TypicalAppointments.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATETIME_SLEEP_STUDY;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATETIME_THYROID_CHECK;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_SLEEP_STUDY;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_THYROID_CHECK;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":" * A utility class containing a list of {@code Appointment} objects to be used","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":" * in tests.","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"public class TypicalAppointments {","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"    public static final Appointment EYE_EXAM \u003d new AppointmentBuilder().withName(\"Eye Exam\")","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"            .withDateTime(\"01-01-2001 1200\").withNric(\"S1234567B\").build();","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"    public static final Appointment VACCINATION \u003d new AppointmentBuilder().withName(\"Vaccination\")","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"            .withDateTime(\"11-09-2001 1200\").withNric(\"S1234567A\").build();","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"    public static final Appointment COLONOSCOPY \u003d new AppointmentBuilder().withName(\"Colonoscopy\")","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"            .withDateTime(\"21-12-2001 1200\").withNric(\"T1234567A\").build();","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"    // Manually added","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"    public static final Appointment BIOPSY \u003d new AppointmentBuilder().withName(\"Biopsy\")","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"            .withDateTime(\"01-01-2001 1200\").withNric(\"S0000002A\").build();","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"    public static final Appointment STD_TEST \u003d new AppointmentBuilder().withName(\"STD Test\")","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"            .withDateTime(\"17-08-1964 1900\").withNric(\"S0000003A\").build();","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"    // Manually added - Appointment\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2023-10-19"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"    public static final Appointment SLEEP_STUDY \u003d new AppointmentBuilder().withName(VALID_NAME_SLEEP_STUDY)","lastModifiedDate":"2023-10-19"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"            .withDateTime(VALID_DATETIME_SLEEP_STUDY).withNric(VALID_NRIC_AMY).build();","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"    public static final Appointment THYROID_CHECK \u003d new AppointmentBuilder().withName(VALID_NAME_THYROID_CHECK)","lastModifiedDate":"2023-10-19"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"            .withDateTime(VALID_DATETIME_THYROID_CHECK).withNric(VALID_NRIC_BOB).build();","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"    private TypicalAppointments() {","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"    } // prevents instantiation","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"    public static UniqueAppointmentList getTypicalAppointments() {","lastModifiedDate":"2023-10-19"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"        UniqueAppointmentList ab \u003d new UniqueAppointmentList();","lastModifiedDate":"2023-10-19"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"        ab.add(EYE_EXAM);","lastModifiedDate":"2023-10-19"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"        ab.add(VACCINATION);","lastModifiedDate":"2023-10-19"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"        ab.add(COLONOSCOPY);","lastModifiedDate":"2023-10-19"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"        return ab;","lastModifiedDate":"2023-10-19"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"Darren159":48}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-08-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"    public static final Index INDEX_FIRST_RECORD \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"    public static final Index INDEX_SECOND_RECORD \u003d Index.fromOneBased(2);","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"-":12,"adammangzijun":2}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_DUST;","lastModifiedDate":"2023-10-15"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_PEANUTS;","lastModifiedDate":"2023-10-15"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;","lastModifiedDate":"2023-10-30"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2023-10-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalAppointments.COLONOSCOPY;","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalAppointments.EYE_EXAM;","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalAppointments.VACCINATION;","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"ryanongwx"},"content":"import static seedu.address.testutil.TypicalRecords.ALLERGIC_REACTION2;","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"ryanongwx"},"content":"import static seedu.address.testutil.TypicalRecords.FEVER0;","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalRecords.FEVER_AND_COLD0;","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"ryanongwx"},"content":"import static seedu.address.testutil.TypicalRecords.FEVER_AND_COLD1;","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":" * A utility class containing a list of {@code Person} objects to be used in","lastModifiedDate":"2023-10-30"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":" * tests.","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"            .withNric(\"S1234567B\")","lastModifiedDate":"2023-10-30"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"            .withEmail(\"alice@example.com\")","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"            .withGender(\"F\")","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"            .withAge(20)","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"            .withBloodType(\"AB+\")","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"            .withAllergies(\"Chocolate\")","lastModifiedDate":"2023-10-19"},{"lineNumber":48,"author":{"gitId":"ryanongwx"},"content":"            .withRecords(FEVER0)","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"            .withAppointments(EYE_EXAM)","lastModifiedDate":"2023-10-20"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"            .withIsPinned(true).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"            .withNric(\"S1234567A\")","lastModifiedDate":"2023-10-30"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"            .withEmail(\"johnd@example.com\")","lastModifiedDate":"2023-10-14"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"            .withPhone(\"98765432\")","lastModifiedDate":"2023-10-14"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"            .withGender(\"M\")","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"            .withAge(15)","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"            .withBloodType(\"B-\")","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"            .withAllergies(\"Pollen\", \"Soil\")","lastModifiedDate":"2023-10-19"},{"lineNumber":59,"author":{"gitId":"ryanongwx"},"content":"            .withRecords(FEVER_AND_COLD1)","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"            .withAppointments(VACCINATION)","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"            .withIsPinned(false)","lastModifiedDate":"2023-10-19"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"            .build();","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"adammangzijun"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\")","lastModifiedDate":"2023-10-14"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"            .withNric(\"T1234567A\")","lastModifiedDate":"2023-10-30"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"            .withEmail(\"heinz@example.com\")","lastModifiedDate":"2023-10-14"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"            .withPhone(\"95352563\")","lastModifiedDate":"2023-10-14"},{"lineNumber":67,"author":{"gitId":"adammangzijun"},"content":"            .withGender(\"M\")","lastModifiedDate":"2023-10-14"},{"lineNumber":68,"author":{"gitId":"adammangzijun"},"content":"            .withAge(24)","lastModifiedDate":"2023-10-14"},{"lineNumber":69,"author":{"gitId":"adammangzijun"},"content":"            .withBloodType(\"AB-\")","lastModifiedDate":"2023-10-14"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"            .withAllergies(\"Dogs\")","lastModifiedDate":"2023-10-19"},{"lineNumber":71,"author":{"gitId":"ryanongwx"},"content":"            .withRecords(ALLERGIC_REACTION2)","lastModifiedDate":"2023-10-24"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"            .withAppointments(COLONOSCOPY)","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"            .withIsPinned(false)","lastModifiedDate":"2023-10-19"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"            .build();","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":76,"author":{"gitId":"Darren159"},"content":"    public static final Person BEN \u003d new PersonBuilder().withName(\"Ben Kim\")","lastModifiedDate":"2023-11-01"},{"lineNumber":77,"author":{"gitId":"Darren159"},"content":"            .withNric(\"T9876543A\")","lastModifiedDate":"2023-11-01"},{"lineNumber":78,"author":{"gitId":"Darren159"},"content":"            .withEmail(\"bkim@example.com\")","lastModifiedDate":"2023-11-01"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"            .withPhone(\"95352563\")","lastModifiedDate":"2023-11-01"},{"lineNumber":80,"author":{"gitId":"Darren159"},"content":"            .withGender(\"M\")","lastModifiedDate":"2023-11-01"},{"lineNumber":81,"author":{"gitId":"Darren159"},"content":"            .withAge(25)","lastModifiedDate":"2023-11-01"},{"lineNumber":82,"author":{"gitId":"Darren159"},"content":"            .withBloodType(\"AB+\")","lastModifiedDate":"2023-11-01"},{"lineNumber":83,"author":{"gitId":"Darren159"},"content":"            .withAllergies(\"Dogs\")","lastModifiedDate":"2023-11-01"},{"lineNumber":84,"author":{"gitId":"Darren159"},"content":"            .withRecords(ALLERGIC_REACTION2, FEVER0, FEVER_AND_COLD0, FEVER_AND_COLD1)","lastModifiedDate":"2023-11-01"},{"lineNumber":85,"author":{"gitId":"Darren159"},"content":"            .withIsPinned(false)","lastModifiedDate":"2023-11-01"},{"lineNumber":86,"author":{"gitId":"Darren159"},"content":"            .build();","lastModifiedDate":"2023-11-01"},{"lineNumber":87,"author":{"gitId":"adammangzijun"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\")","lastModifiedDate":"2023-10-14"},{"lineNumber":88,"author":{"gitId":"Darren159"},"content":"            .withNric(\"S5678123A\")","lastModifiedDate":"2023-10-30"},{"lineNumber":89,"author":{"gitId":"adammangzijun"},"content":"            .withEmail(\"cornelia@example.com\")","lastModifiedDate":"2023-10-14"},{"lineNumber":90,"author":{"gitId":"adammangzijun"},"content":"            .withPhone(\"87652533\")","lastModifiedDate":"2023-10-14"},{"lineNumber":91,"author":{"gitId":"adammangzijun"},"content":"            .withGender(\"M\")","lastModifiedDate":"2023-10-14"},{"lineNumber":92,"author":{"gitId":"adammangzijun"},"content":"            .withAge(26)","lastModifiedDate":"2023-10-14"},{"lineNumber":93,"author":{"gitId":"adammangzijun"},"content":"            .withBloodType(\"AB+\")","lastModifiedDate":"2023-10-14"},{"lineNumber":94,"author":{"gitId":"Darren159"},"content":"            .withAllergies(\"Cats\")","lastModifiedDate":"2023-10-19"},{"lineNumber":95,"author":{"gitId":"Darren159"},"content":"            .withIsPinned(false).build();","lastModifiedDate":"2023-10-19"},{"lineNumber":96,"author":{"gitId":"adammangzijun"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\")","lastModifiedDate":"2023-10-14"},{"lineNumber":97,"author":{"gitId":"Darren159"},"content":"            .withNric(\"Z1234567A\")","lastModifiedDate":"2023-10-30"},{"lineNumber":98,"author":{"gitId":"adammangzijun"},"content":"            .withPhone(\"9482224\")","lastModifiedDate":"2023-10-14"},{"lineNumber":99,"author":{"gitId":"adammangzijun"},"content":"            .withEmail(\"werner@example.com\")","lastModifiedDate":"2023-10-14"},{"lineNumber":100,"author":{"gitId":"adammangzijun"},"content":"            .withGender(\"F\")","lastModifiedDate":"2023-10-14"},{"lineNumber":101,"author":{"gitId":"adammangzijun"},"content":"            .withAge(27)","lastModifiedDate":"2023-10-14"},{"lineNumber":102,"author":{"gitId":"adammangzijun"},"content":"            .withBloodType(\"A-\")","lastModifiedDate":"2023-10-14"},{"lineNumber":103,"author":{"gitId":"Darren159"},"content":"            .withAllergies(\"Light\")","lastModifiedDate":"2023-10-19"},{"lineNumber":104,"author":{"gitId":"Darren159"},"content":"            .withIsPinned(false).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":105,"author":{"gitId":"adammangzijun"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\")","lastModifiedDate":"2023-10-14"},{"lineNumber":106,"author":{"gitId":"Darren159"},"content":"            .withNric(\"X1234567A\")","lastModifiedDate":"2023-10-30"},{"lineNumber":107,"author":{"gitId":"adammangzijun"},"content":"            .withEmail(\"lydia@example.com\")","lastModifiedDate":"2023-10-14"},{"lineNumber":108,"author":{"gitId":"adammangzijun"},"content":"            .withPhone(\"9482427\")","lastModifiedDate":"2023-10-14"},{"lineNumber":109,"author":{"gitId":"adammangzijun"},"content":"            .withGender(\"F\")","lastModifiedDate":"2023-10-14"},{"lineNumber":110,"author":{"gitId":"adammangzijun"},"content":"            .withAge(29)","lastModifiedDate":"2023-10-14"},{"lineNumber":111,"author":{"gitId":"Darren159"},"content":"            .withBloodType(\"B+\")","lastModifiedDate":"2023-10-19"},{"lineNumber":112,"author":{"gitId":"Darren159"},"content":"            .withIsPinned(false).build();","lastModifiedDate":"2023-10-19"},{"lineNumber":113,"author":{"gitId":"adammangzijun"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\")","lastModifiedDate":"2023-10-14"},{"lineNumber":114,"author":{"gitId":"Darren159"},"content":"            .withNric(\"S1234897A\")","lastModifiedDate":"2023-10-30"},{"lineNumber":115,"author":{"gitId":"adammangzijun"},"content":"            .withEmail(\"anna@example.com\")","lastModifiedDate":"2023-10-14"},{"lineNumber":116,"author":{"gitId":"adammangzijun"},"content":"            .withPhone(\"9482442\")","lastModifiedDate":"2023-10-14"},{"lineNumber":117,"author":{"gitId":"adammangzijun"},"content":"            .withGender(\"M\")","lastModifiedDate":"2023-10-14"},{"lineNumber":118,"author":{"gitId":"adammangzijun"},"content":"            .withAge(30)","lastModifiedDate":"2023-10-14"},{"lineNumber":119,"author":{"gitId":"Darren159"},"content":"            .withBloodType(\"O+\")","lastModifiedDate":"2023-10-19"},{"lineNumber":120,"author":{"gitId":"Darren159"},"content":"            .withIsPinned(false).build();","lastModifiedDate":"2023-10-19"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":123,"author":{"gitId":"adammangzijun"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\")","lastModifiedDate":"2023-10-14"},{"lineNumber":124,"author":{"gitId":"Darren159"},"content":"            .withNric(\"S1564567A\")","lastModifiedDate":"2023-10-30"},{"lineNumber":125,"author":{"gitId":"adammangzijun"},"content":"            .withEmail(\"stefan@example.com\")","lastModifiedDate":"2023-10-14"},{"lineNumber":126,"author":{"gitId":"adammangzijun"},"content":"            .withPhone(\"8482424\")","lastModifiedDate":"2023-10-14"},{"lineNumber":127,"author":{"gitId":"adammangzijun"},"content":"            .withGender(\"M\")","lastModifiedDate":"2023-10-14"},{"lineNumber":128,"author":{"gitId":"adammangzijun"},"content":"            .withAge(30)","lastModifiedDate":"2023-10-14"},{"lineNumber":129,"author":{"gitId":"Darren159"},"content":"            .withBloodType(\"A+\")","lastModifiedDate":"2023-10-19"},{"lineNumber":130,"author":{"gitId":"Darren159"},"content":"            .withIsPinned(true).build();","lastModifiedDate":"2023-10-19"},{"lineNumber":131,"author":{"gitId":"adammangzijun"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\")","lastModifiedDate":"2023-10-14"},{"lineNumber":132,"author":{"gitId":"Darren159"},"content":"            .withNric(\"S1234987A\")","lastModifiedDate":"2023-10-30"},{"lineNumber":133,"author":{"gitId":"adammangzijun"},"content":"            .withEmail(\"hans@example.com\")","lastModifiedDate":"2023-10-14"},{"lineNumber":134,"author":{"gitId":"adammangzijun"},"content":"            .withPhone(\"8482131\")","lastModifiedDate":"2023-10-14"},{"lineNumber":135,"author":{"gitId":"adammangzijun"},"content":"            .withGender(\"M\")","lastModifiedDate":"2023-10-14"},{"lineNumber":136,"author":{"gitId":"adammangzijun"},"content":"            .withAge(33)","lastModifiedDate":"2023-10-14"},{"lineNumber":137,"author":{"gitId":"Darren159"},"content":"            .withBloodType(\"B+\")","lastModifiedDate":"2023-10-19"},{"lineNumber":138,"author":{"gitId":"Darren159"},"content":"            .withIsPinned(false).build();","lastModifiedDate":"2023-10-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":141,"author":{"gitId":"adammangzijun"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":142,"author":{"gitId":"Darren159"},"content":"            .withNric(VALID_NRIC_AMY)","lastModifiedDate":"2023-10-30"},{"lineNumber":143,"author":{"gitId":"adammangzijun"},"content":"            .withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":144,"author":{"gitId":"adammangzijun"},"content":"            .withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":145,"author":{"gitId":"adammangzijun"},"content":"            .withGender(VALID_GENDER_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":146,"author":{"gitId":"adammangzijun"},"content":"            .withAge(VALID_AGE_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":147,"author":{"gitId":"adammangzijun"},"content":"            .withBloodType(VALID_BLOODTYPE_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":148,"author":{"gitId":"Darren159"},"content":"            .withAllergies(VALID_ALLERGY_DUST)","lastModifiedDate":"2023-10-19"},{"lineNumber":149,"author":{"gitId":"Darren159"},"content":"            .build();","lastModifiedDate":"2023-10-19"},{"lineNumber":150,"author":{"gitId":"adammangzijun"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":151,"author":{"gitId":"Darren159"},"content":"            .withNric(VALID_NRIC_BOB)","lastModifiedDate":"2023-10-30"},{"lineNumber":152,"author":{"gitId":"adammangzijun"},"content":"            .withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":153,"author":{"gitId":"adammangzijun"},"content":"            .withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":154,"author":{"gitId":"adammangzijun"},"content":"            .withGender(VALID_GENDER_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":155,"author":{"gitId":"adammangzijun"},"content":"            .withAge(VALID_AGE_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":156,"author":{"gitId":"adammangzijun"},"content":"            .withBloodType(VALID_BLOODTYPE_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":157,"author":{"gitId":"hjoneweek"},"content":"            .withAllergies(VALID_ALLERGY_DUST, VALID_ALLERGY_PEANUTS)","lastModifiedDate":"2023-10-19"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2023-10-19"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":162,"author":{"gitId":"Darren159"},"content":"    private TypicalPersons() {","lastModifiedDate":"2023-10-30"},{"lineNumber":163,"author":{"gitId":"Darren159"},"content":"    } // prevents instantiation","lastModifiedDate":"2023-10-30"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":177,"author":{"gitId":"Darren159"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, BEN, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2023-11-01"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"Darren159":67,"hjoneweek":1,"-":46,"ryanongwx":6,"adammangzijun":59}},{"path":"src/test/java/seedu/address/testutil/TypicalRecords.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":" * A utility class containing a list of {@code Record} objects to be used in tests.","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"public class TypicalRecords {","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"ryanongwx"},"content":"    public static final Record FEVER0 \u003d new RecordBuilder()","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"            .withDateTime(\"09-10-2023 1800\")","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"            .withConditions(\"Fever\")","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"ryanongwx"},"content":"            .withPersonIndex(0)","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"            .withMedications(\"Tylenol\")","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"            .build();","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"ryanongwx"},"content":"    public static final Record FEVER_AND_COLD0 \u003d new RecordBuilder()","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"            .withDateTime(\"09-09-2023 1800\")","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"            .withConditions(\"Fever\", \"Cold\")","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"ryanongwx"},"content":"            .withPersonIndex(0)","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"            .withMedications(\"Tylenol\")","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"            .build();","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"ryanongwx"},"content":"    public static final Record FEVER_AND_COLD1 \u003d new RecordBuilder()","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"ryanongwx"},"content":"            .withDateTime(\"09-09-2023 1800\")","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"ryanongwx"},"content":"            .withConditions(\"Fever\", \"Cold\")","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"ryanongwx"},"content":"            .withMedications(\"Tylenol\")","lastModifiedDate":"2023-10-27"},{"lineNumber":27,"author":{"gitId":"ryanongwx"},"content":"            .withPersonIndex(1)","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"            .build();","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"ryanongwx"},"content":"    public static final Record ALLERGIC_REACTION2 \u003d new RecordBuilder()","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"ryanongwx"},"content":"            .withDateTime(\"23-10-2022 1130\")","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"ryanongwx"},"content":"            .withConditions(\"Allergic Reaction\")","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"ryanongwx"},"content":"            .withPersonIndex(2)","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"ryanongwx"},"content":"            .withMedications(\"Pepto-Bismol\")","lastModifiedDate":"2023-10-27"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"            .build();","lastModifiedDate":"2023-10-19"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":37,"author":{"gitId":"ryanongwx"},"content":"    public static final Record FEVER_AND_COLD2 \u003d new RecordBuilder()","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"ryanongwx"},"content":"            .withDateTime(\"09-09-2023 1800\")","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"ryanongwx"},"content":"            .withConditions(\"Fever\", \"Cold\")","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"ryanongwx"},"content":"            .withPersonIndex(2)","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"ryanongwx"},"content":"            .withMedications(\"Pepto-Bismol\")","lastModifiedDate":"2023-10-27"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"            .build();","lastModifiedDate":"2023-10-19"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":44,"author":{"gitId":"ryanongwx"},"content":"    public static final Record HEADACHE3 \u003d new RecordBuilder()","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"ryanongwx"},"content":"            .withDateTime(\"24-12-2023 1200\")","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"ryanongwx"},"content":"            .withConditions(\"Headache\")","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"ryanongwx"},"content":"            .withPersonIndex(3)","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"            .withMedications(\"Tylenol\")","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"            .build();","lastModifiedDate":"2023-10-19"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"hjoneweek":26,"Darren159":2,"ryanongwx":23}}]
