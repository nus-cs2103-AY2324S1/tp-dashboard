[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"[![CI Status](https://github.com/AY2324S1-CS2103T-W11-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2324S1-CS2103T-W11-1/tp/actions)","lastModifiedDate":"2023-09-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"## HRMate","lastModifiedDate":"2023-09-30"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"HRMate is a **desktop address book application** that aims to streamline HR processes, by offering an intuitive, CLI-based contact management system with specialised functionalities for HR tasks.","lastModifiedDate":"2023-09-30"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"* Besides normal address book function, HRMate allows HR managers to:","lastModifiedDate":"2023-09-30"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"  * Managing people by tags","lastModifiedDate":"2023-09-30"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"  * Importing/Exporting their own csv files","lastModifiedDate":"2023-09-30"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"### Resources","lastModifiedDate":"2023-09-30"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"* **User Guide** for HRMate can be found here: [User Guide](https://github.com/AY2324S1-CS2103T-W11-1/tp/blob/master/docs/UserGuide.md).","lastModifiedDate":"2023-09-30"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"* **Developer Guide** for HRMate can be found here: [Developer Guide](https://github.com/AY2324S1-CS2103T-W11-1/tp/blob/master/docs/DeveloperGuide.md).","lastModifiedDate":"2023-09-30"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":"* Information of contributors for HRMate can be found here:[Team Inforation](https://github.com/AY2324S1-CS2103T-W11-1/tp/blob/master/docs/AboutUs.md).","lastModifiedDate":"2023-09-30"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"### Acknowledgement","lastModifiedDate":"2023-09-30"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)","lastModifiedDate":"2023-09-30"}],"authorContributionMap":{"jean-cq":15,"-":3}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-07-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"    archiveFileName \u003d \u0027hrmate.jar\u0027","lastModifiedDate":"2023-10-26"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"run {","lastModifiedDate":"2023-10-26"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"    enableAssertions \u003d true;","lastModifiedDate":"2023-10-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"ryanozx":5,"-":71}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"About Us\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"# About Us","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"ong-wei-hong"},"content":"You can reach us at the email","lastModifiedDate":"2023-09-30"},{"lineNumber":11,"author":{"gitId":"ong-wei-hong"},"content":" - `mary84060117[at]gmail.com`","lastModifiedDate":"2023-09-30"},{"lineNumber":12,"author":{"gitId":"ong-wei-hong"},"content":" - `Ivan\u0027s email`","lastModifiedDate":"2023-09-30"},{"lineNumber":13,"author":{"gitId":"ong-wei-hong"},"content":" - `weihong.ong[at]u.nus.edu.sg`","lastModifiedDate":"2023-09-30"},{"lineNumber":14,"author":{"gitId":"InfiBeyond"},"content":" - `nancyqinilm[at]gmail.com`","lastModifiedDate":"2023-10-05"},{"lineNumber":15,"author":{"gitId":"ong-wei-hong"},"content":" - `ryanozx[at]u.nus.edu.sg`","lastModifiedDate":"2023-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"### Chen Qun","lastModifiedDate":"2023-09-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"\u003cimg src\u003d\"images/jean-cq.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-09-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":"[[github](https://github.com/jean-cq)]","lastModifiedDate":"2023-09-30"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"[[portfolio](team/jean-cq.md)]","lastModifiedDate":"2023-09-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"ong-wei-hong"},"content":"* Role: Developer, Deliverables and deadlines","lastModifiedDate":"2023-09-30"},{"lineNumber":27,"author":{"gitId":"ong-wei-hong"},"content":"* Responsibilities: Ensure project deliverables are done on time and in the right format.","lastModifiedDate":"2023-09-30"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"### Ivan Tan","lastModifiedDate":"2023-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"\u003cimg src\u003d\"images/ivyy-poison.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-09-30"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"[[github](http://github.com/ivyy-poison)]","lastModifiedDate":"2023-09-30"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"[[portfolio](team/ivyy-poison.md)]","lastModifiedDate":"2023-09-30"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"ong-wei-hong"},"content":"* Role: Developer, Integration","lastModifiedDate":"2023-09-30"},{"lineNumber":36,"author":{"gitId":"ong-wei-hong"},"content":"* Responsibilities: In charge of versioning of the code, maintaining the code repository, integrating various parts of the software to create a whole.","lastModifiedDate":"2023-09-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"### Ong Wei Hong","lastModifiedDate":"2023-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"ong-wei-hong"},"content":"\u003cimg src\u003d\"images/ong-wei-hong.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-09-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"ong-wei-hong"},"content":"[[github](http://github.com/ong-wei-hong)] [[portfolio](team/ong-wei-hong.md)]","lastModifiedDate":"2023-09-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"ong-wei-hong"},"content":"* Role: Developer, Code Quality","lastModifiedDate":"2023-09-30"},{"lineNumber":45,"author":{"gitId":"ong-wei-hong"},"content":"* Responsibilities: Looks after code quality, ensures adherence to coding standards, etc.","lastModifiedDate":"2023-09-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"### Qin Nanxin","lastModifiedDate":"2023-09-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"InfiBeyond"},"content":"\u003cimg src\u003d\"images/infibeyond.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"InfiBeyond"},"content":"[[github](http://github.com/infibeyond)]","lastModifiedDate":"2023-10-05"},{"lineNumber":52,"author":{"gitId":"InfiBeyond"},"content":"[[portfolio](team/infibeyond.md)]","lastModifiedDate":"2023-10-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"ong-wei-hong"},"content":"* Role: Developer, Documentation","lastModifiedDate":"2023-09-30"},{"lineNumber":55,"author":{"gitId":"InfiBeyond"},"content":"* Responsibilities: Ensures the quality of various project documents.","lastModifiedDate":"2023-10-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"### Ryan Ong","lastModifiedDate":"2023-09-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"\u003cimg src\u003d\"images/ryanozx.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-09-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"[[github](http://github.com/ryanozx)]","lastModifiedDate":"2023-09-29"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"[[portfolio](team/ryanozx.md)]","lastModifiedDate":"2023-09-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"ong-wei-hong"},"content":"* Role: Developer, Testing","lastModifiedDate":"2023-09-30"},{"lineNumber":65,"author":{"gitId":"ong-wei-hong"},"content":"* Responsibilities: Ensures the testing of the project is done properly and on time.","lastModifiedDate":"2023-09-30"}],"authorContributionMap":{"ryanozx":8,"jean-cq":3,"InfiBeyond":5,"ivyy-poison":3,"-":30,"ong-wei-hong":16}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"\u003cfrontmatter\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"Developer Guide\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"\u003c/frontmatter\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"# AB-3 Developer Guide","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"\u003cpage-nav-print\u003e\u003c/page-nav-print\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"{ list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well }_","lastModifiedDate":"2023-10-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"\u003cpuml src\u003d\"diagrams/ArchitectureDiagram.puml\" width\u003d\"280\"\u003e\u003c/puml\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"**`Main`** (consisting of classes [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java)) is in charge of the app launch and shut down.","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At app launch, it initializes the other components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"* At shut down, it shuts down the other components and invokes cleanup methods where necessary.","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"The bulk of the app\u0027s work is done by the following four components:","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2023-09-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"\u003cpuml src\u003d\"diagrams/ArchitectureSequenceDiagram.puml\" width\u003d\"574\"\u003e\u003c/puml\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point).","lastModifiedDate":"2023-10-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"\u003cpuml src\u003d\"diagrams/ComponentManagers.puml\" width\u003d\"300\"\u003e\u003c/puml\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"\u003cpuml src\u003d\"diagrams/UiClassDiagram.puml\" alt\u003d\"Structure of the UI Component\"\u003e\u003c/puml\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"ryanozx"},"content":"\u003cpuml src\u003d\"diagrams/LogicClassDiagram.puml\" width\u003d\"550\"\u003e\u003c/puml\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"The sequence diagram below illustrates the interactions within the `Logic` component, taking `execute(\"delete 1\")` API call as an example.","lastModifiedDate":"2023-09-03"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"ryanozx"},"content":"\u003cpuml src\u003d\"diagrams/DeleteSequenceDiagram.puml\" alt\u003d\"Interactions Inside the Logic Component for the `delete 1` Command\"\u003e\u003c/puml\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":99,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"**Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2023-09-12"},{"lineNumber":102,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2023-09-03"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":107,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it is passed to an `AddressBookParser` object which in turn creates a parser that matches the command (e.g., `DeleteCommandParser`) and uses it to parse the command.","lastModifiedDate":"2023-09-03"},{"lineNumber":108,"author":{"gitId":"ryanozx"},"content":"2. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `DeleteCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2023-10-05"},{"lineNumber":109,"author":{"gitId":"ryanozx"},"content":"3. The command can communicate with the `Model` when it is executed (e.g. to delete a person).","lastModifiedDate":"2023-10-05"},{"lineNumber":110,"author":{"gitId":"ryanozx"},"content":"4. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2023-10-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":112,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"ryanozx"},"content":"\u003cpuml src\u003d\"diagrams/ParserClasses.puml\" width\u003d\"600\"\u003e\u003c/puml\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"ryanozx"},"content":"\u003cpuml src\u003d\"diagrams/ModelClassDiagram.puml\" width\u003d\"450\"\u003e\u003c/puml\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"ivyy-poison"},"content":"* stores the leaves book data as well i.e., all `Leaves` objects (which are contained in a `UniqueLeavesList` object).","lastModifiedDate":"2023-10-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"**Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":138,"author":{"gitId":"ryanozx"},"content":"\u003cpuml src\u003d\"diagrams/BetterModelClassDiagram.puml\" width\u003d\"450\"\u003e\u003c/puml\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"ryanozx"},"content":"\u003cpuml src\u003d\"diagrams/StorageClassDiagram.puml\" width\u003d\"550\"\u003e\u003c/puml\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"ivyy-poison"},"content":"* can save the address book data, leaves book data and user preference data in JSON format, and read them back into corresponding objects.","lastModifiedDate":"2023-10-29"},{"lineNumber":151,"author":{"gitId":"ivyy-poison"},"content":"* inherits from both `AddressBookStorage`, `LeavesBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2023-10-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"ryanozx"},"content":"### Import file","lastModifiedDate":"2023-10-27"},{"lineNumber":165,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":166,"author":{"gitId":"ryanozx"},"content":"The import feature allows users to import employee records in CSV format, increasing portability of","lastModifiedDate":"2023-10-27"},{"lineNumber":167,"author":{"gitId":"ryanozx"},"content":"the user\u0027s data. The import feature can provide a means of mass adding employee records, without having to use the `add`","lastModifiedDate":"2023-10-27"},{"lineNumber":168,"author":{"gitId":"ryanozx"},"content":"command repeatedly. ","lastModifiedDate":"2023-10-27"},{"lineNumber":169,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":170,"author":{"gitId":"ryanozx"},"content":"Here is an example usage of the import feature:","lastModifiedDate":"2023-10-27"},{"lineNumber":171,"author":{"gitId":"ryanozx"},"content":"1. User executes the `import` command.","lastModifiedDate":"2023-10-27"},{"lineNumber":172,"author":{"gitId":"ryanozx"},"content":"2. User navigates to the file to import using the file dialog that opens.","lastModifiedDate":"2023-10-27"},{"lineNumber":173,"author":{"gitId":"ryanozx"},"content":"3. User selects the file and clicks on the Open button of the file dialog.","lastModifiedDate":"2023-10-27"},{"lineNumber":174,"author":{"gitId":"ryanozx"},"content":"4. All contacts in the address book will be overwritten by the contents of the imported file","lastModifiedDate":"2023-10-27"},{"lineNumber":175,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":176,"author":{"gitId":"ryanozx"},"content":"The CSV file is read into a CsvFile object, which is then converted into a CsvSerializableAddressBook object by reading each","lastModifiedDate":"2023-10-27"},{"lineNumber":177,"author":{"gitId":"ryanozx"},"content":"row and the corresponding values for each column. The CsvSerializableAddressBook is then converted into an AddressBook instance,","lastModifiedDate":"2023-10-27"},{"lineNumber":178,"author":{"gitId":"ryanozx"},"content":"which replaces the current AddressBook instance in the app.","lastModifiedDate":"2023-10-27"},{"lineNumber":179,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":180,"author":{"gitId":"ryanozx"},"content":"#### Design considerations","lastModifiedDate":"2023-10-27"},{"lineNumber":181,"author":{"gitId":"ryanozx"},"content":"The choice of using a file dialog for the user to select the file, as opposed to having the user type the file name in","lastModifiedDate":"2023-10-27"},{"lineNumber":182,"author":{"gitId":"ryanozx"},"content":"the command, is to minimise the likelihood of the user misspelling the file or accidentally typing the wrong path due to","lastModifiedDate":"2023-10-27"},{"lineNumber":183,"author":{"gitId":"ryanozx"},"content":"the inclusion/exclusion of parent directories.","lastModifiedDate":"2023-10-27"},{"lineNumber":184,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":185,"author":{"gitId":"ryanozx"},"content":"#### Proposed extensions","lastModifiedDate":"2023-10-27"},{"lineNumber":186,"author":{"gitId":"ryanozx"},"content":"1. Implement autosave ability when importing files","lastModifiedDate":"2023-10-27"},{"lineNumber":187,"author":{"gitId":"ryanozx"},"content":"- Due to the overwriting ability of the import command, all contacts that were in HRMate previously would be lost","lastModifiedDate":"2023-10-27"},{"lineNumber":188,"author":{"gitId":"ryanozx"},"content":"after executing the import command. As such, an autosave ability could be added, utilising the already implemented","lastModifiedDate":"2023-10-27"},{"lineNumber":189,"author":{"gitId":"ryanozx"},"content":"export feature, whereby the current contents of the address book is exported just prior to overwriting the address book.","lastModifiedDate":"2023-10-27"},{"lineNumber":190,"author":{"gitId":"ryanozx"},"content":"2. Implement non-overwriting option for importing files","lastModifiedDate":"2023-10-27"},{"lineNumber":191,"author":{"gitId":"ryanozx"},"content":"- This gives user more granular control over their files, since they can combine employee records stored in different files.","lastModifiedDate":"2023-10-27"},{"lineNumber":192,"author":{"gitId":"ryanozx"},"content":"- Flags can be added to the import command to determine import policy","lastModifiedDate":"2023-10-27"},{"lineNumber":193,"author":{"gitId":"ryanozx"},"content":"  - Overwrite existing address book","lastModifiedDate":"2023-10-27"},{"lineNumber":194,"author":{"gitId":"ryanozx"},"content":"  - If there is a record with the same name in the current address book and imported file, replace it with the one in the imported file","lastModifiedDate":"2023-10-27"},{"lineNumber":195,"author":{"gitId":"ryanozx"},"content":"  - If there is a record with the same name in the current address book and imported file, keep the one in the current address book","lastModifiedDate":"2023-10-27"},{"lineNumber":196,"author":{"gitId":"ryanozx"},"content":"3. Enable importing of leaves","lastModifiedDate":"2023-10-27"},{"lineNumber":197,"author":{"gitId":"ryanozx"},"content":"- A flag can be supplied to the import command to determine the type of file to be imported","lastModifiedDate":"2023-10-27"},{"lineNumber":198,"author":{"gitId":"ryanozx"},"content":"  - By default, it assumes that the imported file contains the address book","lastModifiedDate":"2023-10-27"},{"lineNumber":199,"author":{"gitId":"ryanozx"},"content":"  - One flag can be used to indicate that the imported file contains the leaves book","lastModifiedDate":"2023-10-27"},{"lineNumber":200,"author":{"gitId":"ryanozx"},"content":"  - Another flag can be used to indicate that the user would like to import both address book and leaves book. This will trigger","lastModifiedDate":"2023-10-27"},{"lineNumber":201,"author":{"gitId":"ryanozx"},"content":"  two file dialogs. The reason for providing this option is that the order of importation is specific - the leaves book cannot","lastModifiedDate":"2023-10-27"},{"lineNumber":202,"author":{"gitId":"ryanozx"},"content":"  be imported before the address book, as leaves require a valid reference to an existing employee in the address book.","lastModifiedDate":"2023-10-27"},{"lineNumber":203,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":204,"author":{"gitId":"ryanozx"},"content":"### Export feature","lastModifiedDate":"2023-10-27"},{"lineNumber":205,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":206,"author":{"gitId":"ryanozx"},"content":"The export feature enables users to export employee records into CSV format, which can then be opened in other spreadsheet","lastModifiedDate":"2023-10-27"},{"lineNumber":207,"author":{"gitId":"ryanozx"},"content":"applications. It allows users to select filtered data to export, providing greater granularity in control over file content.","lastModifiedDate":"2023-10-27"},{"lineNumber":208,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":209,"author":{"gitId":"ryanozx"},"content":"Here is an example usage of the `export` feature:","lastModifiedDate":"2023-10-27"},{"lineNumber":210,"author":{"gitId":"ryanozx"},"content":"1. The user uses the `find-some-tag` command to filter for employees with the `full time` tag","lastModifiedDate":"2023-10-27"},{"lineNumber":211,"author":{"gitId":"ryanozx"},"content":"2. The user enters the command `export fulltimers`","lastModifiedDate":"2023-10-27"},{"lineNumber":212,"author":{"gitId":"ryanozx"},"content":"3. A file will be created in `{home folder of HRMate}/exports`, with the name `fulltimers.csv`. This file contains employees","lastModifiedDate":"2023-10-27"},{"lineNumber":213,"author":{"gitId":"ryanozx"},"content":"with the `full time` tag.","lastModifiedDate":"2023-10-27"},{"lineNumber":214,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":215,"author":{"gitId":"ryanozx"},"content":"The export command works by retrieving the filtered person list in the address book, which contains a list of employee records","lastModifiedDate":"2023-10-27"},{"lineNumber":216,"author":{"gitId":"ryanozx"},"content":"that are currently visible in the address book panel. A CsvSerializableAddressBook is constructed from this filtered person list,","lastModifiedDate":"2023-10-27"},{"lineNumber":217,"author":{"gitId":"ryanozx"},"content":"which is then serialized into a CsvFile object. CsvUtil then writes the CsvFile instance into a CSV file.","lastModifiedDate":"2023-10-27"},{"lineNumber":218,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":219,"author":{"gitId":"ryanozx"},"content":"#### Design considerations","lastModifiedDate":"2023-10-27"},{"lineNumber":220,"author":{"gitId":"ryanozx"},"content":"Unlike the import command, the use of a file dialog in saving the file was not adopted as it was deemed unnecessary. Saving all","lastModifiedDate":"2023-10-27"},{"lineNumber":221,"author":{"gitId":"ryanozx"},"content":"records into the same `export` folder provides users with an easy-to-find folder to locate their files.","lastModifiedDate":"2023-10-27"},{"lineNumber":222,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":223,"author":{"gitId":"ryanozx"},"content":"#### Proposed extension","lastModifiedDate":"2023-10-27"},{"lineNumber":224,"author":{"gitId":"ryanozx"},"content":"1. The export command will export both address book and leave book together. The leave book can be saved under the name","lastModifiedDate":"2023-10-27"},{"lineNumber":225,"author":{"gitId":"ryanozx"},"content":"`{address book save name}_leaves.csv` to indicate its association with the address book save file. ","lastModifiedDate":"2023-10-27"},{"lineNumber":226,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":227,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"ryanozx"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState0.puml\" alt\u003d\"UndoRedoState0\"\u003e\u003c/puml\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"ryanozx"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState1.puml\" alt\u003d\"UndoRedoState1\"\u003e\u003c/puml\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"ryanozx"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState2.puml\" alt\u003d\"UndoRedoState2\"\u003e\u003c/puml\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"**Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2023-09-12"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":257,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"ryanozx"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState3.puml\" alt\u003d\"UndoRedoState3\"\u003e\u003c/puml\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":264,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"**Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2023-09-12"},{"lineNumber":267,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"ryanozx"},"content":"\u003cpuml src\u003d\"diagrams/UndoSequenceDiagram.puml\" alt\u003d\"UndoSequenceDiagram\"\u003e\u003c/puml\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"**Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2023-09-12"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":279,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"**Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2023-09-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"ryanozx"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState4.puml\" alt\u003d\"UndoRedoState4\"\u003e\u003c/puml\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"ryanozx"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState5.puml\" alt\u003d\"UndoRedoState5\"\u003e\u003c/puml\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"ryanozx"},"content":"\u003cpuml src\u003d\"diagrams/CommitActivityDiagram.puml\" width\u003d\"250\"\u003e\u003c/puml\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":303,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":305,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":306,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":307,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":309,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":310,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":311,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":312,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":313,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":314,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":315,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":316,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":317,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":318,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":320,"author":{"gitId":"ong-wei-hong"},"content":"### Adding tag feature","lastModifiedDate":"2023-10-27"},{"lineNumber":321,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":322,"author":{"gitId":"ong-wei-hong"},"content":"#### Implementation","lastModifiedDate":"2023-10-27"},{"lineNumber":323,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":324,"author":{"gitId":"ong-wei-hong"},"content":"`AddTagCommand` is implemented similar to `EditCommand`.","lastModifiedDate":"2023-10-27"},{"lineNumber":325,"author":{"gitId":"ong-wei-hong"},"content":"A new `Person` is created with the information from the old `Person`.","lastModifiedDate":"2023-10-27"},{"lineNumber":326,"author":{"gitId":"ong-wei-hong"},"content":"The tags are then added before replacing the old `Person` with the new `Person`.","lastModifiedDate":"2023-10-27"},{"lineNumber":327,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":328,"author":{"gitId":"ong-wei-hong"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2023-10-27"},{"lineNumber":329,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":330,"author":{"gitId":"ong-wei-hong"},"content":"\u003cpuml src\u003d\"diagrams/AddTagActivityDiagram.puml\", width\u003d\"250\"\u003e\u003c/puml\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":331,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":332,"author":{"gitId":"ong-wei-hong"},"content":"#### Design considerations:","lastModifiedDate":"2023-10-27"},{"lineNumber":333,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":334,"author":{"gitId":"ong-wei-hong"},"content":"**Aspect: How AddTagCommand executes:**","lastModifiedDate":"2023-10-27"},{"lineNumber":335,"author":{"gitId":"ong-wei-hong"},"content":"* **Alternative 1 (current choice):** Builts a new Person.","lastModifiedDate":"2023-10-27"},{"lineNumber":336,"author":{"gitId":"ong-wei-hong"},"content":"  * Pros: Easy to implement (using `EditCommand` as reference), immutability allows for potential redo and undo commands.","lastModifiedDate":"2023-10-27"},{"lineNumber":337,"author":{"gitId":"ong-wei-hong"},"content":"  * Cons: Memory intensive, costly in terms of time.","lastModifiedDate":"2023-10-27"},{"lineNumber":338,"author":{"gitId":"ong-wei-hong"},"content":"* **Alternative 2:** Add tags to `Person`.","lastModifiedDate":"2023-10-27"},{"lineNumber":339,"author":{"gitId":"ong-wei-hong"},"content":"  * Pros: Memory efficient","lastModifiedDate":"2023-10-27"},{"lineNumber":340,"author":{"gitId":"ong-wei-hong"},"content":"  * Cons: Mutable `Person` can affect implementation of potential redo and undo commands.","lastModifiedDate":"2023-10-27"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":342,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":343,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":344,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":346,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":347,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":348,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":349,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":350,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":351,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":352,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":354,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":355,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":356,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":357,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":358,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":359,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":360,"author":{"gitId":"ong-wei-hong"},"content":"* has a need to manage a sizeable number of employees\u0027 information","lastModifiedDate":"2023-09-30"},{"lineNumber":361,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":362,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":363,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":364,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":365,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":366,"author":{"gitId":"ong-wei-hong"},"content":"**Value proposition**: manage HR information faster than a typical mouse/GUI driven app","lastModifiedDate":"2023-09-30"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":369,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":370,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":371,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":373,"author":{"gitId":"ryanozx"},"content":"| Priority | As a …                             | I want to …                         | So that I can …                                                          |","lastModifiedDate":"2023-10-05"},{"lineNumber":374,"author":{"gitId":"ryanozx"},"content":"|----------|------------------------------------|-------------------------------------|--------------------------------------------------------------------------|","lastModifiedDate":"2023-10-05"},{"lineNumber":375,"author":{"gitId":"-"},"content":"| `* * *`  | new user                           | see usage instructions              | refer to instructions when I forget how to use the App                   |","lastModifiedDate":"2020-05-23"},{"lineNumber":376,"author":{"gitId":"ong-wei-hong"},"content":"| `* * *`  | HR manager                         | add a new employee                  |                                                                          |","lastModifiedDate":"2023-09-30"},{"lineNumber":377,"author":{"gitId":"ong-wei-hong"},"content":"| `* * *`  | HR manager                         | delete an employee                  | remove employees who no longer work here                                 |","lastModifiedDate":"2023-09-30"},{"lineNumber":378,"author":{"gitId":"ong-wei-hong"},"content":"| `* * *`  | HR manager                         | find an employee by name            | locate details of employees without having to go through the entire list |","lastModifiedDate":"2023-09-30"},{"lineNumber":379,"author":{"gitId":"ong-wei-hong"},"content":"| `* * *`  | organised HR manager               | add/delete a tag to an employee     | change the label of an employee                                          |","lastModifiedDate":"2023-09-30"},{"lineNumber":380,"author":{"gitId":"ryanozx"},"content":"| `* * *`  | organised HR manager               | view all my tags                    | filter by them                                                           |","lastModifiedDate":"2023-10-05"},{"lineNumber":381,"author":{"gitId":"jean-cq"},"content":"| `* * *`  | organised HR manager               | find employees by tags              | find specific category of employees for higher level workflows           |","lastModifiedDate":"2023-10-27"},{"lineNumber":382,"author":{"gitId":"ong-wei-hong"},"content":"| `* *`    | HR manager                         | hide private contact details        | minimize chance of someone else seeing them by accident                  |","lastModifiedDate":"2023-09-30"},{"lineNumber":383,"author":{"gitId":"ryanozx"},"content":"| `* *`    | HR manager                         | import/export records in CSV format | open the records in other apps                                           |","lastModifiedDate":"2023-10-05"},{"lineNumber":384,"author":{"gitId":"ong-wei-hong"},"content":"| `*`      | HR manager of a large organisation | sort employees by name              | locate an employee easily                                                |","lastModifiedDate":"2023-09-30"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":386,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":387,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":388,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":389,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":390,"author":{"gitId":"jean-cq"},"content":"(For all use cases below, the **System** is the `HRMate` and the **Actor** is the `HR Manager`, unless specified otherwise)","lastModifiedDate":"2023-10-04"},{"lineNumber":391,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":392,"author":{"gitId":"jean-cq"},"content":"**Use case: Add/delete a tag from an employee**","lastModifiedDate":"2023-10-04"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":394,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":395,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":396,"author":{"gitId":"ong-wei-hong"},"content":"1.  User requests to find employee by name","lastModifiedDate":"2023-09-30"},{"lineNumber":397,"author":{"gitId":"jean-cq"},"content":"2.  HRMate shows a list of employees with the same name","lastModifiedDate":"2023-10-04"},{"lineNumber":398,"author":{"gitId":"ong-wei-hong"},"content":"3.  User requests to add/delete a tag from a specific employee in the list","lastModifiedDate":"2023-09-30"},{"lineNumber":399,"author":{"gitId":"jean-cq"},"content":"4.  HRMate adds/deletes tag from specified employee","lastModifiedDate":"2023-10-04"},{"lineNumber":400,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":401,"author":{"gitId":"ryanozx"},"content":"    Use case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":402,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":403,"author":{"gitId":"ong-wei-hong"},"content":"**Extensions**","lastModifiedDate":"2023-09-30"},{"lineNumber":404,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":405,"author":{"gitId":"ong-wei-hong"},"content":"* 2a. The list is empty.","lastModifiedDate":"2023-09-30"},{"lineNumber":406,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":407,"author":{"gitId":"ong-wei-hong"},"content":"  Use case ends.","lastModifiedDate":"2023-09-30"},{"lineNumber":408,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":409,"author":{"gitId":"ong-wei-hong"},"content":"* 3a. The given tag is invalid. (already there for add, not there for delete)","lastModifiedDate":"2023-09-30"},{"lineNumber":410,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":411,"author":{"gitId":"jean-cq"},"content":"    * 3a1. HRMate shows an error message.","lastModifiedDate":"2023-10-04"},{"lineNumber":412,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":413,"author":{"gitId":"ong-wei-hong"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2023-09-30"},{"lineNumber":414,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":415,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":416,"author":{"gitId":"ong-wei-hong"},"content":"**Use case: Delete an employee**","lastModifiedDate":"2023-09-30"},{"lineNumber":417,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":418,"author":{"gitId":"ong-wei-hong"},"content":"**MSS**","lastModifiedDate":"2023-09-30"},{"lineNumber":419,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":420,"author":{"gitId":"ong-wei-hong"},"content":"1.  User requests to list employees","lastModifiedDate":"2023-09-30"},{"lineNumber":421,"author":{"gitId":"jean-cq"},"content":"2.  HRMate shows a list of employees","lastModifiedDate":"2023-10-04"},{"lineNumber":422,"author":{"gitId":"ong-wei-hong"},"content":"3.  User requests to delete a specific employee in the list","lastModifiedDate":"2023-09-30"},{"lineNumber":423,"author":{"gitId":"jean-cq"},"content":"4.  HRMate deletes the employee","lastModifiedDate":"2023-10-04"},{"lineNumber":424,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":425,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":426,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":427,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":428,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":429,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":430,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":431,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":432,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":433,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2020-05-23"},{"lineNumber":434,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":435,"author":{"gitId":"jean-cq"},"content":"    * 3a1. HRMate shows an error message.","lastModifiedDate":"2023-10-04"},{"lineNumber":436,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":437,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":438,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":439,"author":{"gitId":"ryanozx"},"content":"**Use case: Import employee records**","lastModifiedDate":"2023-10-05"},{"lineNumber":440,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":441,"author":{"gitId":"ryanozx"},"content":"**MSS**","lastModifiedDate":"2023-10-05"},{"lineNumber":442,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":443,"author":{"gitId":"ryanozx"},"content":"1. User requests to import employee records","lastModifiedDate":"2023-10-05"},{"lineNumber":444,"author":{"gitId":"ryanozx"},"content":"2. User selects CSV file from file dialog","lastModifiedDate":"2023-10-05"},{"lineNumber":445,"author":{"gitId":"ryanozx"},"content":"3. HRMate adds records in CSV file inside its list of employee records","lastModifiedDate":"2023-10-05"},{"lineNumber":446,"author":{"gitId":"ryanozx"},"content":"4. HRMate displays a message indicating successful importing of file","lastModifiedDate":"2023-10-27"},{"lineNumber":447,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":448,"author":{"gitId":"ryanozx"},"content":"    Use case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":449,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":450,"author":{"gitId":"ryanozx"},"content":"**Extensions**","lastModifiedDate":"2023-10-05"},{"lineNumber":451,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":452,"author":{"gitId":"ryanozx"},"content":"* 2a. User cancels the file selection operation.","lastModifiedDate":"2023-10-05"},{"lineNumber":453,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":454,"author":{"gitId":"ryanozx"},"content":"  * 2a1. HRMate closes the file selection window and aborts the operation.","lastModifiedDate":"2023-10-05"},{"lineNumber":455,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":456,"author":{"gitId":"ryanozx"},"content":"    Use case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":457,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":458,"author":{"gitId":"ryanozx"},"content":"* 3a. File is not of CSV file type","lastModifiedDate":"2023-10-05"},{"lineNumber":459,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":460,"author":{"gitId":"ryanozx"},"content":"  * 3a1. HRMate displays an error message.","lastModifiedDate":"2023-10-05"},{"lineNumber":461,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":462,"author":{"gitId":"ryanozx"},"content":"    Use case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":463,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":464,"author":{"gitId":"ryanozx"},"content":"* 3b. File is corrupted, unable to read employee records","lastModifiedDate":"2023-10-05"},{"lineNumber":465,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":466,"author":{"gitId":"ryanozx"},"content":"  * 3b1. HRMate discards all data read in.","lastModifiedDate":"2023-10-05"},{"lineNumber":467,"author":{"gitId":"ryanozx"},"content":"  * 3b2. HRMate displays an error message.","lastModifiedDate":"2023-10-05"},{"lineNumber":468,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":469,"author":{"gitId":"ryanozx"},"content":"    Use case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":470,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":471,"author":{"gitId":"ryanozx"},"content":"**Use case: Export employee records**","lastModifiedDate":"2023-10-05"},{"lineNumber":472,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":473,"author":{"gitId":"ryanozx"},"content":"**MSS**","lastModifiedDate":"2023-10-05"},{"lineNumber":474,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":475,"author":{"gitId":"ryanozx"},"content":"1. User requests to export employee records.","lastModifiedDate":"2023-10-05"},{"lineNumber":476,"author":{"gitId":"ryanozx"},"content":"2. User supplies a name and path to save the records.","lastModifiedDate":"2023-10-05"},{"lineNumber":477,"author":{"gitId":"ryanozx"},"content":"3. HRMate creates the CSV file containing the employee records with the specified name at the specified location.","lastModifiedDate":"2023-10-05"},{"lineNumber":478,"author":{"gitId":"ryanozx"},"content":"4. HRMate displays a message indicating the file has been created.","lastModifiedDate":"2023-10-05"},{"lineNumber":479,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":480,"author":{"gitId":"ryanozx"},"content":"    Use case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":481,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":482,"author":{"gitId":"ryanozx"},"content":"**Extensions**","lastModifiedDate":"2023-10-05"},{"lineNumber":483,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":484,"author":{"gitId":"ryanozx"},"content":"* 2a. User does not supply a name","lastModifiedDate":"2023-10-05"},{"lineNumber":485,"author":{"gitId":"ryanozx"},"content":"  * 2a1. HRMate displays an error message","lastModifiedDate":"2023-10-05"},{"lineNumber":486,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":487,"author":{"gitId":"ryanozx"},"content":"    Use case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":488,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":489,"author":{"gitId":"ryanozx"},"content":"* 2b. User does not supply a path/supplies an invalid path","lastModifiedDate":"2023-10-05"},{"lineNumber":490,"author":{"gitId":"ryanozx"},"content":"  * 2b1. HRMate creates the CSV file containing the employee records with the specified name at the default location","lastModifiedDate":"2023-10-05"},{"lineNumber":491,"author":{"gitId":"ryanozx"},"content":"    (same folder where the save files are located)","lastModifiedDate":"2023-10-05"},{"lineNumber":492,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":493,"author":{"gitId":"ryanozx"},"content":"    Use case resumes at step 3.","lastModifiedDate":"2023-10-05"},{"lineNumber":494,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":495,"author":{"gitId":"ryanozx"},"content":"* 3a. HRMate is unable to create the file due to errors (e.g. permission errors)","lastModifiedDate":"2023-10-05"},{"lineNumber":496,"author":{"gitId":"ryanozx"},"content":"  * 3a1. HRMate aborts the file creation operation.","lastModifiedDate":"2023-10-05"},{"lineNumber":497,"author":{"gitId":"ryanozx"},"content":"  * 3a2. HRMate displays an error message.","lastModifiedDate":"2023-10-05"},{"lineNumber":498,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":499,"author":{"gitId":"ryanozx"},"content":"    Use case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":500,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":501,"author":{"gitId":"InfiBeyond"},"content":"**Use case: List all tags**","lastModifiedDate":"2023-10-27"},{"lineNumber":502,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":503,"author":{"gitId":"InfiBeyond"},"content":"**MSS**","lastModifiedDate":"2023-10-27"},{"lineNumber":504,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":505,"author":{"gitId":"InfiBeyond"},"content":"1.  User requests to view all tags","lastModifiedDate":"2023-10-27"},{"lineNumber":506,"author":{"gitId":"InfiBeyond"},"content":"2.  HRMate shows a list of all available tags","lastModifiedDate":"2023-10-27"},{"lineNumber":507,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":508,"author":{"gitId":"InfiBeyond"},"content":"    Use case ends.","lastModifiedDate":"2023-10-27"},{"lineNumber":509,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":510,"author":{"gitId":"InfiBeyond"},"content":"**Extensions**","lastModifiedDate":"2023-10-27"},{"lineNumber":511,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":512,"author":{"gitId":"InfiBeyond"},"content":"* 2a. There is no existing tag in the system.","lastModifiedDate":"2023-10-27"},{"lineNumber":513,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":514,"author":{"gitId":"InfiBeyond"},"content":"    * 2a1. HRMate notifies the user of no existing tag in the system.","lastModifiedDate":"2023-10-27"},{"lineNumber":515,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":516,"author":{"gitId":"InfiBeyond"},"content":"      Use case ends.","lastModifiedDate":"2023-10-27"},{"lineNumber":517,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":518,"author":{"gitId":"jean-cq"},"content":"**Use case: List employees with at least one specified tags**","lastModifiedDate":"2023-10-27"},{"lineNumber":519,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":520,"author":{"gitId":"jean-cq"},"content":"**MSS**","lastModifiedDate":"2023-10-04"},{"lineNumber":521,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":522,"author":{"gitId":"jean-cq"},"content":"1.  User requests to find employees who match at least one of the specified tags","lastModifiedDate":"2023-10-27"},{"lineNumber":523,"author":{"gitId":"jean-cq"},"content":"2.  HRMate shows a list of employees who match at least one of the specified tags","lastModifiedDate":"2023-10-27"},{"lineNumber":524,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":525,"author":{"gitId":"jean-cq"},"content":"    Use case ends.","lastModifiedDate":"2023-10-04"},{"lineNumber":526,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":527,"author":{"gitId":"jean-cq"},"content":"**Extensions**","lastModifiedDate":"2023-10-04"},{"lineNumber":528,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":529,"author":{"gitId":"jean-cq"},"content":"* 2a. The specified tags do not exist in the system.","lastModifiedDate":"2023-10-27"},{"lineNumber":530,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":531,"author":{"gitId":"jean-cq"},"content":"    * 2a1. HRMate notifies the user of invalid tags.","lastModifiedDate":"2023-10-27"},{"lineNumber":532,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":533,"author":{"gitId":"jean-cq"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2023-10-04"},{"lineNumber":534,"author":{"gitId":"jean-cq"},"content":"* 2b. User does not provide any tags.","lastModifiedDate":"2023-10-27"},{"lineNumber":535,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":536,"author":{"gitId":"jean-cq"},"content":"    * 2b1. HRMate notifies the user of missing parameters.","lastModifiedDate":"2023-10-27"},{"lineNumber":537,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":538,"author":{"gitId":"jean-cq"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2023-10-27"},{"lineNumber":539,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":540,"author":{"gitId":"jean-cq"},"content":"**Use case: List employees with all specified tags**","lastModifiedDate":"2023-10-27"},{"lineNumber":541,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":542,"author":{"gitId":"jean-cq"},"content":"**MSS**","lastModifiedDate":"2023-10-04"},{"lineNumber":543,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":544,"author":{"gitId":"jean-cq"},"content":"1.  User requests to view all tags","lastModifiedDate":"2023-10-27"},{"lineNumber":545,"author":{"gitId":"jean-cq"},"content":"2.  HRMate shows a list of all available tags","lastModifiedDate":"2023-10-27"},{"lineNumber":546,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":547,"author":{"gitId":"jean-cq"},"content":"    Use case ends.","lastModifiedDate":"2023-10-04"},{"lineNumber":548,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":549,"author":{"gitId":"jean-cq"},"content":"**Extensions**","lastModifiedDate":"2023-10-04"},{"lineNumber":550,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":551,"author":{"gitId":"jean-cq"},"content":"* 2a. There is no existing tag in the system.","lastModifiedDate":"2023-10-27"},{"lineNumber":552,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":553,"author":{"gitId":"jean-cq"},"content":"    * 2a1. HRMate notifies the user of no existing tag in the system.","lastModifiedDate":"2023-10-27"},{"lineNumber":554,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":555,"author":{"gitId":"jean-cq"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2023-10-04"},{"lineNumber":556,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":557,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":558,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":559,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":560,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":561,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":562,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":563,"author":{"gitId":"ryanozx"},"content":"2.  A user with above average typing speed (60 or more words per minute) for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2023-10-05"},{"lineNumber":564,"author":{"gitId":"jean-cq"},"content":"3.  Should have an intuitive and user-friendly interface, ensuring that HR managers can easily navigate and use its features without extensive training.","lastModifiedDate":"2023-10-04"},{"lineNumber":565,"author":{"gitId":"jean-cq"},"content":"4.  HRMate should be capable of handling a growing volume of employee records (up to 1000 persons) without a substantial decrease in performance. It should efficiently manage and store data as the number of employees and records increases over time.","lastModifiedDate":"2023-10-04"},{"lineNumber":566,"author":{"gitId":"ryanozx"},"content":"5.  HRMate should complete operations involving a single records within 500ms, and operations involving listing, searching, and filtering within 2s.","lastModifiedDate":"2023-10-05"},{"lineNumber":567,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":568,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":569,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":570,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":571,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":572,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":573,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":574,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others","lastModifiedDate":"2020-05-23"},{"lineNumber":575,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":576,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":577,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":578,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":579,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":580,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":581,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":582,"author":{"gitId":"ryanozx"},"content":"\u003cbox type\u003d\"info\" seamless\u003eNote: These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2023-10-05"},{"lineNumber":583,"author":{"gitId":"ryanozx"},"content":"testers are expected to do more exploratory testing.\u003c/box\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":584,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":585,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":586,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":587,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":588,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":589,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":590,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":591,"author":{"gitId":"ryanozx"},"content":"   2. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2023-10-05"},{"lineNumber":592,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":593,"author":{"gitId":"ryanozx"},"content":"2. Saving window preferences","lastModifiedDate":"2023-10-05"},{"lineNumber":594,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":595,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":596,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":597,"author":{"gitId":"ryanozx"},"content":"   2. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":598,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":599,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":600,"author":{"gitId":"ryanozx"},"content":"3. { more test cases …​ }_","lastModifiedDate":"2023-10-05"},{"lineNumber":601,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":602,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":603,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":604,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":605,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":606,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":607,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":608,"author":{"gitId":"ryanozx"},"content":"   2. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":609,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":610,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":611,"author":{"gitId":"ryanozx"},"content":"   3. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":612,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":613,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":614,"author":{"gitId":"ryanozx"},"content":"   4. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":615,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":616,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":617,"author":{"gitId":"ryanozx"},"content":"2. { more test cases …​ }_","lastModifiedDate":"2023-10-05"},{"lineNumber":618,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":619,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":620,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":621,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":622,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":623,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":624,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":625,"author":{"gitId":"ryanozx"},"content":"2. { more test cases …​ }","lastModifiedDate":"2023-10-05"}],"authorContributionMap":{"ryanozx":173,"jean-cq":50,"InfiBeyond":17,"ivyy-poison":5,"-":330,"ong-wei-hong":50}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"\u003cfrontmatter\u003e","lastModifiedDate":"2023-09-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"  title: \"User Guide\"","lastModifiedDate":"2023-09-29"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"\u003c/frontmatter\u003e","lastModifiedDate":"2023-09-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"# HRMate User Guide","lastModifiedDate":"2023-09-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"ong-wei-hong"},"content":"Hi HR managers, this is HRMate. HRMate is a **desktop app for managing employee and leave records**.","lastModifiedDate":"2023-11-11"},{"lineNumber":10,"author":{"gitId":"ong-wei-hong"},"content":"HRMate uses a Command Line Interface ([CLI](#glossary)) and Graphical User Interface ([GUI](#glossary)).","lastModifiedDate":"2023-11-11"},{"lineNumber":11,"author":{"gitId":"ong-wei-hong"},"content":"That means that we are optimized for fast typers like you, and can help you complete your HR tasks faster than traditional HR apps like Oracle and SAP.","lastModifiedDate":"2023-11-11"},{"lineNumber":12,"author":{"gitId":"ong-wei-hong"},"content":"This user guide is targeted at users of HRMate.","lastModifiedDate":"2023-11-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"\u003cpage-nav-print\u003e\u003c/page-nav-print\u003e","lastModifiedDate":"2023-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"ong-wei-hong"},"content":"1. Download the latest `hrmate.jar` from [to be updated]() and move to your desired location. See [How do I move a file?](#faq) for help.","lastModifiedDate":"2023-11-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"ong-wei-hong"},"content":"2. Open a terminal or your computer.","lastModifiedDate":"2023-11-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"ong-wei-hong"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-11-11"},{"lineNumber":26,"author":{"gitId":"ong-wei-hong"},"content":"    \u003cul\u003e","lastModifiedDate":"2023-11-11"},{"lineNumber":27,"author":{"gitId":"ong-wei-hong"},"content":"        \u003cli\u003e\u003cstrong\u003eFor Mac users:\u003c/strong\u003e open the Terminal app on your Mac\u003c/li\u003e","lastModifiedDate":"2023-11-11"},{"lineNumber":28,"author":{"gitId":"ong-wei-hong"},"content":"        \u003cli\u003e\u003cstrong\u003eFor Window users:\u003c/strong\u003e press the windows key, type `powershell` and press \"Enter\" on your keyboard\u003c/li\u003e","lastModifiedDate":"2023-11-11"},{"lineNumber":29,"author":{"gitId":"ong-wei-hong"},"content":"    \u003c/ul\u003e","lastModifiedDate":"2023-11-11"},{"lineNumber":30,"author":{"gitId":"ong-wei-hong"},"content":"    See \u003ca href\u003d\"#faq\"\u003eHow do I open a termainal?\u003c/a\u003e for more info.","lastModifiedDate":"2023-11-11"},{"lineNumber":31,"author":{"gitId":"ong-wei-hong"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-11-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"ong-wei-hong"},"content":"3. Use `cd` command in the terminal to navigate to the same location as `hrmate.jar` in step 1. See [How do I navigate files in terminal?](#faq)","lastModifiedDate":"2023-11-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"ong-wei-hong"},"content":"3. Ensure you have Java `11` or above installed in your Computer. This can be done by typing `java -version` in your terminal.","lastModifiedDate":"2023-11-11"},{"lineNumber":36,"author":{"gitId":"ong-wei-hong"},"content":" - See \u003ca href\u003d\"#faq\"\u003eHow do I download Java 11?\u003c/a\u003e if Java is not updated or if the terminal does not recognise the `java` input. ","lastModifiedDate":"2023-11-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"ong-wei-hong"},"content":"4. Type `java -jar hrmate.jar` into the terminal and press \"enter\" on your keyboard.\u003cbr\u003e","lastModifiedDate":"2023-11-11"},{"lineNumber":39,"author":{"gitId":"ong-wei-hong"},"content":"An app similar to the one below should appear in a few seconds. The app is populated with some sample data for you to experiment with.\u003cbr\u003e","lastModifiedDate":"2023-11-11"},{"lineNumber":40,"author":{"gitId":"ong-wei-hong"},"content":"We have added some annotations in \u003cspan style\u003d\"color:red\"\u003ered\u003c/span\u003e so that you can understand the app visually.","lastModifiedDate":"2023-11-11"},{"lineNumber":41,"author":{"gitId":"ong-wei-hong"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2023-11-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-29"},{"lineNumber":43,"author":{"gitId":"ong-wei-hong"},"content":"5. You can try typing some commands into the command box and pressing \"enter\" to execute. We have listed down some commands for you to try. \u003cbr\u003e","lastModifiedDate":"2023-11-11"},{"lineNumber":44,"author":{"gitId":"ong-wei-hong"},"content":" - `help` : Opens the help window.","lastModifiedDate":"2023-11-11"},{"lineNumber":45,"author":{"gitId":"ong-wei-hong"},"content":" - `list` : Lists all contacts.","lastModifiedDate":"2023-11-11"},{"lineNumber":46,"author":{"gitId":"ong-wei-hong"},"content":" - `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to the employee list","lastModifiedDate":"2023-11-11"},{"lineNumber":47,"author":{"gitId":"ong-wei-hong"},"content":" - `add-leave 1 title/medical leave start/2023-11-11 end/2023-11-11` : Adds an leave entry for the first employee in the current employee list. Note that the default leave status is `PENDING`.","lastModifiedDate":"2023-11-11"},{"lineNumber":48,"author":{"gitId":"ong-wei-hong"},"content":" - `delete 3` : Deletes the 3rd employee shown in the current employee list.","lastModifiedDate":"2023-11-11"},{"lineNumber":49,"author":{"gitId":"ong-wei-hong"},"content":" - `clear` : Deletes all employees and leaves.","lastModifiedDate":"2023-11-11"},{"lineNumber":50,"author":{"gitId":"ong-wei-hong"},"content":" - `exit` : Exits the app.","lastModifiedDate":"2023-11-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-29"},{"lineNumber":52,"author":{"gitId":"ong-wei-hong"},"content":"6. Refer to [How to interpret command formats?](#how-to-interpret-command-formats) for more info on the command structure. ","lastModifiedDate":"2023-11-11"},{"lineNumber":53,"author":{"gitId":"ong-wei-hong"},"content":"Also, look through [Features](#features) for more commands and the details of each command. We hope to aid you in your HR journey!","lastModifiedDate":"2023-11-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-29"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-09-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"## Features","lastModifiedDate":"2023-09-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"ong-wei-hong"},"content":"## Getting help","lastModifiedDate":"2023-11-11"},{"lineNumber":60,"author":{"gitId":"ong-wei-hong"},"content":"Should you need any help, you can access this online user guide (this document) with the `help` [command](#glossary).","lastModifiedDate":"2023-11-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-29"},{"lineNumber":62,"author":{"gitId":"ong-wei-hong"},"content":"### Getting help : `help`","lastModifiedDate":"2023-11-11"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"ong-wei-hong"},"content":"1. Type in the following command in the [command box](#glossary): `help`. ","lastModifiedDate":"2023-11-09"},{"lineNumber":65,"author":{"gitId":"ong-wei-hong"},"content":"2. Press \"Enter\" on your keyboard.","lastModifiedDate":"2023-11-09"},{"lineNumber":66,"author":{"gitId":"ong-wei-hong"},"content":"3. The following pop up should show:","lastModifiedDate":"2023-11-09"},{"lineNumber":67,"author":{"gitId":"ong-wei-hong"},"content":"![help menu](images/help-menu.png)","lastModifiedDate":"2023-11-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"ong-wei-hong"},"content":"4. Click on the \"copy link\" button to copy the link to the user guide, and paste into any [web browser](#glossary) to access the user guide. Alternatively, click the red button at the corner of the window to close the pop up.","lastModifiedDate":"2023-11-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"ong-wei-hong"},"content":"## Adding a new employee","lastModifiedDate":"2023-11-11"},{"lineNumber":72,"author":{"gitId":"ong-wei-hong"},"content":"When a new employee joins, you can use the `add` [command](#glossary) to add their information into HRMate.","lastModifiedDate":"2023-11-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"ong-wei-hong"},"content":"### Adding an employee: `add`","lastModifiedDate":"2023-11-11"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":76,"author":{"gitId":"ong-wei-hong"},"content":"1. Type in the following [command](#glossary) in the [command box](#glossary): `add n/NAME p/PHONE_NUMBER e/EMAIL_ADDRESS a/HOME_ADDRESS [t/TAG]...`, replace `NAME` with employee name, `PHONE_NUMBER` with employee phone number `EMAIL_ADDRESS` with employee email address and `HOME_ADDRESS` with employee home address. `[t/TAG]...` is an optional field with one or more [tags](#glossary), with `TAG` being the name of the tag.","lastModifiedDate":"2023-11-09"},{"lineNumber":77,"author":{"gitId":"ong-wei-hong"},"content":" - For instance, if you have an employee name John Doe with phone number 98765432, email johnd@example.com, home address John Street, block 123 #01-01 and tags full-time and remote, type in the command `add n/John Doe p/98765432 e/johnd@example.com a/John Street, block 123 #01-01 t/full-time t/remote`","lastModifiedDate":"2023-11-09"},{"lineNumber":78,"author":{"gitId":"ong-wei-hong"},"content":" - If your employee does not require any tags, using the same information as above, the command would be `add n/John Doe p/98765432 e/johnd@example.com a/John Street, block 123 #01-01`","lastModifiedDate":"2023-11-09"},{"lineNumber":79,"author":{"gitId":"ong-wei-hong"},"content":" - Please refer to [how to interpret command formats](#how-to-interpret-command-formats) for more information","lastModifiedDate":"2023-11-11"},{"lineNumber":80,"author":{"gitId":"ong-wei-hong"},"content":"2. Press \"enter\" on your keyboard and you should see the person information at the end of the [employee list](#glossary). ","lastModifiedDate":"2023-11-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":82,"author":{"gitId":"ong-wei-hong"},"content":"Here are the potential error messages that you may receive and here\u0027s how to fix them:","lastModifiedDate":"2023-11-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":84,"author":{"gitId":"ong-wei-hong"},"content":"| Error message | Why it happens | Fix |","lastModifiedDate":"2023-11-09"},{"lineNumber":85,"author":{"gitId":"ong-wei-hong"},"content":"|---------------|----------------|-----|","lastModifiedDate":"2023-11-09"},{"lineNumber":86,"author":{"gitId":"ong-wei-hong"},"content":"| `Invalid command format!` | The command you input does not follow the specified format | Ensure the command you entered follows the following format: `add n/NAME p/PHONE_NUMBER e/EMAIL_ADDRESS a/HOME_ADDRESS [t/TAG]...`, replacing `NAME` with employee name, `PHONE_NUMBER` with employee phone number, `EMAIL_ADDRESS` with employee email address, `HOME_ADDRESS` with employee home address. `[t/TAG]...` is optional, with `[t/TAG]` representing one or more tags and `TAG` being the tag name.","lastModifiedDate":"2023-11-09"},{"lineNumber":87,"author":{"gitId":"ong-wei-hong"},"content":"| `FIELD should FORMAT` where `FIELD` is an input like `Names` or `Phone numbers` and `FORMAT` contains additional information about the field\u0027s format. | The input does not follow the format prescribed. For example, the entered phone number might contain alphabets. | Follow the on screen message to fix the field in question. For example, `Phone numbers should only contain numbers, and it should be at least 3 digits long` means that the input phone number does not follow the prescribed format. |","lastModifiedDate":"2023-11-09"},{"lineNumber":88,"author":{"gitId":"ong-wei-hong"},"content":"| `This employee already exists in the address book` | The provided employee name is already found in HRMate | Use another name for the employee. For example, if trying to add another \"John Doe\", use the name \"John Doe (HR)\" to differentiate between the existing John Doe. HRMate does this name checking to prevent unintentional duplicate employee entries. |","lastModifiedDate":"2023-11-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"ong-wei-hong"},"content":"## Listing all employees: `list`","lastModifiedDate":"2023-11-11"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"ryanozx"},"content":"* **What It Does:**","lastModifiedDate":"2023-09-29"},{"lineNumber":93,"author":{"gitId":"ryanozx"},"content":"  * Shows a list of all employees in HRMate","lastModifiedDate":"2023-09-29"},{"lineNumber":94,"author":{"gitId":"ryanozx"},"content":"* **Format:**","lastModifiedDate":"2023-09-29"},{"lineNumber":95,"author":{"gitId":"ryanozx"},"content":"  * `list`","lastModifiedDate":"2023-09-29"},{"lineNumber":96,"author":{"gitId":"ong-wei-hong"},"content":"* **Examples:**","lastModifiedDate":"2023-09-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"ong-wei-hong"},"content":"| S/N | Command information                                                                        |","lastModifiedDate":"2023-09-29"},{"lineNumber":99,"author":{"gitId":"ryanozx"},"content":"|-----|--------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-09-29"},{"lineNumber":100,"author":{"gitId":"ryanozx"},"content":"| 1   | **Command:** `list` \u003cbr\u003e\u003cbr\u003e **Output:** Shows a list of all employees in the address book |","lastModifiedDate":"2023-09-29"},{"lineNumber":101,"author":{"gitId":"ryanozx"},"content":"* **Acceptable Values:**","lastModifiedDate":"2023-09-29"},{"lineNumber":102,"author":{"gitId":"ryanozx"},"content":"  * This command has no parameters","lastModifiedDate":"2023-09-29"},{"lineNumber":103,"author":{"gitId":"ryanozx"},"content":"* **Expected Output on Success:**","lastModifiedDate":"2023-09-29"},{"lineNumber":104,"author":{"gitId":"ryanozx"},"content":"  * GUI Changes: A list of employees is displayed in a dedicated interface section","lastModifiedDate":"2023-09-29"},{"lineNumber":105,"author":{"gitId":"ryanozx"},"content":"* **Expected Output on Failure:**","lastModifiedDate":"2023-09-29"},{"lineNumber":106,"author":{"gitId":"ryanozx"},"content":"  * N/A (no expected failure)","lastModifiedDate":"2023-09-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-29"},{"lineNumber":108,"author":{"gitId":"ong-wei-hong"},"content":"## Editing employee records","lastModifiedDate":"2023-11-11"},{"lineNumber":109,"author":{"gitId":"ong-wei-hong"},"content":"HRMate offers different [commands](#glossary) for editing employee records. `add-tag` and `delete-tag` would add and remove an employee\u0027s [tags](#glossary) while `edit` is for editing name, phone number, email address, home address and tags.","lastModifiedDate":"2023-11-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-29"},{"lineNumber":111,"author":{"gitId":"ong-wei-hong"},"content":"### Adding tags to employees : `add-tag`","lastModifiedDate":"2023-11-11"},{"lineNumber":112,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-09-29"},{"lineNumber":113,"author":{"gitId":"ong-wei-hong"},"content":"1. Find the employee under the [employee list](#glossary).","lastModifiedDate":"2023-11-09"},{"lineNumber":114,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":115,"author":{"gitId":"ong-wei-hong"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-11-09"},{"lineNumber":116,"author":{"gitId":"ong-wei-hong"},"content":"If the employee is not found, consider using \u003ca href\u003d\"\"\u003elist\u003c/a\u003e or any \u003ca href\u003d\"\"\u003efind commands\u003c/a\u003e to locate the employee in the employee list.","lastModifiedDate":"2023-11-09"},{"lineNumber":117,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-29"},{"lineNumber":119,"author":{"gitId":"ong-wei-hong"},"content":"2. Type in the following [command](#glossary) in the [command box](#glossary) `add-tag INDEX t/TAG...` where `INDEX` is the [index](#glossary) of the employee in the list currently, `TAG` is the name of the [tag](#glossary) to be added and `t/TAG...` representing one or more tags. ","lastModifiedDate":"2023-11-09"},{"lineNumber":120,"author":{"gitId":"ong-wei-hong"},"content":" - For instance, if you want to add the tags full-time and remote to the employee indexed 2, type `add-tag 2 t/full-time t/remote` to the command box.","lastModifiedDate":"2023-11-09"},{"lineNumber":121,"author":{"gitId":"ong-wei-hong"},"content":" - Please refer to [how to interpret command formats](#how-to-interpret-command-formats) for more information","lastModifiedDate":"2023-11-11"},{"lineNumber":122,"author":{"gitId":"ong-wei-hong"},"content":"3. Press \"enter\" on your keyboard and you should see the input tags added to the employee specified.","lastModifiedDate":"2023-11-09"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":124,"author":{"gitId":"ong-wei-hong"},"content":"Here are the potential error messages that you may receive and here\u0027s how to fix them:","lastModifiedDate":"2023-11-09"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":126,"author":{"gitId":"ong-wei-hong"},"content":"| Error message | Why it happens | Fix |","lastModifiedDate":"2023-11-09"},{"lineNumber":127,"author":{"gitId":"ong-wei-hong"},"content":"|---------------|----------------|-----|","lastModifiedDate":"2023-11-09"},{"lineNumber":128,"author":{"gitId":"ong-wei-hong"},"content":"| `Invalid command format!` | The command you input does not follow the specfied format | Ensure the command you entered follows the following format: `add-tag INDEX t/TAG...`, replacing INDEX with the index of the employee currently, `TAG` is the name of the tag to be added and `t/TAG...` representing one or more tags. |","lastModifiedDate":"2023-11-09"},{"lineNumber":129,"author":{"gitId":"ong-wei-hong"},"content":"| `At least one tag must be provided` | No tags were provided | Add tags to the command in the command box. Note that the tags must have a t/ [prefix](#glossary). For example, to add the tag full-time, use `t/full-time`.","lastModifiedDate":"2023-11-09"},{"lineNumber":130,"author":{"gitId":"ong-wei-hong"},"content":"| `The person index provided is invalid` | The index specified does not refer to any employee | Double check if the index appears in the employee list. Alternatively, use [list]() or any [find commands]() to locate the employee in the employee list. Afterwards, use the correct employee index in the `add-tag` command. |","lastModifiedDate":"2023-11-09"},{"lineNumber":131,"author":{"gitId":"ong-wei-hong"},"content":"| `The employee already has some of the tags` | The employee already has some of the tags which you are trying to add | Remove the tags the employee has from the input command. For example, for an employee who already has the full-time tag, the command `add-tag 2 t/full-time t/remote` would not work. Instead try `add-tag 2 t/remote`.|","lastModifiedDate":"2023-11-09"},{"lineNumber":132,"author":{"gitId":"ong-wei-hong"},"content":"| `Tags names only allows alphanumeric characters, spaces, and dashes.` | The tags input contains illegal characters | Remove the illegal characters from the input. |","lastModifiedDate":"2023-11-09"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":134,"author":{"gitId":"ong-wei-hong"},"content":"### Removing tags from employees : `delete-tag`","lastModifiedDate":"2023-11-11"},{"lineNumber":135,"author":{"gitId":"ong-wei-hong"},"content":"1. Get the [index](#glossary) of the employee in the [employee list](#glossary).","lastModifiedDate":"2023-11-09"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":137,"author":{"gitId":"ong-wei-hong"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-11-09"},{"lineNumber":138,"author":{"gitId":"ong-wei-hong"},"content":"If the employee is not found, consider using [list]() or any [find commands]() to locate the employee in the employee list.","lastModifiedDate":"2023-11-09"},{"lineNumber":139,"author":{"gitId":"ong-wei-hong"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-11-09"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":141,"author":{"gitId":"ong-wei-hong"},"content":"2. Type in the following [command](#glossary) in the [command box](#glossary) `delete-tag INDEX t/TAG...` where `INDEX` is the index of the employee in the list currently, `TAG` is the name of the [tag](#glossary) to be deleted and `t/TAG...` representing one or more tags. ","lastModifiedDate":"2023-11-09"},{"lineNumber":142,"author":{"gitId":"ong-wei-hong"},"content":" - For instance, if you want to remove the tags full-time and remote to the employee indexed 2, type `delete-tag 2 t/full-time t/remote` to the command box.","lastModifiedDate":"2023-11-09"},{"lineNumber":143,"author":{"gitId":"ong-wei-hong"},"content":" - Please refer to [how to interpret command formats](#how-to-interpret-command-formats) for more information","lastModifiedDate":"2023-11-11"},{"lineNumber":144,"author":{"gitId":"ong-wei-hong"},"content":"3. Press \"enter\" on your keyboard and you should see the input tags removed from the employee specified.","lastModifiedDate":"2023-11-09"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":146,"author":{"gitId":"ong-wei-hong"},"content":"Here are the potential error messages you may receive and here\u0027s how to fix them:","lastModifiedDate":"2023-11-09"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":148,"author":{"gitId":"ong-wei-hong"},"content":"| Error message | Why it happens | Fix |","lastModifiedDate":"2023-11-09"},{"lineNumber":149,"author":{"gitId":"ong-wei-hong"},"content":"|---------------|----------------|-----|","lastModifiedDate":"2023-11-09"},{"lineNumber":150,"author":{"gitId":"ong-wei-hong"},"content":"| `Invalid command format!` | The command you input does not follow the specfied format | Ensure the command you entered follows the following format: `delete-tag INDEX t/TAG...`, replacing INDEX with the index of the employee currently, `TAG` is the name of the tag to be deleted and `t/TAG...` representing one or more tags. |","lastModifiedDate":"2023-11-09"},{"lineNumber":151,"author":{"gitId":"ong-wei-hong"},"content":"| `At least one tag must be provided` | No tags were provided | Add tags to the command in the command box. Note that the tags must have a t/ [prefix](#glossary). For example, to remove the tag full-time, use `t/full-time` |","lastModifiedDate":"2023-11-09"},{"lineNumber":152,"author":{"gitId":"ong-wei-hong"},"content":"| `The person index provided is invalid` | The index specified does not refer to any employee | Double check if the index appears in the employee list. Alternatively, use [list]() or any [find commands]() to locate the employee in the employee list. Afterwards, use the correct employee index in the `delete-tag` command. |","lastModifiedDate":"2023-11-09"},{"lineNumber":153,"author":{"gitId":"ong-wei-hong"},"content":"| `Some of the tags are not found on this employee.` | The employee does not have some of the tags you are trying to delete | Remove the tags not found on the employee from the input command. For example, for an employee without the tag full-time, the command `delete-tag 2 t/full-time t/remote` does not work. Instead try `delete-tag 2 t/remote`.|","lastModifiedDate":"2023-11-09"},{"lineNumber":154,"author":{"gitId":"ong-wei-hong"},"content":"| `Tags names only allows alphanumeric characters, spaces, and dashes.` | The tags input contains illegal characters | Remove the illegal characters from the input. |","lastModifiedDate":"2023-11-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":156,"author":{"gitId":"ong-wei-hong"},"content":"### Editing the name, phone number, email address, home address or tags of employees : `edit`","lastModifiedDate":"2023-11-11"},{"lineNumber":157,"author":{"gitId":"ong-wei-hong"},"content":"1. Get the [index](#glossary) of the employee under the [employee list](#glossary).","lastModifiedDate":"2023-11-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":159,"author":{"gitId":"ong-wei-hong"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-11-09"},{"lineNumber":160,"author":{"gitId":"ong-wei-hong"},"content":"If the employee is not found, consider using \u003ca href\u003d\"\"\u003elist\u003c/a\u003e or any \u003ca href\u003d\"\"\u003efind commands\u003c/a\u003e to locate the employee in the employee list.","lastModifiedDate":"2023-11-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-11-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":163,"author":{"gitId":"ong-wei-hong"},"content":"2. Type in the following [command](#glossary) in the [command box](#glossary) `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL_ADDRESS] [a/HOME_ADDRESS] [t/TAG]...` where `INDEX` is the index of the employee in the list currently, `[n/NAME]`, `[p/PHONE_NUMBER]`, `[e/EMAIL_ADDRESS]`, `[a/HOME_ADDRESS]` are optional fields which require changing, replacing `NAME` with employee name, `PHONE_NUMBER` with employee phone number, `EMAIL_ADDRESS` with employee email address and `HOME_ADDRESS` with employee home address. `[t/TAG]...` is an optional field representing one or more [tags](#glossary) where `TAG` is the tag name. Note that at least one field to edit must be present and only the fields present will be edited.","lastModifiedDate":"2023-11-09"},{"lineNumber":164,"author":{"gitId":"ong-wei-hong"},"content":" - For example, to change the phone number, email address and tags of the employee indexed 2 to 98765432, johndoe@example.com and full-time and remote, type in the command `edit 2 p/98765432 e/johndoe@example.com t/full-time t/remote`. Note that the name and home address will remain unchanged.","lastModifiedDate":"2023-11-09"},{"lineNumber":165,"author":{"gitId":"ong-wei-hong"},"content":" - In another example, to change the home address of the employee indexed 1 to John street, block 123 #01-01 and remove all tags from the employee, type in the command `edit 1 a/John street, block 123 #01-01 t/`. Note that the name, phone number and email_address will remain unchanged.","lastModifiedDate":"2023-11-09"},{"lineNumber":166,"author":{"gitId":"ong-wei-hong"},"content":" - Please refer to [how to interpret command formats](#how-to-interpret-command-formats) for more information","lastModifiedDate":"2023-11-11"},{"lineNumber":167,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":168,"author":{"gitId":"ong-wei-hong"},"content":"\u003cbox type\u003d\"warning\" seamless\u003e","lastModifiedDate":"2023-11-09"},{"lineNumber":169,"author":{"gitId":"ong-wei-hong"},"content":"If the tag prefix is specified, all existing tags under the employee will be removed and replaced with the new tags in the command.","lastModifiedDate":"2023-11-09"},{"lineNumber":170,"author":{"gitId":"ong-wei-hong"},"content":"In the first example, the employee will have all tags removed and replaced by 2 tags: full-time and remote.","lastModifiedDate":"2023-11-09"},{"lineNumber":171,"author":{"gitId":"ong-wei-hong"},"content":"In the second example, the employee will have all tags removed. No tags will be added since no tags are specified.","lastModifiedDate":"2023-11-09"},{"lineNumber":172,"author":{"gitId":"ong-wei-hong"},"content":"Therefore, to avoid unintentionally losing any information while editing tags, we recommend using the \u003ca href\u003d\"#adding-tags-to-employees--add-tag\"\u003eadd tag\u003c/a\u003e and \u003ca href\u003d\"#removing-tags-from-employees--delete-tag\"\u003edelete-tag\u003c/a\u003e commands instead for editing tags.","lastModifiedDate":"2023-11-09"},{"lineNumber":173,"author":{"gitId":"ong-wei-hong"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-11-09"},{"lineNumber":174,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":175,"author":{"gitId":"ong-wei-hong"},"content":"3. Press \"enter\" on your keyboard and you should see the changes applied to the employee.","lastModifiedDate":"2023-11-09"},{"lineNumber":176,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":177,"author":{"gitId":"ong-wei-hong"},"content":"| Error message | Why it happens | Fix |","lastModifiedDate":"2023-11-09"},{"lineNumber":178,"author":{"gitId":"ong-wei-hong"},"content":"|---------------|----------------|-----|","lastModifiedDate":"2023-11-09"},{"lineNumber":179,"author":{"gitId":"ong-wei-hong"},"content":"| `Invalid command format!` | The command you input does not follow the specified format | Ensure the command you entered follows the following format: `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL_ADDRESS] [a/HOME_ADDRESS] [t/TAG]...` where `INDEX` is the index of the employee in the list currently, `[n/NAME]`, `[p/PHONE_NUMBER]`, `[e/EMAIL_ADDRESS]`, `[a/HOME_ADDRESS]` are optional fields which require changing, replacing `NAME` with employee name, `PHONE_NUMBER` with employee phone number, `EMAIL_ADDRESS` with employee email address and `HOME_ADDRESS` with employee home address. `[t/TAG]...` is an optional field representing one or more tags where `TAG` is the tag name. |","lastModifiedDate":"2023-11-09"},{"lineNumber":180,"author":{"gitId":"ong-wei-hong"},"content":"| `FIELD should FORMAT` where `FIELD` is an input like `Names` or `Phone numbers` and `FORMAT` contains additional information about the field\u0027s format. | The input does not follow the format prescribed. For example, the entered phone number might contain alphabets. | Follow the on screen message to fix the field in question. For example, `Phone numbers should only contain numbers, and it should be at least 3 digits long` means that the input phone number does not follow the prescribed format. |","lastModifiedDate":"2023-11-09"},{"lineNumber":181,"author":{"gitId":"ong-wei-hong"},"content":"| `The person index provided is invalid` | The index specified does not refer to any employee | Double check if the index appears in the employee list. Alternatively, use [list]() or any [find commands]() to locate the employee in the employee list. Afterwards, use the correct employee index in the `edit` command. |","lastModifiedDate":"2023-11-09"},{"lineNumber":182,"author":{"gitId":"ong-wei-hong"},"content":"| `At least one field to edit must be provided` | The command you input does not contain any fields to edit | Check if there is any input fields in the command inputted. An input like `edit 1` is not accepted as there is no edits to be made. |","lastModifiedDate":"2023-11-09"},{"lineNumber":183,"author":{"gitId":"ong-wei-hong"},"content":"| `This employee already exists in the address book` | The provided employee name is already found in HRMate | Use another name for the employee. For example, if trying to add another \"John Doe\", use the name \"John Doe (HR)\" to differentiate between the existing John Doe. HRMate does this name checking to prevent unintentional duplicate employee entries.","lastModifiedDate":"2023-11-09"},{"lineNumber":184,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":185,"author":{"gitId":"ong-wei-hong"},"content":"* **For advanced users:**","lastModifiedDate":"2023-11-09"},{"lineNumber":186,"author":{"gitId":"ong-wei-hong"},"content":"  * You can remove all the tags of an employee with `edit INDEX t/` (see warning above)","lastModifiedDate":"2023-11-09"},{"lineNumber":187,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":188,"author":{"gitId":"ong-wei-hong"},"content":"### Viewing All Tags: `view-tag`","lastModifiedDate":"2023-11-09"},{"lineNumber":189,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":190,"author":{"gitId":"ivyy-poison"},"content":"* **What It Does:**","lastModifiedDate":"2023-10-04"},{"lineNumber":191,"author":{"gitId":"ong-wei-hong"},"content":"  * Shows a list of all tags currently in use within the address book, which helps HR managers quickly identify different categories of employees.","lastModifiedDate":"2023-11-09"},{"lineNumber":192,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":193,"author":{"gitId":"ivyy-poison"},"content":"* **Format:**","lastModifiedDate":"2023-10-04"},{"lineNumber":194,"author":{"gitId":"ong-wei-hong"},"content":"  * `view-tag`","lastModifiedDate":"2023-11-09"},{"lineNumber":195,"author":{"gitId":"ivyy-poison"},"content":"* **Examples:**","lastModifiedDate":"2023-10-04"},{"lineNumber":196,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":197,"author":{"gitId":"ivyy-poison"},"content":"| S/N | Command information                                                                                                         |","lastModifiedDate":"2023-10-04"},{"lineNumber":198,"author":{"gitId":"ong-wei-hong"},"content":"|-----|-----------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-11-09"},{"lineNumber":199,"author":{"gitId":"ong-wei-hong"},"content":"| 1   | **Command:** `view-tag` \u003cbr\u003e\u003cbr\u003e **Output:** Shows a list of all tags assigned to at least one employee in the address book |","lastModifiedDate":"2023-11-09"},{"lineNumber":200,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":201,"author":{"gitId":"ivyy-poison"},"content":"* **Acceptable Values:**","lastModifiedDate":"2023-10-04"},{"lineNumber":202,"author":{"gitId":"ong-wei-hong"},"content":"  * This command doesn\u0027t require any parameters.","lastModifiedDate":"2023-11-09"},{"lineNumber":203,"author":{"gitId":"ivyy-poison"},"content":"* **Expected Output on Success:**","lastModifiedDate":"2023-10-04"},{"lineNumber":204,"author":{"gitId":"ong-wei-hong"},"content":"  * GUI Changes: A list of tags is displayed in a dedicated interface section.","lastModifiedDate":"2023-11-09"},{"lineNumber":205,"author":{"gitId":"ong-wei-hong"},"content":"  * Message shown to the user: \"Successfully fetched all tags.\"","lastModifiedDate":"2023-11-09"},{"lineNumber":206,"author":{"gitId":"ivyy-poison"},"content":"* **Expected Output on Failure:**","lastModifiedDate":"2023-10-04"},{"lineNumber":207,"author":{"gitId":"ong-wei-hong"},"content":"  * Error messages: N/A (since no parameters are involved, the command will not fail due to invalid input)","lastModifiedDate":"2023-11-09"},{"lineNumber":208,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":209,"author":{"gitId":"jean-cq"},"content":"### Finding employees with all tags in a group of tags: `find-all-tag`","lastModifiedDate":"2023-09-30"},{"lineNumber":210,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":211,"author":{"gitId":"jean-cq"},"content":"* **What It Does:**","lastModifiedDate":"2023-09-30"},{"lineNumber":212,"author":{"gitId":"jean-cq"},"content":"  * Filters and displays individuals from a dataset who match all the specified tags (case-sensitive) exactly. It helps users narrow their search to find records meeting all the specified criteria.","lastModifiedDate":"2023-10-14"},{"lineNumber":213,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":214,"author":{"gitId":"jean-cq"},"content":"* **Format:**","lastModifiedDate":"2023-09-30"},{"lineNumber":215,"author":{"gitId":"jean-cq"},"content":"  * `find-all-tag t/TAG [t/MORE_TAGS]...`","lastModifiedDate":"2023-10-15"},{"lineNumber":216,"author":{"gitId":"jean-cq"},"content":"* **Examples:**","lastModifiedDate":"2023-09-30"},{"lineNumber":217,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":218,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":219,"author":{"gitId":"jean-cq"},"content":"| S/N | Command information                                                                                                                      |","lastModifiedDate":"2023-09-30"},{"lineNumber":220,"author":{"gitId":"jean-cq"},"content":"|-----|------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-10-15"},{"lineNumber":221,"author":{"gitId":"jean-cq"},"content":"| 1   | **Command:** `find-all-tag t/remote t/full time` \u003cbr\u003e\u003cbr\u003e **Output:** Shows a list of employees who are both full-time and work remotely |","lastModifiedDate":"2023-10-15"},{"lineNumber":222,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":223,"author":{"gitId":"jean-cq"},"content":"* **Acceptable Values:**","lastModifiedDate":"2023-09-30"},{"lineNumber":224,"author":{"gitId":"jean-cq"},"content":"  * Tags: Any predefined tags available in the address book (e.g. remote, contract, fullTime)","lastModifiedDate":"2023-10-13"},{"lineNumber":225,"author":{"gitId":"jean-cq"},"content":"  * Only full words will be matched, e.g. “remote” will not match “remotely”","lastModifiedDate":"2023-09-30"},{"lineNumber":226,"author":{"gitId":"jean-cq"},"content":"* **Expected Output on Success:**","lastModifiedDate":"2023-09-30"},{"lineNumber":227,"author":{"gitId":"jean-cq"},"content":"  * GUI Changes: A list of employees who match some specified tags will be shown in a dedicated interface section","lastModifiedDate":"2023-10-14"},{"lineNumber":228,"author":{"gitId":"jean-cq"},"content":"  * Message shown to the user: \"[Number of matched employees] employees matched: \"","lastModifiedDate":"2023-09-30"},{"lineNumber":229,"author":{"gitId":"jean-cq"},"content":"* **Expected Output on Failure:**","lastModifiedDate":"2023-09-30"},{"lineNumber":230,"author":{"gitId":"jean-cq"},"content":"  * `Invalid command format!` - Missing parameters","lastModifiedDate":"2023-10-13"},{"lineNumber":231,"author":{"gitId":"jean-cq"},"content":"  * `Tags names only allows alphanumeric characters, spaces, and dashes.` - Invalid parameter inputs","lastModifiedDate":"2023-10-15"},{"lineNumber":232,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":233,"author":{"gitId":"jean-cq"},"content":"### Finding employees with at least one tag in a group of tags: `find-some-tag`","lastModifiedDate":"2023-10-01"},{"lineNumber":234,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":235,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":236,"author":{"gitId":"jean-cq"},"content":"* **What It Does:**","lastModifiedDate":"2023-09-30"},{"lineNumber":237,"author":{"gitId":"jean-cq"},"content":"  * Filters and displays individuals from a dataset who match at least one of the specified tags (case-sensitive). It provides flexibility by showing records that meet any of the criteria provided.","lastModifiedDate":"2023-10-14"},{"lineNumber":238,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":239,"author":{"gitId":"jean-cq"},"content":"* **Format:**","lastModifiedDate":"2023-09-30"},{"lineNumber":240,"author":{"gitId":"jean-cq"},"content":"  * `find-some-tag t/TAG [t/MORE_TAGS]...`","lastModifiedDate":"2023-10-15"},{"lineNumber":241,"author":{"gitId":"jean-cq"},"content":"* **Examples:**","lastModifiedDate":"2023-09-30"},{"lineNumber":242,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":243,"author":{"gitId":"jean-cq"},"content":"| S/N | Command information                                                                                                                                                           |","lastModifiedDate":"2023-09-30"},{"lineNumber":244,"author":{"gitId":"jean-cq"},"content":"|-----|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-10-13"},{"lineNumber":245,"author":{"gitId":"jean-cq"},"content":"| 1   | **Command:** `find-some-tag t/fullTime t/remote ` \u003cbr\u003e\u003cbr\u003e **Output:** Shows a list of employees who either full-time or work remotely or both full-time and working remotely |","lastModifiedDate":"2023-10-15"},{"lineNumber":246,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":247,"author":{"gitId":"jean-cq"},"content":"* **Acceptable Values:**","lastModifiedDate":"2023-09-30"},{"lineNumber":248,"author":{"gitId":"jean-cq"},"content":"  * Tags: Any predefined tags available in the address book (e.g. remote, contract, fullTime)","lastModifiedDate":"2023-10-13"},{"lineNumber":249,"author":{"gitId":"jean-cq"},"content":"  * Only full words will be matched, e.g. “remote” will not match “remotely”","lastModifiedDate":"2023-09-30"},{"lineNumber":250,"author":{"gitId":"jean-cq"},"content":"* **Expected Output on Success:**","lastModifiedDate":"2023-09-30"},{"lineNumber":251,"author":{"gitId":"jean-cq"},"content":"  * GUI Changes: A list of employees who match some of the specified tags will be shown in a dedicated interface section","lastModifiedDate":"2023-09-30"},{"lineNumber":252,"author":{"gitId":"jean-cq"},"content":"  * Message shown to the user: \"[Number of matched employees] employees matched: \"","lastModifiedDate":"2023-09-30"},{"lineNumber":253,"author":{"gitId":"jean-cq"},"content":"* **Expected Output on Failure:**","lastModifiedDate":"2023-09-30"},{"lineNumber":254,"author":{"gitId":"jean-cq"},"content":"  * `Invalid command format!` - Missing parameters","lastModifiedDate":"2023-10-13"},{"lineNumber":255,"author":{"gitId":"jean-cq"},"content":"  * `Tags names only allows alphanumeric characters, spaces, and dashes.` - Invalid parameter inputs","lastModifiedDate":"2023-10-15"},{"lineNumber":256,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":257,"author":{"gitId":"ryanozx"},"content":"### Locating an employee in HRMate by name: `find`","lastModifiedDate":"2023-09-29"},{"lineNumber":258,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-09-29"},{"lineNumber":259,"author":{"gitId":"ryanozx"},"content":"* **What It Does:**","lastModifiedDate":"2023-09-29"},{"lineNumber":260,"author":{"gitId":"ryanozx"},"content":"  * Finds all employees whose name contains at least one word in the search query (case-insensitive). Only name","lastModifiedDate":"2023-09-29"},{"lineNumber":261,"author":{"gitId":"ryanozx"},"content":"    containing the whole word are matched.","lastModifiedDate":"2023-09-29"},{"lineNumber":262,"author":{"gitId":"ryanozx"},"content":"* **Format:**","lastModifiedDate":"2023-09-29"},{"lineNumber":263,"author":{"gitId":"ryanozx"},"content":"  * `find SEARCH_QUERY...`","lastModifiedDate":"2023-09-29"},{"lineNumber":264,"author":{"gitId":"ryanozx"},"content":"* **Examples:**","lastModifiedDate":"2023-09-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"ryanozx"},"content":"| S/N | Command information                                                                                                                                                                                                                  |","lastModifiedDate":"2023-09-29"},{"lineNumber":267,"author":{"gitId":"ryanozx"},"content":"|-----|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-09-29"},{"lineNumber":268,"author":{"gitId":"ryanozx"},"content":"| 1   | **Command:** `find martinez` \u003cbr\u003e\u003cbr\u003e **Output:** Returns a list of employees whose names contain \"*martinez*\" e.g. \"*Emiliano \u003cu\u003eMartinez\u003c/u\u003e*\" and \"*Lisandro \u003cu\u003eMartinez\u003c/u\u003e*\"                                                    |","lastModifiedDate":"2023-09-29"},{"lineNumber":269,"author":{"gitId":"ryanozx"},"content":"| 2   | **Command:** `find harry redknapp` \u003cbr\u003e\u003cbr\u003e **Output:** Returns a list of employees whose names contain either \"*harry*\" or \"*redknapp*\" e.g. \"*\u003cu\u003eHarry\u003c/u\u003e Kane*\", \"*Jamie \u003cu\u003eRedknapp\u003c/u\u003e*\", and \"*\u003cu\u003eHarry\u003c/u\u003e \u003cu\u003eRedknapp\u003c/u\u003e*\" |","lastModifiedDate":"2023-09-29"},{"lineNumber":270,"author":{"gitId":"ryanozx"},"content":"| 3   | **Command:** `find martin` \u003cbr\u003e\u003cbr\u003e **Output:** Returns a list of employees whose names contain \"*martin*\" e.g. \"*\u003cu\u003eMartin\u003c/u\u003e Odegaard*\" but not \"*Gabriel Martinelli*\" (only full word matches are displayed)                     |","lastModifiedDate":"2023-09-29"},{"lineNumber":271,"author":{"gitId":"ryanozx"},"content":"* **Acceptable Values:**","lastModifiedDate":"2023-09-29"},{"lineNumber":272,"author":{"gitId":"ryanozx"},"content":"  * Search query: A non-empty input is required. Inputs can contain one or more words.","lastModifiedDate":"2023-09-29"},{"lineNumber":273,"author":{"gitId":"ryanozx"},"content":"* **Expected Output on Success:**","lastModifiedDate":"2023-09-29"},{"lineNumber":274,"author":{"gitId":"ryanozx"},"content":"  * GUI Changes: A list of employees whose names contain at least one of the words","lastModifiedDate":"2023-09-29"},{"lineNumber":275,"author":{"gitId":"ryanozx"},"content":"  * Message shown to user: \"[Number of matches] employees matched:\"","lastModifiedDate":"2023-09-29"},{"lineNumber":276,"author":{"gitId":"ryanozx"},"content":"* **Expected Output on Failure:**","lastModifiedDate":"2023-09-29"},{"lineNumber":277,"author":{"gitId":"ryanozx"},"content":"  * `Invalid Command Format` - if an empty input is provided","lastModifiedDate":"2023-09-29"},{"lineNumber":278,"author":{"gitId":"ryanozx"},"content":"* **For advanced users:**","lastModifiedDate":"2023-09-29"},{"lineNumber":279,"author":{"gitId":"ryanozx"},"content":"  * Employees are displayed in the order in which they are arranged in the address book","lastModifiedDate":"2023-09-29"},{"lineNumber":280,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-09-29"},{"lineNumber":281,"author":{"gitId":"ryanozx"},"content":"### Removing an employee Record : `delete`","lastModifiedDate":"2023-09-29"},{"lineNumber":282,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-09-29"},{"lineNumber":283,"author":{"gitId":"ryanozx"},"content":"* **What It Does:**","lastModifiedDate":"2023-09-29"},{"lineNumber":284,"author":{"gitId":"ryanozx"},"content":"  * Removes an existing employee from HRMate, so that the employee’s record is no longer available in HRMate.","lastModifiedDate":"2023-09-29"},{"lineNumber":285,"author":{"gitId":"ryanozx"},"content":"* **Format:**","lastModifiedDate":"2023-09-29"},{"lineNumber":286,"author":{"gitId":"ryanozx"},"content":"  * `delete EMPLOYEE_LIST_INDEX`","lastModifiedDate":"2023-09-29"},{"lineNumber":287,"author":{"gitId":"ryanozx"},"content":"* **Examples:**","lastModifiedDate":"2023-09-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"ryanozx"},"content":"| S/N | Command information                                                                                                                                                                                                                         |","lastModifiedDate":"2023-09-29"},{"lineNumber":290,"author":{"gitId":"ryanozx"},"content":"|-----|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-09-29"},{"lineNumber":291,"author":{"gitId":"ryanozx"},"content":"| 1   | **Command:** `delete 1` \u003cbr\u003e\u003cbr\u003e **Output:** Deletes the record belonging to the employee whose index is 1. For instance, if the record belongs to “*David de Gea*”, then *de Gea*’s record is removed from HRMate and no longer available. |","lastModifiedDate":"2023-09-29"},{"lineNumber":292,"author":{"gitId":"ryanozx"},"content":"| 2   | **Command:** `delete 5` \u003cbr\u003e\u003cbr\u003e **Output:**: Deletes the record belonging to the employee whose index is 5. For instance, if the record belongs to “*Carlos Puyol*”, then *Puyol*’s record is removed from HRMate and no longer available. |","lastModifiedDate":"2023-09-29"},{"lineNumber":293,"author":{"gitId":"ryanozx"},"content":"* **Acceptable Values:**","lastModifiedDate":"2023-09-29"},{"lineNumber":294,"author":{"gitId":"ryanozx"},"content":"  * The specified `EMPLOYEE_LIST_INDEX` must correspond to an index number shown in the address book. It must be a valid number, larger than zero, and cannot exceed the number of entries in the address book.","lastModifiedDate":"2023-09-29"},{"lineNumber":295,"author":{"gitId":"ryanozx"},"content":"* **Expected Output on Success:**","lastModifiedDate":"2023-09-29"},{"lineNumber":296,"author":{"gitId":"ryanozx"},"content":"  * GUI Changes: The record of the employee whose index is specified will no longer appear in the list of employees","lastModifiedDate":"2023-09-29"},{"lineNumber":297,"author":{"gitId":"ryanozx"},"content":"  * Message shown to user: \"[Employee name]\u0027s record deleted\"","lastModifiedDate":"2023-09-29"},{"lineNumber":298,"author":{"gitId":"ryanozx"},"content":"* **Expected Output on Failure:**","lastModifiedDate":"2023-09-29"},{"lineNumber":299,"author":{"gitId":"ryanozx"},"content":"  * `Employee List Index does not exist` - An invalid index was specified","lastModifiedDate":"2023-09-29"},{"lineNumber":300,"author":{"gitId":"ryanozx"},"content":"  * `Employee List Index not specified` - No index was specified by the user","lastModifiedDate":"2023-09-29"},{"lineNumber":301,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-09-29"},{"lineNumber":302,"author":{"gitId":"ryanozx"},"content":"### Restarting HRMate by clearing all existing records : `clear`","lastModifiedDate":"2023-09-29"},{"lineNumber":303,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-09-29"},{"lineNumber":304,"author":{"gitId":"ryanozx"},"content":"* **What It Does:**","lastModifiedDate":"2023-09-29"},{"lineNumber":305,"author":{"gitId":"ryanozx"},"content":"  * Removes every entry from HRMate, such that the address book in HRMate is empty. A possible use case of this command","lastModifiedDate":"2023-09-29"},{"lineNumber":306,"author":{"gitId":"ryanozx"},"content":"    is to remove all sample records in HRMate so that you can fill it with employee records instead.","lastModifiedDate":"2023-09-29"},{"lineNumber":307,"author":{"gitId":"ryanozx"},"content":"* **Format:**","lastModifiedDate":"2023-09-29"},{"lineNumber":308,"author":{"gitId":"ryanozx"},"content":"  * `clear`","lastModifiedDate":"2023-09-29"},{"lineNumber":309,"author":{"gitId":"ryanozx"},"content":"* **Examples:**","lastModifiedDate":"2023-09-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":311,"author":{"gitId":"ryanozx"},"content":"| S/N | Command information                                                                          |","lastModifiedDate":"2023-09-29"},{"lineNumber":312,"author":{"gitId":"ryanozx"},"content":"|-----|----------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-09-29"},{"lineNumber":313,"author":{"gitId":"ryanozx"},"content":"| 1   | **Command:** `clear` \u003cbr\u003e\u003cbr\u003e **Output:** Deletes every employee record in the address book. |","lastModifiedDate":"2023-09-29"},{"lineNumber":314,"author":{"gitId":"ryanozx"},"content":"* **Acceptable Values:**","lastModifiedDate":"2023-09-29"},{"lineNumber":315,"author":{"gitId":"ryanozx"},"content":"  * This command does not require any parameters.","lastModifiedDate":"2023-09-29"},{"lineNumber":316,"author":{"gitId":"ryanozx"},"content":"* **Warning:**","lastModifiedDate":"2023-09-29"},{"lineNumber":317,"author":{"gitId":"ryanozx"},"content":"  \u003cbox type\u003d\"warning\" seamless\u003e","lastModifiedDate":"2023-09-29"},{"lineNumber":318,"author":{"gitId":"ryanozx"},"content":"    Be careful when using this command - the records are irretrievable once deleted.","lastModifiedDate":"2023-09-29"},{"lineNumber":319,"author":{"gitId":"ryanozx"},"content":"  \u003c/box\u003e","lastModifiedDate":"2023-09-29"},{"lineNumber":320,"author":{"gitId":"ryanozx"},"content":"* **Expected Value on Success:**","lastModifiedDate":"2023-09-29"},{"lineNumber":321,"author":{"gitId":"ryanozx"},"content":"  * GUI Changes: All existing records are no longer visible in the address book","lastModifiedDate":"2023-09-29"},{"lineNumber":322,"author":{"gitId":"ryanozx"},"content":"  * Message shown to the user: \"Address book has been cleared\"","lastModifiedDate":"2023-09-29"},{"lineNumber":323,"author":{"gitId":"ryanozx"},"content":"* **Expected Value on Failure:**","lastModifiedDate":"2023-09-29"},{"lineNumber":324,"author":{"gitId":"ryanozx"},"content":"  * N/A (no expected failure)","lastModifiedDate":"2023-09-29"},{"lineNumber":325,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-09-29"},{"lineNumber":326,"author":{"gitId":"ryanozx"},"content":"### Adding a leave record: `add-leave`","lastModifiedDate":"2023-11-03"},{"lineNumber":327,"author":{"gitId":"jean-cq"},"content":"* **What It Does:**","lastModifiedDate":"2023-11-03"},{"lineNumber":328,"author":{"gitId":"jean-cq"},"content":"  * Adds a leave record in HRMate based on employee index","lastModifiedDate":"2023-11-03"},{"lineNumber":329,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":330,"author":{"gitId":"jean-cq"},"content":"* **Format:**","lastModifiedDate":"2023-11-03"},{"lineNumber":331,"author":{"gitId":"jean-cq"},"content":"  * `add-leave INDEX title/TITLE start/START_DATE end/END_DATE [d/DESCRIPTION]`","lastModifiedDate":"2023-11-03"},{"lineNumber":332,"author":{"gitId":"jean-cq"},"content":"* Examples:","lastModifiedDate":"2023-11-03"},{"lineNumber":333,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":334,"author":{"gitId":"jean-cq"},"content":"| S/N | Command information                                                                                                                                                                                                                                                                                                                                                                                         |","lastModifiedDate":"2023-11-03"},{"lineNumber":335,"author":{"gitId":"jean-cq"},"content":"|-----|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-11-03"},{"lineNumber":336,"author":{"gitId":"jean-cq"},"content":"| 1   | **Command:** `add-leave 1 title/Sample Leave 1 start/2023-11-01 end/2023-11-01` \u003cbr\u003e\u003cbr\u003e **Output:** Adds a leave with the following details into the leaves book: \u003cul\u003e\u003cli\u003eEmployee: John Doe (employee with index 1)\u003c/li\u003e \u003cli\u003eTitle: Sample Leave 1\u003c/li\u003e \u003cli\u003eStart: 2023-11-01\u003c/li\u003e \u003cli\u003eEnd: 2023-11-01\u003c/li\u003e \u003cli\u003eDescription: NONE\u003c/li\u003e \u003cli\u003eStatus: PENDING\u003c/li\u003e\u003c/ul\u003e                                      |","lastModifiedDate":"2023-11-03"},{"lineNumber":337,"author":{"gitId":"jean-cq"},"content":"| 2   | **Command:** `add-leave 2 title/Sample Leave 2 start/2023-11-01 end/2023-11-02 d/Sample Description` \u003cbr\u003e\u003cbr\u003e **Output:** Adds a leave with the following details into the leaves book: \u003cul\u003e\u003cli\u003eEmployee: Steve Nash (employee with index 2)\u003c/li\u003e \u003cli\u003eTitle: Sample Leave 2\u003c/li\u003e \u003cli\u003eStart: 2023-11-01\u003c/li\u003e \u003cli\u003eEnd: 2023-11-02\u003c/li\u003e \u003cli\u003eDescription: Sample Description\u003c/li\u003e \u003cli\u003eStatus: PENDING\u003c/li\u003e\u003c/ul\u003e |","lastModifiedDate":"2023-11-03"},{"lineNumber":338,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":339,"author":{"gitId":"jean-cq"},"content":"* **Acceptable value:**","lastModifiedDate":"2023-11-03"},{"lineNumber":340,"author":{"gitId":"jean-cq"},"content":"  * The specified `INDEX` must match with a employee record shown in the displayed employee list.","lastModifiedDate":"2023-11-03"},{"lineNumber":341,"author":{"gitId":"jean-cq"},"content":"  * Description field is optional, the rest of field cannot be left empty.","lastModifiedDate":"2023-11-03"},{"lineNumber":342,"author":{"gitId":"jean-cq"},"content":"  * For start and end: they must be in the format `yyyy-mm-dd` (like 2023-11-01 for 2023 November 1st). Additionally, the start date must be before or equals to the end date.","lastModifiedDate":"2023-11-03"},{"lineNumber":343,"author":{"gitId":"jean-cq"},"content":"  * For status: it is PENDING status in default when a leave is first added.","lastModifiedDate":"2023-11-03"},{"lineNumber":344,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":345,"author":{"gitId":"jean-cq"},"content":"* **Expected output on failure:**","lastModifiedDate":"2023-11-03"},{"lineNumber":346,"author":{"gitId":"jean-cq"},"content":"  * `Date should be valid and in a format of \"yyyy-MM-dd\"` - if the format of date is invalid or no date input after \"start/\" and/or \"end/\"","lastModifiedDate":"2023-11-03"},{"lineNumber":347,"author":{"gitId":"jean-cq"},"content":"  * `The leave index provided is invalid` - if the index provided does not match with any employee record in the displayed leave list","lastModifiedDate":"2023-11-03"},{"lineNumber":348,"author":{"gitId":"jean-cq"},"content":"  * `Invalid command format!... ` - if any of the required field missing","lastModifiedDate":"2023-11-03"},{"lineNumber":349,"author":{"gitId":"jean-cq"},"content":"  * `Leave titles should only contain...` - if the title input is empty or invalid","lastModifiedDate":"2023-11-03"},{"lineNumber":350,"author":{"gitId":"ryanozx"},"content":"  * `End date cannot be before start date` - the end date provided is before the current or provided start date","lastModifiedDate":"2023-11-03"},{"lineNumber":351,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":352,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":353,"author":{"gitId":"ong-wei-hong"},"content":"### Editing a leave record: `edit-leave`","lastModifiedDate":"2023-11-02"},{"lineNumber":354,"author":{"gitId":"ong-wei-hong"},"content":"* **What It Does:**","lastModifiedDate":"2023-11-02"},{"lineNumber":355,"author":{"gitId":"ong-wei-hong"},"content":"  * Edits an existing leave record in HRMate based on their index","lastModifiedDate":"2023-11-02"},{"lineNumber":356,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":357,"author":{"gitId":"ong-wei-hong"},"content":"* **Format:**","lastModifiedDate":"2023-11-02"},{"lineNumber":358,"author":{"gitId":"ong-wei-hong"},"content":"  * `edit-leave INDEX [title/TITLE] [start/START_DATE] [end/END_DATE] [d/DESCRIPTION] [s/STATUS]`","lastModifiedDate":"2023-11-02"},{"lineNumber":359,"author":{"gitId":"ong-wei-hong"},"content":"    ","lastModifiedDate":"2023-11-02"},{"lineNumber":360,"author":{"gitId":"ong-wei-hong"},"content":"* Examples:","lastModifiedDate":"2023-11-02"},{"lineNumber":361,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":362,"author":{"gitId":"ong-wei-hong"},"content":"| S/N | Command information |","lastModifiedDate":"2023-11-02"},{"lineNumber":363,"author":{"gitId":"ong-wei-hong"},"content":"|-----|------|","lastModifiedDate":"2023-11-02"},{"lineNumber":364,"author":{"gitId":"ong-wei-hong"},"content":"| 1   | **Command:** `edit-leave 1 title/medical leave start/2023-11-01` \u003cbr\u003e **Output**: Edits the leave record with index 1 to have the below changes: \u003cul\u003e\u003cli\u003eTitle: medical leave\u003c/li\u003e\u003cli\u003eStart date: 2023 November 1st\u003c/li\u003e\u003cli\u003eNo changes to the other fields\u003c/li\u003e\u003c/ul\u003e |","lastModifiedDate":"2023-11-02"},{"lineNumber":365,"author":{"gitId":"ong-wei-hong"},"content":"| 2   | **Command:** `edit-leave 2 end/2023-11-02 d/not free until 11pm s/APPROVED` \u003cbr\u003e **Output**: Edits the leave record with index 2 to have the below changes: \u003cul\u003e\u003cli\u003eEnd date: 2023 November 2nd\u003c/li\u003e\u003cli\u003eDescription: not free until 11pm\u003c/li\u003e\u003cli\u003eStatus: APPROVED\u003c/li\u003e\u003c/ul\u003e |","lastModifiedDate":"2023-11-02"},{"lineNumber":366,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":367,"author":{"gitId":"ong-wei-hong"},"content":"* **Acceptable value:**","lastModifiedDate":"2023-11-02"},{"lineNumber":368,"author":{"gitId":"ong-wei-hong"},"content":"  * The specified `INDEX` must match with a leave record shown in the displayed leave list.","lastModifiedDate":"2023-11-02"},{"lineNumber":369,"author":{"gitId":"ong-wei-hong"},"content":"  * At least one leave record\u0027s field must be changed (`edit-leave 1` would be invalid as no leave record field are changed)","lastModifiedDate":"2023-11-02"},{"lineNumber":370,"author":{"gitId":"ong-wei-hong"},"content":"  * Only fields specified will be modified; fields not specified in the command will not be modified. A field is specified by including its associated field prefix in the command (i.e. `title/` for title, `start/` for start date etc.)","lastModifiedDate":"2023-11-02"},{"lineNumber":371,"author":{"gitId":"ong-wei-hong"},"content":"  * For title: if this field is included in the command, it cannot be left empty (i.e. `title/` is not allowed)","lastModifiedDate":"2023-11-02"},{"lineNumber":372,"author":{"gitId":"ong-wei-hong"},"content":"  * For start and end: if these fields are included in the command, they must be in the format yyyy-mm-dd (like 2023-11-01 for 2023 November 1st). Additionally, the start date must be before or equals to the end date.","lastModifiedDate":"2023-11-02"},{"lineNumber":373,"author":{"gitId":"ong-wei-hong"},"content":"  * For status: if this field is included in the command, it must be either APPROVED, PENDING or REJECTED","lastModifiedDate":"2023-11-02"},{"lineNumber":374,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":375,"author":{"gitId":"ong-wei-hong"},"content":"* **Expected output on failure:**","lastModifiedDate":"2023-11-02"},{"lineNumber":376,"author":{"gitId":"ong-wei-hong"},"content":"  * `At least one field to edit must be provided` - if no fields are provided","lastModifiedDate":"2023-11-02"},{"lineNumber":377,"author":{"gitId":"ong-wei-hong"},"content":"  * `The leave index provided is invalid` - if the index provided does not match with any leave record in the displayed leave list","lastModifiedDate":"2023-11-02"},{"lineNumber":378,"author":{"gitId":"ong-wei-hong"},"content":"  * `FIELD must be of format...` - if at least one of the field inputs violates the field\u0027s format requirements. Follow the displayed error message to fix the format error.","lastModifiedDate":"2023-11-02"},{"lineNumber":379,"author":{"gitId":"ong-wei-hong"},"content":"  * `end date cannot be before start date` - the end date provided is before the current or provided start date","lastModifiedDate":"2023-11-02"},{"lineNumber":380,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":381,"author":{"gitId":"ivyy-poison"},"content":"### Removing a leave record: `delete-leave`","lastModifiedDate":"2023-11-02"},{"lineNumber":382,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":383,"author":{"gitId":"ong-wei-hong"},"content":"* **What It Does:**","lastModifiedDate":"2023-11-02"},{"lineNumber":384,"author":{"gitId":"ong-wei-hong"},"content":"  * Removes an existing leave record form HRMate, so that the leave\u0027s record is no longer available in HRMate.","lastModifiedDate":"2023-11-02"},{"lineNumber":385,"author":{"gitId":"ong-wei-hong"},"content":"* **Format:**","lastModifiedDate":"2023-11-02"},{"lineNumber":386,"author":{"gitId":"ong-wei-hong"},"content":"  * `delete-leave LEAVE_LIST_INDEX`","lastModifiedDate":"2023-11-02"},{"lineNumber":387,"author":{"gitId":"ong-wei-hong"},"content":"* **Examples:**","lastModifiedDate":"2023-11-02"},{"lineNumber":388,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":389,"author":{"gitId":"ong-wei-hong"},"content":"| S/N | Command information                                                                                                                                                                                                                                                    |","lastModifiedDate":"2023-11-02"},{"lineNumber":390,"author":{"gitId":"ryanozx"},"content":"|-----|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-11-03"},{"lineNumber":391,"author":{"gitId":"ryanozx"},"content":"| 1   | **Command:** `delete-leave 1` \u003cbr\u003e\u003cbr\u003e **Output:** Deletes the leave record with index 1. For instance, if the leave record titled \"medical leave\" with employee \"David de Gea\" is indexed 1, then \"medical leave\" is removed from HRMate and no longer available.     |","lastModifiedDate":"2023-11-03"},{"lineNumber":392,"author":{"gitId":"ong-wei-hong"},"content":"| 2   | **Command:** `delete-leave 2` \u003cbr\u003e\u003cbr\u003e **Output:** Deletes the leave record with index 2. For instance, if the leave record titled \"childcare leave\" with employee \"Carlos Puyol\" is indexed 2, then \"childcare leave\" is removed from HRMate and no longer available. |","lastModifiedDate":"2023-11-02"},{"lineNumber":393,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":394,"author":{"gitId":"ong-wei-hong"},"content":"* **Acceptable Values:**","lastModifiedDate":"2023-11-02"},{"lineNumber":395,"author":{"gitId":"ong-wei-hong"},"content":"  * The specified `LEAVE_LIST_INDEX` must correspond to an index number shown in the leave book. It must be a valid number, larger than zero, and cannot exceed the number of entries in the leave book.","lastModifiedDate":"2023-11-02"},{"lineNumber":396,"author":{"gitId":"ong-wei-hong"},"content":"* **Expected Output on Success:**","lastModifiedDate":"2023-11-02"},{"lineNumber":397,"author":{"gitId":"ong-wei-hong"},"content":"  * GUI Changes: The leave record of the specified index will no longer appear in the list of leave records.","lastModifiedDate":"2023-11-02"},{"lineNumber":398,"author":{"gitId":"ong-wei-hong"},"content":"  * Message shown to user: \"[leave title] deleted\"","lastModifiedDate":"2023-11-02"},{"lineNumber":399,"author":{"gitId":"ong-wei-hong"},"content":"* **Expected Output on Failure:**","lastModifiedDate":"2023-11-02"},{"lineNumber":400,"author":{"gitId":"ong-wei-hong"},"content":"  * `Leave list index does not exist` - An invalid index was specified.","lastModifiedDate":"2023-11-02"},{"lineNumber":401,"author":{"gitId":"ong-wei-hong"},"content":"  * `Employee list index not specified` - No index was specified by the user.","lastModifiedDate":"2023-11-02"},{"lineNumber":402,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":403,"author":{"gitId":"ryanozx"},"content":"### Closes the application : `exit`","lastModifiedDate":"2023-09-29"},{"lineNumber":404,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-09-29"},{"lineNumber":405,"author":{"gitId":"ryanozx"},"content":"* **What It Does:**","lastModifiedDate":"2023-09-29"},{"lineNumber":406,"author":{"gitId":"ryanozx"},"content":"  * Closes and exits the application.","lastModifiedDate":"2023-09-29"},{"lineNumber":407,"author":{"gitId":"ryanozx"},"content":"* **Format:**","lastModifiedDate":"2023-09-29"},{"lineNumber":408,"author":{"gitId":"ryanozx"},"content":"  * `exit`","lastModifiedDate":"2023-09-29"},{"lineNumber":409,"author":{"gitId":"ryanozx"},"content":"* **Examples:**","lastModifiedDate":"2023-09-29"},{"lineNumber":410,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":411,"author":{"gitId":"ryanozx"},"content":"| S/N | Command information                                               |","lastModifiedDate":"2023-09-29"},{"lineNumber":412,"author":{"gitId":"ryanozx"},"content":"|-----|-------------------------------------------------------------------|","lastModifiedDate":"2023-09-29"},{"lineNumber":413,"author":{"gitId":"ryanozx"},"content":"| 1   | **Command:** `exit` \u003cbr\u003e\u003cbr\u003e **Output:** Closes and exits HRMate. |","lastModifiedDate":"2023-09-29"},{"lineNumber":414,"author":{"gitId":"ryanozx"},"content":"* **Acceptable Values:**","lastModifiedDate":"2023-09-29"},{"lineNumber":415,"author":{"gitId":"ryanozx"},"content":"  * This command does not require any parameters.","lastModifiedDate":"2023-09-29"},{"lineNumber":416,"author":{"gitId":"ryanozx"},"content":"* **Expected Value on Success:**","lastModifiedDate":"2023-09-29"},{"lineNumber":417,"author":{"gitId":"ryanozx"},"content":"  * GUI Changes: The application window closes.","lastModifiedDate":"2023-09-29"},{"lineNumber":418,"author":{"gitId":"ryanozx"},"content":"* **Expected Value on Failure:**","lastModifiedDate":"2023-09-29"},{"lineNumber":419,"author":{"gitId":"ryanozx"},"content":"  * N/A (no expected failure)","lastModifiedDate":"2023-09-29"},{"lineNumber":420,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":421,"author":{"gitId":"InfiBeyond"},"content":"### Approve leave record by index: `approve-leave`","lastModifiedDate":"2023-11-03"},{"lineNumber":422,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":423,"author":{"gitId":"InfiBeyond"},"content":"* **What It Does:**","lastModifiedDate":"2023-11-03"},{"lineNumber":424,"author":{"gitId":"InfiBeyond"},"content":"  * Approve a leave record by the given index","lastModifiedDate":"2023-11-03"},{"lineNumber":425,"author":{"gitId":"InfiBeyond"},"content":"  * **Format:**","lastModifiedDate":"2023-11-03"},{"lineNumber":426,"author":{"gitId":"InfiBeyond"},"content":"  * `approve-leave INDEX`","lastModifiedDate":"2023-11-03"},{"lineNumber":427,"author":{"gitId":"InfiBeyond"},"content":"* **Examples:**","lastModifiedDate":"2023-11-03"},{"lineNumber":428,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":429,"author":{"gitId":"InfiBeyond"},"content":"| S/N | Command information                                                                                                                                                                     |","lastModifiedDate":"2023-11-03"},{"lineNumber":430,"author":{"gitId":"InfiBeyond"},"content":"|-----|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-11-03"},{"lineNumber":431,"author":{"gitId":"InfiBeyond"},"content":"| 1   | **Command:** `approve-leave 1` \u003cbr\u003e\u003cbr\u003e **Output:** Approve the leave record of index 1|","lastModifiedDate":"2023-11-03"},{"lineNumber":432,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":433,"author":{"gitId":"InfiBeyond"},"content":"* **Acceptable Values:**","lastModifiedDate":"2023-11-03"},{"lineNumber":434,"author":{"gitId":"InfiBeyond"},"content":"  * The index should be a positive number starting from 1 and within the range of the leave list.","lastModifiedDate":"2023-11-03"},{"lineNumber":435,"author":{"gitId":"InfiBeyond"},"content":"* **Expected Output on Success:**","lastModifiedDate":"2023-11-03"},{"lineNumber":436,"author":{"gitId":"InfiBeyond"},"content":"  * GUI Changes: The approved leave will be marked as approved with green highlight.","lastModifiedDate":"2023-11-03"},{"lineNumber":437,"author":{"gitId":"InfiBeyond"},"content":"  * Message shown to user: \"Approved Leave:” with the information of the approved leave","lastModifiedDate":"2023-11-03"},{"lineNumber":438,"author":{"gitId":"InfiBeyond"},"content":"* **Expected Output on Failure:**","lastModifiedDate":"2023-11-03"},{"lineNumber":439,"author":{"gitId":"InfiBeyond"},"content":"  * `Leave previously approved: `with the information of the previously approved leave - the leave given by the index was previously approved","lastModifiedDate":"2023-11-03"},{"lineNumber":440,"author":{"gitId":"InfiBeyond"},"content":"  * `The leave index provided is invalid:  - the index is out of bounds","lastModifiedDate":"2023-11-03"},{"lineNumber":441,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":442,"author":{"gitId":"InfiBeyond"},"content":"### Reject leave record by index: `reject-leave`","lastModifiedDate":"2023-11-03"},{"lineNumber":443,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":444,"author":{"gitId":"InfiBeyond"},"content":"* **What It Does:**","lastModifiedDate":"2023-11-03"},{"lineNumber":445,"author":{"gitId":"InfiBeyond"},"content":"  * Reject a leave record by the given index","lastModifiedDate":"2023-11-03"},{"lineNumber":446,"author":{"gitId":"InfiBeyond"},"content":"  * **Format:**","lastModifiedDate":"2023-11-03"},{"lineNumber":447,"author":{"gitId":"InfiBeyond"},"content":"  * `reject-leave INDEX`","lastModifiedDate":"2023-11-03"},{"lineNumber":448,"author":{"gitId":"InfiBeyond"},"content":"* **Examples:**","lastModifiedDate":"2023-11-03"},{"lineNumber":449,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":450,"author":{"gitId":"InfiBeyond"},"content":"| S/N | Command information                                                                   |","lastModifiedDate":"2023-11-03"},{"lineNumber":451,"author":{"gitId":"InfiBeyond"},"content":"|-----|---------------------------------------------------------------------------------------|","lastModifiedDate":"2023-11-03"},{"lineNumber":452,"author":{"gitId":"InfiBeyond"},"content":"| 1   | **Command:** `reject-leave 1` \u003cbr\u003e\u003cbr\u003e **Output:** Reject the leave record of index 1 |","lastModifiedDate":"2023-11-03"},{"lineNumber":453,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":454,"author":{"gitId":"InfiBeyond"},"content":"* **Acceptable Values:**","lastModifiedDate":"2023-11-03"},{"lineNumber":455,"author":{"gitId":"InfiBeyond"},"content":"  * The index should be a positive number starting from 1 and within the range of the leave list.","lastModifiedDate":"2023-11-03"},{"lineNumber":456,"author":{"gitId":"InfiBeyond"},"content":"* **Expected Output on Success:**","lastModifiedDate":"2023-11-03"},{"lineNumber":457,"author":{"gitId":"InfiBeyond"},"content":"  * GUI Changes: The rejected leave will be marked as rejected with red highlight.","lastModifiedDate":"2023-11-03"},{"lineNumber":458,"author":{"gitId":"InfiBeyond"},"content":"  * Message shown to user: \"Rejected Leave:” with the information of the rejected leave","lastModifiedDate":"2023-11-03"},{"lineNumber":459,"author":{"gitId":"InfiBeyond"},"content":"* **Expected Output on Failure:**","lastModifiedDate":"2023-11-03"},{"lineNumber":460,"author":{"gitId":"InfiBeyond"},"content":"  * `Leave previously Rejected: `with the information of the previously rejected leave - the leave given by the index was previously rejected","lastModifiedDate":"2023-11-03"},{"lineNumber":461,"author":{"gitId":"InfiBeyond"},"content":"  * `The leave index provided is invalid:`  - the index is out of bounds","lastModifiedDate":"2023-11-03"},{"lineNumber":462,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":463,"author":{"gitId":"ryanozx"},"content":"### Find leave records by time period: `find-leave-range`","lastModifiedDate":"2023-11-03"},{"lineNumber":464,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":465,"author":{"gitId":"ryanozx"},"content":"* **What It Does:**","lastModifiedDate":"2023-11-03"},{"lineNumber":466,"author":{"gitId":"ryanozx"},"content":"  * Finds all leave records in HRMate in a given time period. There are 4 possible scenarios:","lastModifiedDate":"2023-11-03"},{"lineNumber":467,"author":{"gitId":"ryanozx"},"content":"  * 1) The time period has a start date and an end date (inclusive) - all leaves with at least one day that falls within","lastModifiedDate":"2023-11-03"},{"lineNumber":468,"author":{"gitId":"ryanozx"},"content":"      this period will be displayed","lastModifiedDate":"2023-11-03"},{"lineNumber":469,"author":{"gitId":"ryanozx"},"content":"    2) The time period only has a start date (inclusive) - all leaves that either occur on the start date or will occur","lastModifiedDate":"2023-11-03"},{"lineNumber":470,"author":{"gitId":"ryanozx"},"content":"      after the start date will be displayed","lastModifiedDate":"2023-11-03"},{"lineNumber":471,"author":{"gitId":"ryanozx"},"content":"    3) The time period only has an end date (inclusive) - all leaves that either occur on the end date or will finish","lastModifiedDate":"2023-11-03"},{"lineNumber":472,"author":{"gitId":"ryanozx"},"content":"      before the end date will be displayed","lastModifiedDate":"2023-11-03"},{"lineNumber":473,"author":{"gitId":"ryanozx"},"content":"    4) The time period does not have a start date or end date - all leaves will be returned","lastModifiedDate":"2023-11-03"},{"lineNumber":474,"author":{"gitId":"ryanozx"},"content":"* **Format:**","lastModifiedDate":"2023-11-03"},{"lineNumber":475,"author":{"gitId":"ryanozx"},"content":"  * `find-leave-range [start/START_DATE] [end/END_DATE]`","lastModifiedDate":"2023-11-03"},{"lineNumber":476,"author":{"gitId":"ryanozx"},"content":"* **Examples:**","lastModifiedDate":"2023-11-03"},{"lineNumber":477,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":478,"author":{"gitId":"ryanozx"},"content":"| S/N | Command information                                                                                                                                                                     |","lastModifiedDate":"2023-11-03"},{"lineNumber":479,"author":{"gitId":"ryanozx"},"content":"|-----|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-11-03"},{"lineNumber":480,"author":{"gitId":"ryanozx"},"content":"| 1   | **Command:** `find-leave-range start/2023-10-27 end/2023-11-03` \u003cbr\u003e\u003cbr\u003e **Output:** Returns all leaves that have at least one day in the period of 2023-10-27 and 2023-11-03 inclusive |","lastModifiedDate":"2023-11-03"},{"lineNumber":481,"author":{"gitId":"ryanozx"},"content":"| 2   | **Command:** `find-leave-range start/2023-10-27` \u003cbr\u003e\u003cbr\u003e **Output:** Returns all leaves that have at least one day either on or after 2023-10-27                                       |","lastModifiedDate":"2023-11-03"},{"lineNumber":482,"author":{"gitId":"ryanozx"},"content":"| 3   | **Command:** `find-leave-range end/2023-11-03` \u003cbr\u003e\u003cbr\u003e **Output:** Returns all leaves that have at least one day on or before 2023-11-03                                               |","lastModifiedDate":"2023-11-03"},{"lineNumber":483,"author":{"gitId":"ryanozx"},"content":"| 4   | **Command:** `find-leave-range` \u003cbr\u003e\u003cbr\u003e **Output:** Returns all leaves                                                                                                                 |","lastModifiedDate":"2023-11-03"},{"lineNumber":484,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":485,"author":{"gitId":"ryanozx"},"content":"* **Acceptable Values:**","lastModifiedDate":"2023-11-03"},{"lineNumber":486,"author":{"gitId":"ryanozx"},"content":"  * The dates provided for START_DATE and END_DATE must be of the format `yyyy-MM-DD`","lastModifiedDate":"2023-11-03"},{"lineNumber":487,"author":{"gitId":"ryanozx"},"content":"  * If both end date and start date are provided, the end date cannot occur before the start date","lastModifiedDate":"2023-11-03"},{"lineNumber":488,"author":{"gitId":"ryanozx"},"content":"* **Expected Output on Success:**","lastModifiedDate":"2023-11-03"},{"lineNumber":489,"author":{"gitId":"ryanozx"},"content":"  * GUI Changes: All leave applications that fall within the queried time period will be returned","lastModifiedDate":"2023-11-03"},{"lineNumber":490,"author":{"gitId":"ryanozx"},"content":"  * Message shown to user: \"[number of leaves matched] leaves listed!\"","lastModifiedDate":"2023-11-03"},{"lineNumber":491,"author":{"gitId":"ryanozx"},"content":"* **Expected Output on Failure:**","lastModifiedDate":"2023-11-03"},{"lineNumber":492,"author":{"gitId":"ryanozx"},"content":"  * `The end date is earlier than the start date!` - the start date cannot occur after the end date","lastModifiedDate":"2023-11-03"},{"lineNumber":493,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":494,"author":{"gitId":"ryanozx"},"content":"### Find leave records by leave status: `find-leave-status`","lastModifiedDate":"2023-11-03"},{"lineNumber":495,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":496,"author":{"gitId":"ryanozx"},"content":"* **What It Does:**","lastModifiedDate":"2023-11-03"},{"lineNumber":497,"author":{"gitId":"ryanozx"},"content":"  * Finds all leave records in HRMate that have a particular status (either APPROVED/PENDING/REJECTED), so that you can","lastModifiedDate":"2023-11-03"},{"lineNumber":498,"author":{"gitId":"ryanozx"},"content":"  * see which leaves still require approval","lastModifiedDate":"2023-11-03"},{"lineNumber":499,"author":{"gitId":"ryanozx"},"content":"* **Format:**","lastModifiedDate":"2023-11-03"},{"lineNumber":500,"author":{"gitId":"ryanozx"},"content":"  * `find-leave-status STATUS`","lastModifiedDate":"2023-11-03"},{"lineNumber":501,"author":{"gitId":"ryanozx"},"content":"* **Examples:**","lastModifiedDate":"2023-11-03"},{"lineNumber":502,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":503,"author":{"gitId":"ryanozx"},"content":"| S/N | Command information                                                                                               |","lastModifiedDate":"2023-11-03"},{"lineNumber":504,"author":{"gitId":"ryanozx"},"content":"|-----|-------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-11-03"},{"lineNumber":505,"author":{"gitId":"ryanozx"},"content":"| 1   | **Command:** `find-leave-status APPROVED` \u003cbr\u003e\u003cbr\u003e **Output:** Returns all leaves that have already been approved |","lastModifiedDate":"2023-11-03"},{"lineNumber":506,"author":{"gitId":"ryanozx"},"content":"| 2   | **Command:** `find-leave-status PENDING` \u003cbr\u003e\u003cbr\u003e **Output:** Returns all leaves that are still pending approval  |","lastModifiedDate":"2023-11-03"},{"lineNumber":507,"author":{"gitId":"ryanozx"},"content":"| 3   | **Command:** `find-leave-status REJECTED` \u003cbr\u003e\u003cbr\u003e **Output:** Returns all leaves that have been rejected         |","lastModifiedDate":"2023-11-03"},{"lineNumber":508,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":509,"author":{"gitId":"ryanozx"},"content":"* **Acceptable Values:**","lastModifiedDate":"2023-11-03"},{"lineNumber":510,"author":{"gitId":"ryanozx"},"content":"  * Status must be either \"APPROVED\", \"PENDING\", or \"REJECTED\". If the value is not in uppercase, the command will still be","lastModifiedDate":"2023-11-03"},{"lineNumber":511,"author":{"gitId":"ryanozx"},"content":"    accepted, but all other values are rejected.","lastModifiedDate":"2023-11-03"},{"lineNumber":512,"author":{"gitId":"ryanozx"},"content":"* **Expected Output on Success:**","lastModifiedDate":"2023-11-03"},{"lineNumber":513,"author":{"gitId":"ryanozx"},"content":"  * GUI Changes: All leave applications that have the requested status will be returned","lastModifiedDate":"2023-11-03"},{"lineNumber":514,"author":{"gitId":"ryanozx"},"content":"  * Message shown to user: \"[number of leaves matched] leaves listed!\"","lastModifiedDate":"2023-11-03"},{"lineNumber":515,"author":{"gitId":"ryanozx"},"content":"* **Expected Output on Failure:**","lastModifiedDate":"2023-11-03"},{"lineNumber":516,"author":{"gitId":"ryanozx"},"content":"  * `Command should only contain one of the following words: APPROVED / PENDING / REJECTED` - you provided an invalid status,","lastModifiedDate":"2023-11-03"},{"lineNumber":517,"author":{"gitId":"ryanozx"},"content":"    try either `APPROVED`, `PENDING`, or `REJECTED` instead","lastModifiedDate":"2023-11-03"},{"lineNumber":518,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":519,"author":{"gitId":"ryanozx"},"content":"### View all leaves: `find-all-leave`","lastModifiedDate":"2023-11-03"},{"lineNumber":520,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":521,"author":{"gitId":"ryanozx"},"content":"* **What It Does:**","lastModifiedDate":"2023-11-03"},{"lineNumber":522,"author":{"gitId":"ryanozx"},"content":"  * Shows all leave records in HRMate","lastModifiedDate":"2023-11-03"},{"lineNumber":523,"author":{"gitId":"ryanozx"},"content":"* **Format:**","lastModifiedDate":"2023-11-03"},{"lineNumber":524,"author":{"gitId":"ryanozx"},"content":"  * `find-all-leave`","lastModifiedDate":"2023-11-03"},{"lineNumber":525,"author":{"gitId":"ryanozx"},"content":"* **Examples:**","lastModifiedDate":"2023-11-03"},{"lineNumber":526,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":527,"author":{"gitId":"ryanozx"},"content":"| S/N | Command information                                                                      |","lastModifiedDate":"2023-11-03"},{"lineNumber":528,"author":{"gitId":"ryanozx"},"content":"|-----|------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-11-03"},{"lineNumber":529,"author":{"gitId":"ryanozx"},"content":"| 1   | **Command:** `find-all-leave` \u003cbr\u003e\u003cbr\u003e **Output:** Returns all leaves in the application |","lastModifiedDate":"2023-11-03"},{"lineNumber":530,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":531,"author":{"gitId":"ryanozx"},"content":"* **Expected Output on Success:**","lastModifiedDate":"2023-11-03"},{"lineNumber":532,"author":{"gitId":"ryanozx"},"content":"  * GUI Changes: All leave applications will be returned","lastModifiedDate":"2023-11-03"},{"lineNumber":533,"author":{"gitId":"ryanozx"},"content":"  * Message shown to user: \"Current # of Leave Request(s): [Number of leave applications]\"","lastModifiedDate":"2023-11-03"},{"lineNumber":534,"author":{"gitId":"ryanozx"},"content":"  * If there are no leave applications on the app, the message shown to the user is: \"There are currently no leave requests.\"","lastModifiedDate":"2023-11-03"},{"lineNumber":535,"author":{"gitId":"ryanozx"},"content":"* **Expected Output on Failure:**","lastModifiedDate":"2023-11-03"},{"lineNumber":536,"author":{"gitId":"ryanozx"},"content":"  * None, this command is not expected to fail","lastModifiedDate":"2023-11-03"},{"lineNumber":537,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":538,"author":{"gitId":"ryanozx"},"content":"### Find leave records belonging to an employee: `find-leave`","lastModifiedDate":"2023-11-03"},{"lineNumber":539,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":540,"author":{"gitId":"ryanozx"},"content":"* **What It Does:**","lastModifiedDate":"2023-11-03"},{"lineNumber":541,"author":{"gitId":"ryanozx"},"content":"  * Finds all leave records that are associated with an employee, so that you can see the person\u0027s leave history and ","lastModifiedDate":"2023-11-03"},{"lineNumber":542,"author":{"gitId":"ryanozx"},"content":"  * upcoming leaves","lastModifiedDate":"2023-11-03"},{"lineNumber":543,"author":{"gitId":"ryanozx"},"content":"* **Format:**","lastModifiedDate":"2023-11-03"},{"lineNumber":544,"author":{"gitId":"ryanozx"},"content":"  * `find-leave INDEX`","lastModifiedDate":"2023-11-03"},{"lineNumber":545,"author":{"gitId":"ryanozx"},"content":"* **Examples:**","lastModifiedDate":"2023-11-03"},{"lineNumber":546,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":547,"author":{"gitId":"ryanozx"},"content":"| S/N | Command information                                                                                                                                                                                              |","lastModifiedDate":"2023-11-03"},{"lineNumber":548,"author":{"gitId":"ryanozx"},"content":"|-----|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-11-03"},{"lineNumber":549,"author":{"gitId":"ryanozx"},"content":"| 1   | **Command:** `find-leave 1` \u003cbr\u003e\u003cbr\u003e **Output:** Returns all leaves associated with the employee with index 1. For instance, if the employee \"John Smith\" has employee index 1, John\u0027s leaves will be displayed. |","lastModifiedDate":"2023-11-03"},{"lineNumber":550,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":551,"author":{"gitId":"ryanozx"},"content":"* **Acceptable Values:**","lastModifiedDate":"2023-11-03"},{"lineNumber":552,"author":{"gitId":"ryanozx"},"content":"  * The specified `INDEX` must match with a employee record shown in the displayed employee list.","lastModifiedDate":"2023-11-03"},{"lineNumber":553,"author":{"gitId":"ryanozx"},"content":"* **Expected Output on Success:**","lastModifiedDate":"2023-11-03"},{"lineNumber":554,"author":{"gitId":"ryanozx"},"content":"  * GUI Changes: All leave applications associated with the requested employee will be returned.","lastModifiedDate":"2023-11-03"},{"lineNumber":555,"author":{"gitId":"ryanozx"},"content":"  * Message shown to user: \"[number of leaves matched] leaves listed!\"","lastModifiedDate":"2023-11-03"},{"lineNumber":556,"author":{"gitId":"ryanozx"},"content":"* **Expected Output on Failure:**","lastModifiedDate":"2023-11-03"},{"lineNumber":557,"author":{"gitId":"ryanozx"},"content":"  * `The person index provided is invalid` - The index you provided does not match with any known employee. To resolve this,","lastModifiedDate":"2023-11-03"},{"lineNumber":558,"author":{"gitId":"ryanozx"},"content":"    make sure that the employee that you are requesting for is currently displayed in the employee list. Use the number to","lastModifiedDate":"2023-11-03"},{"lineNumber":559,"author":{"gitId":"ryanozx"},"content":"    the left of the employee\u0027s name as the index","lastModifiedDate":"2023-11-03"},{"lineNumber":560,"author":{"gitId":"ryanozx"},"content":"  * `Invalid command format` - There was no employee index provided, please make sure that you supply a number as the indexh ","lastModifiedDate":"2023-11-03"},{"lineNumber":561,"author":{"gitId":"ryanozx"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-10-27"},{"lineNumber":562,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":563,"author":{"gitId":"ong-wei-hong"},"content":"## Importing/Exporting employee records","lastModifiedDate":"2023-11-11"},{"lineNumber":564,"author":{"gitId":"ryanozx"},"content":"It\u0027s painful having to add in each employee into HRMate manually. That\u0027s why HRMate provides import and export commands,","lastModifiedDate":"2023-10-27"},{"lineNumber":565,"author":{"gitId":"ryanozx"},"content":"so you can bring in all your records from Excel with just a single command!","lastModifiedDate":"2023-10-27"},{"lineNumber":566,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":567,"author":{"gitId":"ryanozx"},"content":"With the import and export commands, HRMate can read and save files in [CSV](#glossary) format, which is supported","lastModifiedDate":"2023-11-08"},{"lineNumber":568,"author":{"gitId":"ryanozx"},"content":"by major spreadsheet applications such as Microsoft Excel. ","lastModifiedDate":"2023-10-27"},{"lineNumber":569,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":570,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":571,"author":{"gitId":"ong-wei-hong"},"content":"### Importing employee records : `import`","lastModifiedDate":"2023-11-11"},{"lineNumber":572,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":573,"author":{"gitId":"ryanozx"},"content":"Here\u0027s how you can bring over your records from Excel:","lastModifiedDate":"2023-10-27"},{"lineNumber":574,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":575,"author":{"gitId":"ryanozx"},"content":"1. Export your Excel save file in CSV format. Ensure that the separator is set to be a semicolon(`;`), and that you have","lastModifiedDate":"2023-11-03"},{"lineNumber":576,"author":{"gitId":"ryanozx"},"content":"the following fields: Name, Phone, Email, Address. You may also include a Tags column if you wish.","lastModifiedDate":"2023-10-27"},{"lineNumber":577,"author":{"gitId":"ryanozx"},"content":"   * You may skip this step if you already have a CSV file (e.g. you are importing a previously exported CSV file generated by","lastModifiedDate":"2023-10-27"},{"lineNumber":578,"author":{"gitId":"ryanozx"},"content":"   HRMate)","lastModifiedDate":"2023-10-27"},{"lineNumber":579,"author":{"gitId":"ryanozx"},"content":"2. In HRMate, type in the following command in the command box: `import`","lastModifiedDate":"2023-10-27"},{"lineNumber":580,"author":{"gitId":"ryanozx"},"content":"3. In the file dialog that opens up, go to where you saved your exported CSV file, click on it, and click on the Open button.","lastModifiedDate":"2023-10-27"},{"lineNumber":581,"author":{"gitId":"ryanozx"},"content":"4. You should see your employee records show up in HRMate, along with the message \"Employee records have been imported from [your file name]!\"","lastModifiedDate":"2023-10-27"},{"lineNumber":582,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":583,"author":{"gitId":"ryanozx"},"content":"Here are some possible error messages you might encounter and here\u0027s how you can fix them:","lastModifiedDate":"2023-10-27"},{"lineNumber":584,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":585,"author":{"gitId":"ryanozx"},"content":"| Error Message                                                       | Why it happens                                                               | Fix                                                                               |","lastModifiedDate":"2023-10-27"},{"lineNumber":586,"author":{"gitId":"ryanozx"},"content":"|---------------------------------------------------------------------|------------------------------------------------------------------------------|-----------------------------------------------------------------------------------|","lastModifiedDate":"2023-10-27"},{"lineNumber":587,"author":{"gitId":"ryanozx"},"content":"| Employee records were not imported                                  | You did not select a file in the file dialog                                 | Retype the command, and make sure to select a CSV file when the file dialog opens |","lastModifiedDate":"2023-10-27"},{"lineNumber":588,"author":{"gitId":"ryanozx"},"content":"| Records in file [file name] could not be imported, import cancelled | Your file likely contains illegal characters or is corrupted                 | Ensure that your data fulfils the following constraints (to be added)             |","lastModifiedDate":"2023-10-27"},{"lineNumber":589,"author":{"gitId":"ryanozx"},"content":"| No valid records found in file [file name], import cancelled        | Your file either is empty or does not contain a single valid employee record | Ensure that your file is non-empty and fulfils the abovementioned constraints     |                                                     ","lastModifiedDate":"2023-10-27"},{"lineNumber":590,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":591,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":592,"author":{"gitId":"ong-wei-hong"},"content":"### Exporting employee records : `export`","lastModifiedDate":"2023-11-11"},{"lineNumber":593,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":594,"author":{"gitId":"ryanozx"},"content":"Not only can you bring your data into HRMate, you can also bring your data out of HRMate. HRMate\u0027s export feature allows you","lastModifiedDate":"2023-10-27"},{"lineNumber":595,"author":{"gitId":"ryanozx"},"content":"to export either the entire set of employee records, or employee records with a particular filter applied (e.g. only export","lastModifiedDate":"2023-10-27"},{"lineNumber":596,"author":{"gitId":"ryanozx"},"content":"all full-time employees, which are tagged with \"Full time\"). You can then either store your exported CSV file for future use,","lastModifiedDate":"2023-10-27"},{"lineNumber":597,"author":{"gitId":"ryanozx"},"content":"open it in a different application, or send it to another employee for them to import!","lastModifiedDate":"2023-10-27"},{"lineNumber":598,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":599,"author":{"gitId":"ryanozx"},"content":"Here\u0027s how you can export your data out of HRMate:","lastModifiedDate":"2023-10-27"},{"lineNumber":600,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":601,"author":{"gitId":"ryanozx"},"content":"1. In HRMate, type in the following command in the command box: `export [file name]`, replacing `[file name]` with the name","lastModifiedDate":"2023-10-27"},{"lineNumber":602,"author":{"gitId":"ryanozx"},"content":"you will like to give your file. Your files will be saved in CSV format automatically.","lastModifiedDate":"2023-10-27"},{"lineNumber":603,"author":{"gitId":"ryanozx"},"content":"   - For instance, if you would like to save your file as  `employees.csv`, type in the command `export employees`","lastModifiedDate":"2023-10-27"},{"lineNumber":604,"author":{"gitId":"ryanozx"},"content":"2. You should see the message \"Employee records have been saved to [file name]!\"","lastModifiedDate":"2023-10-27"},{"lineNumber":605,"author":{"gitId":"ryanozx"},"content":"3. To retrieve your exported file, go to the folder in which HRMate is stored in your File Explorer (if using Windows) or","lastModifiedDate":"2023-10-27"},{"lineNumber":606,"author":{"gitId":"ryanozx"},"content":"Finder (if using Mac OS). From there, click on the `export` folder.","lastModifiedDate":"2023-10-27"},{"lineNumber":607,"author":{"gitId":"ryanozx"},"content":"4. You should see your file in the `export` folder.","lastModifiedDate":"2023-10-27"},{"lineNumber":608,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":609,"author":{"gitId":"ryanozx"},"content":"Here are potential error messages that you may receive and here\u0027s how to fix them:","lastModifiedDate":"2023-10-27"},{"lineNumber":610,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":611,"author":{"gitId":"ryanozx"},"content":"| Error Message                                                       | Why it happens                                   | Fix                                                                                                                                                                                                                   |","lastModifiedDate":"2023-10-27"},{"lineNumber":612,"author":{"gitId":"ryanozx"},"content":"|---------------------------------------------------------------------|--------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-10-27"},{"lineNumber":613,"author":{"gitId":"ryanozx"},"content":"| Employee records could not be saved!                                | You do not have the permission to write the file | Try renaming your file name when typing out the command, especially if the previous name refers to an existing file. If not, move HRMate to a different folder where you can create files, and run the command again. |      ","lastModifiedDate":"2023-10-27"},{"lineNumber":614,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":615,"author":{"gitId":"ryanozx"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-10-27"},{"lineNumber":616,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":617,"author":{"gitId":"ong-wei-hong"},"content":"## Importing/Exporting leave records","lastModifiedDate":"2023-11-11"},{"lineNumber":618,"author":{"gitId":"ryanozx"},"content":"The import and export feature extends to importing and exporting leaves. This allows you to generate lists of leave","lastModifiedDate":"2023-11-03"},{"lineNumber":619,"author":{"gitId":"ryanozx"},"content":"applications that can be opened in other major spreadsheet applications such as Microsoft Excel.","lastModifiedDate":"2023-11-03"},{"lineNumber":620,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":621,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":622,"author":{"gitId":"ong-wei-hong"},"content":"### Importing employee records : `import-leave`","lastModifiedDate":"2023-11-11"},{"lineNumber":623,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":624,"author":{"gitId":"ryanozx"},"content":"Here\u0027s how you can bring over your leave records from Excel:","lastModifiedDate":"2023-11-03"},{"lineNumber":625,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":626,"author":{"gitId":"ryanozx"},"content":"1. Export your Excel save file in CSV format. Ensure that the separator is set to be a semicolon(`;`), and that you have","lastModifiedDate":"2023-11-03"},{"lineNumber":627,"author":{"gitId":"ryanozx"},"content":"   the following fields: Title, Employee, Start, End, Description, Status.","lastModifiedDate":"2023-11-03"},{"lineNumber":628,"author":{"gitId":"ryanozx"},"content":"  * You may skip this step if you already have a CSV file (e.g. you are importing a previously exported CSV file generated by","lastModifiedDate":"2023-11-03"},{"lineNumber":629,"author":{"gitId":"ryanozx"},"content":"    HRMate)","lastModifiedDate":"2023-11-03"},{"lineNumber":630,"author":{"gitId":"ryanozx"},"content":"2. In HRMate, type in the following command in the command box: `import-leave`","lastModifiedDate":"2023-11-03"},{"lineNumber":631,"author":{"gitId":"ryanozx"},"content":"3. In the file dialog that opens up, go to where you saved your exported CSV file, click on it, and click on the Open button.","lastModifiedDate":"2023-11-03"},{"lineNumber":632,"author":{"gitId":"ryanozx"},"content":"4. You should see your leave records show up in HRMate, along with the message \"Leave records have been imported from [your file name]!\"","lastModifiedDate":"2023-11-03"},{"lineNumber":633,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":634,"author":{"gitId":"ryanozx"},"content":"Here are some possible error messages you might encounter and here\u0027s how you can fix them:","lastModifiedDate":"2023-11-03"},{"lineNumber":635,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":636,"author":{"gitId":"ryanozx"},"content":"| Error Message                                                       | Why it happens                                                            | Fix                                                                               |","lastModifiedDate":"2023-11-03"},{"lineNumber":637,"author":{"gitId":"ryanozx"},"content":"|---------------------------------------------------------------------|---------------------------------------------------------------------------|-----------------------------------------------------------------------------------|","lastModifiedDate":"2023-11-03"},{"lineNumber":638,"author":{"gitId":"ryanozx"},"content":"| Leave records were not imported                                     | You did not select a file in the file dialog                              | Retype the command, and make sure to select a CSV file when the file dialog opens |","lastModifiedDate":"2023-11-03"},{"lineNumber":639,"author":{"gitId":"ryanozx"},"content":"| Records in file [file name] could not be imported, import cancelled | Your file likely contains illegal characters or is corrupted              | Ensure that your data fulfils the following constraints (to be added)             |","lastModifiedDate":"2023-11-03"},{"lineNumber":640,"author":{"gitId":"ryanozx"},"content":"| No valid records found in file [file name], import cancelled        | Your file either is empty or does not contain a single valid leave record | Ensure that your file is non-empty and fulfils the abovementioned constraints     |                                                     ","lastModifiedDate":"2023-11-03"},{"lineNumber":641,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":642,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":643,"author":{"gitId":"ong-wei-hong"},"content":"### Exporting leave records : `export-leave`","lastModifiedDate":"2023-11-11"},{"lineNumber":644,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":645,"author":{"gitId":"ryanozx"},"content":"Not only can you bring your data into HRMate, you can also bring your data out of HRMate. HRMate\u0027s export feature allows you","lastModifiedDate":"2023-11-03"},{"lineNumber":646,"author":{"gitId":"ryanozx"},"content":"to export either the entire set of leave application records, or leave records with a particular filter applied (e.g. only export","lastModifiedDate":"2023-11-03"},{"lineNumber":647,"author":{"gitId":"ryanozx"},"content":"all leaves in a given time period). You can then either store your exported CSV file for future use,","lastModifiedDate":"2023-11-03"},{"lineNumber":648,"author":{"gitId":"ryanozx"},"content":"open it in a different application, or send it to another employee for them to import!","lastModifiedDate":"2023-11-03"},{"lineNumber":649,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":650,"author":{"gitId":"ryanozx"},"content":"Here\u0027s how you can export your data out of HRMate:","lastModifiedDate":"2023-11-03"},{"lineNumber":651,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":652,"author":{"gitId":"ryanozx"},"content":"1. In HRMate, type in the following command in the command box: `export-leave [file name]`, replacing `[file name]` with the name","lastModifiedDate":"2023-11-03"},{"lineNumber":653,"author":{"gitId":"ryanozx"},"content":"   you will like to give your file. Your files will be saved in CSV format automatically.","lastModifiedDate":"2023-11-03"},{"lineNumber":654,"author":{"gitId":"ryanozx"},"content":"  - For instance, if you would like to save your file as  `today.csv`, type in the command `export today`","lastModifiedDate":"2023-11-03"},{"lineNumber":655,"author":{"gitId":"ryanozx"},"content":"2. You should see the message \"Leave records have been saved to [file name]!\"","lastModifiedDate":"2023-11-03"},{"lineNumber":656,"author":{"gitId":"ryanozx"},"content":"3. To retrieve your exported file, go to the folder in which HRMate is stored in your File Explorer (if using Windows) or","lastModifiedDate":"2023-11-03"},{"lineNumber":657,"author":{"gitId":"ryanozx"},"content":"   Finder (if using Mac OS). From there, click on the `export` folder.","lastModifiedDate":"2023-11-03"},{"lineNumber":658,"author":{"gitId":"ryanozx"},"content":"4. You should see your file in the `export` folder.","lastModifiedDate":"2023-11-03"},{"lineNumber":659,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":660,"author":{"gitId":"ryanozx"},"content":"Here are potential error messages that you may receive and here\u0027s how to fix them:","lastModifiedDate":"2023-11-03"},{"lineNumber":661,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":662,"author":{"gitId":"ryanozx"},"content":"| Error Message                     | Why it happens                                   | Fix                                                                                                                                                                                                                   |","lastModifiedDate":"2023-11-03"},{"lineNumber":663,"author":{"gitId":"ryanozx"},"content":"|-----------------------------------|--------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-11-03"},{"lineNumber":664,"author":{"gitId":"ryanozx"},"content":"| Leave records could not be saved! | You do not have the permission to write the file | Try renaming your file name when typing out the command, especially if the previous name refers to an existing file. If not, move HRMate to a different folder where you can create files, and run the command again. |      ","lastModifiedDate":"2023-11-03"},{"lineNumber":665,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":666,"author":{"gitId":"ryanozx"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-11-03"},{"lineNumber":667,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":668,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":669,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":670,"author":{"gitId":"jean-cq"},"content":"HRMate data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2023-10-04"},{"lineNumber":671,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":672,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":673,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":674,"author":{"gitId":"jean-cq"},"content":"HRMate data are saved automatically as a JSON file `[JAR file location]/data/hrmate.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2023-10-04"},{"lineNumber":675,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":676,"author":{"gitId":"ryanozx"},"content":"* **Warning:**","lastModifiedDate":"2023-09-29"},{"lineNumber":677,"author":{"gitId":"-"},"content":"  \u003cbox type\u003d\"warning\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":678,"author":{"gitId":"jean-cq"},"content":"    If your changes to the data file makes its format invalid, HRMate will discard all data and start with an empty data file at the next run.  Hence, it is recommended to take a backup of the file before editing it.","lastModifiedDate":"2023-10-04"},{"lineNumber":679,"author":{"gitId":"-"},"content":"  \u003c/box\u003e ","lastModifiedDate":"2023-09-12"},{"lineNumber":680,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":681,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":682,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":683,"author":{"gitId":"ong-wei-hong"},"content":"## How to interpret command formats","lastModifiedDate":"2023-11-11"},{"lineNumber":684,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":685,"author":{"gitId":"ong-wei-hong"},"content":"Example command formats: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`, `add-tag INDEX t/TAG...`","lastModifiedDate":"2023-11-11"},{"lineNumber":686,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":687,"author":{"gitId":"ong-wei-hong"},"content":"The first command is used to add an employee while the second is used to add tags to a specified employee. Let\u0027s examine how the command is used.","lastModifiedDate":"2023-11-11"},{"lineNumber":688,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":689,"author":{"gitId":"ong-wei-hong"},"content":"| **Command component examples** | **What they mean** |","lastModifiedDate":"2023-11-11"},{"lineNumber":690,"author":{"gitId":"ong-wei-hong"},"content":"|--------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-11-11"},{"lineNumber":691,"author":{"gitId":"ong-wei-hong"},"content":"| `add`, `add-tag`                            | The name of the command. The first word of the command is used to specify what command is used. |","lastModifiedDate":"2023-11-11"},{"lineNumber":692,"author":{"gitId":"ong-wei-hong"},"content":"| `n/NAME`, `p/PHONE_NUMBER`, `e/EMAIL`, `a/ADDRESS`, `t/TAG` | Mandatory command fields. These fields are used to provide further information that the commmand needs. The start of a field is denoted by a field prefix. |","lastModifiedDate":"2023-11-11"},{"lineNumber":693,"author":{"gitId":"ong-wei-hong"},"content":"| `n/`, `p/`, `e/`, `a/`, `t/` | Field prefix. These indicate what the field type is (name, phone number, email address etc.). They have a letter or phrase, followed by a backslash (\"/\"). This allows fields to be written in any order. For example, `edit 1 n/John Doe p/98765432` would have the same effect as `edit 1 p/98765432 n/John Doe`. |","lastModifiedDate":"2023-11-11"},{"lineNumber":694,"author":{"gitId":"ong-wei-hong"},"content":"| `INDEX` | The [index](#glossary) of the command. Some command requires an index to specified which employee or leave to act on. It must be the second word of the command, after the name of the command. |","lastModifiedDate":"2023-11-11"},{"lineNumber":695,"author":{"gitId":"ong-wei-hong"},"content":"| `[t/TAG]` | Optional command field. The square brackets (\"[\" and \"]\") indicates that a field is optional. However, some commands like [edit](#editing-the-name-phone-number-email-address-home-address-or-tags-of-employees--edit) have additional requirements like at least one of the optional fields must be specified. |","lastModifiedDate":"2023-11-11"},{"lineNumber":696,"author":{"gitId":"ong-wei-hong"},"content":"| `...` | Variable optional fields. This indicates that we can supply more than one field of the same type. When coupled with the optional command field (\"[\" and \"]\"), this means that zero or more command fields of that type can be provided. For example, `[t/TAG]...` indicates **zero** or more tags can be specified while `t/TAG...` indicates **one** or more tags can be specified. To specify multiple fields, use multiple tag prefixes. For instance, to use full-time and remote as tag fields to a command, type `t/full-time t/remote` |","lastModifiedDate":"2023-11-11"},{"lineNumber":697,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":698,"author":{"gitId":"ong-wei-hong"},"content":"**Notes**","lastModifiedDate":"2023-11-11"},{"lineNumber":699,"author":{"gitId":"ong-wei-hong"},"content":"* Parameters can be in any order \u003cbr\u003e","lastModifiedDate":"2023-11-11"},{"lineNumber":700,"author":{"gitId":"ong-wei-hong"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also","lastModifiedDate":"2023-11-11"},{"lineNumber":701,"author":{"gitId":"ong-wei-hong"},"content":"  acceptable.","lastModifiedDate":"2023-11-11"},{"lineNumber":702,"author":{"gitId":"ong-wei-hong"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be","lastModifiedDate":"2023-11-11"},{"lineNumber":703,"author":{"gitId":"ong-wei-hong"},"content":"  ignored \u003cbr\u003e","lastModifiedDate":"2023-11-11"},{"lineNumber":704,"author":{"gitId":"ong-wei-hong"},"content":"  e.g. if the command `help 123` is executed, it will be interpreted as `help`.","lastModifiedDate":"2023-11-11"},{"lineNumber":705,"author":{"gitId":"ong-wei-hong"},"content":"* If you are using a PDF version of this document, be careful when copying and pasting commands that span multiple lines","lastModifiedDate":"2023-11-11"},{"lineNumber":706,"author":{"gitId":"ong-wei-hong"},"content":"  as space characters surrounding line-breaks may be omitted when copied over to the application.","lastModifiedDate":"2023-11-11"},{"lineNumber":707,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":708,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-11-11"},{"lineNumber":709,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":710,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":711,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":712,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":713,"author":{"gitId":"ong-wei-hong"},"content":"**A**: We recommend using the [import and export command for employee](#importingexporting-employee-records) and [import and export command for leave records](#importingexporting-leave-records).","lastModifiedDate":"2023-11-11"},{"lineNumber":714,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":715,"author":{"gitId":"ong-wei-hong"},"content":"**Q**: How do I move a file?\u003cbr\u003e","lastModifiedDate":"2023-11-11"},{"lineNumber":716,"author":{"gitId":"ong-wei-hong"},"content":"**A**: For **windows**, first open File Explorer and find the file. Afterwards, drag the selected file\u0027s icon to the desired location using your mouse. For more help, please consult the [Microsoft documentation](https://support.microsoft.com/en-gb/office/move-or-copy-an-item-to-another-folder-19768dfe-86c4-40bf-b82c-1c084b624492)\u003cbr\u003e","lastModifiedDate":"2023-11-11"},{"lineNumber":717,"author":{"gitId":"ong-wei-hong"},"content":"For **mac**, first open Finder and find the specific file. Then drag it to the desired location using the mouse. For more help, please consult the [Apple documentation](https://support.apple.com/en-sg/guide/mac-help/mh26885/mac).","lastModifiedDate":"2023-11-11"},{"lineNumber":718,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":719,"author":{"gitId":"ong-wei-hong"},"content":"**Q**: How do I open a terminal?\u003cbr\u003e","lastModifiedDate":"2023-11-11"},{"lineNumber":720,"author":{"gitId":"ong-wei-hong"},"content":"**A**: For **windows**, press the windows key, type in `powershell` and press Enter. The terminal should open. For more help, please consult the [Microsoft documentation](https://learn.microsoft.com/en-us/windows/terminal/install).","lastModifiedDate":"2023-11-11"},{"lineNumber":721,"author":{"gitId":"ong-wei-hong"},"content":"For **mac**, open the terminal app on your mac. For more help, please consult the [Apple documentation](https://support.apple.com/en-sg/guide/terminal/apd5265185d-f365-44cb-8b09-71a064a42125/mac#:~:text\u003dTerminal%20for%20me-,Open%20Terminal,%2C%20then%20double%2Dclick%20Terminal.).","lastModifiedDate":"2023-11-11"},{"lineNumber":722,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":723,"author":{"gitId":"ong-wei-hong"},"content":"**Q**: How do I navigate files in terminal?\u003cbr\u003e","lastModifiedDate":"2023-11-11"},{"lineNumber":724,"author":{"gitId":"ong-wei-hong"},"content":"**A**: You can use the `cd` command to navigate in terminal. For more information, please consult this [documentation](https://www.ibm.com/docs/en/aix/7.2?topic\u003ddirectories-changing-another-directory-cd-command). ","lastModifiedDate":"2023-11-11"},{"lineNumber":725,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":726,"author":{"gitId":"ong-wei-hong"},"content":"**Q**: How do I download Java 11?\u003cbr\u003e","lastModifiedDate":"2023-11-11"},{"lineNumber":727,"author":{"gitId":"ong-wei-hong"},"content":"**A**: Please refer to the official Java installation instructions [here](https://docs.oracle.com/en/java/javase/21/install/overview-jdk-installation.html#GUID-8677A77F-231A-40F7-98B9-1FD0B48C346A)","lastModifiedDate":"2023-11-11"},{"lineNumber":728,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":729,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":730,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":731,"author":{"gitId":"-"},"content":"## Known issues","lastModifiedDate":"2023-09-08"},{"lineNumber":732,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":733,"author":{"gitId":"-"},"content":"1. **When using multiple screens**, if you move the application to a secondary screen, and later switch to using only the primary screen, the GUI will open off-screen. The remedy is to delete the `preferences.json` file created by the application before running the application again.","lastModifiedDate":"2023-09-08"},{"lineNumber":734,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":735,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-09-08"},{"lineNumber":736,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":737,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":738,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":739,"author":{"gitId":"ryanozx"},"content":"| Action                    | Format, Examples                                                                                                                                                      |","lastModifiedDate":"2023-09-29"},{"lineNumber":740,"author":{"gitId":"InfiBeyond"},"content":"|---------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-11-03"},{"lineNumber":741,"author":{"gitId":"ryanozx"},"content":"| **Add**                   | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague` |","lastModifiedDate":"2023-09-29"},{"lineNumber":742,"author":{"gitId":"ryanozx"},"content":"| **Add Leave**             | `add-leave INDEX title/TITLE start/START_DATE end/END_DATE [d/DESCRIPTION]`\u003cbr\u003e e.g., `add-leave 1 title/Sample Leave 1 start/2023-11-01 end/2023-11-01`              |","lastModifiedDate":"2023-11-03"},{"lineNumber":743,"author":{"gitId":"ryanozx"},"content":"| **Add Tag**               | `add-tag EMPLOYEE_LIST_INDEX TAG`\u003cbr\u003e e.g., `add-tag 3 remote`                                                                                                        |","lastModifiedDate":"2023-11-03"},{"lineNumber":744,"author":{"gitId":"InfiBeyond"},"content":"| **Approve Leave**         | `approve-leave 1` \u003cbr\u003e e.g., `approve-leave 1`                                                                                                                        |","lastModifiedDate":"2023-11-03"},{"lineNumber":745,"author":{"gitId":"ryanozx"},"content":"| **Clear**                 | `clear`                                                                                                                                                               |","lastModifiedDate":"2023-09-29"},{"lineNumber":746,"author":{"gitId":"ryanozx"},"content":"| **Delete**                | `delete EMPLOYEE_LIST_INDEX`\u003cbr\u003e e.g., `delete 3`                                                                                                                     |","lastModifiedDate":"2023-09-29"},{"lineNumber":747,"author":{"gitId":"ryanozx"},"content":"| **Delete Leave**          | `delete-leave LEAVE_LIST_INDEX`\u003cbr\u003e e.g., `delete-leave 1`                                                                                                            |","lastModifiedDate":"2023-11-03"},{"lineNumber":748,"author":{"gitId":"ryanozx"},"content":"| **Delete Tag**            | `delete-tag EMPLOYEE_LIST_INDEX TAG`\u003cbr\u003e e.g., `delete-tag 3 remote`                                                                                                  |","lastModifiedDate":"2023-11-03"},{"lineNumber":749,"author":{"gitId":"ryanozx"},"content":"| **Edit**                  | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`                                           |","lastModifiedDate":"2023-09-29"},{"lineNumber":750,"author":{"gitId":"ryanozx"},"content":"| **Edit Leave**            | `edit-leave INDEX [title/TITLE] [start/START_DATE] [end/END_DATE] [d/DESCRIPTION] [s/STATUS]`\u003cbr\u003e e.g., `edit-leave 1 title/medical leave start/2023-11-01`           |","lastModifiedDate":"2023-11-03"},{"lineNumber":751,"author":{"gitId":"ryanozx"},"content":"| **Exit**                  | `exit`                                                                                                                                                                |","lastModifiedDate":"2023-11-03"},{"lineNumber":752,"author":{"gitId":"ryanozx"},"content":"| **Export Contacts**       | `export FILE_NAME`                                                                                                                                                    |           ","lastModifiedDate":"2023-11-03"},{"lineNumber":753,"author":{"gitId":"ryanozx"},"content":"| **Export Leaves**         | `export-leaves FILE_NAME`                                                                                                                                             |           ","lastModifiedDate":"2023-11-03"},{"lineNumber":754,"author":{"gitId":"jean-cq"},"content":"| **Find**                  | `find SEARCH_QUERY...​`\u003cbr\u003e e.g., `find James Jake`                                                                                                                   |","lastModifiedDate":"2023-11-03"},{"lineNumber":755,"author":{"gitId":"ryanozx"},"content":"| **Find All Tags**         | `find-all-tag [t/TAG]...`\u003cbr\u003e e.g.,`find-all-tag t/remote t/full-time`                                                                                                |","lastModifiedDate":"2023-11-03"},{"lineNumber":756,"author":{"gitId":"ryanozx"},"content":"| **Find Some Tags**        | `find-some-tag [t/TAG]...`\u003cbr\u003e e.g.,`find-some-tag t/remote t/full-time`                                                                                              |","lastModifiedDate":"2023-11-03"},{"lineNumber":757,"author":{"gitId":"ryanozx"},"content":"| **Find Leaves by Period** | `find-leave-range [start/START_DATE] [end/END_DATE]`                                                                                                                  | ","lastModifiedDate":"2023-11-03"},{"lineNumber":758,"author":{"gitId":"ryanozx"},"content":"| **Find Leaves by Status** | `find-leave-status STATUS`                                                                                                                                            |","lastModifiedDate":"2023-11-03"},{"lineNumber":759,"author":{"gitId":"ryanozx"},"content":"| **Find All Leaves**       | `find-all-leave`                                                                                                                                                      |","lastModifiedDate":"2023-11-03"},{"lineNumber":760,"author":{"gitId":"ryanozx"},"content":"| **Find All Tags**         | `find-all-tag [t/TAG]...`\u003cbr\u003e e.g.,`find-all-tag t/remote t/full-time`                                                                                                |","lastModifiedDate":"2023-11-03"},{"lineNumber":761,"author":{"gitId":"ryanozx"},"content":"| **Find Leaves**           | `find-leave INDEX`\u003cbr\u003e e.g., `fin-leave 1`                                                                                                                            |","lastModifiedDate":"2023-11-03"},{"lineNumber":762,"author":{"gitId":"ryanozx"},"content":"| **Find Leaves by Period** | `find-leave-range [start/START_DATE] [end/END_DATE]`                                                                                                                  | ","lastModifiedDate":"2023-11-03"},{"lineNumber":763,"author":{"gitId":"ryanozx"},"content":"| **Find Leaves by Status** | `find-leave-status STATUS`                                                                                                                                            |","lastModifiedDate":"2023-11-03"},{"lineNumber":764,"author":{"gitId":"ryanozx"},"content":"| **Find Some Tags**        | `find-some-tag [t/TAG]...`\u003cbr\u003e e.g.,`find-some-tag t/remote t/full-time`                                                                                              |","lastModifiedDate":"2023-11-03"},{"lineNumber":765,"author":{"gitId":"ryanozx"},"content":"| **Help**                  | `help`                                                                                                                                                                |","lastModifiedDate":"2023-09-29"},{"lineNumber":766,"author":{"gitId":"ryanozx"},"content":"| **Import Contacts**       | `import`                                                                                                                                                              |","lastModifiedDate":"2023-11-03"},{"lineNumber":767,"author":{"gitId":"ryanozx"},"content":"| **Import Leaves**         | `import-leaves`                                                                                                                                                       |","lastModifiedDate":"2023-11-03"},{"lineNumber":768,"author":{"gitId":"ryanozx"},"content":"| **List**                  | `list`                                                                                                                                                                |","lastModifiedDate":"2023-09-29"},{"lineNumber":769,"author":{"gitId":"InfiBeyond"},"content":"| **Reject Leave**          | `reject-leave 1` \u003cbr\u003e e.g., `reject-leave 1`                                                                                                                          |","lastModifiedDate":"2023-11-03"},{"lineNumber":770,"author":{"gitId":"ryanozx"},"content":"| **View tag**              | `view-tag`                                                                                                                                                            |","lastModifiedDate":"2023-11-03"},{"lineNumber":771,"author":{"gitId":"ryanozx"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-10-27"},{"lineNumber":772,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":773,"author":{"gitId":"ong-wei-hong"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-11-11"},{"lineNumber":774,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":775,"author":{"gitId":"ryanozx"},"content":"## Glossary","lastModifiedDate":"2023-10-27"},{"lineNumber":776,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":777,"author":{"gitId":"ryanozx"},"content":"| Term | Meaning                                                                                                                         |","lastModifiedDate":"2023-10-27"},{"lineNumber":778,"author":{"gitId":"ryanozx"},"content":"|------|---------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-10-27"},{"lineNumber":779,"author":{"gitId":"ong-wei-hong"},"content":"| CLI | A text based interface where users type in commands instead of interacting with the application\u0027s graphics. Also see: GUI |","lastModifiedDate":"2023-11-11"},{"lineNumber":780,"author":{"gitId":"ryanozx"},"content":"| CSV  | A text file format that uses commas to separate values. It is supported by a wide range of software, including Microsoft Excel. |","lastModifiedDate":"2023-10-27"},{"lineNumber":781,"author":{"gitId":"ong-wei-hong"},"content":"| Command | A line of instructions that you input into the command box. Also see: Command box |","lastModifiedDate":"2023-11-11"},{"lineNumber":782,"author":{"gitId":"ong-wei-hong"},"content":"| Command box | A box for you to input commands. Refer to [quick start](#quick-start) for more information. |","lastModifiedDate":"2023-11-11"},{"lineNumber":783,"author":{"gitId":"ong-wei-hong"},"content":"| GUI | A graphical based interface where users interact the the application\u0027s graphics like buttons or scrollpanes. Also see: CLI |","lastModifiedDate":"2023-11-11"},{"lineNumber":784,"author":{"gitId":"ong-wei-hong"},"content":"| Employee list | The employee list is the list of employees on the left side of the application. Refer to [quick start](#quick-start) for more information. |","lastModifiedDate":"2023-11-11"},{"lineNumber":785,"author":{"gitId":"ong-wei-hong"},"content":"| Prefix | A letter or phrase before an input. Refer to [how to interpret command formats](#how-to-interpret-command-formats) for more information. |","lastModifiedDate":"2023-11-11"},{"lineNumber":786,"author":{"gitId":"ong-wei-hong"},"content":"| Tag  | A text phrase used to categorise employees by. A tag can be a position (intern, senior), department (HR, tech) or any category (full-time, remote). |","lastModifiedDate":"2023-11-09"},{"lineNumber":787,"author":{"gitId":"ong-wei-hong"},"content":"| Index | The number labelling each employee in the employee list. Refer to [quick start](#quick-start) for more information. |","lastModifiedDate":"2023-11-11"},{"lineNumber":788,"author":{"gitId":"ong-wei-hong"},"content":"| Web browser | An application to serve the web like Internet Explorer, Google Chrome or Firefox. In fact, you are probably using one to access this guide right now! |","lastModifiedDate":"2023-11-09"}],"authorContributionMap":{"ryanozx":316,"jean-cq":76,"InfiBeyond":45,"ivyy-poison":13,"-":106,"ong-wei-hong":232}},{"path":"docs/diagrams/AddTagActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ong-wei-hong"},"content":"@startuml","lastModifiedDate":"2023-10-27"},{"lineNumber":2,"author":{"gitId":"ong-wei-hong"},"content":"!include style.puml","lastModifiedDate":"2023-10-27"},{"lineNumber":3,"author":{"gitId":"ong-wei-hong"},"content":"skinparam ArrowFontStyle plain","lastModifiedDate":"2023-10-27"},{"lineNumber":4,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":5,"author":{"gitId":"ong-wei-hong"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2023-10-27"},{"lineNumber":6,"author":{"gitId":"ong-wei-hong"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2023-10-27"},{"lineNumber":7,"author":{"gitId":"ong-wei-hong"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2023-10-27"},{"lineNumber":8,"author":{"gitId":"ong-wei-hong"},"content":"participant \"a:AddTagCommand\" as AddTagCommand LOGIC_COLOR","lastModifiedDate":"2023-10-27"},{"lineNumber":9,"author":{"gitId":"ong-wei-hong"},"content":"participant \"r:CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2023-10-27"},{"lineNumber":10,"author":{"gitId":"ong-wei-hong"},"content":"end box","lastModifiedDate":"2023-10-27"},{"lineNumber":11,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":12,"author":{"gitId":"ong-wei-hong"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2023-10-27"},{"lineNumber":13,"author":{"gitId":"ong-wei-hong"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2023-10-27"},{"lineNumber":14,"author":{"gitId":"ong-wei-hong"},"content":"end box","lastModifiedDate":"2023-10-27"},{"lineNumber":15,"author":{"gitId":"ong-wei-hong"},"content":"[-\u003e LogicManager : execute(addTag)","lastModifiedDate":"2023-10-27"},{"lineNumber":16,"author":{"gitId":"ong-wei-hong"},"content":"activate LogicManager","lastModifiedDate":"2023-10-27"},{"lineNumber":17,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":18,"author":{"gitId":"ong-wei-hong"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(addTag)","lastModifiedDate":"2023-10-27"},{"lineNumber":19,"author":{"gitId":"ong-wei-hong"},"content":"activate AddressBookParser","lastModifiedDate":"2023-10-27"},{"lineNumber":20,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":21,"author":{"gitId":"ong-wei-hong"},"content":"create AddTagCommand","lastModifiedDate":"2023-10-27"},{"lineNumber":22,"author":{"gitId":"ong-wei-hong"},"content":"AddressBookParser -\u003e AddTagCommand","lastModifiedDate":"2023-10-27"},{"lineNumber":23,"author":{"gitId":"ong-wei-hong"},"content":"activate AddTagCommand","lastModifiedDate":"2023-10-27"},{"lineNumber":24,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":25,"author":{"gitId":"ong-wei-hong"},"content":"AddTagCommand --\u003e AddressBookParser","lastModifiedDate":"2023-10-27"},{"lineNumber":26,"author":{"gitId":"ong-wei-hong"},"content":"deactivate AddTagCommand","lastModifiedDate":"2023-10-27"},{"lineNumber":27,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":28,"author":{"gitId":"ong-wei-hong"},"content":"AddressBookParser --\u003e LogicManager : a","lastModifiedDate":"2023-10-27"},{"lineNumber":29,"author":{"gitId":"ong-wei-hong"},"content":"deactivate AddressBookParser","lastModifiedDate":"2023-10-27"},{"lineNumber":30,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":31,"author":{"gitId":"ong-wei-hong"},"content":"LogicManager -\u003e AddTagCommand : execute()","lastModifiedDate":"2023-10-27"},{"lineNumber":32,"author":{"gitId":"ong-wei-hong"},"content":"activate AddTagCommand","lastModifiedDate":"2023-10-27"},{"lineNumber":33,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":34,"author":{"gitId":"ong-wei-hong"},"content":"AddTagCommand -\u003e Model : get()","lastModifiedDate":"2023-10-27"},{"lineNumber":35,"author":{"gitId":"ong-wei-hong"},"content":"activate Model","lastModifiedDate":"2023-10-27"},{"lineNumber":36,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":37,"author":{"gitId":"ong-wei-hong"},"content":"Model --\u003e AddTagCommand","lastModifiedDate":"2023-10-27"},{"lineNumber":38,"author":{"gitId":"ong-wei-hong"},"content":"deactivate Model","lastModifiedDate":"2023-10-27"},{"lineNumber":39,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":40,"author":{"gitId":"ong-wei-hong"},"content":"AddTagCommand -\u003e Model : setPerson()","lastModifiedDate":"2023-10-27"},{"lineNumber":41,"author":{"gitId":"ong-wei-hong"},"content":"activate Model","lastModifiedDate":"2023-10-27"},{"lineNumber":42,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":43,"author":{"gitId":"ong-wei-hong"},"content":"Model --\u003e AddTagCommand","lastModifiedDate":"2023-10-27"},{"lineNumber":44,"author":{"gitId":"ong-wei-hong"},"content":"deactivate Model","lastModifiedDate":"2023-10-27"},{"lineNumber":45,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":46,"author":{"gitId":"ong-wei-hong"},"content":"AddTagCommand -\u003e Model : updateFilteredPersonList()","lastModifiedDate":"2023-10-27"},{"lineNumber":47,"author":{"gitId":"ong-wei-hong"},"content":"activate Model","lastModifiedDate":"2023-10-27"},{"lineNumber":48,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":49,"author":{"gitId":"ong-wei-hong"},"content":"Model --\u003e AddTagCommand","lastModifiedDate":"2023-10-27"},{"lineNumber":50,"author":{"gitId":"ong-wei-hong"},"content":"deactivate Model","lastModifiedDate":"2023-10-27"},{"lineNumber":51,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":52,"author":{"gitId":"ong-wei-hong"},"content":"create CommandResult","lastModifiedDate":"2023-10-27"},{"lineNumber":53,"author":{"gitId":"ong-wei-hong"},"content":"AddTagCommand --\u003e CommandResult","lastModifiedDate":"2023-10-27"},{"lineNumber":54,"author":{"gitId":"ong-wei-hong"},"content":"activate CommandResult","lastModifiedDate":"2023-10-27"},{"lineNumber":55,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":56,"author":{"gitId":"ong-wei-hong"},"content":"CommandResult --\u003e AddTagCommand : r","lastModifiedDate":"2023-10-27"},{"lineNumber":57,"author":{"gitId":"ong-wei-hong"},"content":"deactivate CommandResult","lastModifiedDate":"2023-10-27"},{"lineNumber":58,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":59,"author":{"gitId":"ong-wei-hong"},"content":"AddTagCommand --\u003e LogicManager : r","lastModifiedDate":"2023-10-27"},{"lineNumber":60,"author":{"gitId":"ong-wei-hong"},"content":"deactivate AddTagCommand","lastModifiedDate":"2023-10-27"},{"lineNumber":61,"author":{"gitId":"ong-wei-hong"},"content":"AddTagCommand -[hidden]-\u003e LogicManager : r","lastModifiedDate":"2023-10-27"},{"lineNumber":62,"author":{"gitId":"ong-wei-hong"},"content":"destroy AddTagCommand","lastModifiedDate":"2023-10-27"},{"lineNumber":63,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":64,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":65,"author":{"gitId":"ong-wei-hong"},"content":"[\u003c--LogicManager","lastModifiedDate":"2023-10-27"},{"lineNumber":66,"author":{"gitId":"ong-wei-hong"},"content":"deactivate LogicManager","lastModifiedDate":"2023-10-27"},{"lineNumber":67,"author":{"gitId":"ong-wei-hong"},"content":"@enduml","lastModifiedDate":"2023-10-27"}],"authorContributionMap":{"ong-wei-hong":67}},{"path":"docs/stylesheets/main.css","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"mark {","lastModifiedDate":"2023-09-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  background-color: #ff0;","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  border-radius: 5px;","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  padding-top: 0;","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  padding-bottom: 0;","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":".indented {","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  padding-left: 20px;","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"li {","lastModifiedDate":"2023-09-29"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"  padding: 0.5rem 0;","lastModifiedDate":"2023-09-29"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-09-29"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":".theme-card img {","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  width: 100%;","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/* Scrollbar */","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":".slim-scroll::-webkit-scrollbar {","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  width: 5px;","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":".slim-scroll::-webkit-scrollbar-thumb {","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  background: #808080;","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  border-radius: 20px;","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":".slim-scroll::-webkit-scrollbar-track {","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  background: transparent;","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  border-radius: 20px;","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":".slim-scroll-blue::-webkit-scrollbar {","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  width: 5px;","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":".slim-scroll-blue::-webkit-scrollbar-thumb {","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  background: #00b0ef;","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  border-radius: 20px;","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":".slim-scroll-blue::-webkit-scrollbar-track {","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  background: transparent;","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  border-radius: 20px;","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"/* Layout containers */","lastModifiedDate":"2023-09-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"#flex-body {","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  display: flex;","lastModifiedDate":"2023-09-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  flex: 1;","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  align-items: start;","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"#content-wrapper {","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  flex: 1;","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  margin: 0 auto;","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  min-width: 0;","lastModifiedDate":"2023-09-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  max-width: 1000px;","lastModifiedDate":"2023-09-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  overflow-x: auto;","lastModifiedDate":"2023-09-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  padding: 0.8rem 20px 0 20px;","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  transition: 0.4s;","lastModifiedDate":"2023-09-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  -webkit-transition: 0.4s;","lastModifiedDate":"2023-09-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"#site-nav,","lastModifiedDate":"2023-09-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"#page-nav {","lastModifiedDate":"2023-09-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"  display: flex;","lastModifiedDate":"2023-09-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  flex-direction: column;","lastModifiedDate":"2023-09-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"  position: sticky;","lastModifiedDate":"2023-09-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"  top: var(--sticky-header-height);","lastModifiedDate":"2023-09-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"  flex: 0 0 auto;","lastModifiedDate":"2023-09-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"  max-width: 300px;","lastModifiedDate":"2023-09-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  max-height: calc(100vh - var(--sticky-header-height));","lastModifiedDate":"2023-09-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"  width: 300px;","lastModifiedDate":"2023-09-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"#site-nav {","lastModifiedDate":"2023-09-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"  border-right: 1px solid lightgrey;","lastModifiedDate":"2023-09-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"  padding-bottom: 20px;","lastModifiedDate":"2023-09-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"  z-index: 999;","lastModifiedDate":"2023-09-12"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-12"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":87,"author":{"gitId":"-"},"content":".site-nav-top {","lastModifiedDate":"2023-09-12"},{"lineNumber":88,"author":{"gitId":"-"},"content":"  margin: 0.8rem 0;","lastModifiedDate":"2023-09-12"},{"lineNumber":89,"author":{"gitId":"-"},"content":"  padding: 0 12px 12px 12px;","lastModifiedDate":"2023-09-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-12"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":92,"author":{"gitId":"ryanozx"},"content":".site-nav-list \u003e li {","lastModifiedDate":"2023-09-29"},{"lineNumber":93,"author":{"gitId":"ryanozx"},"content":"  padding: 0rem;","lastModifiedDate":"2023-09-29"},{"lineNumber":94,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-09-29"},{"lineNumber":95,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-09-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":".nav-component {","lastModifiedDate":"2023-09-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  overflow-y: auto;","lastModifiedDate":"2023-09-12"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-12"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":100,"author":{"gitId":"-"},"content":"#page-nav {","lastModifiedDate":"2023-09-12"},{"lineNumber":101,"author":{"gitId":"-"},"content":"  border-left: 1px solid lightgrey;","lastModifiedDate":"2023-09-12"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-12"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":104,"author":{"gitId":"-"},"content":"@media screen and (max-width: 1299.98px) {","lastModifiedDate":"2023-09-12"},{"lineNumber":105,"author":{"gitId":"-"},"content":"  #page-nav {","lastModifiedDate":"2023-09-12"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2023-09-12"},{"lineNumber":107,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2023-09-12"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-12"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":110,"author":{"gitId":"-"},"content":"/* Bootstrap medium(md) responsive breakpoint */","lastModifiedDate":"2023-09-12"},{"lineNumber":111,"author":{"gitId":"-"},"content":"@media screen and (max-width: 991.98px) {","lastModifiedDate":"2023-09-12"},{"lineNumber":112,"author":{"gitId":"-"},"content":"  #site-nav {","lastModifiedDate":"2023-09-12"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2023-09-12"},{"lineNumber":114,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2023-09-12"},{"lineNumber":115,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-12"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":117,"author":{"gitId":"-"},"content":"/* Bootstrap small(sm) responsive breakpoint */","lastModifiedDate":"2023-09-12"},{"lineNumber":118,"author":{"gitId":"-"},"content":"@media (max-width: 767.98px) {","lastModifiedDate":"2023-09-12"},{"lineNumber":119,"author":{"gitId":"-"},"content":"  .indented {","lastModifiedDate":"2023-09-12"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    padding-left: 10px;","lastModifiedDate":"2023-09-12"},{"lineNumber":121,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2023-09-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":123,"author":{"gitId":"-"},"content":"  #content-wrapper {","lastModifiedDate":"2023-09-12"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    padding: 0 10px;","lastModifiedDate":"2023-09-12"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2023-09-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-12"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":128,"author":{"gitId":"-"},"content":"/* Bootstrap extra small(xs) responsive breakpoint */","lastModifiedDate":"2023-09-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"@media screen and (max-width: 575.98px) {","lastModifiedDate":"2023-09-12"},{"lineNumber":130,"author":{"gitId":"-"},"content":"  #site-nav {","lastModifiedDate":"2023-09-12"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2023-09-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2023-09-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"/* Hide site navigation when printing */","lastModifiedDate":"2023-09-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"@media print {","lastModifiedDate":"2023-09-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"  #site-nav {","lastModifiedDate":"2023-09-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2023-09-12"},{"lineNumber":139,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2023-09-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  #page-nav {","lastModifiedDate":"2023-09-12"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2023-09-12"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2023-09-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-12"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":146,"author":{"gitId":"-"},"content":"h2,","lastModifiedDate":"2023-09-12"},{"lineNumber":147,"author":{"gitId":"-"},"content":"h3,","lastModifiedDate":"2023-09-12"},{"lineNumber":148,"author":{"gitId":"-"},"content":"h4,","lastModifiedDate":"2023-09-12"},{"lineNumber":149,"author":{"gitId":"-"},"content":"h5,","lastModifiedDate":"2023-09-12"},{"lineNumber":150,"author":{"gitId":"-"},"content":"h6 {","lastModifiedDate":"2023-09-12"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  color: #e46c0a;","lastModifiedDate":"2023-09-12"},{"lineNumber":152,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-12"}],"authorContributionMap":{"ryanozx":8,"-":144}},{"path":"docs/team/infibeyond.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"InfiBeyond"},"content":"---","lastModifiedDate":"2023-10-06"},{"lineNumber":2,"author":{"gitId":"InfiBeyond"},"content":"  layout: default.md","lastModifiedDate":"2023-10-06"},{"lineNumber":3,"author":{"gitId":"InfiBeyond"},"content":"  title: \"Qin Nanxin\u0027s Portfolio Page\"","lastModifiedDate":"2023-10-06"},{"lineNumber":4,"author":{"gitId":"InfiBeyond"},"content":"---","lastModifiedDate":"2023-10-06"},{"lineNumber":5,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":6,"author":{"gitId":"InfiBeyond"},"content":"### Project: HRMate","lastModifiedDate":"2023-10-06"},{"lineNumber":7,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":8,"author":{"gitId":"InfiBeyond"},"content":"HRMate is a desktop address book application that aims to streamline HR processes, by offering an intuitive, CLI-based","lastModifiedDate":"2023-10-06"},{"lineNumber":9,"author":{"gitId":"InfiBeyond"},"content":"contact management system with specialised functionalities for HR tasks. It has a GUI created with JavaFX, and is","lastModifiedDate":"2023-10-06"},{"lineNumber":10,"author":{"gitId":"InfiBeyond"},"content":"written in Java with about 10 kLoC.","lastModifiedDate":"2023-10-06"},{"lineNumber":11,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":12,"author":{"gitId":"InfiBeyond"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-10-06"},{"lineNumber":13,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":14,"author":{"gitId":"InfiBeyond"},"content":"* **Documentation**:","lastModifiedDate":"2023-10-06"},{"lineNumber":15,"author":{"gitId":"InfiBeyond"},"content":"  * User Guide:","lastModifiedDate":"2023-10-06"},{"lineNumber":16,"author":{"gitId":"InfiBeyond"},"content":"  * Developer Guide:","lastModifiedDate":"2023-10-06"},{"lineNumber":17,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":18,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":19,"author":{"gitId":"InfiBeyond"},"content":"* **Feature Development**:","lastModifiedDate":"2023-11-10"},{"lineNumber":20,"author":{"gitId":"InfiBeyond"},"content":"  * Develop the `view-tag`, `approve-leave`, `reject-leave`, `find-leave`, and `find-all-leave` commands","lastModifiedDate":"2023-11-10"},{"lineNumber":21,"author":{"gitId":"InfiBeyond"},"content":"  * Write unit tests for the above commands","lastModifiedDate":"2023-11-10"},{"lineNumber":22,"author":{"gitId":"InfiBeyond"},"content":"  * Update Model, Model Manager and Leave classes to integrate with newly implemented features","lastModifiedDate":"2023-11-10"}],"authorContributionMap":{"InfiBeyond":22}},{"path":"docs/team/ivyy-poison.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"---","lastModifiedDate":"2023-09-30"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"  layout: default.md","lastModifiedDate":"2023-09-30"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"  title: \"Ivan\u0027s Project Portfolio Page\"","lastModifiedDate":"2023-09-30"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"---","lastModifiedDate":"2023-09-30"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"### Project: HRMate","lastModifiedDate":"2023-09-30"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"HRMate is a desktop address book application that aims to streamline HR processes, by offering an intuitive, CLI-based","lastModifiedDate":"2023-09-30"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"contact management system with specialised functionalities for HR tasks. It has a GUI created with JavaFX, and is","lastModifiedDate":"2023-09-30"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"written in Java with about 10 kLoC.","lastModifiedDate":"2023-09-30"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-09-30"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":"* User Guide","lastModifiedDate":"2023-11-10"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"  * Add documentation for the following commands: `find-leave-range`, `find-leave-status`, `find-all-leave`","lastModifiedDate":"2023-11-10"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":"    `find-leave` and `delete-leave`","lastModifiedDate":"2023-11-10"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"* Feature Development","lastModifiedDate":"2023-11-10"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"  * Develop the delete-tag command","lastModifiedDate":"2023-11-10"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":"  * Improve code coverage of code base by implementing unit tests","lastModifiedDate":"2023-11-10"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":"  * Build Leave, LeavesBook and LeavesBookStorage classes and integrated them into the","lastModifiedDate":"2023-11-10"},{"lineNumber":22,"author":{"gitId":"ivyy-poison"},"content":"    existing code base","lastModifiedDate":"2023-11-10"}],"authorContributionMap":{"ivyy-poison":22}},{"path":"docs/team/jean-cq.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"---","lastModifiedDate":"2023-09-30"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"  layout: default.md","lastModifiedDate":"2023-09-30"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"  title: \"Chen Qun\u0027s Portfolio Page\"","lastModifiedDate":"2023-09-30"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"---","lastModifiedDate":"2023-09-30"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"### Project: HRMate","lastModifiedDate":"2023-09-30"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"HRMate is a desktop address book application that aims to streamline HR processes, by offering an intuitive, CLI-based","lastModifiedDate":"2023-09-30"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"contact management system with specialised functionalities for HR tasks. It has a GUI created with JavaFX, and is","lastModifiedDate":"2023-09-30"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"written in Java with about 10 kLoC.","lastModifiedDate":"2023-09-30"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-09-30"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"* **Code contributed**:","lastModifiedDate":"2023-09-30"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":"* **Project management**:","lastModifiedDate":"2023-09-30"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-09-30"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"* **Documentation**:","lastModifiedDate":"2023-09-30"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"  * User Guide:","lastModifiedDate":"2023-09-30"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"    * Added documentation for the features `find-all-tag` and `find-one-tag` [\\#14]()","lastModifiedDate":"2023-09-30"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"* **Community**:","lastModifiedDate":"2023-09-30"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"* **Tools**:","lastModifiedDate":"2023-09-30"}],"authorContributionMap":{"jean-cq":25}},{"path":"docs/team/johndoe.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"John Doe\u0027s Project Portfolio Page\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"### Project: HRMate","lastModifiedDate":"2023-09-28"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"HRMate is a desktop address book application that aims to streamline HR processes, by offering an intuitive, CLI-based","lastModifiedDate":"2023-09-28"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"contact management system with specialised functionalities for HR tasks. It has a GUI created with JavaFX, and is","lastModifiedDate":"2023-09-28"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"written in Java with about 10 kLoC.","lastModifiedDate":"2023-09-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"* **Project management**:","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* **Documentation**:","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  * User Guide:","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  * Developer Guide:","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* **Community**:","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"* **Tools**:","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"ryanozx":4,"-":44}},{"path":"docs/team/ong-wei-hong.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ong-wei-hong"},"content":"---","lastModifiedDate":"2023-09-30"},{"lineNumber":2,"author":{"gitId":"ong-wei-hong"},"content":"  layout: default.md","lastModifiedDate":"2023-09-30"},{"lineNumber":3,"author":{"gitId":"ong-wei-hong"},"content":"  title: \"Wei Hong\u0027s Portfolio Page\"","lastModifiedDate":"2023-09-30"},{"lineNumber":4,"author":{"gitId":"ong-wei-hong"},"content":"---","lastModifiedDate":"2023-09-30"},{"lineNumber":5,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":6,"author":{"gitId":"ong-wei-hong"},"content":"### Project: HRMate","lastModifiedDate":"2023-09-30"},{"lineNumber":7,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":8,"author":{"gitId":"ong-wei-hong"},"content":"HRMate is a desktop address book application that aims to streamline HR processes, by offering an intuitive, CLI-based","lastModifiedDate":"2023-09-30"},{"lineNumber":9,"author":{"gitId":"ong-wei-hong"},"content":"contact management system with specialised functionalities for HR tasks. It has a GUI created with JavaFX, and is","lastModifiedDate":"2023-09-30"},{"lineNumber":10,"author":{"gitId":"ong-wei-hong"},"content":"written in Java with about 10 kLoC.","lastModifiedDate":"2023-09-30"},{"lineNumber":11,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":12,"author":{"gitId":"ong-wei-hong"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-09-30"},{"lineNumber":13,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-09-30"},{"lineNumber":14,"author":{"gitId":"ong-wei-hong"},"content":"* **Code contributions:** [RepoSense link](https://nus-cs2103-ay2324s1.github.io/tp-dashboard/?search\u003dong-wei-hong\u0026breakdown\u003dfalse\u0026sort\u003dgroupTitle%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2023-09-22\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos)","lastModifiedDate":"2023-11-10"},{"lineNumber":15,"author":{"gitId":"ong-wei-hong"},"content":"* **Community**","lastModifiedDate":"2023-11-10"},{"lineNumber":16,"author":{"gitId":"ong-wei-hong"},"content":"    * Review PRs [#96](https://github.com/AY2324S1-CS2103T-W11-1/tp/pull/96), [#98](https://github.com/AY2324S1-CS2103T-W11-1/tp/pull/98)","lastModifiedDate":"2023-11-10"},{"lineNumber":17,"author":{"gitId":"ong-wei-hong"},"content":"* **Documentation**:","lastModifiedDate":"2023-09-30"},{"lineNumber":18,"author":{"gitId":"ong-wei-hong"},"content":"  * User Guide:","lastModifiedDate":"2023-09-30"},{"lineNumber":19,"author":{"gitId":"ong-wei-hong"},"content":"    * Add documentation for the features `help`, `list`, `add`, `edit`, `add-tag`, `delete-tag` and `edit`","lastModifiedDate":"2023-11-10"},{"lineNumber":20,"author":{"gitId":"ong-wei-hong"},"content":"  * Developer Guide:","lastModifiedDate":"2023-09-30"},{"lineNumber":21,"author":{"gitId":"ong-wei-hong"},"content":"    * Add implementation and user stories for the commands `add-tag`, `remove-tag`","lastModifiedDate":"2023-11-10"},{"lineNumber":22,"author":{"gitId":"ong-wei-hong"},"content":"* **New features**: Add tags to employee [#49](https://github.com/AY2324S1-CS2103T-W11-1/tp/pull/49)","lastModifiedDate":"2023-11-10"},{"lineNumber":23,"author":{"gitId":"ong-wei-hong"},"content":"  * Allows users to add tags without typing out all previous tags like in the edit command","lastModifiedDate":"2023-11-10"},{"lineNumber":24,"author":{"gitId":"ong-wei-hong"},"content":"* **New features**: delete [#77](https://github.com/AY2324S1-CS2103T-W11-1/tp/pull/77)and edit [#155](https://github.com/AY2324S1-CS2103T-W11-1/tp/pull/77) employee leave records","lastModifiedDate":"2023-11-10"},{"lineNumber":25,"author":{"gitId":"ong-wei-hong"},"content":"  * Allows users to delete and edit employee leave records","lastModifiedDate":"2023-11-10"},{"lineNumber":26,"author":{"gitId":"ong-wei-hong"},"content":"* **Project Management**:","lastModifiedDate":"2023-11-10"},{"lineNumber":27,"author":{"gitId":"ong-wei-hong"},"content":"  * Distributed tasks","lastModifiedDate":"2023-11-10"},{"lineNumber":28,"author":{"gitId":"ong-wei-hong"},"content":" ","lastModifiedDate":"2023-11-10"},{"lineNumber":29,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":30,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-09-30"}],"authorContributionMap":{"ong-wei-hong":30}},{"path":"docs/team/ryanozx.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"\u003cfrontmatter\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"  layout: default.md","lastModifiedDate":"2023-09-29"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"  title: \"Ryan\u0027s Project Portfolio Page\"","lastModifiedDate":"2023-09-29"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"\u003c/frontmatter\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-09-29"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"### Project: HRMate","lastModifiedDate":"2023-09-29"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-09-29"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"HRMate is a desktop address book application that aims to streamline HR processes, by offering an intuitive, CLI-based","lastModifiedDate":"2023-09-29"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"contact management system with specialised functionalities for HR tasks. It has a GUI created with JavaFX, and is","lastModifiedDate":"2023-09-29"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"written in Java with about 10 kLoC.","lastModifiedDate":"2023-09-29"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-09-29"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-09-29"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-09-29"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"* **Code contributions:** [RepoSense link](https://nus-cs2103-ay2324s1.github.io/tp-dashboard/?search\u003dryanozx\u0026breakdown\u003dfalse\u0026sort\u003dgroupTitle%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2023-09-22\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos)","lastModifiedDate":"2023-10-27"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"* **Community**","lastModifiedDate":"2023-10-27"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"  * Reviewed PRs [#56](https://github.com/AY2324S1-CS2103T-W11-1/tp/pull/56), [#62](https://github.com/AY2324S1-CS2103T-W11-1/tp/pull/62)","lastModifiedDate":"2023-10-27"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"* **Documentation**","lastModifiedDate":"2023-10-27"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"  * User Guide:","lastModifiedDate":"2023-10-27"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"    * Add documentation for the features `find`, `delete`, `clear`, `exit`, `import`, `export`, `import-leave`, `export-leave`,","lastModifiedDate":"2023-11-03"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"      `find-leave-range` and `find-leave-status`","lastModifiedDate":"2023-11-03"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"  * Developer Guide:","lastModifiedDate":"2023-10-27"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    * Add implementation and user stories for the features `import` and `export`","lastModifiedDate":"2023-10-27"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"  * Managed conversion of documentation into MarkBind format","lastModifiedDate":"2023-10-27"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"* **Enhancements to existing features**","lastModifiedDate":"2023-10-27"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"  * Add method in FileUtil to support writing a stream of lines into a file ([#58](https://github.com/AY2324S1-CS2103T-W11-1/tp/pull/58))","lastModifiedDate":"2023-10-27"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"* **New Feature**: Import and export commands ([#53](https://github.com/AY2324S1-CS2103T-W11-1/tp/pull/53), [#58](https://github.com/AY2324S1-CS2103T-W11-1/tp/pull/58), [#101](https://github.com/AY2324S1-CS2103T-W11-1/tp/pull/101))","lastModifiedDate":"2023-11-03"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"  * Provides ability for users to import and export HRMate data in CSV format for greater portability","lastModifiedDate":"2023-10-27"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"  * This feature provides greater interchangeability with other spreadsheet applications like Excel, and allows users to save","lastModifiedDate":"2023-10-27"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"    filtered results that can be either stored elsewhere or sent to others","lastModifiedDate":"2023-10-27"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"  * Highlights: ","lastModifiedDate":"2023-10-27"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"    * Created abstract classes for AdaptedPerson, AdaptedLeave, SerializableAddressBook and SerializableLeavesBook","lastModifiedDate":"2023-11-03"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"    * Created CsvUtil to handle the reading and writing of CSV files","lastModifiedDate":"2023-10-27"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"    * Created CsvFile to support the ability to query CSV files for values in a specified column by column name","lastModifiedDate":"2023-10-27"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"* * **New Feature**: Find leaves by time and status ([#90](https://github.com/AY2324S1-CS2103T-W11-1/tp/pull/90), [#91](https://github.com/AY2324S1-CS2103T-W11-1/tp/pull/91))","lastModifiedDate":"2023-11-03"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"  * Provides ability for users to filter leaves by either the time period or the leave status","lastModifiedDate":"2023-11-03"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"  * This feature allows users to search for leaves more intelligently e.g. what leaves are occurring at a certain period, which leaves","lastModifiedDate":"2023-11-03"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"    have not been approved yet","lastModifiedDate":"2023-11-03"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"  * Highlights:","lastModifiedDate":"2023-11-03"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"    * Created Range class to guarantee that the start dates will not occur after the end dates, and provided the option","lastModifiedDate":"2023-11-03"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"      of whether to enforce non-null start and end dates","lastModifiedDate":"2023-11-03"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"* **Project Management**","lastModifiedDate":"2023-10-27"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"  * Set up Issues tracker in the repo","lastModifiedDate":"2023-10-27"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"  * Set up milestones v1.1 - v1.4 and assigned issues to rest of the team","lastModifiedDate":"2023-10-27"}],"authorContributionMap":{"ryanozx":43}},{"path":"src/main/java/seedu/address/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;","lastModifiedDate":"2019-02-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-07-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2019-02-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-07-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2019-02-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * The main entry point to the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * This is a workaround for the following error when MainApp is made the","lastModifiedDate":"2019-02-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * entry point of the application:","lastModifiedDate":"2019-02-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *     Error: JavaFX runtime components are missing, and are required to run this application","lastModifiedDate":"2019-02-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The reason is that MainApp extends Application. In that case, the","lastModifiedDate":"2019-02-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present","lastModifiedDate":"2019-02-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t","lastModifiedDate":"2019-02-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted.","lastModifiedDate":"2019-02-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application","lastModifiedDate":"2019-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue.","lastModifiedDate":"2019-02-08"},{"lineNumber":23,"author":{"gitId":"InfiBeyond"},"content":" *","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2019-02-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class Main {","lastModifiedDate":"2019-02-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static Logger logger \u003d LogsCenter.getLogger(Main.class);","lastModifiedDate":"2023-07-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-02-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // As per https://github.com/openjdk/jfx/blob/master/doc-files/release-notes-16.md","lastModifiedDate":"2023-07-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // JavaFX 16 (or later) runtime logs a warning at startup if JavaFX classes are loaded from","lastModifiedDate":"2023-07-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // the classpath instead of a module.","lastModifiedDate":"2023-07-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // Our application does not use Java modules yet. Even if it did, modules are ignored when","lastModifiedDate":"2023-07-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // packed into a FAT Jar file (as we do), which means this warning will persist even then.","lastModifiedDate":"2023-07-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // The warning however, can be safely ignored. Thus, the following log informs","lastModifiedDate":"2023-07-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // the user (if looking at the log output) that the said warning appearing in the log","lastModifiedDate":"2023-07-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // can be ignored.","lastModifiedDate":"2023-07-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        logger.warning(\"The warning about Unsupported JavaFX configuration below can be ignored.\");","lastModifiedDate":"2023-07-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2019-02-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-08"}],"authorContributionMap":{"InfiBeyond":1,"-":41}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;","lastModifiedDate":"2016-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.LeavesBook;","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":23,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.ReadOnlyLeavesBook;","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-01-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2016-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.storage.JsonLeavesBookStorage;","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.storage.LeavesBookStorage;","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"ong-wei-hong"},"content":"    public static final Version VERSION \u003d new Version(1, 2, 1, true);","lastModifiedDate":"2023-10-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2023-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"ivyy-poison"},"content":"        LeavesBookStorage leavesBookStorage \u003d new JsonLeavesBookStorage(userPrefs.getLeavesBookFilePath());","lastModifiedDate":"2023-10-26"},{"lineNumber":66,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":67,"author":{"gitId":"ivyy-poison"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, leavesBookStorage);","lastModifiedDate":"2023-10-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":82,"author":{"gitId":"ivyy-poison"},"content":"        logger.info(\"Using addressbook data file : \" + storage.getAddressBookFilePath());","lastModifiedDate":"2023-10-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"ivyy-poison"},"content":"        ReadOnlyAddressBook initialAddressData;","lastModifiedDate":"2023-10-26"},{"lineNumber":86,"author":{"gitId":"ivyy-poison"},"content":"        boolean addressBookIsPresent \u003d false;","lastModifiedDate":"2023-10-27"},{"lineNumber":87,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":90,"author":{"gitId":"ryanozx"},"content":"            if (addressBookOptional.isEmpty()) {","lastModifiedDate":"2023-10-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                logger.info(\"Creating a new data file \" + storage.getAddressBookFilePath()","lastModifiedDate":"2023-05-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                        + \" populated with a sample AddressBook.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":93,"author":{"gitId":"ivyy-poison"},"content":"            } else {","lastModifiedDate":"2023-10-27"},{"lineNumber":94,"author":{"gitId":"ivyy-poison"},"content":"                addressBookIsPresent \u003d true;","lastModifiedDate":"2023-10-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"ivyy-poison"},"content":"            initialAddressData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);","lastModifiedDate":"2023-10-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2023-06-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file at \" + storage.getAddressBookFilePath() + \" could not be loaded.\"","lastModifiedDate":"2023-06-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                    + \" Will be starting with an empty AddressBook.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":100,"author":{"gitId":"ivyy-poison"},"content":"            initialAddressData \u003d new AddressBook();","lastModifiedDate":"2023-10-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"ivyy-poison"},"content":"        // Read from LeavesBook","lastModifiedDate":"2023-10-26"},{"lineNumber":104,"author":{"gitId":"ivyy-poison"},"content":"        logger.info(\"Using leavesbook data file : \" + storage.getLeavesBookFilePath());","lastModifiedDate":"2023-10-27"},{"lineNumber":105,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":106,"author":{"gitId":"ivyy-poison"},"content":"        Optional\u003cReadOnlyLeavesBook\u003e leavesBookOptional;","lastModifiedDate":"2023-10-26"},{"lineNumber":107,"author":{"gitId":"ivyy-poison"},"content":"        ReadOnlyLeavesBook initialLeavesData;","lastModifiedDate":"2023-10-26"},{"lineNumber":108,"author":{"gitId":"ivyy-poison"},"content":"        if (addressBookIsPresent) {","lastModifiedDate":"2023-10-27"},{"lineNumber":109,"author":{"gitId":"ivyy-poison"},"content":"            try {","lastModifiedDate":"2023-10-26"},{"lineNumber":110,"author":{"gitId":"ivyy-poison"},"content":"                leavesBookOptional \u003d storage.readLeavesBook((AddressBook) initialAddressData);","lastModifiedDate":"2023-10-26"},{"lineNumber":111,"author":{"gitId":"ivyy-poison"},"content":"                if (leavesBookOptional.isEmpty()) {","lastModifiedDate":"2023-10-26"},{"lineNumber":112,"author":{"gitId":"ivyy-poison"},"content":"                    logger.info(\"Creating a new data file \" + storage.getLeavesBookFilePath()","lastModifiedDate":"2023-10-26"},{"lineNumber":113,"author":{"gitId":"ivyy-poison"},"content":"                            + \" populated with an empty LeavesBook.\");","lastModifiedDate":"2023-10-27"},{"lineNumber":114,"author":{"gitId":"ivyy-poison"},"content":"                }","lastModifiedDate":"2023-10-26"},{"lineNumber":115,"author":{"gitId":"ivyy-poison"},"content":"                initialLeavesData \u003d leavesBookOptional.orElseGet(() -\u003e new LeavesBook());","lastModifiedDate":"2023-10-26"},{"lineNumber":116,"author":{"gitId":"ivyy-poison"},"content":"            } catch (DataLoadingException e) {","lastModifiedDate":"2023-10-26"},{"lineNumber":117,"author":{"gitId":"ivyy-poison"},"content":"                logger.warning(\"Data file at \" + storage.getLeavesBookFilePath() + \" could not be loaded.\"","lastModifiedDate":"2023-10-26"},{"lineNumber":118,"author":{"gitId":"ivyy-poison"},"content":"                        + \" Will be starting with an empty LeavesBook.\");","lastModifiedDate":"2023-10-26"},{"lineNumber":119,"author":{"gitId":"ivyy-poison"},"content":"                initialLeavesData \u003d new LeavesBook();","lastModifiedDate":"2023-10-26"},{"lineNumber":120,"author":{"gitId":"ivyy-poison"},"content":"            }","lastModifiedDate":"2023-10-26"},{"lineNumber":121,"author":{"gitId":"ivyy-poison"},"content":"        } else {","lastModifiedDate":"2023-10-27"},{"lineNumber":122,"author":{"gitId":"ivyy-poison"},"content":"            initialLeavesData \u003d new LeavesBook();","lastModifiedDate":"2023-10-27"},{"lineNumber":123,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-27"},{"lineNumber":124,"author":{"gitId":"ivyy-poison"},"content":"        return new ModelManager(initialAddressData, initialLeavesData, userPrefs);","lastModifiedDate":"2023-10-26"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            if (!configOptional.isPresent()) {","lastModifiedDate":"2023-01-03"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                logger.info(\"Creating new config file \" + configFilePathUsed);","lastModifiedDate":"2023-05-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2023-01-03"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2023-06-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" could not be loaded.\"","lastModifiedDate":"2023-06-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                    + \" Using default config properties.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        logger.info(\"Using preference file : \" + prefsFilePath);","lastModifiedDate":"2023-05-15"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            if (!prefsOptional.isPresent()) {","lastModifiedDate":"2023-01-03"},{"lineNumber":183,"author":{"gitId":"-"},"content":"                logger.info(\"Creating new preference file \" + prefsFilePath);","lastModifiedDate":"2023-05-15"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2023-01-03"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2023-06-14"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            logger.warning(\"Preference file at \" + prefsFilePath + \" could not be loaded.\"","lastModifiedDate":"2023-06-15"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                    + \" Using default preferences.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);","lastModifiedDate":"2016-09-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":217,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"ryanozx":1,"ivyy-poison":37,"-":178,"ong-wei-hong":1}},{"path":"src/main/java/seedu/address/commons/controllers/FileDialogHandler.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.commons.controllers;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import java.io.File;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import javafx.stage.FileChooser.ExtensionFilter;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":" * Interface for a handler that handles file dialogs (e.g. open file dialog)","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"public interface FileDialogHandler {","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"    Optional\u003cFile\u003e openFile(String title, ExtensionFilter... extensions);","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"ryanozx":13}},{"path":"src/main/java/seedu/address/commons/controllers/FileDialogHandlerImpl.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.commons.controllers;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import java.io.File;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import javafx.stage.FileChooser;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import javafx.stage.FileChooser.ExtensionFilter;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.CsvUtil;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":" * Handles file dialogs","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"public class FileDialogHandlerImpl implements FileDialogHandler {","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"    private static final String EXTENSION_FORMAT \u003d \"*%s\";","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"    public static final ExtensionFilter CSV_EXTENSION \u003d new ExtensionFilter(\"CSV Files\",","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"            String.format(EXTENSION_FORMAT, CsvUtil.EXTENSION));","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"     * Creates a file dialog for the user to select a file to open","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"     * @param title Title of dialog","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"     * @param extensions Extension filters that contain the permitted file extensions","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"     * @return An Optional object containing the file if selected, else an empty Optional object","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"    public Optional\u003cFile\u003e openFile(String title, ExtensionFilter ...extensions) {","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"        FileChooser fc \u003d new FileChooser();","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"        fc.setTitle(title);","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"        fc.getExtensionFilters().addAll(extensions);","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"        File selectedFile \u003d fc.showOpenDialog(null);","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"        if (selectedFile !\u003d null) {","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"            return Optional.of(selectedFile);","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"        return Optional.empty();","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"ryanozx":36}},{"path":"src/main/java/seedu/address/commons/exceptions/CsvMismatchedColumnException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.commons.exceptions;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":" * Represents an error where the number of columns of a row not matching the number of columns in the header","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"public class CsvMismatchedColumnException extends RuntimeException {","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"    private static final String ERROR_MESSAGE \u003d \"Incorrect number of columns when parsing CSV row,\"","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"            + \" expected %d columns, encountered %d columns.\";","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"    public CsvMismatchedColumnException(int expectedColumnCount, int actualColumnCount) {","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"        super(String.format(ERROR_MESSAGE, expectedColumnCount, actualColumnCount));","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"ryanozx":12}},{"path":"src/main/java/seedu/address/commons/exceptions/CsvMissingFieldException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.commons.exceptions;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":" * Represents an error where a requested column is not available in the CSV file","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"public class CsvMissingFieldException extends Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"    private static final String MESSAGE_FORMAT \u003d \"Field %s is not found in the CSV file\";","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"    public CsvMissingFieldException(String field) {","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"        super(String.format(MESSAGE_FORMAT, field));","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"ryanozx":12}},{"path":"src/main/java/seedu/address/commons/util/CsvFile.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import java.util.List;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.CsvMismatchedColumnException;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.CsvMissingFieldException;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":" * Representation of the contents of a CSV file as an object.","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"public class CsvFile {","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"    public static final String DELIMITER_PREFIX \u003d \"sep\u003d\";","lastModifiedDate":"2023-10-27"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"    public static final String DELIMITER_SPECIFIER \u003d DELIMITER_PREFIX + \"%s\";","lastModifiedDate":"2023-10-27"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"    private final int numColumns;","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"    private final String delimiter;","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    private final HashMap\u003cString, Integer\u003e columnIndices;","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"    private final String header;","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"    private final List\u003cCsvRow\u003e rows;","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"     * Represents a row of values in the CSV file. Encapsulating the row values","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"     * within this object allows one to extract the value in a column with just","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"     * the column\u0027s name, without having to know the column index.","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"    public class CsvRow implements GetValuer {","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"        private final List\u003cString\u003e vals;","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"        /**","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"         * Constructs a CsvRow object. If the number of values supplied in the row is less","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"         * than the number of columns in the file, the values will be regarded as the values for","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"         * the first n columns, where n is the number of values in the row. The remaining columns","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"         * will be treated as empty values (empty string).","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"         * @param values String containing the values of the row delimited by the CSV delimiter","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"         * @throws CsvMismatchedColumnException Thrown if the number of values in the row is greater","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"         *      than the number of columns in the file","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"         */","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"        public CsvRow(String values) throws CsvMismatchedColumnException {","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"            String[] row \u003d values.split(delimiter);","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"            boolean hasTooManyColumns \u003d row.length \u003e numColumns;","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"            if (hasTooManyColumns) {","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"                throw new CsvMismatchedColumnException(numColumns, row.length);","lastModifiedDate":"2023-10-20"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"            vals \u003d new ArrayList\u003c\u003e(Arrays.asList(row));","lastModifiedDate":"2023-10-20"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"            padRow();","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"        /**","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"         * Constructs a CsvRow object. If the number of values supplied in the row is less","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"         * than the number of columns in the file, the values will be regarded as the values for","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"         * the first n columns, where n is the number of values in the row. The remaining columns","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"         * will be treated as empty values (empty string).","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"         * @param object Object that implements CsvParsable, which returns a list of string values","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"         *               when CsvParsable::getCsvValues() is called","lastModifiedDate":"2023-10-26"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"         * @throws CsvMismatchedColumnException if the number of values in the row is greater","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"         *      than the number of columns in the file","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"         */","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"        public CsvRow(CsvParsable object) throws CsvMismatchedColumnException {","lastModifiedDate":"2023-10-26"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"            requireNonNull(object);","lastModifiedDate":"2023-10-26"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"            List\u003cString\u003e values \u003d object.getCsvValues();","lastModifiedDate":"2023-10-26"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"            boolean hasTooManyColumns \u003d values.size() \u003e numColumns;","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"            if (hasTooManyColumns) {","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"                throw new CsvMismatchedColumnException(numColumns, values.size());","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"            vals \u003d values.stream().map(Object::toString).collect(Collectors.toList());","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"            padRow();","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":78,"author":{"gitId":"ryanozx"},"content":"        /**","lastModifiedDate":"2023-10-20"},{"lineNumber":79,"author":{"gitId":"ryanozx"},"content":"         * Pads the end of the row with additional values (empty strings), in the event the number","lastModifiedDate":"2023-10-20"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"         * of values in the row is less than the number of columns in the file. This","lastModifiedDate":"2023-10-20"},{"lineNumber":81,"author":{"gitId":"ryanozx"},"content":"         * ensures that getValue() will always return a value, whether the value of the field","lastModifiedDate":"2023-10-20"},{"lineNumber":82,"author":{"gitId":"ryanozx"},"content":"         * or an empty string. It is up to the user to handle the empty string case.","lastModifiedDate":"2023-10-20"},{"lineNumber":83,"author":{"gitId":"ryanozx"},"content":"         */","lastModifiedDate":"2023-10-20"},{"lineNumber":84,"author":{"gitId":"ryanozx"},"content":"        private void padRow() {","lastModifiedDate":"2023-10-20"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"            boolean isDonePadding \u003d vals.size() \u003d\u003d numColumns;","lastModifiedDate":"2023-10-20"},{"lineNumber":86,"author":{"gitId":"ryanozx"},"content":"            while (!isDonePadding) {","lastModifiedDate":"2023-10-20"},{"lineNumber":87,"author":{"gitId":"ryanozx"},"content":"                vals.add(\"\");","lastModifiedDate":"2023-10-20"},{"lineNumber":88,"author":{"gitId":"ryanozx"},"content":"                isDonePadding \u003d vals.size() \u003d\u003d numColumns;","lastModifiedDate":"2023-10-20"},{"lineNumber":89,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-10-20"},{"lineNumber":90,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":91,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":92,"author":{"gitId":"ryanozx"},"content":"        /**","lastModifiedDate":"2023-10-20"},{"lineNumber":93,"author":{"gitId":"ryanozx"},"content":"         * Returns the value in the row for a specified field.","lastModifiedDate":"2023-10-20"},{"lineNumber":94,"author":{"gitId":"ryanozx"},"content":"         * @param field Name of field whose value should be returned","lastModifiedDate":"2023-10-20"},{"lineNumber":95,"author":{"gitId":"ryanozx"},"content":"         * @return String representation of the value","lastModifiedDate":"2023-10-20"},{"lineNumber":96,"author":{"gitId":"ryanozx"},"content":"         * @throws CsvMissingFieldException if the field does not exist in the file (no such","lastModifiedDate":"2023-10-20"},{"lineNumber":97,"author":{"gitId":"ryanozx"},"content":"         *      column exists)","lastModifiedDate":"2023-10-20"},{"lineNumber":98,"author":{"gitId":"ryanozx"},"content":"         */","lastModifiedDate":"2023-10-20"},{"lineNumber":99,"author":{"gitId":"ryanozx"},"content":"        public String getValue(String field) throws CsvMissingFieldException {","lastModifiedDate":"2023-10-20"},{"lineNumber":100,"author":{"gitId":"ryanozx"},"content":"            boolean isColumnPresent \u003d columnIndices.containsKey(field);","lastModifiedDate":"2023-10-20"},{"lineNumber":101,"author":{"gitId":"ryanozx"},"content":"            if (!isColumnPresent) {","lastModifiedDate":"2023-10-20"},{"lineNumber":102,"author":{"gitId":"ryanozx"},"content":"                throw new CsvMissingFieldException(field);","lastModifiedDate":"2023-10-20"},{"lineNumber":103,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-10-20"},{"lineNumber":104,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":105,"author":{"gitId":"ryanozx"},"content":"            int fieldIdx \u003d columnIndices.get(field);","lastModifiedDate":"2023-10-20"},{"lineNumber":106,"author":{"gitId":"ryanozx"},"content":"            return vals.get(fieldIdx);","lastModifiedDate":"2023-10-20"},{"lineNumber":107,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":108,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":109,"author":{"gitId":"ryanozx"},"content":"        /**","lastModifiedDate":"2023-10-20"},{"lineNumber":110,"author":{"gitId":"ryanozx"},"content":"         * Returns the string representation of the row. This method is used to generate the","lastModifiedDate":"2023-10-20"},{"lineNumber":111,"author":{"gitId":"ryanozx"},"content":"         * string representation of the row to write into the CSV file, since the values are","lastModifiedDate":"2023-10-20"},{"lineNumber":112,"author":{"gitId":"ryanozx"},"content":"         * delimited by the delimiter.","lastModifiedDate":"2023-10-20"},{"lineNumber":113,"author":{"gitId":"ryanozx"},"content":"         * @return String representation of row","lastModifiedDate":"2023-10-20"},{"lineNumber":114,"author":{"gitId":"ryanozx"},"content":"         */","lastModifiedDate":"2023-10-20"},{"lineNumber":115,"author":{"gitId":"ryanozx"},"content":"        public String printRow() {","lastModifiedDate":"2023-10-20"},{"lineNumber":116,"author":{"gitId":"ryanozx"},"content":"            return String.join(delimiter, vals);","lastModifiedDate":"2023-10-20"},{"lineNumber":117,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":118,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":119,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":120,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":121,"author":{"gitId":"ryanozx"},"content":"     * Constructs a CsvFile object. This constructor is called when constructing a CsvFile from a CSV file.","lastModifiedDate":"2023-10-20"},{"lineNumber":122,"author":{"gitId":"ryanozx"},"content":"     * @param headers Headers in string representation delimited by specified delimiter.","lastModifiedDate":"2023-10-20"},{"lineNumber":123,"author":{"gitId":"ryanozx"},"content":"     * @param delimiter The character used to delimit values in the CSV file. This delimiter should be used in both","lastModifiedDate":"2023-10-20"},{"lineNumber":124,"author":{"gitId":"ryanozx"},"content":"     *                  header and rows.","lastModifiedDate":"2023-10-20"},{"lineNumber":125,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":126,"author":{"gitId":"ryanozx"},"content":"    public CsvFile(String headers, String delimiter) {","lastModifiedDate":"2023-10-20"},{"lineNumber":127,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(headers);","lastModifiedDate":"2023-10-20"},{"lineNumber":128,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(delimiter);","lastModifiedDate":"2023-10-20"},{"lineNumber":129,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":130,"author":{"gitId":"ryanozx"},"content":"        this.delimiter \u003d delimiter;","lastModifiedDate":"2023-10-20"},{"lineNumber":131,"author":{"gitId":"ryanozx"},"content":"        rows \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-20"},{"lineNumber":132,"author":{"gitId":"ryanozx"},"content":"        header \u003d headers.trim();","lastModifiedDate":"2023-10-20"},{"lineNumber":133,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":134,"author":{"gitId":"ryanozx"},"content":"        String[] columnHeaders \u003d headers.split(delimiter);","lastModifiedDate":"2023-10-20"},{"lineNumber":135,"author":{"gitId":"ryanozx"},"content":"        numColumns \u003d columnHeaders.length;","lastModifiedDate":"2023-10-20"},{"lineNumber":136,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":137,"author":{"gitId":"ryanozx"},"content":"        columnIndices \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-10-20"},{"lineNumber":138,"author":{"gitId":"ryanozx"},"content":"        for (int i \u003d 0; i \u003c columnHeaders.length; ++i) {","lastModifiedDate":"2023-10-20"},{"lineNumber":139,"author":{"gitId":"ryanozx"},"content":"            columnIndices.put(columnHeaders[i], i);","lastModifiedDate":"2023-10-20"},{"lineNumber":140,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":141,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":142,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":143,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":144,"author":{"gitId":"ryanozx"},"content":"     * Constructs a CsvFile object. This constructor is called when constructing a CsvFile from a list of objects","lastModifiedDate":"2023-10-20"},{"lineNumber":145,"author":{"gitId":"ryanozx"},"content":"     * to be written into a CSV file.","lastModifiedDate":"2023-10-20"},{"lineNumber":146,"author":{"gitId":"ryanozx"},"content":"     * @param headers List of header names","lastModifiedDate":"2023-10-20"},{"lineNumber":147,"author":{"gitId":"ryanozx"},"content":"     * @param delimiter The character used to delimit values in the CSV file","lastModifiedDate":"2023-10-20"},{"lineNumber":148,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":149,"author":{"gitId":"ryanozx"},"content":"    public CsvFile(List\u003cString\u003e headers, String delimiter) {","lastModifiedDate":"2023-10-20"},{"lineNumber":150,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(headers);","lastModifiedDate":"2023-10-20"},{"lineNumber":151,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(delimiter);","lastModifiedDate":"2023-10-20"},{"lineNumber":152,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":153,"author":{"gitId":"ryanozx"},"content":"        this.delimiter \u003d delimiter;","lastModifiedDate":"2023-10-20"},{"lineNumber":154,"author":{"gitId":"ryanozx"},"content":"        rows \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-20"},{"lineNumber":155,"author":{"gitId":"ryanozx"},"content":"        numColumns \u003d headers.size();","lastModifiedDate":"2023-10-20"},{"lineNumber":156,"author":{"gitId":"ryanozx"},"content":"        header \u003d String.join(delimiter, headers);","lastModifiedDate":"2023-10-20"},{"lineNumber":157,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":158,"author":{"gitId":"ryanozx"},"content":"        columnIndices \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-10-20"},{"lineNumber":159,"author":{"gitId":"ryanozx"},"content":"        for (int i \u003d 0; i \u003c headers.size(); ++i) {","lastModifiedDate":"2023-10-20"},{"lineNumber":160,"author":{"gitId":"ryanozx"},"content":"            columnIndices.put(headers.get(i), i);","lastModifiedDate":"2023-10-20"},{"lineNumber":161,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":162,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":163,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":164,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":165,"author":{"gitId":"ryanozx"},"content":"     * Adds a row of values into the CSV file. This is useful if adding a row that is read from the CSV file.","lastModifiedDate":"2023-10-20"},{"lineNumber":166,"author":{"gitId":"ryanozx"},"content":"     * @param row String representation of row to be added to the file, delimited by the delimiter","lastModifiedDate":"2023-10-20"},{"lineNumber":167,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":168,"author":{"gitId":"ryanozx"},"content":"    public void addRow(String row) {","lastModifiedDate":"2023-10-20"},{"lineNumber":169,"author":{"gitId":"ryanozx"},"content":"        CsvRow newRow \u003d new CsvRow(row);","lastModifiedDate":"2023-10-20"},{"lineNumber":170,"author":{"gitId":"ryanozx"},"content":"        rows.add(newRow);","lastModifiedDate":"2023-10-20"},{"lineNumber":171,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":172,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":173,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":174,"author":{"gitId":"ryanozx"},"content":"     * Adds a row of values generated by an object into the CSV file.","lastModifiedDate":"2023-10-26"},{"lineNumber":175,"author":{"gitId":"ryanozx"},"content":"     * This is useful if adding a row from a serialised object.","lastModifiedDate":"2023-10-26"},{"lineNumber":176,"author":{"gitId":"ryanozx"},"content":"     * @param object Object that implements CsvParsable, which is required","lastModifiedDate":"2023-10-26"},{"lineNumber":177,"author":{"gitId":"ryanozx"},"content":"     *               to generated a row of string values for the CSV row","lastModifiedDate":"2023-10-26"},{"lineNumber":178,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":179,"author":{"gitId":"ryanozx"},"content":"    public void addRow(CsvParsable object) {","lastModifiedDate":"2023-10-26"},{"lineNumber":180,"author":{"gitId":"ryanozx"},"content":"        CsvRow newRow \u003d new CsvRow(object);","lastModifiedDate":"2023-10-26"},{"lineNumber":181,"author":{"gitId":"ryanozx"},"content":"        rows.add(newRow);","lastModifiedDate":"2023-10-20"},{"lineNumber":182,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":183,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":184,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":185,"author":{"gitId":"ryanozx"},"content":"     * Returns a stream of strings representing the header and rows of the CSV file. The first string in the","lastModifiedDate":"2023-10-20"},{"lineNumber":186,"author":{"gitId":"ryanozx"},"content":"     * stream contains the header, while the rest of the stream consists of each row of values.","lastModifiedDate":"2023-10-20"},{"lineNumber":187,"author":{"gitId":"ryanozx"},"content":"     * @return Stream of strings containing the headers and values","lastModifiedDate":"2023-10-20"},{"lineNumber":188,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":189,"author":{"gitId":"ryanozx"},"content":"    public Stream\u003cString\u003e getFileStream() {","lastModifiedDate":"2023-10-20"},{"lineNumber":190,"author":{"gitId":"ryanozx"},"content":"        // Since the semicolon/pipe is not a common delimiter, adding an extra line at the start of the CSV file","lastModifiedDate":"2023-10-27"},{"lineNumber":191,"author":{"gitId":"ryanozx"},"content":"        // to indicate the delimiter used will improve interchangeability between applications without having to","lastModifiedDate":"2023-10-27"},{"lineNumber":192,"author":{"gitId":"ryanozx"},"content":"        // perform further configurations","lastModifiedDate":"2023-10-27"},{"lineNumber":193,"author":{"gitId":"ryanozx"},"content":"        String delimiterIndicator \u003d String.format(DELIMITER_SPECIFIER, delimiter);","lastModifiedDate":"2023-10-27"},{"lineNumber":194,"author":{"gitId":"ryanozx"},"content":"        Stream\u003cString\u003e headerStream \u003d Stream.of(delimiterIndicator, header);","lastModifiedDate":"2023-10-27"},{"lineNumber":195,"author":{"gitId":"ryanozx"},"content":"        Stream\u003cString\u003e valuesStream \u003d rows.stream().map(CsvRow::printRow);","lastModifiedDate":"2023-10-20"},{"lineNumber":196,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":197,"author":{"gitId":"ryanozx"},"content":"        return Stream.concat(headerStream, valuesStream);","lastModifiedDate":"2023-10-20"},{"lineNumber":198,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":199,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":200,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":201,"author":{"gitId":"ryanozx"},"content":"     * Returns a stream of rows","lastModifiedDate":"2023-10-20"},{"lineNumber":202,"author":{"gitId":"ryanozx"},"content":"     * @return Steam of rows","lastModifiedDate":"2023-10-20"},{"lineNumber":203,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":204,"author":{"gitId":"ryanozx"},"content":"    public Stream\u003cCsvRow\u003e getRows() {","lastModifiedDate":"2023-10-20"},{"lineNumber":205,"author":{"gitId":"ryanozx"},"content":"        return rows.stream();","lastModifiedDate":"2023-10-20"},{"lineNumber":206,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":207,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-20"},{"lineNumber":208,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"ryanozx":208}},{"path":"src/main/java/seedu/address/commons/util/CsvParsable.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import java.util.List;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":" * Interface for objects that can be serialised into CSV rows","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"public interface CsvParsable {","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"     * Returns a list of string values that can be serialized into a CSV row","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"     * @return List of string values","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"    List\u003cString\u003e getCsvValues();","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"ryanozx":14}},{"path":"src/main/java/seedu/address/commons/util/CsvUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.CsvMismatchedColumnException;","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":" * Converts a CSV file to a CsvFile object and vice-versa","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"public class CsvUtil {","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    public static final String DELIMITER \u003d \";\";","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"    public static final String EXTENSION \u003d \".csv\";","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    private static final String NOT_CSV_FILETYPE_ERROR_MESSAGE \u003d \"File %s is not a CSV file\";","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"     * Takes a CSV filepath and reads its contents into a CsvFile object. Rows that do not match the header row will","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"     * be skipped over.","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"     * @param filePath CSV filepath to read from","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"     * @return CsvFile containing the contents of the CSV file","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"     * @throws DataLoadingException if file cannot be read","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"    public static Optional\u003cCsvFile\u003e readCsvFile(Path filePath) throws DataLoadingException {","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        boolean isCsvFileType \u003d filePath.toString().endsWith(EXTENSION);","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"        if (!isCsvFileType) {","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"            throw new DataLoadingException(new Exception(","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"                    String.format(NOT_CSV_FILETYPE_ERROR_MESSAGE, filePath)));","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"            return Optional.empty();","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"        logger.info(\"CSV file \" + filePath + \" found.\");","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"        return readRows(filePath);","lastModifiedDate":"2023-10-27"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"     * Reads the CSV file at the provided file path into a CsvFile, which is then returned","lastModifiedDate":"2023-10-27"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"     * @param filePath Path containing the CSV file","lastModifiedDate":"2023-10-27"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"     * @return Optional containing the CsvFile if successfully read","lastModifiedDate":"2023-10-27"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"     * @throws DataLoadingException if file cannot be read","lastModifiedDate":"2023-10-27"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"    private static Optional\u003cCsvFile\u003e readRows(Path filePath) throws DataLoadingException {","lastModifiedDate":"2023-10-27"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"        CsvFile readFile;","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"        try (BufferedReader br \u003d new BufferedReader(new FileReader(filePath.toFile()))) {","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"            String firstLine \u003d br.readLine();","lastModifiedDate":"2023-10-27"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"            char readFileDelimiter;","lastModifiedDate":"2023-10-27"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"            if (firstLine.startsWith(CsvFile.DELIMITER_PREFIX)) {","lastModifiedDate":"2023-10-27"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"                readFileDelimiter \u003d firstLine.charAt(CsvFile.DELIMITER_PREFIX.length());","lastModifiedDate":"2023-10-27"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"                String header \u003d br.readLine();","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"                readFile \u003d new CsvFile(header, String.valueOf(readFileDelimiter));","lastModifiedDate":"2023-10-27"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"            } else {","lastModifiedDate":"2023-10-27"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"                readFile \u003d new CsvFile(firstLine, DELIMITER);","lastModifiedDate":"2023-10-27"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-10-27"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"            String row;","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"            while ((row \u003d br.readLine()) !\u003d null) {","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"                try {","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"                    readFile.addRow(row);","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"                } catch (CsvMismatchedColumnException ignored) {","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"                    // if the row cannot be added, just move on to the next row","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"                }","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-10-20"},{"lineNumber":78,"author":{"gitId":"ryanozx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-10-20"},{"lineNumber":79,"author":{"gitId":"ryanozx"},"content":"            throw new DataLoadingException(e);","lastModifiedDate":"2023-10-20"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":81,"author":{"gitId":"ryanozx"},"content":"        return Optional.of(readFile);","lastModifiedDate":"2023-10-20"},{"lineNumber":82,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":83,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":84,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"     * Saves the CsvFile to the specified file path.","lastModifiedDate":"2023-10-20"},{"lineNumber":86,"author":{"gitId":"ryanozx"},"content":"     * @param file CsvFile object containing headers and values to be saved","lastModifiedDate":"2023-10-20"},{"lineNumber":87,"author":{"gitId":"ryanozx"},"content":"     * @param filePath Path of file to be written to.","lastModifiedDate":"2023-10-20"},{"lineNumber":88,"author":{"gitId":"ryanozx"},"content":"     * @throws IOException if file cannot be opened or created","lastModifiedDate":"2023-10-20"},{"lineNumber":89,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":90,"author":{"gitId":"ryanozx"},"content":"    public static void saveCsvFile(CsvFile file, Path filePath) throws IOException {","lastModifiedDate":"2023-10-20"},{"lineNumber":91,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(file);","lastModifiedDate":"2023-10-20"},{"lineNumber":92,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2023-10-20"},{"lineNumber":93,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":94,"author":{"gitId":"ryanozx"},"content":"        FileUtil.writeToFile(filePath, file.getFileStream());","lastModifiedDate":"2023-10-20"},{"lineNumber":95,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":96,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"ryanozx":96}},{"path":"src/main/java/seedu/address/commons/util/FileUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Writes and reads files","lastModifiedDate":"2016-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class FileUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static boolean isFileExists(Path file) {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get},","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * otherwise returns false.","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param path A string representing the file path. Cannot be null.","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static boolean isValidPath(String path) {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            Paths.get(path);","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2017-08-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws IOException if the file or directory cannot be created.","lastModifiedDate":"2017-08-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static void createIfMissing(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!isFileExists(file)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            createFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2018-04-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static void createFile(Path file) throws IOException {","lastModifiedDate":"2018-04-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (Files.exists(file)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2018-04-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        createParentDirsOfFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Files.createFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Creates parent directories of file if it has a parent directory","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static void createParentDirsOfFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        Path parentDir \u003d file.getParent();","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (parentDir !\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            Files.createDirectories(parentDir);","lastModifiedDate":"2018-04-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Assumes file exists","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static String readFromFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return new String(Files.readAllBytes(file), CHARSET);","lastModifiedDate":"2018-04-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Writes given string to a file.","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Will create the file if it does not exist yet.","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public static void writeToFile(Path file, String content) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Files.write(file, content.getBytes(CHARSET));","lastModifiedDate":"2018-04-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":87,"author":{"gitId":"ryanozx"},"content":"     * Writes given stream of string to a file.","lastModifiedDate":"2023-10-20"},{"lineNumber":88,"author":{"gitId":"ryanozx"},"content":"     * Will create the file if it does not exist yet.","lastModifiedDate":"2023-10-20"},{"lineNumber":89,"author":{"gitId":"ryanozx"},"content":"     * @param file Path of file to write to","lastModifiedDate":"2023-10-20"},{"lineNumber":90,"author":{"gitId":"ryanozx"},"content":"     * @param content Stream of strings to write","lastModifiedDate":"2023-10-20"},{"lineNumber":91,"author":{"gitId":"ryanozx"},"content":"     * @throws IOException if the file cannot be opened or created","lastModifiedDate":"2023-10-20"},{"lineNumber":92,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":93,"author":{"gitId":"ryanozx"},"content":"    public static void writeToFile(Path file, Stream\u003cString\u003e content) throws IOException {","lastModifiedDate":"2023-10-20"},{"lineNumber":94,"author":{"gitId":"ryanozx"},"content":"        String filename \u003d file.toString();","lastModifiedDate":"2023-10-20"},{"lineNumber":95,"author":{"gitId":"ryanozx"},"content":"        try (FileWriter fileWriter \u003d new FileWriter(filename)) {","lastModifiedDate":"2023-10-20"},{"lineNumber":96,"author":{"gitId":"ryanozx"},"content":"            BufferedWriter writer \u003d new BufferedWriter(fileWriter);","lastModifiedDate":"2023-10-20"},{"lineNumber":97,"author":{"gitId":"ryanozx"},"content":"            content.forEach(line -\u003e {","lastModifiedDate":"2023-10-20"},{"lineNumber":98,"author":{"gitId":"ryanozx"},"content":"                try {","lastModifiedDate":"2023-10-20"},{"lineNumber":99,"author":{"gitId":"ryanozx"},"content":"                    writer.write(line);","lastModifiedDate":"2023-10-20"},{"lineNumber":100,"author":{"gitId":"ryanozx"},"content":"                    writer.newLine();","lastModifiedDate":"2023-10-20"},{"lineNumber":101,"author":{"gitId":"ryanozx"},"content":"                } catch (IOException e) {","lastModifiedDate":"2023-10-20"},{"lineNumber":102,"author":{"gitId":"ryanozx"},"content":"                    throw new RuntimeException(e);","lastModifiedDate":"2023-10-20"},{"lineNumber":103,"author":{"gitId":"ryanozx"},"content":"                }","lastModifiedDate":"2023-10-20"},{"lineNumber":104,"author":{"gitId":"ryanozx"},"content":"            });","lastModifiedDate":"2023-10-20"},{"lineNumber":105,"author":{"gitId":"ryanozx"},"content":"            writer.close();","lastModifiedDate":"2023-10-20"},{"lineNumber":106,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":107,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"ryanozx":26,"-":82}},{"path":"src/main/java/seedu/address/commons/util/GetValuer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.CsvMissingFieldException;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":" * Interface for an object that returns a string value when provided with a field to query for","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"public interface GetValuer {","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"     * Returns a string value associated with the queried field","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"     * @param field Name of field to query for","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"     * @return String value associated with queried field","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"     * @throws CsvMissingFieldException if no value is associated with the queried field","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"    String getValue(String field) throws CsvMissingFieldException;","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"ryanozx":16}},{"path":"src/main/java/seedu/address/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2016-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":68,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":69,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-11-08"},{"lineNumber":70,"author":{"gitId":"ivyy-poison"},"content":"     * Returns true if {@code s} represents an integer","lastModifiedDate":"2023-11-08"},{"lineNumber":71,"author":{"gitId":"ivyy-poison"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE}, -1, -2, -3, ..., {@code Integer.MIN_VALUE} \u003cbr\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":72,"author":{"gitId":"ivyy-poison"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2023-11-08"},{"lineNumber":73,"author":{"gitId":"ivyy-poison"},"content":"     * e.g. empty string, \"+1\", \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2023-11-08"},{"lineNumber":74,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-11-08"},{"lineNumber":75,"author":{"gitId":"ivyy-poison"},"content":"     * @param s string to be tested","lastModifiedDate":"2023-11-08"},{"lineNumber":76,"author":{"gitId":"ivyy-poison"},"content":"     * @return true if {@code s} represents an integer","lastModifiedDate":"2023-11-08"},{"lineNumber":77,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-11-08"},{"lineNumber":78,"author":{"gitId":"ivyy-poison"},"content":"    public static boolean isInteger(String s) {","lastModifiedDate":"2023-11-08"},{"lineNumber":79,"author":{"gitId":"ivyy-poison"},"content":"        requireNonNull(s);","lastModifiedDate":"2023-11-08"},{"lineNumber":80,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":81,"author":{"gitId":"ivyy-poison"},"content":"        try {","lastModifiedDate":"2023-11-08"},{"lineNumber":82,"author":{"gitId":"ivyy-poison"},"content":"            Integer.parseInt(s);","lastModifiedDate":"2023-11-08"},{"lineNumber":83,"author":{"gitId":"ivyy-poison"},"content":"            return true;","lastModifiedDate":"2023-11-08"},{"lineNumber":84,"author":{"gitId":"ivyy-poison"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2023-11-08"},{"lineNumber":85,"author":{"gitId":"ivyy-poison"},"content":"            return false;","lastModifiedDate":"2023-11-08"},{"lineNumber":86,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-11-08"},{"lineNumber":87,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"ivyy-poison":20,"-":68}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.ReadOnlyLeavesBook;","lastModifiedDate":"2023-10-28"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":54,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":55,"author":{"gitId":"jean-cq"},"content":"     * Returns the LeavesBook.","lastModifiedDate":"2023-10-28"},{"lineNumber":56,"author":{"gitId":"jean-cq"},"content":"     *","lastModifiedDate":"2023-10-28"},{"lineNumber":57,"author":{"gitId":"jean-cq"},"content":"     * @see seedu.address.model.Model#getLeavesBook()","lastModifiedDate":"2023-10-28"},{"lineNumber":58,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":59,"author":{"gitId":"jean-cq"},"content":"    ReadOnlyLeavesBook getLeavesBook();","lastModifiedDate":"2023-10-28"},{"lineNumber":60,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":61,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":62,"author":{"gitId":"jean-cq"},"content":"     * Returns the user prefs\u0027 leaves book file path.","lastModifiedDate":"2023-10-28"},{"lineNumber":63,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":64,"author":{"gitId":"jean-cq"},"content":"    Path getLeavesBookFilePath();","lastModifiedDate":"2023-10-28"},{"lineNumber":65,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":66,"author":{"gitId":"jean-cq"},"content":"    /** Returns an unmodifiable view of the filtered list of leaves */","lastModifiedDate":"2023-10-28"},{"lineNumber":67,"author":{"gitId":"jean-cq"},"content":"    ObservableList\u003cLeave\u003e getFilteredLeaveList();","lastModifiedDate":"2023-10-28"},{"lineNumber":68,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"jean-cq":19,"-":50}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.AccessDeniedException;","lastModifiedDate":"2023-06-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.ReadOnlyLeavesBook;","lastModifiedDate":"2023-10-28"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_FORMAT \u003d \"Could not save data due to the following error: %s\";","lastModifiedDate":"2023-06-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_PERMISSION_ERROR_FORMAT \u003d","lastModifiedDate":"2023-06-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            \"Could not save data to file %s due to insufficient permissions to write to the file or the folder.\";","lastModifiedDate":"2023-06-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2017-07-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"jean-cq"},"content":"            storage.saveLeavesBook(model.getLeavesBook());","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        } catch (AccessDeniedException e) {","lastModifiedDate":"2023-06-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            throw new CommandException(String.format(FILE_OPS_PERMISSION_ERROR_FORMAT, e.getMessage()), e);","lastModifiedDate":"2023-06-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new CommandException(String.format(FILE_OPS_ERROR_FORMAT, ioe.getMessage()), ioe);","lastModifiedDate":"2023-06-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":72,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":73,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":94,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":95,"author":{"gitId":"jean-cq"},"content":"    public ReadOnlyLeavesBook getLeavesBook() {","lastModifiedDate":"2023-10-28"},{"lineNumber":96,"author":{"gitId":"jean-cq"},"content":"        return model.getLeavesBook();","lastModifiedDate":"2023-10-28"},{"lineNumber":97,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":98,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":99,"author":{"gitId":"jean-cq"},"content":"    public ObservableList\u003cLeave\u003e getFilteredLeaveList() {","lastModifiedDate":"2023-10-28"},{"lineNumber":100,"author":{"gitId":"jean-cq"},"content":"        return model.getFilteredLeaveList();","lastModifiedDate":"2023-10-28"},{"lineNumber":101,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":102,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":103,"author":{"gitId":"jean-cq"},"content":"    public Path getLeavesBookFilePath() {","lastModifiedDate":"2023-10-28"},{"lineNumber":104,"author":{"gitId":"jean-cq"},"content":"        return model.getLeavesBookFilePath();","lastModifiedDate":"2023-10-28"},{"lineNumber":105,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":106,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"jean-cq":18,"-":88}},{"path":"src/main/java/seedu/address/logic/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2023-07-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2023-07-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-07-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-07-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2023-07-14"},{"lineNumber":8,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-10-28"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2019-02-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"    public static final String MESSAGE_NO_STATUS_PREFIX \u003d \"Status is PENDING by default, do not enter `s/` \\n%1$s\";","lastModifiedDate":"2023-11-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"InfiBeyond"},"content":"    public static final String MESSAGE_INVALID_LEAVE_INDEX \u003d \"The leave index provided is invalid\";","lastModifiedDate":"2023-10-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"    public static final String MESSAGE_LEAVES_LISTED_OVERVIEW \u003d \"%1$d leaves listed!\";","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_FIELDS \u003d","lastModifiedDate":"2023-07-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                \"Multiple values specified for the following single-valued field(s): \";","lastModifiedDate":"2023-07-14"},{"lineNumber":26,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String MESSAGE_INVALID_LEAVE_DISPLAYED_INDEX \u003d \"The leave index provided is invalid\";","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-07-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns an error message indicating the duplicate prefixes.","lastModifiedDate":"2023-07-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-07-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getErrorMessageForDuplicatePrefixes(Prefix... duplicatePrefixes) {","lastModifiedDate":"2023-07-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assert duplicatePrefixes.length \u003e 0;","lastModifiedDate":"2023-07-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Set\u003cString\u003e duplicateFields \u003d","lastModifiedDate":"2023-07-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                Stream.of(duplicatePrefixes).map(Prefix::toString).collect(Collectors.toSet());","lastModifiedDate":"2023-07-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return MESSAGE_DUPLICATE_FIELDS + String.join(\" \", duplicateFields);","lastModifiedDate":"2023-07-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-02-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Formats the {@code person} for display to the user.","lastModifiedDate":"2019-02-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static String format(Person person) {","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        builder.append(person.getName())","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                .append(person.getPhone())","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                .append(person.getEmail())","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                .append(person.getAddress())","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                .append(\"; Tags: \");","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        person.getTags().forEach(builder::append);","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"InfiBeyond"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":58,"author":{"gitId":"InfiBeyond"},"content":"     * Formats the {@code leave} for display to the user.","lastModifiedDate":"2023-10-28"},{"lineNumber":59,"author":{"gitId":"InfiBeyond"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":60,"author":{"gitId":"InfiBeyond"},"content":"    public static String format(Leave leave) {","lastModifiedDate":"2023-10-28"},{"lineNumber":61,"author":{"gitId":"InfiBeyond"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2023-10-28"},{"lineNumber":62,"author":{"gitId":"InfiBeyond"},"content":"        builder.append(\"Employee: \")","lastModifiedDate":"2023-10-28"},{"lineNumber":63,"author":{"gitId":"InfiBeyond"},"content":"                .append(leave.getEmployee().getName())","lastModifiedDate":"2023-10-28"},{"lineNumber":64,"author":{"gitId":"InfiBeyond"},"content":"                .append(\" Title: \")","lastModifiedDate":"2023-10-28"},{"lineNumber":65,"author":{"gitId":"InfiBeyond"},"content":"                .append(leave.getTitle())","lastModifiedDate":"2023-10-28"},{"lineNumber":66,"author":{"gitId":"InfiBeyond"},"content":"                .append(\" Start: \")","lastModifiedDate":"2023-10-28"},{"lineNumber":67,"author":{"gitId":"InfiBeyond"},"content":"                .append(leave.getStart())","lastModifiedDate":"2023-10-28"},{"lineNumber":68,"author":{"gitId":"InfiBeyond"},"content":"                .append(\" End: \")","lastModifiedDate":"2023-10-28"},{"lineNumber":69,"author":{"gitId":"InfiBeyond"},"content":"                .append(leave.getEnd())","lastModifiedDate":"2023-10-28"},{"lineNumber":70,"author":{"gitId":"InfiBeyond"},"content":"                .append(\" Status: \")","lastModifiedDate":"2023-10-28"},{"lineNumber":71,"author":{"gitId":"InfiBeyond"},"content":"                .append(leave.getStatus());","lastModifiedDate":"2023-10-28"},{"lineNumber":72,"author":{"gitId":"InfiBeyond"},"content":"        return builder.toString();","lastModifiedDate":"2023-10-28"},{"lineNumber":73,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":74,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ryanozx":1,"jean-cq":2,"InfiBeyond":20,"-":51,"ong-wei-hong":1}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ADDRESS;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_EMAIL;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_NAME;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_PHONE;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_TAG;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":" * Adds an employee to the address book.","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an employee to the address book. \"","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"            + PREFIX_PERSON_NAME + \"NAME \"","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":"            + PREFIX_PERSON_PHONE + \"PHONE \"","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":"            + PREFIX_PERSON_EMAIL + \"EMAIL \"","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":"            + PREFIX_PERSON_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"jean-cq"},"content":"            + \"[\" + PREFIX_PERSON_TAG + \"TAG]...\\n\"","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":31,"author":{"gitId":"jean-cq"},"content":"            + PREFIX_PERSON_NAME + \"John Doe \"","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"jean-cq"},"content":"            + PREFIX_PERSON_PHONE + \"98765432 \"","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"jean-cq"},"content":"            + PREFIX_PERSON_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"jean-cq"},"content":"            + PREFIX_PERSON_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"            + PREFIX_PERSON_TAG + \"full time \"","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"jean-cq"},"content":"            + PREFIX_PERSON_TAG + \"owesMoney\";","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New employee added: %1$s\";","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"jean-cq"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This employee already exists in the address book\";","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, Messages.format(toAdd)));","lastModifiedDate":"2019-02-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (!(other instanceof AddCommand)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        AddCommand otherAddCommand \u003d (AddCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return toAdd.equals(otherAddCommand.toAdd);","lastModifiedDate":"2023-07-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                .add(\"toAdd\", toAdd)","lastModifiedDate":"2019-02-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"jean-cq":20,"-":64}},{"path":"src/main/java/seedu/address/logic/commands/AddLeaveCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-28"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_DATE_END;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_DATE_START;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_DESCRIPTION;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_TITLE;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"import java.util.List;","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-28"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-28"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-28"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-28"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-28"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Description;","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-10-28"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Range;","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Title;","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-28"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":"/**","lastModifiedDate":"2023-10-28"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":" * Adds an employee to the address book.","lastModifiedDate":"2023-10-28"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":" */","lastModifiedDate":"2023-10-28"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"public class AddLeaveCommand extends Command {","lastModifiedDate":"2023-10-28"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":"    public static final String COMMAND_WORD \u003d \"add-leave\";","lastModifiedDate":"2023-10-28"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":29,"author":{"gitId":"jean-cq"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a leave of an employee to the leave book. \"","lastModifiedDate":"2023-10-28"},{"lineNumber":30,"author":{"gitId":"jean-cq"},"content":"            + \"Parameters: \"","lastModifiedDate":"2023-10-28"},{"lineNumber":31,"author":{"gitId":"jean-cq"},"content":"            + \"INDEX \"","lastModifiedDate":"2023-10-28"},{"lineNumber":32,"author":{"gitId":"jean-cq"},"content":"            + PREFIX_LEAVE_TITLE + \"TITLE \"","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"jean-cq"},"content":"            + PREFIX_LEAVE_DATE_START + \"DATE START \"","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"jean-cq"},"content":"            + PREFIX_LEAVE_DATE_END + \"DATE END \"","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"            + \"[\" + PREFIX_LEAVE_DESCRIPTION + \"DESCRIPTION] \"","lastModifiedDate":"2023-11-09"},{"lineNumber":36,"author":{"gitId":"jean-cq"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-10-28"},{"lineNumber":37,"author":{"gitId":"jean-cq"},"content":"            + \"1 \"","lastModifiedDate":"2023-10-28"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"            + PREFIX_LEAVE_TITLE + \"John\u0027s Paternity Leave \"","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"jean-cq"},"content":"            + PREFIX_LEAVE_DATE_START + \"2023-10-28 \"","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"jean-cq"},"content":"            + PREFIX_LEAVE_DATE_END + \"2023-10-29 \"","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"jean-cq"},"content":"            + PREFIX_LEAVE_DESCRIPTION + \"John\u0027s Paternity Leave Description [OPTIONAL] \";","lastModifiedDate":"2023-11-09"},{"lineNumber":42,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":43,"author":{"gitId":"jean-cq"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New leave is added : %1$s\";","lastModifiedDate":"2023-10-28"},{"lineNumber":44,"author":{"gitId":"jean-cq"},"content":"    public static final String MESSAGE_DUPLICATE_LEAVE \u003d \"This leave has already exists for the employee\";","lastModifiedDate":"2023-10-28"},{"lineNumber":45,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":46,"author":{"gitId":"jean-cq"},"content":"    private Leave toAdd;","lastModifiedDate":"2023-10-28"},{"lineNumber":47,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":48,"author":{"gitId":"jean-cq"},"content":"    private final Index index;","lastModifiedDate":"2023-10-28"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"    private final Title title;","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"    private final Range dateRange;","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"    private final Description description;","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":54,"author":{"gitId":"jean-cq"},"content":"     * Creates an AddLeaveCommand to add the specified {@code Leave}","lastModifiedDate":"2023-10-28"},{"lineNumber":55,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"    public AddLeaveCommand(Index index, Title title, Range dates, Description description) {","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"jean-cq"},"content":"        requireNonNull(index);","lastModifiedDate":"2023-11-09"},{"lineNumber":58,"author":{"gitId":"jean-cq"},"content":"        requireNonNull(title);","lastModifiedDate":"2023-11-09"},{"lineNumber":59,"author":{"gitId":"jean-cq"},"content":"        requireNonNull(dates);","lastModifiedDate":"2023-11-09"},{"lineNumber":60,"author":{"gitId":"jean-cq"},"content":"        requireNonNull(description);","lastModifiedDate":"2023-11-11"},{"lineNumber":61,"author":{"gitId":"jean-cq"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-10-28"},{"lineNumber":62,"author":{"gitId":"jean-cq"},"content":"        this.title \u003d title;","lastModifiedDate":"2023-10-28"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"        this.dateRange \u003d dates;","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"jean-cq"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-10-28"},{"lineNumber":65,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":66,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":67,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":68,"author":{"gitId":"jean-cq"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-28"},{"lineNumber":69,"author":{"gitId":"jean-cq"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-28"},{"lineNumber":70,"author":{"gitId":"jean-cq"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-10-28"},{"lineNumber":71,"author":{"gitId":"jean-cq"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-10-28"},{"lineNumber":72,"author":{"gitId":"jean-cq"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-28"},{"lineNumber":73,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":74,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":75,"author":{"gitId":"jean-cq"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2023-10-28"},{"lineNumber":76,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"        toAdd \u003d new Leave(personToEdit, title, dateRange, description);","lastModifiedDate":"2023-11-02"},{"lineNumber":78,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":79,"author":{"gitId":"jean-cq"},"content":"        if (model.hasLeave(toAdd)) {","lastModifiedDate":"2023-11-11"},{"lineNumber":80,"author":{"gitId":"jean-cq"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_LEAVE);","lastModifiedDate":"2023-10-28"},{"lineNumber":81,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":82,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":83,"author":{"gitId":"jean-cq"},"content":"        model.addLeave(toAdd);","lastModifiedDate":"2023-10-28"},{"lineNumber":84,"author":{"gitId":"jean-cq"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, Messages.format(toAdd)));","lastModifiedDate":"2023-10-28"},{"lineNumber":85,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":86,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":87,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":88,"author":{"gitId":"jean-cq"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-28"},{"lineNumber":89,"author":{"gitId":"jean-cq"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-28"},{"lineNumber":90,"author":{"gitId":"jean-cq"},"content":"            return true;","lastModifiedDate":"2023-10-28"},{"lineNumber":91,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":92,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":93,"author":{"gitId":"jean-cq"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-28"},{"lineNumber":94,"author":{"gitId":"jean-cq"},"content":"        if (!(other instanceof AddLeaveCommand)) {","lastModifiedDate":"2023-10-28"},{"lineNumber":95,"author":{"gitId":"jean-cq"},"content":"            return false;","lastModifiedDate":"2023-10-28"},{"lineNumber":96,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":97,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":98,"author":{"gitId":"jean-cq"},"content":"        AddLeaveCommand otherAddLeaveCommand \u003d (AddLeaveCommand) other;","lastModifiedDate":"2023-11-09"},{"lineNumber":99,"author":{"gitId":"jean-cq"},"content":"        return index.equals(otherAddLeaveCommand.index) \u0026\u0026 title.equals(otherAddLeaveCommand.title)","lastModifiedDate":"2023-11-09"},{"lineNumber":100,"author":{"gitId":"jean-cq"},"content":"                \u0026\u0026 dateRange.equals(otherAddLeaveCommand.dateRange)","lastModifiedDate":"2023-11-09"},{"lineNumber":101,"author":{"gitId":"jean-cq"},"content":"                \u0026\u0026 description.equals(otherAddLeaveCommand.description);","lastModifiedDate":"2023-11-09"},{"lineNumber":102,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":103,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":104,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":105,"author":{"gitId":"jean-cq"},"content":"    public String toString() {","lastModifiedDate":"2023-10-28"},{"lineNumber":106,"author":{"gitId":"jean-cq"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-28"},{"lineNumber":107,"author":{"gitId":"jean-cq"},"content":"                .add(\"title\", title)","lastModifiedDate":"2023-11-09"},{"lineNumber":108,"author":{"gitId":"jean-cq"},"content":"                .add(\"description\", description)","lastModifiedDate":"2023-11-09"},{"lineNumber":109,"author":{"gitId":"jean-cq"},"content":"                .add(\"start\", dateRange.getStartDate().get())","lastModifiedDate":"2023-11-09"},{"lineNumber":110,"author":{"gitId":"jean-cq"},"content":"                .add(\"end\", dateRange.getEndDate().get())","lastModifiedDate":"2023-11-09"},{"lineNumber":111,"author":{"gitId":"jean-cq"},"content":"                .toString();","lastModifiedDate":"2023-10-28"},{"lineNumber":112,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":113,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-10-28"}],"authorContributionMap":{"ryanozx":10,"jean-cq":103}},{"path":"src/main/java/seedu/address/logic/commands/AddTagCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ong-wei-hong"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-11"},{"lineNumber":2,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":3,"author":{"gitId":"ong-wei-hong"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-11"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_TAG;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":6,"author":{"gitId":"ong-wei-hong"},"content":"import java.util.Collection;","lastModifiedDate":"2023-10-11"},{"lineNumber":7,"author":{"gitId":"ong-wei-hong"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-10-11"},{"lineNumber":8,"author":{"gitId":"ong-wei-hong"},"content":"import java.util.List;","lastModifiedDate":"2023-10-11"},{"lineNumber":9,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":10,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-11"},{"lineNumber":11,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-11"},{"lineNumber":12,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-11"},{"lineNumber":13,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-11"},{"lineNumber":14,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-11"},{"lineNumber":15,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-11"},{"lineNumber":16,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-11"},{"lineNumber":17,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":18,"author":{"gitId":"ong-wei-hong"},"content":"/**","lastModifiedDate":"2023-10-11"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":" * Adds a tag to an employee in the address book","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"ong-wei-hong"},"content":" */","lastModifiedDate":"2023-10-11"},{"lineNumber":21,"author":{"gitId":"ong-wei-hong"},"content":"public class AddTagCommand extends Command {","lastModifiedDate":"2023-10-11"},{"lineNumber":22,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":23,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String COMMAND_WORD \u003d \"add-tag\";","lastModifiedDate":"2023-10-11"},{"lineNumber":24,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":25,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds tags to the employee identified \"","lastModifiedDate":"2023-10-11"},{"lineNumber":26,"author":{"gitId":"ong-wei-hong"},"content":"        + \"by the index number used in the displayed employee list.\\n\"","lastModifiedDate":"2023-10-11"},{"lineNumber":27,"author":{"gitId":"ong-wei-hong"},"content":"        + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2023-10-11"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":"        + PREFIX_PERSON_TAG + \"TAG...\\n\"","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"ong-wei-hong"},"content":"        + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2023-10-11"},{"lineNumber":30,"author":{"gitId":"jean-cq"},"content":"        + PREFIX_PERSON_TAG + \"full time\";","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":32,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String MESSAGE_NO_TAGS_ADDED \u003d \"At least one tag must be provided.\";","lastModifiedDate":"2023-10-11"},{"lineNumber":33,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String MESSAGE_DUPLICATE_TAG \u003d \"This employee already has some of the tags.\";","lastModifiedDate":"2023-10-11"},{"lineNumber":34,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String MESSAGE_ADD_TAG_SUCCESS \u003d \"Edited Employee : %1$s\";","lastModifiedDate":"2023-10-11"},{"lineNumber":35,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":36,"author":{"gitId":"ong-wei-hong"},"content":"    private final Index index;","lastModifiedDate":"2023-10-11"},{"lineNumber":37,"author":{"gitId":"ong-wei-hong"},"content":"    private final Collection\u003cTag\u003e tagsToAdd;","lastModifiedDate":"2023-10-11"},{"lineNumber":38,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":39,"author":{"gitId":"ong-wei-hong"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":40,"author":{"gitId":"ong-wei-hong"},"content":"     * @param index of the employee in the filtered employee list to add tags to","lastModifiedDate":"2023-10-11"},{"lineNumber":41,"author":{"gitId":"ong-wei-hong"},"content":"     * @param tagsToAdd tags to add to the employee","lastModifiedDate":"2023-10-11"},{"lineNumber":42,"author":{"gitId":"ong-wei-hong"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":43,"author":{"gitId":"ong-wei-hong"},"content":"    public AddTagCommand(Index index, Collection\u003cTag\u003e tagsToAdd) {","lastModifiedDate":"2023-10-11"},{"lineNumber":44,"author":{"gitId":"ong-wei-hong"},"content":"        requireNonNull(index);","lastModifiedDate":"2023-10-11"},{"lineNumber":45,"author":{"gitId":"ong-wei-hong"},"content":"        requireNonNull(tagsToAdd);","lastModifiedDate":"2023-10-11"},{"lineNumber":46,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":47,"author":{"gitId":"ong-wei-hong"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-10-11"},{"lineNumber":48,"author":{"gitId":"ong-wei-hong"},"content":"        this.tagsToAdd \u003d new HashSet\u003c\u003e(tagsToAdd);","lastModifiedDate":"2023-10-11"},{"lineNumber":49,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":50,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":51,"author":{"gitId":"ong-wei-hong"},"content":"    @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":52,"author":{"gitId":"ong-wei-hong"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-11"},{"lineNumber":53,"author":{"gitId":"ong-wei-hong"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-11"},{"lineNumber":54,"author":{"gitId":"ong-wei-hong"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-10-11"},{"lineNumber":55,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":56,"author":{"gitId":"ong-wei-hong"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-10-11"},{"lineNumber":57,"author":{"gitId":"ong-wei-hong"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-11"},{"lineNumber":58,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":59,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":60,"author":{"gitId":"ong-wei-hong"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2023-10-11"},{"lineNumber":61,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":62,"author":{"gitId":"ong-wei-hong"},"content":"        if (personToEdit.hasAnyTags(tagsToAdd)) {","lastModifiedDate":"2023-10-11"},{"lineNumber":63,"author":{"gitId":"ong-wei-hong"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TAG);","lastModifiedDate":"2023-10-11"},{"lineNumber":64,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":65,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":66,"author":{"gitId":"ong-wei-hong"},"content":"        Person editedPerson \u003d new Person(personToEdit);","lastModifiedDate":"2023-10-11"},{"lineNumber":67,"author":{"gitId":"ong-wei-hong"},"content":"        editedPerson.addTags(tagsToAdd);","lastModifiedDate":"2023-10-11"},{"lineNumber":68,"author":{"gitId":"ong-wei-hong"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2023-10-11"},{"lineNumber":69,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":70,"author":{"gitId":"ong-wei-hong"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_TAG_SUCCESS, Messages.format(editedPerson)));","lastModifiedDate":"2023-10-11"},{"lineNumber":71,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":72,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":73,"author":{"gitId":"ong-wei-hong"},"content":"    @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":74,"author":{"gitId":"ong-wei-hong"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-11"},{"lineNumber":75,"author":{"gitId":"ong-wei-hong"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-11"},{"lineNumber":76,"author":{"gitId":"ong-wei-hong"},"content":"            return true;","lastModifiedDate":"2023-10-11"},{"lineNumber":77,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":78,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":79,"author":{"gitId":"ong-wei-hong"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-11"},{"lineNumber":80,"author":{"gitId":"ong-wei-hong"},"content":"        if (!(other instanceof AddTagCommand)) {","lastModifiedDate":"2023-10-11"},{"lineNumber":81,"author":{"gitId":"ong-wei-hong"},"content":"            return false;","lastModifiedDate":"2023-10-11"},{"lineNumber":82,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":83,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":84,"author":{"gitId":"ong-wei-hong"},"content":"        AddTagCommand otherAddTagCommand \u003d (AddTagCommand) other;","lastModifiedDate":"2023-10-11"},{"lineNumber":85,"author":{"gitId":"ong-wei-hong"},"content":"        return index.equals(otherAddTagCommand.index) \u0026\u0026 tagsToAdd.equals(otherAddTagCommand.tagsToAdd);","lastModifiedDate":"2023-10-11"},{"lineNumber":86,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":87,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":88,"author":{"gitId":"ong-wei-hong"},"content":"    @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":89,"author":{"gitId":"ong-wei-hong"},"content":"    public String toString() {","lastModifiedDate":"2023-10-11"},{"lineNumber":90,"author":{"gitId":"ong-wei-hong"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-11"},{"lineNumber":91,"author":{"gitId":"ong-wei-hong"},"content":"                .add(\"index\", index)","lastModifiedDate":"2023-10-11"},{"lineNumber":92,"author":{"gitId":"ong-wei-hong"},"content":"                .add(\"tagsToAdd\", tagsToAdd)","lastModifiedDate":"2023-10-11"},{"lineNumber":93,"author":{"gitId":"ong-wei-hong"},"content":"                .toString();","lastModifiedDate":"2023-10-11"},{"lineNumber":94,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":95,"author":{"gitId":"ong-wei-hong"},"content":"}","lastModifiedDate":"2023-10-11"}],"authorContributionMap":{"jean-cq":4,"ong-wei-hong":91}},{"path":"src/main/java/seedu/address/logic/commands/ApproveLeaveCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"InfiBeyond"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-28"},{"lineNumber":2,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":3,"author":{"gitId":"InfiBeyond"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-28"},{"lineNumber":4,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":5,"author":{"gitId":"InfiBeyond"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-28"},{"lineNumber":6,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-28"},{"lineNumber":7,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-28"},{"lineNumber":8,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-28"},{"lineNumber":9,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-28"},{"lineNumber":10,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-28"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Description;","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-10-28"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Range;","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.leave.Status;","lastModifiedDate":"2023-10-28"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Status.StatusType;","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Title;","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.person.ComparablePerson;","lastModifiedDate":"2023-10-28"},{"lineNumber":18,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":19,"author":{"gitId":"InfiBeyond"},"content":"/**","lastModifiedDate":"2023-10-28"},{"lineNumber":20,"author":{"gitId":"InfiBeyond"},"content":" * Approves an existing leave in the leave book.","lastModifiedDate":"2023-10-28"},{"lineNumber":21,"author":{"gitId":"InfiBeyond"},"content":" */","lastModifiedDate":"2023-10-28"},{"lineNumber":22,"author":{"gitId":"InfiBeyond"},"content":"public class ApproveLeaveCommand extends Command {","lastModifiedDate":"2023-10-28"},{"lineNumber":23,"author":{"gitId":"InfiBeyond"},"content":"    public static final String COMMAND_WORD \u003d \"approve-leave\";","lastModifiedDate":"2023-10-28"},{"lineNumber":24,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":25,"author":{"gitId":"InfiBeyond"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Approves leave request identified \"","lastModifiedDate":"2023-10-28"},{"lineNumber":26,"author":{"gitId":"InfiBeyond"},"content":"            + \"by the index number used in the leave book. \"","lastModifiedDate":"2023-10-28"},{"lineNumber":27,"author":{"gitId":"InfiBeyond"},"content":"            + \"The specified leave request will be approved.\\n\"","lastModifiedDate":"2023-10-28"},{"lineNumber":28,"author":{"gitId":"InfiBeyond"},"content":"            + \"Parameters: INDEX (must be a positive integer within in the range of the Leave List)\\n) \"","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"InfiBeyond"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \";","lastModifiedDate":"2023-10-28"},{"lineNumber":30,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":31,"author":{"gitId":"InfiBeyond"},"content":"    public static final String MESSAGE_APPROVE_LEAVE_SUCCESS \u003d \"Approved Leave: %1$s\";","lastModifiedDate":"2023-10-28"},{"lineNumber":32,"author":{"gitId":"InfiBeyond"},"content":"    public static final String MESSAGE_DUPLICATE_LEAVE_APPROVE \u003d \"Leave previously approved: %1$s\";","lastModifiedDate":"2023-10-28"},{"lineNumber":33,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":34,"author":{"gitId":"InfiBeyond"},"content":"    private final Index index;","lastModifiedDate":"2023-10-28"},{"lineNumber":35,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":36,"author":{"gitId":"InfiBeyond"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":37,"author":{"gitId":"InfiBeyond"},"content":"     * @param index of the leave in the leave book to approve","lastModifiedDate":"2023-10-28"},{"lineNumber":38,"author":{"gitId":"InfiBeyond"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":39,"author":{"gitId":"InfiBeyond"},"content":"    public ApproveLeaveCommand(Index index) {","lastModifiedDate":"2023-10-28"},{"lineNumber":40,"author":{"gitId":"InfiBeyond"},"content":"        requireNonNull(index);","lastModifiedDate":"2023-10-28"},{"lineNumber":41,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":42,"author":{"gitId":"InfiBeyond"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-10-28"},{"lineNumber":43,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":44,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":45,"author":{"gitId":"InfiBeyond"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":46,"author":{"gitId":"InfiBeyond"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-28"},{"lineNumber":47,"author":{"gitId":"InfiBeyond"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-28"},{"lineNumber":48,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"InfiBeyond"},"content":"        ObservableList\u003cLeave\u003e leaveList \u003d model.getFilteredLeaveList();","lastModifiedDate":"2023-10-31"},{"lineNumber":50,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":51,"author":{"gitId":"InfiBeyond"},"content":"        if (index.getZeroBased() \u003e\u003d leaveList.size()) {","lastModifiedDate":"2023-10-28"},{"lineNumber":52,"author":{"gitId":"InfiBeyond"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_LEAVE_INDEX);","lastModifiedDate":"2023-10-28"},{"lineNumber":53,"author":{"gitId":"InfiBeyond"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":54,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":55,"author":{"gitId":"InfiBeyond"},"content":"        Leave leaveToApprove \u003d leaveList.get(index.getZeroBased());","lastModifiedDate":"2023-10-28"},{"lineNumber":56,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"        if (leaveToApprove.getStatus().getStatusType().equals(StatusType.APPROVED)) {","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"InfiBeyond"},"content":"            throw new CommandException(String.format(MESSAGE_DUPLICATE_LEAVE_APPROVE, Messages.format(leaveToApprove)));","lastModifiedDate":"2023-10-29"},{"lineNumber":59,"author":{"gitId":"InfiBeyond"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":60,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":61,"author":{"gitId":"InfiBeyond"},"content":"        Leave approvedLeave \u003d createApprovedLeave(leaveToApprove);","lastModifiedDate":"2023-10-28"},{"lineNumber":62,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":63,"author":{"gitId":"InfiBeyond"},"content":"        model.setLeave(leaveToApprove, approvedLeave);","lastModifiedDate":"2023-10-28"},{"lineNumber":64,"author":{"gitId":"InfiBeyond"},"content":"        return new CommandResult(String.format(MESSAGE_APPROVE_LEAVE_SUCCESS, Messages.format(approvedLeave)));","lastModifiedDate":"2023-10-28"},{"lineNumber":65,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":66,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":67,"author":{"gitId":"InfiBeyond"},"content":"    private static Leave createApprovedLeave(Leave leaveToApprove) {","lastModifiedDate":"2023-10-28"},{"lineNumber":68,"author":{"gitId":"InfiBeyond"},"content":"        assert leaveToApprove !\u003d null;","lastModifiedDate":"2023-10-28"},{"lineNumber":69,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":70,"author":{"gitId":"InfiBeyond"},"content":"        ComparablePerson employee \u003d leaveToApprove.getEmployee();","lastModifiedDate":"2023-10-28"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"        Title title \u003d leaveToApprove.getTitle();","lastModifiedDate":"2023-11-02"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"        Description description \u003d leaveToApprove.getDescription();","lastModifiedDate":"2023-11-02"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"        Range dateRange \u003d Range.createNonNullRange(leaveToApprove.getStart(), leaveToApprove.getEnd());","lastModifiedDate":"2023-11-02"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"        Status approvedStatus \u003d Status.of(StatusType.APPROVED);","lastModifiedDate":"2023-11-02"},{"lineNumber":75,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"        return new Leave(employee, title, dateRange, description, approvedStatus);","lastModifiedDate":"2023-11-02"},{"lineNumber":77,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":78,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":79,"author":{"gitId":"InfiBeyond"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":80,"author":{"gitId":"InfiBeyond"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-28"},{"lineNumber":81,"author":{"gitId":"InfiBeyond"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-28"},{"lineNumber":82,"author":{"gitId":"InfiBeyond"},"content":"            return true;","lastModifiedDate":"2023-10-28"},{"lineNumber":83,"author":{"gitId":"InfiBeyond"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":84,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":85,"author":{"gitId":"InfiBeyond"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-28"},{"lineNumber":86,"author":{"gitId":"InfiBeyond"},"content":"        if (!(other instanceof ApproveLeaveCommand)) {","lastModifiedDate":"2023-10-28"},{"lineNumber":87,"author":{"gitId":"InfiBeyond"},"content":"            return false;","lastModifiedDate":"2023-10-28"},{"lineNumber":88,"author":{"gitId":"InfiBeyond"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":89,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":90,"author":{"gitId":"InfiBeyond"},"content":"        ApproveLeaveCommand otherApproveLeaveCommand \u003d (ApproveLeaveCommand) other;","lastModifiedDate":"2023-10-28"},{"lineNumber":91,"author":{"gitId":"InfiBeyond"},"content":"        return index.equals(otherApproveLeaveCommand.index);","lastModifiedDate":"2023-10-28"},{"lineNumber":92,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":93,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":94,"author":{"gitId":"InfiBeyond"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":95,"author":{"gitId":"InfiBeyond"},"content":"    public String toString() {","lastModifiedDate":"2023-10-28"},{"lineNumber":96,"author":{"gitId":"InfiBeyond"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-28"},{"lineNumber":97,"author":{"gitId":"InfiBeyond"},"content":"                .add(\"index\", index)","lastModifiedDate":"2023-10-28"},{"lineNumber":98,"author":{"gitId":"InfiBeyond"},"content":"                .toString();","lastModifiedDate":"2023-10-28"},{"lineNumber":99,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":100,"author":{"gitId":"InfiBeyond"},"content":"}","lastModifiedDate":"2023-10-28"}],"authorContributionMap":{"ryanozx":10,"InfiBeyond":90}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.LeavesBook;","lastModifiedDate":"2023-11-10"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Clears the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"InfiBeyond"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book and Leaves book has been cleared!\";","lastModifiedDate":"2023-11-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        model.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"InfiBeyond"},"content":"        model.setLeavesBook(new LeavesBook());","lastModifiedDate":"2023-11-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"InfiBeyond":3,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":" * Deletes an employee identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":"            + \": Deletes the employee identified by the index number used in the displayed employee list.\\n\"","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Employee: %1$s\";","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {","lastModifiedDate":"2017-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        model.deletePerson(personToDelete);","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, Messages.format(personToDelete)));","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!(other instanceof DeleteCommand)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        DeleteCommand otherDeleteCommand \u003d (DeleteCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return targetIndex.equals(otherDeleteCommand.targetIndex);","lastModifiedDate":"2023-07-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                .add(\"targetIndex\", targetIndex)","lastModifiedDate":"2019-02-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"jean-cq":3,"-":66}},{"path":"src/main/java/seedu/address/logic/commands/DeleteLeaveCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ong-wei-hong"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-27"},{"lineNumber":2,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":3,"author":{"gitId":"ong-wei-hong"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"ong-wei-hong"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"ong-wei-hong"},"content":"/**","lastModifiedDate":"2023-10-27"},{"lineNumber":14,"author":{"gitId":"ong-wei-hong"},"content":"  * Deletes a Leave identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2023-10-27"},{"lineNumber":15,"author":{"gitId":"ong-wei-hong"},"content":"  */","lastModifiedDate":"2023-10-27"},{"lineNumber":16,"author":{"gitId":"ong-wei-hong"},"content":"public class DeleteLeaveCommand extends Command {","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String COMMAND_WORD \u003d \"delete-leave\";","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"ong-wei-hong"},"content":"            + \": Deletes the leave identified by the index number used in the displayed leave list.\\n\"","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"ong-wei-hong"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"ong-wei-hong"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String MESSAGE_DELETE_LEAVE_SUCCESS \u003d \"Deleted Leave: %1$s\";","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"ong-wei-hong"},"content":"    private Index targetIndex;","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"ong-wei-hong"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"     * @param targetIndex of the leave in the filtered leave list to delete","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"ong-wei-hong"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"ong-wei-hong"},"content":"    public DeleteLeaveCommand(Index targetIndex) {","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"ong-wei-hong"},"content":"        requireNonNull(targetIndex);","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"ong-wei-hong"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"ong-wei-hong"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"ong-wei-hong"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"ong-wei-hong"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"ong-wei-hong"},"content":"        ObservableList\u003cLeave\u003e lastShownList \u003d model.getFilteredLeaveList();","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"ong-wei-hong"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"ong-wei-hong"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_LEAVE_DISPLAYED_INDEX);","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"ong-wei-hong"},"content":"        Leave leaveToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"ong-wei-hong"},"content":"        model.deleteLeave(leaveToDelete);","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"ong-wei-hong"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_LEAVE_SUCCESS, Messages.format(leaveToDelete)));","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"ong-wei-hong"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"ong-wei-hong"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"ong-wei-hong"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-11-01"},{"lineNumber":55,"author":{"gitId":"ong-wei-hong"},"content":"            return true;","lastModifiedDate":"2023-11-01"},{"lineNumber":56,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":57,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"ong-wei-hong"},"content":"        if (!(other instanceof DeleteLeaveCommand)) {","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"ong-wei-hong"},"content":"            return false;","lastModifiedDate":"2023-11-01"},{"lineNumber":60,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":61,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":62,"author":{"gitId":"ong-wei-hong"},"content":"        DeleteLeaveCommand otherDeleteLeaveCommand \u003d (DeleteLeaveCommand) other;","lastModifiedDate":"2023-11-01"},{"lineNumber":63,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":64,"author":{"gitId":"ong-wei-hong"},"content":"        return targetIndex.equals(otherDeleteLeaveCommand.targetIndex);","lastModifiedDate":"2023-11-01"},{"lineNumber":65,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":66,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":67,"author":{"gitId":"ong-wei-hong"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":68,"author":{"gitId":"ong-wei-hong"},"content":"    public String toString() {","lastModifiedDate":"2023-11-01"},{"lineNumber":69,"author":{"gitId":"ong-wei-hong"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-11-01"},{"lineNumber":70,"author":{"gitId":"ong-wei-hong"},"content":"                .add(\"targetIndex\", targetIndex)","lastModifiedDate":"2023-11-01"},{"lineNumber":71,"author":{"gitId":"ong-wei-hong"},"content":"                .toString();","lastModifiedDate":"2023-11-01"},{"lineNumber":72,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":73,"author":{"gitId":"ong-wei-hong"},"content":"}","lastModifiedDate":"2023-10-27"}],"authorContributionMap":{"ryanozx":1,"ong-wei-hong":72}},{"path":"src/main/java/seedu/address/logic/commands/DeleteTagCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_TAG;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"import java.util.Collection;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"import java.util.List;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":" * Deletes tags from an existing employee in the address book.","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"ivyy-poison"},"content":"public class DeleteTagCommand extends Command {","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"ivyy-poison"},"content":"    public static final String COMMAND_WORD \u003d \"delete-tag\";","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"ivyy-poison"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Delete tags from the employee identified \"","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":"        + \"by the index number used in the displayed employee list.\\n\"","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"ivyy-poison"},"content":"        + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":"        + PREFIX_PERSON_TAG + \"TAG...\\n\"","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"        + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"jean-cq"},"content":"        + PREFIX_PERSON_TAG + \"remote\";","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"    public static final String MESSAGE_NO_TAGS_REMOVED \u003d \"At least one tag must be provided.\";","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"    public static final String MESSAGE_MISSING_TAGS \u003d \"Some of the tags are not found on this employee.\";","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"    public static final String MESSAGE_REMOVE_TAG_SUCCESS \u003d \"Edited Employee : %1$s\";","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"    private final Index index;","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"    private final Collection\u003cTag\u003e tagsToRemove;","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"     * @param index of the employee in the filtered employee list to remove tags from","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"     * @param tags tags to remove from the employee","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"    public DeleteTagCommand(Index index, Collection\u003cTag\u003e tags) {","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"        requireNonNull(index);","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"        requireNonNull(tags);","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"ivyy-poison"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"ivyy-poison"},"content":"        this.tagsToRemove \u003d new HashSet\u003c\u003e(tags);","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"ivyy-poison"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"ivyy-poison"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"ivyy-poison"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"ivyy-poison"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"ivyy-poison"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"ivyy-poison"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"ivyy-poison"},"content":"        if (!personToEdit.hasAllTags(tagsToRemove)) {","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"ivyy-poison"},"content":"            throw new CommandException(MESSAGE_MISSING_TAGS);","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"ivyy-poison"},"content":"        Person editedPerson \u003d new Person(personToEdit);","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"ivyy-poison"},"content":"        editedPerson.removeTags(tagsToRemove);","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"ivyy-poison"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"ivyy-poison"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"ivyy-poison"},"content":"        return new CommandResult(String.format(MESSAGE_REMOVE_TAG_SUCCESS, Messages.format(editedPerson)));","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":78,"author":{"gitId":"ivyy-poison"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"ivyy-poison"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"ivyy-poison"},"content":"            return true;","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":82,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":83,"author":{"gitId":"ivyy-poison"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-13"},{"lineNumber":84,"author":{"gitId":"ivyy-poison"},"content":"        if (!(other instanceof DeleteTagCommand)) {","lastModifiedDate":"2023-10-13"},{"lineNumber":85,"author":{"gitId":"ivyy-poison"},"content":"            return false;","lastModifiedDate":"2023-10-13"},{"lineNumber":86,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":87,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":88,"author":{"gitId":"ivyy-poison"},"content":"        DeleteTagCommand otherDeleteTagCommand \u003d (DeleteTagCommand) other;","lastModifiedDate":"2023-10-13"},{"lineNumber":89,"author":{"gitId":"ivyy-poison"},"content":"        return index.equals(otherDeleteTagCommand.index) \u0026\u0026 tagsToRemove.equals(otherDeleteTagCommand.tagsToRemove);","lastModifiedDate":"2023-10-13"},{"lineNumber":90,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":91,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":92,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":93,"author":{"gitId":"ivyy-poison"},"content":"    public String toString() {","lastModifiedDate":"2023-10-13"},{"lineNumber":94,"author":{"gitId":"ivyy-poison"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-13"},{"lineNumber":95,"author":{"gitId":"ivyy-poison"},"content":"                .add(\"index\", index)","lastModifiedDate":"2023-10-13"},{"lineNumber":96,"author":{"gitId":"ivyy-poison"},"content":"                .add(\"tagsToAdd\", tagsToRemove)","lastModifiedDate":"2023-10-13"},{"lineNumber":97,"author":{"gitId":"ivyy-poison"},"content":"                .toString();","lastModifiedDate":"2023-10-13"},{"lineNumber":98,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":99,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":100,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"jean-cq":3,"ivyy-poison":97}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ADDRESS;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_EMAIL;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_NAME;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_PHONE;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_TAG;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2023-07-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"jean-cq"},"content":" * Edits the details of an existing employee in the address book.","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the employee identified \"","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"jean-cq"},"content":"            + \"by the index number used in the displayed employee list. \"","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":42,"author":{"gitId":"jean-cq"},"content":"            + \"[\" + PREFIX_PERSON_NAME + \"NAME] \"","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"jean-cq"},"content":"            + \"[\" + PREFIX_PERSON_PHONE + \"PHONE] \"","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"jean-cq"},"content":"            + \"[\" + PREFIX_PERSON_EMAIL + \"EMAIL] \"","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"jean-cq"},"content":"            + \"[\" + PREFIX_PERSON_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"jean-cq"},"content":"            + \"[\" + PREFIX_PERSON_TAG + \"TAG]...\\n\"","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"jean-cq"},"content":"            + PREFIX_PERSON_PHONE + \"91234567 \"","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"jean-cq"},"content":"            + PREFIX_PERSON_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":51,"author":{"gitId":"jean-cq"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Employee: %1$s\";","lastModifiedDate":"2023-10-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":53,"author":{"gitId":"jean-cq"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This employee already exists in the address book.\";","lastModifiedDate":"2023-10-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson)));","lastModifiedDate":"2019-02-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);","lastModifiedDate":"2017-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        EditCommand otherEditCommand \u003d (EditCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return index.equals(otherEditCommand.index)","lastModifiedDate":"2023-07-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(otherEditCommand.editPersonDescriptor);","lastModifiedDate":"2023-07-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                .add(\"index\", index)","lastModifiedDate":"2019-02-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                .add(\"editPersonDescriptor\", editPersonDescriptor)","lastModifiedDate":"2019-02-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":145,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":146,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":147,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":157,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);","lastModifiedDate":"2018-08-14"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":196,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":197,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":198,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":204,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":205,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":206,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":207,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":215,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":220,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            EditPersonDescriptor otherEditPersonDescriptor \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            return Objects.equals(name, otherEditPersonDescriptor.name)","lastModifiedDate":"2023-07-13"},{"lineNumber":225,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(phone, otherEditPersonDescriptor.phone)","lastModifiedDate":"2023-07-13"},{"lineNumber":226,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(email, otherEditPersonDescriptor.email)","lastModifiedDate":"2023-07-13"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(address, otherEditPersonDescriptor.address)","lastModifiedDate":"2023-07-13"},{"lineNumber":228,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(tags, otherEditPersonDescriptor.tags);","lastModifiedDate":"2023-07-13"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"                    .add(\"name\", name)","lastModifiedDate":"2019-02-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"                    .add(\"phone\", phone)","lastModifiedDate":"2019-02-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                    .add(\"email\", email)","lastModifiedDate":"2019-02-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                    .add(\"address\", address)","lastModifiedDate":"2019-02-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                    .add(\"tags\", tags)","lastModifiedDate":"2019-02-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"                    .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2019-02-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":242,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"jean-cq":17,"-":225}},{"path":"src/main/java/seedu/address/logic/commands/EditLeaveCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ong-wei-hong"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"ong-wei-hong"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_DATE_END;","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_DATE_START;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_DESCRIPTION;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_STATUS;","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_TITLE;","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"ong-wei-hong"},"content":"import java.util.List;","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"ong-wei-hong"},"content":"import java.util.Objects;","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"ong-wei-hong"},"content":"import java.util.Optional;","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Date;","lastModifiedDate":"2023-11-07"},{"lineNumber":21,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Description;","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Range;","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Status;","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Title;","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.exceptions.DuplicateLeaveException;","lastModifiedDate":"2023-11-07"},{"lineNumber":27,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.exceptions.EndBeforeStartException;","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ong-wei-hong"},"content":"/**","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ong-wei-hong"},"content":" * Edits the details of an existing leave in the leave book.","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"ong-wei-hong"},"content":" */","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ong-wei-hong"},"content":"public class EditLeaveCommand extends Command {","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String COMMAND_WORD \u003d \"edit-leave\";","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the leave identified \"","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"ong-wei-hong"},"content":"            + \"by the index number used in the displayed leave list. \"","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"ong-wei-hong"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"ong-wei-hong"},"content":"            + \"Parameter: INDEX (must be a positive integer) \"","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"ong-wei-hong"},"content":"            + \"[\" + PREFIX_LEAVE_TITLE + \"TITLE] \"","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"ong-wei-hong"},"content":"            + \"[\" + PREFIX_LEAVE_DESCRIPTION + \"DESCRIPTION] \"","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"ong-wei-hong"},"content":"            + \"[\" + PREFIX_LEAVE_DATE_START + \"START] \"","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"ong-wei-hong"},"content":"            + \"[\" + PREFIX_LEAVE_DATE_END + \"END]\"","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"ong-wei-hong"},"content":"            + \"[\" + PREFIX_LEAVE_STATUS + \"STATUS]\\n\"","lastModifiedDate":"2023-11-02"},{"lineNumber":45,"author":{"gitId":"ong-wei-hong"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"ong-wei-hong"},"content":"            + PREFIX_LEAVE_TITLE + \"medical leave \"","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"ong-wei-hong"},"content":"            + PREFIX_LEAVE_DATE_START + \"2023-10-23\";","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String MESSAGE_EDIT_LEAVE_SUCCESS \u003d \"Edited Leave: %1$s\";","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String MESSAGE_DUPLICATED_LEAVE \u003d","lastModifiedDate":"2023-11-07"},{"lineNumber":54,"author":{"gitId":"ong-wei-hong"},"content":"        \"Leave entry with matching employee, start date and end already exists\";","lastModifiedDate":"2023-11-07"},{"lineNumber":55,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":56,"author":{"gitId":"ong-wei-hong"},"content":"    private final Index index;","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"ong-wei-hong"},"content":"    private final EditLeaveDescriptor editLeaveDescriptor;","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"ong-wei-hong"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"ong-wei-hong"},"content":"     * @param index of the leave in the filtered leave list to edit","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"ong-wei-hong"},"content":"     * @param editLeaveDescriptor details to edit the leave with","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"ong-wei-hong"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"ong-wei-hong"},"content":"    public EditLeaveCommand(Index index, EditLeaveDescriptor editLeaveDescriptor) {","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"ong-wei-hong"},"content":"        requireNonNull(index);","lastModifiedDate":"2023-11-02"},{"lineNumber":65,"author":{"gitId":"ong-wei-hong"},"content":"        requireNonNull(editLeaveDescriptor);","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"ong-wei-hong"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-11-02"},{"lineNumber":68,"author":{"gitId":"ong-wei-hong"},"content":"        this.editLeaveDescriptor \u003d editLeaveDescriptor;","lastModifiedDate":"2023-11-02"},{"lineNumber":69,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":70,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":71,"author":{"gitId":"ong-wei-hong"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":72,"author":{"gitId":"ong-wei-hong"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-11-02"},{"lineNumber":73,"author":{"gitId":"ong-wei-hong"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-11-02"},{"lineNumber":74,"author":{"gitId":"ong-wei-hong"},"content":"        List\u003cLeave\u003e lastShownList \u003d model.getFilteredLeaveList();","lastModifiedDate":"2023-11-02"},{"lineNumber":75,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":76,"author":{"gitId":"ong-wei-hong"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-11-02"},{"lineNumber":77,"author":{"gitId":"ong-wei-hong"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_LEAVE_INDEX);","lastModifiedDate":"2023-11-02"},{"lineNumber":78,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":79,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":80,"author":{"gitId":"ong-wei-hong"},"content":"        Leave leaveToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2023-11-02"},{"lineNumber":81,"author":{"gitId":"ong-wei-hong"},"content":"        try {","lastModifiedDate":"2023-11-02"},{"lineNumber":82,"author":{"gitId":"ong-wei-hong"},"content":"            Leave editedLeave \u003d createEditedLeave(leaveToEdit, editLeaveDescriptor);","lastModifiedDate":"2023-11-02"},{"lineNumber":83,"author":{"gitId":"ong-wei-hong"},"content":"            model.setLeave(leaveToEdit, editedLeave);","lastModifiedDate":"2023-11-02"},{"lineNumber":84,"author":{"gitId":"ong-wei-hong"},"content":"            return new CommandResult(String.format(MESSAGE_EDIT_LEAVE_SUCCESS, Messages.format(editedLeave)));","lastModifiedDate":"2023-11-02"},{"lineNumber":85,"author":{"gitId":"ong-wei-hong"},"content":"        } catch (EndBeforeStartException ebse) {","lastModifiedDate":"2023-11-07"},{"lineNumber":86,"author":{"gitId":"ong-wei-hong"},"content":"            throw new CommandException(Range.MESSAGE_INVALID_END_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":87,"author":{"gitId":"ong-wei-hong"},"content":"        } catch (DuplicateLeaveException dle) {","lastModifiedDate":"2023-11-07"},{"lineNumber":88,"author":{"gitId":"ong-wei-hong"},"content":"            throw new CommandException(MESSAGE_DUPLICATED_LEAVE);","lastModifiedDate":"2023-11-07"},{"lineNumber":89,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":90,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":91,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":92,"author":{"gitId":"ong-wei-hong"},"content":"    private static Leave createEditedLeave(Leave leaveToEdit, EditLeaveDescriptor editLeaveDescriptor)","lastModifiedDate":"2023-11-02"},{"lineNumber":93,"author":{"gitId":"ong-wei-hong"},"content":"            throws EndBeforeStartException {","lastModifiedDate":"2023-11-07"},{"lineNumber":94,"author":{"gitId":"ong-wei-hong"},"content":"        assert leaveToEdit !\u003d null;","lastModifiedDate":"2023-11-02"},{"lineNumber":95,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":96,"author":{"gitId":"ong-wei-hong"},"content":"        Title updatedTitle \u003d editLeaveDescriptor.getTitle().orElse(leaveToEdit.getTitle());","lastModifiedDate":"2023-11-02"},{"lineNumber":97,"author":{"gitId":"ong-wei-hong"},"content":"        Description updatedDescription \u003d editLeaveDescriptor.getDescription().orElse(leaveToEdit.getDescription());","lastModifiedDate":"2023-11-02"},{"lineNumber":98,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":99,"author":{"gitId":"ong-wei-hong"},"content":"        Date startDate \u003d editLeaveDescriptor.getStart().orElse(leaveToEdit.getStart());","lastModifiedDate":"2023-11-07"},{"lineNumber":100,"author":{"gitId":"ong-wei-hong"},"content":"        Date endDate \u003d editLeaveDescriptor.getEnd().orElse(leaveToEdit.getEnd());","lastModifiedDate":"2023-11-07"},{"lineNumber":101,"author":{"gitId":"ong-wei-hong"},"content":"        Range updatedRange \u003d Range.createNonNullRange(startDate, endDate);","lastModifiedDate":"2023-11-07"},{"lineNumber":102,"author":{"gitId":"ong-wei-hong"},"content":"        Status updatedStatus \u003d editLeaveDescriptor.getStatus().orElse(leaveToEdit.getStatus());","lastModifiedDate":"2023-11-02"},{"lineNumber":103,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":104,"author":{"gitId":"ong-wei-hong"},"content":"        return new Leave(leaveToEdit.getEmployee(), updatedTitle, updatedRange, updatedDescription, updatedStatus);","lastModifiedDate":"2023-11-02"},{"lineNumber":105,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":106,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":107,"author":{"gitId":"ong-wei-hong"},"content":"    @Override","lastModifiedDate":"2023-11-07"},{"lineNumber":108,"author":{"gitId":"ong-wei-hong"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-11-07"},{"lineNumber":109,"author":{"gitId":"ong-wei-hong"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-11-07"},{"lineNumber":110,"author":{"gitId":"ong-wei-hong"},"content":"            return true;","lastModifiedDate":"2023-11-07"},{"lineNumber":111,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-07"},{"lineNumber":112,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":113,"author":{"gitId":"ong-wei-hong"},"content":"        if (!(other instanceof EditLeaveCommand)) {","lastModifiedDate":"2023-11-07"},{"lineNumber":114,"author":{"gitId":"ong-wei-hong"},"content":"            return false;","lastModifiedDate":"2023-11-07"},{"lineNumber":115,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-07"},{"lineNumber":116,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":117,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveCommand otherEditLeaveCommand \u003d (EditLeaveCommand) other;","lastModifiedDate":"2023-11-07"},{"lineNumber":118,"author":{"gitId":"ong-wei-hong"},"content":"        return index.equals(otherEditLeaveCommand.index)","lastModifiedDate":"2023-11-07"},{"lineNumber":119,"author":{"gitId":"ong-wei-hong"},"content":"            \u0026\u0026 editLeaveDescriptor.equals(otherEditLeaveCommand.editLeaveDescriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":120,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":121,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":122,"author":{"gitId":"ong-wei-hong"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":123,"author":{"gitId":"ong-wei-hong"},"content":"     * Stores the deatils to edit the leave with. Each non-empty field value will replace the","lastModifiedDate":"2023-11-02"},{"lineNumber":124,"author":{"gitId":"ong-wei-hong"},"content":"     * corresponsing field value of the leave.","lastModifiedDate":"2023-11-02"},{"lineNumber":125,"author":{"gitId":"ong-wei-hong"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":126,"author":{"gitId":"ong-wei-hong"},"content":"    public static class EditLeaveDescriptor {","lastModifiedDate":"2023-11-02"},{"lineNumber":127,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":128,"author":{"gitId":"ong-wei-hong"},"content":"        private Title title;","lastModifiedDate":"2023-11-02"},{"lineNumber":129,"author":{"gitId":"ong-wei-hong"},"content":"        private Description description;","lastModifiedDate":"2023-11-02"},{"lineNumber":130,"author":{"gitId":"ong-wei-hong"},"content":"        private Date start;","lastModifiedDate":"2023-11-07"},{"lineNumber":131,"author":{"gitId":"ong-wei-hong"},"content":"        private Date end;","lastModifiedDate":"2023-11-07"},{"lineNumber":132,"author":{"gitId":"ong-wei-hong"},"content":"        private Status status;","lastModifiedDate":"2023-11-02"},{"lineNumber":133,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":134,"author":{"gitId":"ong-wei-hong"},"content":"        public EditLeaveDescriptor() {}","lastModifiedDate":"2023-11-02"},{"lineNumber":135,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":136,"author":{"gitId":"ong-wei-hong"},"content":"        /**","lastModifiedDate":"2023-11-02"},{"lineNumber":137,"author":{"gitId":"ong-wei-hong"},"content":"         * Copy constructor.","lastModifiedDate":"2023-11-02"},{"lineNumber":138,"author":{"gitId":"ong-wei-hong"},"content":"         */","lastModifiedDate":"2023-11-02"},{"lineNumber":139,"author":{"gitId":"ong-wei-hong"},"content":"        public EditLeaveDescriptor(EditLeaveDescriptor toCopy) {","lastModifiedDate":"2023-11-02"},{"lineNumber":140,"author":{"gitId":"ong-wei-hong"},"content":"            setTitle(toCopy.title);","lastModifiedDate":"2023-11-02"},{"lineNumber":141,"author":{"gitId":"ong-wei-hong"},"content":"            setDescription(toCopy.description);","lastModifiedDate":"2023-11-02"},{"lineNumber":142,"author":{"gitId":"ong-wei-hong"},"content":"            setStart(toCopy.start);","lastModifiedDate":"2023-11-10"},{"lineNumber":143,"author":{"gitId":"ong-wei-hong"},"content":"            setEnd(toCopy.end);","lastModifiedDate":"2023-11-10"},{"lineNumber":144,"author":{"gitId":"ong-wei-hong"},"content":"            setStatus(toCopy.status);","lastModifiedDate":"2023-11-10"},{"lineNumber":145,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":146,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":147,"author":{"gitId":"ong-wei-hong"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2023-11-02"},{"lineNumber":148,"author":{"gitId":"ong-wei-hong"},"content":"            return CollectionUtil.isAnyNonNull(title, description, start, end, status);","lastModifiedDate":"2023-11-02"},{"lineNumber":149,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":150,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":151,"author":{"gitId":"ong-wei-hong"},"content":"        public void setTitle(Title title) {","lastModifiedDate":"2023-11-02"},{"lineNumber":152,"author":{"gitId":"ong-wei-hong"},"content":"            this.title \u003d title;","lastModifiedDate":"2023-11-02"},{"lineNumber":153,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":154,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":155,"author":{"gitId":"ong-wei-hong"},"content":"        public Optional\u003cTitle\u003e getTitle() {","lastModifiedDate":"2023-11-02"},{"lineNumber":156,"author":{"gitId":"ong-wei-hong"},"content":"            return Optional.ofNullable(title);","lastModifiedDate":"2023-11-02"},{"lineNumber":157,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":158,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":159,"author":{"gitId":"ong-wei-hong"},"content":"        public void setDescription(Description description) {","lastModifiedDate":"2023-11-02"},{"lineNumber":160,"author":{"gitId":"ong-wei-hong"},"content":"            this.description \u003d description;","lastModifiedDate":"2023-11-02"},{"lineNumber":161,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":162,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":163,"author":{"gitId":"ong-wei-hong"},"content":"        public Optional\u003cDescription\u003e getDescription() {","lastModifiedDate":"2023-11-02"},{"lineNumber":164,"author":{"gitId":"ong-wei-hong"},"content":"            return Optional.ofNullable(description);","lastModifiedDate":"2023-11-02"},{"lineNumber":165,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":166,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":167,"author":{"gitId":"ong-wei-hong"},"content":"        public void setStart(Date start) {","lastModifiedDate":"2023-11-07"},{"lineNumber":168,"author":{"gitId":"ong-wei-hong"},"content":"            this.start \u003d start;","lastModifiedDate":"2023-11-02"},{"lineNumber":169,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":170,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":171,"author":{"gitId":"ong-wei-hong"},"content":"        public Optional\u003cDate\u003e getStart() {","lastModifiedDate":"2023-11-07"},{"lineNumber":172,"author":{"gitId":"ong-wei-hong"},"content":"            return Optional.ofNullable(start);","lastModifiedDate":"2023-11-02"},{"lineNumber":173,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":174,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":175,"author":{"gitId":"ong-wei-hong"},"content":"        public void setEnd(Date end) {","lastModifiedDate":"2023-11-07"},{"lineNumber":176,"author":{"gitId":"ong-wei-hong"},"content":"            this.end \u003d end;","lastModifiedDate":"2023-11-02"},{"lineNumber":177,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":178,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":179,"author":{"gitId":"ong-wei-hong"},"content":"        public Optional\u003cDate\u003e getEnd() {","lastModifiedDate":"2023-11-07"},{"lineNumber":180,"author":{"gitId":"ong-wei-hong"},"content":"            return Optional.ofNullable(end);","lastModifiedDate":"2023-11-02"},{"lineNumber":181,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":182,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":183,"author":{"gitId":"ong-wei-hong"},"content":"        public void setStatus(Status status) {","lastModifiedDate":"2023-11-02"},{"lineNumber":184,"author":{"gitId":"ong-wei-hong"},"content":"            this.status \u003d status;","lastModifiedDate":"2023-11-02"},{"lineNumber":185,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":186,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":187,"author":{"gitId":"ong-wei-hong"},"content":"        public Optional\u003cStatus\u003e getStatus() {","lastModifiedDate":"2023-11-02"},{"lineNumber":188,"author":{"gitId":"ong-wei-hong"},"content":"            return Optional.ofNullable(status);","lastModifiedDate":"2023-11-02"},{"lineNumber":189,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":190,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":191,"author":{"gitId":"ong-wei-hong"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":192,"author":{"gitId":"ong-wei-hong"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2023-11-02"},{"lineNumber":193,"author":{"gitId":"ong-wei-hong"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2023-11-02"},{"lineNumber":194,"author":{"gitId":"ong-wei-hong"},"content":"                return true;","lastModifiedDate":"2023-11-02"},{"lineNumber":195,"author":{"gitId":"ong-wei-hong"},"content":"            }","lastModifiedDate":"2023-11-02"},{"lineNumber":196,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":197,"author":{"gitId":"ong-wei-hong"},"content":"            if (!(other instanceof EditLeaveDescriptor)) {","lastModifiedDate":"2023-11-02"},{"lineNumber":198,"author":{"gitId":"ong-wei-hong"},"content":"                return false;","lastModifiedDate":"2023-11-02"},{"lineNumber":199,"author":{"gitId":"ong-wei-hong"},"content":"            }","lastModifiedDate":"2023-11-02"},{"lineNumber":200,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":201,"author":{"gitId":"ong-wei-hong"},"content":"            EditLeaveDescriptor otherEditLeaveDescriptor \u003d (EditLeaveDescriptor) other;","lastModifiedDate":"2023-11-02"},{"lineNumber":202,"author":{"gitId":"ong-wei-hong"},"content":"            return Objects.equals(title, otherEditLeaveDescriptor.title)","lastModifiedDate":"2023-11-02"},{"lineNumber":203,"author":{"gitId":"ong-wei-hong"},"content":"                \u0026\u0026 Objects.equals(description, otherEditLeaveDescriptor.description)","lastModifiedDate":"2023-11-02"},{"lineNumber":204,"author":{"gitId":"ong-wei-hong"},"content":"                \u0026\u0026 Objects.equals(start, otherEditLeaveDescriptor.start)","lastModifiedDate":"2023-11-02"},{"lineNumber":205,"author":{"gitId":"ong-wei-hong"},"content":"                \u0026\u0026 Objects.equals(end, otherEditLeaveDescriptor.end)","lastModifiedDate":"2023-11-07"},{"lineNumber":206,"author":{"gitId":"ong-wei-hong"},"content":"                \u0026\u0026 Objects.equals(status, otherEditLeaveDescriptor.status);","lastModifiedDate":"2023-11-07"},{"lineNumber":207,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":208,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":209,"author":{"gitId":"ong-wei-hong"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":210,"author":{"gitId":"ong-wei-hong"},"content":"        public String toString() {","lastModifiedDate":"2023-11-02"},{"lineNumber":211,"author":{"gitId":"ong-wei-hong"},"content":"            return new ToStringBuilder(this)","lastModifiedDate":"2023-11-02"},{"lineNumber":212,"author":{"gitId":"ong-wei-hong"},"content":"                    .add(\"title\", title)","lastModifiedDate":"2023-11-02"},{"lineNumber":213,"author":{"gitId":"ong-wei-hong"},"content":"                    .add(\"description\", description)","lastModifiedDate":"2023-11-02"},{"lineNumber":214,"author":{"gitId":"ong-wei-hong"},"content":"                    .add(\"start\", start)","lastModifiedDate":"2023-11-02"},{"lineNumber":215,"author":{"gitId":"ong-wei-hong"},"content":"                    .add(\"end\", end)","lastModifiedDate":"2023-11-02"},{"lineNumber":216,"author":{"gitId":"ong-wei-hong"},"content":"                    .add(\"status\", status)","lastModifiedDate":"2023-11-07"},{"lineNumber":217,"author":{"gitId":"ong-wei-hong"},"content":"                    .toString();","lastModifiedDate":"2023-11-02"},{"lineNumber":218,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":219,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":220,"author":{"gitId":"ong-wei-hong"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"ong-wei-hong":220}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting HR Mate as requested ...\";","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"jean-cq":1,"-":18}},{"path":"src/main/java/seedu/address/logic/commands/ExportCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":" * Base ExportCommand class that contains fields shared by commands that export files,","lastModifiedDate":"2023-11-03"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":" * such as file paths, destination paths, and messages","lastModifiedDate":"2023-11-03"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"public abstract class ExportCommand extends Command {","lastModifiedDate":"2023-11-03"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"    public static final String EXPORT_DEST \u003d \"export\";","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"    public static final String MESSAGE_USAGE \u003d \"%s: Exports %s records to CSV file. \"","lastModifiedDate":"2023-11-03"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"            + \"Parameters: \"","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"            + \"FILENAME\";","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"%s records have been saved to %s!\";","lastModifiedDate":"2023-11-03"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"    public static final String MESSAGE_FAILED \u003d \"%s records could not be saved!\";","lastModifiedDate":"2023-11-03"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"    public final Path filePath;","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"     * Creates an ExportCommand to export records to the specified file name","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"     * @param filePath Path to save file to","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"    public ExportCommand(Path filePath) {","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"ryanozx":29}},{"path":"src/main/java/seedu/address/logic/commands/ExportContactCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-03"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-03"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import java.io.IOException;","lastModifiedDate":"2023-11-03"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-11-03"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-11-03"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-03"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.ReadOnlyFilteredAddressBook;","lastModifiedDate":"2023-11-03"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import seedu.address.storage.CsvAddressBookStorage;","lastModifiedDate":"2023-11-03"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-11-03"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":" * Exports AddressBook to a CSV file","lastModifiedDate":"2023-11-03"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-11-03"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"public class ExportContactCommand extends ExportCommand {","lastModifiedDate":"2023-11-03"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"    public static final String COMMAND_WORD \u003d \"export\";","lastModifiedDate":"2023-11-03"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"    public static final String MESSAGE_USAGE \u003d String.format(ExportCommand.MESSAGE_USAGE, COMMAND_WORD, \"employee\");","lastModifiedDate":"2023-11-03"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"    public static final String MESSAGE_FAILED \u003d String.format(ExportCommand.MESSAGE_FAILED, \"Employee\");","lastModifiedDate":"2023-11-03"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-03"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"     * Creates an ExportContactCommand to export records to the specified file name","lastModifiedDate":"2023-11-03"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"     * @param filePath Path to save file to","lastModifiedDate":"2023-11-03"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-03"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"    public ExportContactCommand(Path filePath) {","lastModifiedDate":"2023-11-03"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"        super(filePath);","lastModifiedDate":"2023-11-03"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-03"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-03"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-11-03"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-11-03"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"        try {","lastModifiedDate":"2023-11-03"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"            ReadOnlyFilteredAddressBook filteredAddressBook \u003d new ReadOnlyFilteredAddressBook(model);","lastModifiedDate":"2023-11-03"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"            CsvAddressBookStorage abStorage \u003d new CsvAddressBookStorage(filePath);","lastModifiedDate":"2023-11-03"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"            abStorage.saveAddressBook(filteredAddressBook);","lastModifiedDate":"2023-11-03"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-11-03"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"            throw new CommandException(MESSAGE_FAILED);","lastModifiedDate":"2023-11-03"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-03"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, \"Employee\", filePath));","lastModifiedDate":"2023-11-03"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-03"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-03"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-11-03"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-11-03"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"            return true;","lastModifiedDate":"2023-11-03"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-03"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-11-03"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"        if (!(other instanceof ExportContactCommand)) {","lastModifiedDate":"2023-11-03"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"            return false;","lastModifiedDate":"2023-11-03"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-03"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"        ExportContactCommand otherExportContactCommand \u003d (ExportContactCommand) other;","lastModifiedDate":"2023-11-03"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"        return filePath.equals(otherExportContactCommand.filePath);","lastModifiedDate":"2023-11-03"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-03"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-03"}],"authorContributionMap":{"ryanozx":58}},{"path":"src/main/java/seedu/address/logic/commands/ExportLeaveCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-03"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-03"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import java.io.IOException;","lastModifiedDate":"2023-11-03"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-11-03"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-11-03"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-03"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.ReadOnlyFilteredLeavesBook;","lastModifiedDate":"2023-11-03"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import seedu.address.storage.CsvLeavesBookStorage;","lastModifiedDate":"2023-11-03"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-11-03"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":" * Exports LeavesBook to a CSV file","lastModifiedDate":"2023-11-03"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-11-03"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"public class ExportLeaveCommand extends ExportCommand {","lastModifiedDate":"2023-11-03"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"    public static final String COMMAND_WORD \u003d \"export-leave\";","lastModifiedDate":"2023-11-03"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"    public static final String MESSAGE_USAGE \u003d String.format(ExportCommand.MESSAGE_USAGE, COMMAND_WORD, \"leaves\");","lastModifiedDate":"2023-11-03"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"    public static final String MESSAGE_FAILED \u003d String.format(ExportCommand.MESSAGE_FAILED, \"Leaves\");","lastModifiedDate":"2023-11-03"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-03"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"     * Creates an ExportLeaveCommand to export records to the specified file name","lastModifiedDate":"2023-11-03"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"     * @param filePath Path to save file to","lastModifiedDate":"2023-11-03"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-03"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"    public ExportLeaveCommand(Path filePath) {","lastModifiedDate":"2023-11-03"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"        super(filePath);","lastModifiedDate":"2023-11-03"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-03"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-03"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-11-03"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-11-03"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"        try {","lastModifiedDate":"2023-11-03"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"            ReadOnlyFilteredLeavesBook filteredLeavesBook \u003d new ReadOnlyFilteredLeavesBook(model);","lastModifiedDate":"2023-11-03"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"            CsvLeavesBookStorage lvStorage \u003d new CsvLeavesBookStorage(filePath);","lastModifiedDate":"2023-11-03"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"            lvStorage.saveLeavesBook(filteredLeavesBook);","lastModifiedDate":"2023-11-03"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-11-03"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"            throw new CommandException(MESSAGE_FAILED);","lastModifiedDate":"2023-11-03"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-03"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, \"Leaves\", filePath));","lastModifiedDate":"2023-11-03"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-03"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-03"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-11-03"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-11-03"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"            return true;","lastModifiedDate":"2023-11-03"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-03"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-11-03"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"        if (!(other instanceof ExportLeaveCommand)) {","lastModifiedDate":"2023-11-03"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"            return false;","lastModifiedDate":"2023-11-03"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-03"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"        ExportLeaveCommand otherExportLeaveCommand \u003d (ExportLeaveCommand) other;","lastModifiedDate":"2023-11-03"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"        return filePath.equals(otherExportLeaveCommand.filePath);","lastModifiedDate":"2023-11-03"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-03"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-03"}],"authorContributionMap":{"ryanozx":59}},{"path":"src/main/java/seedu/address/logic/commands/FindAllLeaveCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"InfiBeyond"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"InfiBeyond"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_LEAVES;","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"InfiBeyond"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"InfiBeyond"},"content":"/**","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"InfiBeyond"},"content":" * Find all leaves in the leave list.","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"InfiBeyond"},"content":" */","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"InfiBeyond"},"content":"public class FindAllLeaveCommand extends Command {","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"InfiBeyond"},"content":"    public static final String COMMAND_WORD \u003d \"find-all-leave\";","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": View all leaves available in the leave list.\\n\";","lastModifiedDate":"2023-11-03"},{"lineNumber":18,"author":{"gitId":"InfiBeyond"},"content":"    public static final String MESSAGE_FIND_LEAVE_NONE \u003d \"There are currently no leave requests.\";","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"    public static final String MESSAGE_LEAVE_COUNT \u003d \"Current # of Leave Request(s): %d\";","lastModifiedDate":"2023-11-03"},{"lineNumber":20,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"InfiBeyond"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"InfiBeyond"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"InfiBeyond"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"InfiBeyond"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"InfiBeyond"},"content":"        model.updateFilteredLeaveList(PREDICATE_SHOW_ALL_LEAVES);","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"InfiBeyond"},"content":"        int leaveSize \u003d model.getFilteredLeaveList().size();","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"InfiBeyond"},"content":"        logger.info(\"\"); //dummy logger","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"InfiBeyond"},"content":"        if (leaveSize \u003d\u003d 0) {","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"InfiBeyond"},"content":"            return new CommandResult(MESSAGE_FIND_LEAVE_NONE);","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"InfiBeyond"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"        return new CommandResult(String.format(MESSAGE_LEAVE_COUNT, leaveSize));","lastModifiedDate":"2023-11-03"},{"lineNumber":36,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"InfiBeyond"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"InfiBeyond"},"content":"    public String toString() {","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"InfiBeyond"},"content":"        return new ToStringBuilder(this).toString();","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"InfiBeyond"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"ryanozx":3,"InfiBeyond":39}},{"path":"src/main/java/seedu/address/logic/commands/FindAllTagCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-14"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_TAG;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-27"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-10-27"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.person.TagsContainAllTagsPredicate;","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"/**","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":" * Find Persons with the exact tags","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":" */","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"public class FindAllTagCommand extends Command {","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":"    public static final String COMMAND_WORD \u003d \"find-all-tag\";","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all employees whose tags match all \"","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"            + \"the specified tags exactly (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":"            + \"Parameters: \"","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":"            + \"[\" + PREFIX_PERSON_TAG + \"TAG]...\\n\"","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"jean-cq"},"content":"            + PREFIX_PERSON_TAG + \"full time\"","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"jean-cq"},"content":"            + PREFIX_PERSON_TAG + \"remote\";","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"jean-cq"},"content":"    private final TagsContainAllTagsPredicate predicate;","lastModifiedDate":"2023-10-14"},{"lineNumber":33,"author":{"gitId":"jean-cq"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2023-10-27"},{"lineNumber":34,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"jean-cq"},"content":"     * @param predicate tags to match with employees","lastModifiedDate":"2023-10-14"},{"lineNumber":37,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"    public FindAllTagCommand(TagsContainAllTagsPredicate predicate) {","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"jean-cq"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"jean-cq"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"jean-cq"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"jean-cq"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"jean-cq"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2023-10-14"},{"lineNumber":48,"author":{"gitId":"jean-cq"},"content":"        logger.info(\"predicate: \" + this.predicate); //dummy logger","lastModifiedDate":"2023-10-27"},{"lineNumber":49,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":50,"author":{"gitId":"jean-cq"},"content":"        return new CommandResult(","lastModifiedDate":"2023-10-14"},{"lineNumber":51,"author":{"gitId":"jean-cq"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2023-10-14"},{"lineNumber":52,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":53,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":54,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":55,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"jean-cq"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"jean-cq"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"jean-cq"},"content":"            return true;","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":60,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":61,"author":{"gitId":"jean-cq"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-14"},{"lineNumber":62,"author":{"gitId":"jean-cq"},"content":"        if (!(other instanceof FindAllTagCommand)) {","lastModifiedDate":"2023-10-14"},{"lineNumber":63,"author":{"gitId":"jean-cq"},"content":"            return false;","lastModifiedDate":"2023-10-14"},{"lineNumber":64,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":65,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":66,"author":{"gitId":"jean-cq"},"content":"        FindAllTagCommand otherFindAllTagCommand \u003d (FindAllTagCommand) other;","lastModifiedDate":"2023-10-14"},{"lineNumber":67,"author":{"gitId":"jean-cq"},"content":"        return predicate.equals(otherFindAllTagCommand.predicate);","lastModifiedDate":"2023-10-14"},{"lineNumber":68,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":69,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":70,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-14"},{"lineNumber":71,"author":{"gitId":"jean-cq"},"content":"    public String toString() {","lastModifiedDate":"2023-10-14"},{"lineNumber":72,"author":{"gitId":"jean-cq"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-14"},{"lineNumber":73,"author":{"gitId":"jean-cq"},"content":"                .add(\"predicate\", predicate)","lastModifiedDate":"2023-10-14"},{"lineNumber":74,"author":{"gitId":"jean-cq"},"content":"                .toString();","lastModifiedDate":"2023-10-14"},{"lineNumber":75,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":76,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":77,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-10-14"}],"authorContributionMap":{"jean-cq":77}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords.","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":" * Keyword matching is case-insensitive.","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all employees whose names contain any of \"","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2018-04-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (!(other instanceof FindCommand)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        FindCommand otherFindCommand \u003d (FindCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return predicate.equals(otherFindCommand.predicate);","lastModifiedDate":"2023-07-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                .add(\"predicate\", predicate)","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"jean-cq":2,"-":56}},{"path":"src/main/java/seedu/address/logic/commands/FindLeaveByPeriodCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.Messages.MESSAGE_LEAVES_LISTED_OVERVIEW;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_DATE_END;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_DATE_START;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.LeaveInPeriodPredicate;","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":" * Returns a list of leaves that coincide with one or more days of a given period.","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"public class FindLeaveByPeriodCommand extends Command {","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"    public static final String COMMAND_WORD \u003d \"find-leave-range\";","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"    public static final String MESSAGE_USAGE \u003d \"Finds all leaves that happen within the queried range.\"","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"            + \"The start and end dates are optional - if none are supplied, all leaves are returned.\"","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"            + \"If only one of them is supplied, all leaves that end on and after the queried start date are\"","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"            + \" returned (if the start date is supplied) or all leaves that start before and on the queried\"","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"            + \" end date are returned (if the end date is supplied).\\n\"","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"            + \"Parameters: \"","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"            + \"[\" + PREFIX_LEAVE_DATE_START + \"START_DATE] \"","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"            + \"[\" + PREFIX_LEAVE_DATE_END + \"END_DATE]\\n\"","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"            + PREFIX_LEAVE_DATE_START + \"2023-10-30\" + \" \"","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"            + PREFIX_LEAVE_DATE_END + \"2023-10-31\";","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"    private final LeaveInPeriodPredicate predicate;","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"     * Constructs a FindLeaveByPeriodCommand for query for all leaves that occur in a given period","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"     * @param predicate Predicate containing period that leaves should coincide with","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"    public FindLeaveByPeriodCommand(LeaveInPeriodPredicate predicate) {","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"        model.updateFilteredLeaveList(predicate);","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"        return new CommandResult(","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"                String.format(MESSAGE_LEAVES_LISTED_OVERVIEW, model.getFilteredLeaveList().size())","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"        );","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"        if (this \u003d\u003d other) {","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"            return true;","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"        if (!(other instanceof FindLeaveByPeriodCommand)) {","lastModifiedDate":"2023-11-01"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"            return false;","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"        FindLeaveByPeriodCommand otherCommand \u003d (FindLeaveByPeriodCommand) other;","lastModifiedDate":"2023-11-01"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"        return this.predicate.equals(otherCommand.predicate);","lastModifiedDate":"2023-11-01"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"    public String toString() {","lastModifiedDate":"2023-11-02"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"                .add(\"predicate\", predicate)","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"                .toString();","lastModifiedDate":"2023-11-02"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"ryanozx":69}},{"path":"src/main/java/seedu/address/logic/commands/FindLeaveByStatusCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.Messages.MESSAGE_LEAVES_LISTED_OVERVIEW;","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.LeaveHasStatusPredicate;","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":" * Returns a list of leaves that have a particular status","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"public class FindLeaveByStatusCommand extends Command {","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"    public static final String COMMAND_WORD \u003d \"find-leave-status\";","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"    public static final String MESSAGE_USAGE \u003d \"Finds all leaves that contain the given status.\"","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"            + \"Parameters: STATUS\"","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"            + \"APPROVED\";","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"    public static final String MESSAGE_FAILED \u003d \"Command should only contain one of the following words: \"","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"            + \"APPROVED / PENDING / REJECTED\";","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"    private final LeaveHasStatusPredicate predicate;","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"     * Constructs a FindLeaveByStatusCommand object","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"     * @param predicate Predicate containing status that leaves should have","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"    public FindLeaveByStatusCommand(LeaveHasStatusPredicate predicate) {","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"        model.updateFilteredLeaveList(predicate);","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        return new CommandResult(","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"                String.format(MESSAGE_LEAVES_LISTED_OVERVIEW, model.getFilteredLeaveList().size()));","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"        if (this \u003d\u003d other) {","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"            return true;","lastModifiedDate":"2023-11-02"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"        if (!(other instanceof FindLeaveByStatusCommand)) {","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"            return false;","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"        FindLeaveByStatusCommand otherCommand \u003d (FindLeaveByStatusCommand) other;","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"        return this.predicate.equals(otherCommand.predicate);","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"    public String toString() {","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"                .add(\"predicate\", predicate)","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"                .toString();","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"ryanozx":60}},{"path":"src/main/java/seedu/address/logic/commands/FindLeaveCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"InfiBeyond"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"InfiBeyond"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"InfiBeyond"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"InfiBeyond"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.leave.LeaveContainsPersonPredicate;","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"InfiBeyond"},"content":"/**","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"InfiBeyond"},"content":" * Find Leaves with the exact employee of the given index","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"InfiBeyond"},"content":" */","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"InfiBeyond"},"content":"public class FindLeaveCommand extends Command {","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"InfiBeyond"},"content":"    public static final String COMMAND_WORD \u003d \"find-leave\";","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"InfiBeyond"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all leaves whose employee matches \"","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"InfiBeyond"},"content":"            + \"the given index of the employee and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"InfiBeyond"},"content":"            + \"Parameters: INDEX (must be a positive integer within in the range of the Employee List)\\n\"","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"InfiBeyond"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"InfiBeyond"},"content":"            + \"1\";","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"InfiBeyond"},"content":"    private final Index index;","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"InfiBeyond"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"InfiBeyond"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"InfiBeyond"},"content":"     * @param index the corresponding employee of the index to match with employees","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"InfiBeyond"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"InfiBeyond"},"content":"    public FindLeaveCommand(Index index) {","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"InfiBeyond"},"content":"        requireNonNull(index);","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"InfiBeyond"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"InfiBeyond"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"InfiBeyond"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"InfiBeyond"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"        ObservableList\u003cPerson\u003e lastShownPersonList \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-11-03"},{"lineNumber":44,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownPersonList.size()) {","lastModifiedDate":"2023-11-03"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-11-03"},{"lineNumber":47,"author":{"gitId":"InfiBeyond"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"        Person employee \u003d lastShownPersonList.get(index.getZeroBased());","lastModifiedDate":"2023-11-03"},{"lineNumber":50,"author":{"gitId":"InfiBeyond"},"content":"        LeaveContainsPersonPredicate predicate \u003d new LeaveContainsPersonPredicate(employee);","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"InfiBeyond"},"content":"        model.updateFilteredLeaveList(predicate);","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"InfiBeyond"},"content":"        logger.info(\"predicate: \" + predicate); //dummy logger","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"InfiBeyond"},"content":"        return new CommandResult(","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"InfiBeyond"},"content":"                String.format(Messages.MESSAGE_LEAVES_LISTED_OVERVIEW, model.getFilteredLeaveList().size()));","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"InfiBeyond"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"InfiBeyond"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"InfiBeyond"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"InfiBeyond"},"content":"            return true;","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"InfiBeyond"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":65,"author":{"gitId":"InfiBeyond"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"InfiBeyond"},"content":"        if (!(other instanceof FindLeaveCommand)) {","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"InfiBeyond"},"content":"            return false;","lastModifiedDate":"2023-11-02"},{"lineNumber":68,"author":{"gitId":"InfiBeyond"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":69,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":70,"author":{"gitId":"InfiBeyond"},"content":"        FindLeaveCommand otherFindLeaveCommand \u003d (FindLeaveCommand) other;","lastModifiedDate":"2023-11-02"},{"lineNumber":71,"author":{"gitId":"InfiBeyond"},"content":"        return index.equals(otherFindLeaveCommand.index);","lastModifiedDate":"2023-11-02"},{"lineNumber":72,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":73,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":74,"author":{"gitId":"InfiBeyond"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":75,"author":{"gitId":"InfiBeyond"},"content":"    public String toString() {","lastModifiedDate":"2023-11-02"},{"lineNumber":76,"author":{"gitId":"InfiBeyond"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-11-02"},{"lineNumber":77,"author":{"gitId":"InfiBeyond"},"content":"                .add(\"index\", index)","lastModifiedDate":"2023-11-02"},{"lineNumber":78,"author":{"gitId":"InfiBeyond"},"content":"                .toString();","lastModifiedDate":"2023-11-02"},{"lineNumber":79,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":80,"author":{"gitId":"InfiBeyond"},"content":"}","lastModifiedDate":"2023-11-02"},{"lineNumber":81,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"ryanozx":4,"InfiBeyond":77}},{"path":"src/main/java/seedu/address/logic/commands/FindSomeTagCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_TAG;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.person.TagsContainSomeTagsPredicate;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":" * Find Persons with some specified tags","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"public class FindSomeTagCommand extends Command {","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"    public static final String COMMAND_WORD \u003d \"find-some-tag\";","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all employees whose tags match some \"","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"            + \"specified tags (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"            + \"Parameters: \"","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":"            + \"[\" + PREFIX_PERSON_TAG + \"TAG]...\\n\"","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"            + PREFIX_PERSON_TAG + \"full time\"","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"            + PREFIX_PERSON_TAG + \"remote\";","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":"    private final TagsContainSomeTagsPredicate predicate;","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"jean-cq"},"content":"     * @param predicate tags to match with employees","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"jean-cq"},"content":"    public FindSomeTagCommand(TagsContainSomeTagsPredicate predicate) {","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"jean-cq"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"jean-cq"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"jean-cq"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"jean-cq"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"jean-cq"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"jean-cq"},"content":"        return new CommandResult(","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"jean-cq"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"jean-cq"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"jean-cq"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"jean-cq"},"content":"            return true;","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"jean-cq"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"jean-cq"},"content":"        if (!(other instanceof FindSomeTagCommand)) {","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"jean-cq"},"content":"            return false;","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"jean-cq"},"content":"        FindSomeTagCommand otherFindSomeTagCommand \u003d (FindSomeTagCommand) other;","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"jean-cq"},"content":"        return predicate.equals(otherFindSomeTagCommand.predicate);","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"jean-cq"},"content":"    public String toString() {","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"jean-cq"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"jean-cq"},"content":"                .add(\"predicate\", predicate)","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"jean-cq"},"content":"                .toString();","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"jean-cq":70}},{"path":"src/main/java/seedu/address/logic/commands/ImportContactCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_LEAVES;","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import java.io.File;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.controllers.FileDialogHandler;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.controllers.FileDialogHandlerImpl;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"import seedu.address.storage.CsvAddressBookStorage;","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":" * Imports records from file","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"public class ImportContactCommand extends Command {","lastModifiedDate":"2023-11-03"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"    public static final String COMMAND_WORD \u003d \"import\";","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Employee records have been imported from %s!\";","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"    public static final String MESSAGE_NO_FILE_SELECTED \u003d \"Employee records were not imported.\";","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"    public static final String MESSAGE_FAILED \u003d \"Records in file %s could not be imported, \"","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"            + \"import cancelled.\";","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"    public static final String MESSAGE_EMPTY_ADDRESS_BOOK \u003d \"No valid records found in file %s, \"","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"            + \"import cancelled.\";","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"    private final FileDialogHandler fileHandler;","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"     * Constructs a default ImportCommand that triggers a file dialog","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"    public ImportContactCommand() {","lastModifiedDate":"2023-11-03"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"        fileHandler \u003d new FileDialogHandlerImpl();","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"     * Constructs an ImportCommand that uses the specified fileHandler. This constructor is primarily used to construct","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"     * ImportCommands that use mock FileDialogHandlers.","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"     * @param fileHandler FileDialogHandler to invoke when executing the command.","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"    public ImportContactCommand(FileDialogHandler fileHandler) {","lastModifiedDate":"2023-11-03"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"        this.fileHandler \u003d fileHandler;","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"        Optional\u003cFile\u003e importedFile \u003d fileHandler.openFile(\"Open Record File\",","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"                FileDialogHandlerImpl.CSV_EXTENSION);","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"        if (importedFile.isPresent()) {","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"            String filename \u003d importedFile.get().getName();","lastModifiedDate":"2023-10-20"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"            CsvAddressBookStorage tempAddressBook \u003d new CsvAddressBookStorage(importedFile.get().toPath());","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"            try {","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"                ReadOnlyAddressBook newAddressBook \u003d tempAddressBook.readAddressBook()","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"                        .orElseThrow(() -\u003e new CommandException(","lastModifiedDate":"2023-10-20"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"                                String.format(MESSAGE_EMPTY_ADDRESS_BOOK, filename)));","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"                model.setAddressBook(newAddressBook);","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"                model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"ong-wei-hong"},"content":"                model.updateFilteredLeaveList(PREDICATE_SHOW_ALL_LEAVES);","lastModifiedDate":"2023-11-02"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"                return new CommandResult(String.format(MESSAGE_SUCCESS, filename));","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"            } catch (DataLoadingException e) {","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"                throw new CommandException(String.format(MESSAGE_FAILED, filename));","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"        return new CommandResult(MESSAGE_NO_FILE_SELECTED);","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":78,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"ryanozx":76,"ong-wei-hong":2}},{"path":"src/main/java/seedu/address/logic/commands/ImportLeaveCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_LEAVES;","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import java.io.File;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.controllers.FileDialogHandler;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.controllers.FileDialogHandlerImpl;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-11-03"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.ReadOnlyLeavesBook;","lastModifiedDate":"2023-11-03"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"import seedu.address.storage.CsvLeavesBookStorage;","lastModifiedDate":"2023-11-03"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":" * Imports Leaves from file","lastModifiedDate":"2023-11-03"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"public class ImportLeaveCommand extends Command {","lastModifiedDate":"2023-11-03"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    public static final String COMMAND_WORD \u003d \"import-leave\";","lastModifiedDate":"2023-11-03"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Leave records have been imported from %s!\";","lastModifiedDate":"2023-11-03"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"    public static final String MESSAGE_NO_FILE_SELECTED \u003d \"Leave records were not imported.\";","lastModifiedDate":"2023-11-03"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"    public static final String MESSAGE_FAILED \u003d \"Records in file %s could not be imported, \"","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"            + \"import cancelled.\";","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"    public static final String MESSAGE_EMPTY_LEAVES_BOOK \u003d \"No valid records found in file %s, \"","lastModifiedDate":"2023-11-03"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"            + \"import cancelled.\";","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"    private final FileDialogHandler fileHandler;","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"     * Constructs a default ImportLeaveCommand that triggers a file dialog","lastModifiedDate":"2023-11-03"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"    public ImportLeaveCommand() {","lastModifiedDate":"2023-11-03"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"        fileHandler \u003d new FileDialogHandlerImpl();","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"     * Constructs an ImportLeaveCommand that uses the specified fileHandler. This constructor is primarily used to","lastModifiedDate":"2023-11-03"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"     * construct ImportLeaveCommands that use mock FileDialogHandlers.","lastModifiedDate":"2023-11-03"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"     * @param fileHandler FileDialogHandler to invoke when executing the command.","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"    public ImportLeaveCommand(FileDialogHandler fileHandler) {","lastModifiedDate":"2023-11-03"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"        this.fileHandler \u003d fileHandler;","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"        Optional\u003cFile\u003e importedFile \u003d fileHandler.openFile(\"Open Leaves File\",","lastModifiedDate":"2023-11-03"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"                FileDialogHandlerImpl.CSV_EXTENSION);","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"        if (importedFile.isPresent()) {","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"            String filename \u003d importedFile.get().getName();","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"            CsvLeavesBookStorage tempLeavesBook \u003d new CsvLeavesBookStorage(importedFile.get().toPath());","lastModifiedDate":"2023-11-03"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"            try {","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"                ReadOnlyLeavesBook newLeavesBook \u003d tempLeavesBook.readLeavesBook((AddressBook) model.getAddressBook())","lastModifiedDate":"2023-11-03"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"                        .orElseThrow(() -\u003e new CommandException(","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"                                String.format(MESSAGE_EMPTY_LEAVES_BOOK, filename)));","lastModifiedDate":"2023-11-03"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"                model.setLeavesBook(newLeavesBook);","lastModifiedDate":"2023-11-03"},{"lineNumber":68,"author":{"gitId":"ong-wei-hong"},"content":"                model.updateFilteredLeaveList(PREDICATE_SHOW_ALL_LEAVES);","lastModifiedDate":"2023-11-02"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"                return new CommandResult(String.format(MESSAGE_SUCCESS, filename));","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"            } catch (DataLoadingException e) {","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"                throw new CommandException(String.format(MESSAGE_FAILED, filename));","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"        return new CommandResult(MESSAGE_NO_FILE_SELECTED);","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"ryanozx":74,"ong-wei-hong":2}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":" * Lists all employees in the address book to the user.","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all employees\";","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"jean-cq":2,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/RejectLeaveCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"InfiBeyond"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-31"},{"lineNumber":2,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":3,"author":{"gitId":"InfiBeyond"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-31"},{"lineNumber":4,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":5,"author":{"gitId":"InfiBeyond"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-31"},{"lineNumber":6,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-31"},{"lineNumber":8,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-31"},{"lineNumber":9,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-31"},{"lineNumber":10,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-31"},{"lineNumber":11,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.leave.Date;","lastModifiedDate":"2023-10-31"},{"lineNumber":12,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.leave.Description;","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-10-31"},{"lineNumber":14,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.leave.Range;","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.leave.Status;","lastModifiedDate":"2023-10-31"},{"lineNumber":16,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.leave.Title;","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.person.ComparablePerson;","lastModifiedDate":"2023-10-31"},{"lineNumber":18,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":19,"author":{"gitId":"InfiBeyond"},"content":"/**","lastModifiedDate":"2023-10-31"},{"lineNumber":20,"author":{"gitId":"InfiBeyond"},"content":" * Rejects an existing leave in the leave book.","lastModifiedDate":"2023-10-31"},{"lineNumber":21,"author":{"gitId":"InfiBeyond"},"content":" */","lastModifiedDate":"2023-10-31"},{"lineNumber":22,"author":{"gitId":"InfiBeyond"},"content":"public class RejectLeaveCommand extends Command {","lastModifiedDate":"2023-10-31"},{"lineNumber":23,"author":{"gitId":"InfiBeyond"},"content":"    public static final String COMMAND_WORD \u003d \"reject-leave\";","lastModifiedDate":"2023-10-31"},{"lineNumber":24,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":25,"author":{"gitId":"InfiBeyond"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Reject leave request identified \"","lastModifiedDate":"2023-10-31"},{"lineNumber":26,"author":{"gitId":"InfiBeyond"},"content":"            + \"by the index number used in the leave book. \"","lastModifiedDate":"2023-10-31"},{"lineNumber":27,"author":{"gitId":"InfiBeyond"},"content":"            + \"The specified leave request will be rejected.\\n\"","lastModifiedDate":"2023-10-31"},{"lineNumber":28,"author":{"gitId":"InfiBeyond"},"content":"            + \"Parameters: INDEX (must be a positive integer within in the range of the Leave List)\\n) \"","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"InfiBeyond"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \";","lastModifiedDate":"2023-10-31"},{"lineNumber":30,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":31,"author":{"gitId":"InfiBeyond"},"content":"    public static final String MESSAGE_REJECT_LEAVE_SUCCESS \u003d \"Rejected Leave: %1$s\";","lastModifiedDate":"2023-10-31"},{"lineNumber":32,"author":{"gitId":"InfiBeyond"},"content":"    public static final String MESSAGE_DUPLICATE_LEAVE_REJECT \u003d \"Leave previously rejected: %1$s\";","lastModifiedDate":"2023-10-31"},{"lineNumber":33,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":34,"author":{"gitId":"InfiBeyond"},"content":"    private final Index index;","lastModifiedDate":"2023-10-31"},{"lineNumber":35,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":36,"author":{"gitId":"InfiBeyond"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":37,"author":{"gitId":"InfiBeyond"},"content":"     * @param index of the leave in the leave book to reject","lastModifiedDate":"2023-10-31"},{"lineNumber":38,"author":{"gitId":"InfiBeyond"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":39,"author":{"gitId":"InfiBeyond"},"content":"    public RejectLeaveCommand(Index index) {","lastModifiedDate":"2023-10-31"},{"lineNumber":40,"author":{"gitId":"InfiBeyond"},"content":"        requireNonNull(index);","lastModifiedDate":"2023-10-31"},{"lineNumber":41,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":42,"author":{"gitId":"InfiBeyond"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-10-31"},{"lineNumber":43,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":44,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":45,"author":{"gitId":"InfiBeyond"},"content":"    @Override","lastModifiedDate":"2023-10-31"},{"lineNumber":46,"author":{"gitId":"InfiBeyond"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-31"},{"lineNumber":47,"author":{"gitId":"InfiBeyond"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-31"},{"lineNumber":48,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"InfiBeyond"},"content":"        ObservableList\u003cLeave\u003e leaveList \u003d model.getFilteredLeaveList();","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":51,"author":{"gitId":"InfiBeyond"},"content":"        if (index.getZeroBased() \u003e\u003d leaveList.size()) {","lastModifiedDate":"2023-10-31"},{"lineNumber":52,"author":{"gitId":"InfiBeyond"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_LEAVE_INDEX);","lastModifiedDate":"2023-10-31"},{"lineNumber":53,"author":{"gitId":"InfiBeyond"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":54,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":55,"author":{"gitId":"InfiBeyond"},"content":"        Leave leaveToReject \u003d leaveList.get(index.getZeroBased());","lastModifiedDate":"2023-10-31"},{"lineNumber":56,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":57,"author":{"gitId":"InfiBeyond"},"content":"        if (leaveToReject.getStatus().getStatusType().equals(Status.StatusType.REJECTED)) {","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"InfiBeyond"},"content":"            throw new CommandException(String.format(MESSAGE_DUPLICATE_LEAVE_REJECT, Messages.format(leaveToReject)));","lastModifiedDate":"2023-10-31"},{"lineNumber":59,"author":{"gitId":"InfiBeyond"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":60,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":61,"author":{"gitId":"InfiBeyond"},"content":"        Leave rejectedLeave \u003d createRejectedLeave(leaveToReject);","lastModifiedDate":"2023-10-31"},{"lineNumber":62,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":63,"author":{"gitId":"InfiBeyond"},"content":"        model.setLeave(leaveToReject, rejectedLeave);","lastModifiedDate":"2023-10-31"},{"lineNumber":64,"author":{"gitId":"InfiBeyond"},"content":"        return new CommandResult(String.format(MESSAGE_REJECT_LEAVE_SUCCESS, Messages.format(rejectedLeave)));","lastModifiedDate":"2023-10-31"},{"lineNumber":65,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":66,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":67,"author":{"gitId":"InfiBeyond"},"content":"    private static Leave createRejectedLeave(Leave leaveToReject) {","lastModifiedDate":"2023-10-31"},{"lineNumber":68,"author":{"gitId":"InfiBeyond"},"content":"        assert leaveToReject !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":69,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":70,"author":{"gitId":"InfiBeyond"},"content":"        ComparablePerson employee \u003d leaveToReject.getEmployee();","lastModifiedDate":"2023-10-31"},{"lineNumber":71,"author":{"gitId":"InfiBeyond"},"content":"        Title title \u003d leaveToReject.getTitle();","lastModifiedDate":"2023-11-02"},{"lineNumber":72,"author":{"gitId":"InfiBeyond"},"content":"        Description description \u003d leaveToReject.getDescription();","lastModifiedDate":"2023-11-02"},{"lineNumber":73,"author":{"gitId":"InfiBeyond"},"content":"        Date start \u003d leaveToReject.getStart();","lastModifiedDate":"2023-10-31"},{"lineNumber":74,"author":{"gitId":"InfiBeyond"},"content":"        Date end \u003d leaveToReject.getEnd();","lastModifiedDate":"2023-10-31"},{"lineNumber":75,"author":{"gitId":"InfiBeyond"},"content":"        Range dateRange \u003d Range.createNonNullRange(start, end);","lastModifiedDate":"2023-11-02"},{"lineNumber":76,"author":{"gitId":"InfiBeyond"},"content":"        Status rejectedStatus \u003d Status.of(Status.StatusType.REJECTED);","lastModifiedDate":"2023-11-02"},{"lineNumber":77,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":78,"author":{"gitId":"InfiBeyond"},"content":"        return new Leave(employee, title, dateRange, description, rejectedStatus);","lastModifiedDate":"2023-11-02"},{"lineNumber":79,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":80,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":81,"author":{"gitId":"InfiBeyond"},"content":"    @Override","lastModifiedDate":"2023-10-31"},{"lineNumber":82,"author":{"gitId":"InfiBeyond"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-31"},{"lineNumber":83,"author":{"gitId":"InfiBeyond"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-31"},{"lineNumber":84,"author":{"gitId":"InfiBeyond"},"content":"            return true;","lastModifiedDate":"2023-10-31"},{"lineNumber":85,"author":{"gitId":"InfiBeyond"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":86,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":87,"author":{"gitId":"InfiBeyond"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-31"},{"lineNumber":88,"author":{"gitId":"InfiBeyond"},"content":"        if (!(other instanceof RejectLeaveCommand)) {","lastModifiedDate":"2023-10-31"},{"lineNumber":89,"author":{"gitId":"InfiBeyond"},"content":"            return false;","lastModifiedDate":"2023-10-31"},{"lineNumber":90,"author":{"gitId":"InfiBeyond"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":91,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":92,"author":{"gitId":"InfiBeyond"},"content":"        RejectLeaveCommand otherRejectedLeaveCommand \u003d (RejectLeaveCommand) other;","lastModifiedDate":"2023-10-31"},{"lineNumber":93,"author":{"gitId":"InfiBeyond"},"content":"        return index.equals(otherRejectedLeaveCommand.index);","lastModifiedDate":"2023-10-31"},{"lineNumber":94,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":95,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":96,"author":{"gitId":"InfiBeyond"},"content":"    @Override","lastModifiedDate":"2023-10-31"},{"lineNumber":97,"author":{"gitId":"InfiBeyond"},"content":"    public String toString() {","lastModifiedDate":"2023-10-31"},{"lineNumber":98,"author":{"gitId":"InfiBeyond"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-31"},{"lineNumber":99,"author":{"gitId":"InfiBeyond"},"content":"                .add(\"index\", index)","lastModifiedDate":"2023-10-31"},{"lineNumber":100,"author":{"gitId":"InfiBeyond"},"content":"                .toString();","lastModifiedDate":"2023-10-31"},{"lineNumber":101,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":102,"author":{"gitId":"InfiBeyond"},"content":"}","lastModifiedDate":"2023-10-31"}],"authorContributionMap":{"InfiBeyond":102}},{"path":"src/main/java/seedu/address/logic/commands/ViewTagCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"InfiBeyond"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":3,"author":{"gitId":"InfiBeyond"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"InfiBeyond"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"InfiBeyond"},"content":"import java.util.Collections;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"InfiBeyond"},"content":"import java.util.List;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"InfiBeyond"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"InfiBeyond"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-27"},{"lineNumber":10,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-10-27"},{"lineNumber":12,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":14,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-16"},{"lineNumber":15,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-16"},{"lineNumber":16,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":17,"author":{"gitId":"InfiBeyond"},"content":"/**","lastModifiedDate":"2023-10-16"},{"lineNumber":18,"author":{"gitId":"InfiBeyond"},"content":" * View all tags available in alphabetically order.","lastModifiedDate":"2023-10-16"},{"lineNumber":19,"author":{"gitId":"InfiBeyond"},"content":" */","lastModifiedDate":"2023-10-16"},{"lineNumber":20,"author":{"gitId":"InfiBeyond"},"content":"public class ViewTagCommand extends Command {","lastModifiedDate":"2023-10-16"},{"lineNumber":21,"author":{"gitId":"InfiBeyond"},"content":"    public static final String COMMAND_WORD \u003d \"view-tag\";","lastModifiedDate":"2023-10-16"},{"lineNumber":22,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":23,"author":{"gitId":"InfiBeyond"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": View all tags available in alphabetically order.\\n\"","lastModifiedDate":"2023-10-16"},{"lineNumber":24,"author":{"gitId":"InfiBeyond"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2023-10-16"},{"lineNumber":25,"author":{"gitId":"InfiBeyond"},"content":"    public static final String MESSAGE_VIEW_TAG_NONE \u003d \"There are currently no tags\";","lastModifiedDate":"2023-10-16"},{"lineNumber":26,"author":{"gitId":"InfiBeyond"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2023-10-27"},{"lineNumber":27,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":28,"author":{"gitId":"InfiBeyond"},"content":"    @Override","lastModifiedDate":"2023-10-16"},{"lineNumber":29,"author":{"gitId":"InfiBeyond"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-10-17"},{"lineNumber":30,"author":{"gitId":"InfiBeyond"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-16"},{"lineNumber":31,"author":{"gitId":"InfiBeyond"},"content":"        List\u003cPerson\u003e people \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-10-16"},{"lineNumber":32,"author":{"gitId":"InfiBeyond"},"content":"        ArrayList\u003cString\u003e tagsAll \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-16"},{"lineNumber":33,"author":{"gitId":"InfiBeyond"},"content":"        logger.info(\"\"); //dummy logger","lastModifiedDate":"2023-10-27"},{"lineNumber":34,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":35,"author":{"gitId":"InfiBeyond"},"content":"        if (people.isEmpty()) {","lastModifiedDate":"2023-10-16"},{"lineNumber":36,"author":{"gitId":"InfiBeyond"},"content":"            return new CommandResult(MESSAGE_VIEW_TAG_NONE);","lastModifiedDate":"2023-10-16"},{"lineNumber":37,"author":{"gitId":"InfiBeyond"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":38,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":39,"author":{"gitId":"InfiBeyond"},"content":"        String tags \u003d \"Available tag(s):\" + \"\\n\";","lastModifiedDate":"2023-10-17"},{"lineNumber":40,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":41,"author":{"gitId":"InfiBeyond"},"content":"        for (Person person : people) {","lastModifiedDate":"2023-10-16"},{"lineNumber":42,"author":{"gitId":"InfiBeyond"},"content":"            Set\u003cTag\u003e temp \u003d person.getTags();","lastModifiedDate":"2023-10-16"},{"lineNumber":43,"author":{"gitId":"InfiBeyond"},"content":"            for (Tag t : temp) {","lastModifiedDate":"2023-10-16"},{"lineNumber":44,"author":{"gitId":"InfiBeyond"},"content":"                if (!tagsAll.contains(t.toString())) {","lastModifiedDate":"2023-10-16"},{"lineNumber":45,"author":{"gitId":"InfiBeyond"},"content":"                    tagsAll.add(t.toString());","lastModifiedDate":"2023-10-16"},{"lineNumber":46,"author":{"gitId":"InfiBeyond"},"content":"                }","lastModifiedDate":"2023-10-16"},{"lineNumber":47,"author":{"gitId":"InfiBeyond"},"content":"            }","lastModifiedDate":"2023-10-16"},{"lineNumber":48,"author":{"gitId":"InfiBeyond"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":49,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":50,"author":{"gitId":"InfiBeyond"},"content":"        Collections.sort(tagsAll);","lastModifiedDate":"2023-10-16"},{"lineNumber":51,"author":{"gitId":"InfiBeyond"},"content":"        for (String s : tagsAll) {","lastModifiedDate":"2023-10-16"},{"lineNumber":52,"author":{"gitId":"InfiBeyond"},"content":"            tags \u003d tags + s + \"\\n\";","lastModifiedDate":"2023-10-16"},{"lineNumber":53,"author":{"gitId":"InfiBeyond"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":54,"author":{"gitId":"InfiBeyond"},"content":"        return new CommandResult(tags);","lastModifiedDate":"2023-10-16"},{"lineNumber":55,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":56,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":57,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":58,"author":{"gitId":"InfiBeyond"},"content":"    @Override","lastModifiedDate":"2023-10-16"},{"lineNumber":59,"author":{"gitId":"InfiBeyond"},"content":"    public String toString() {","lastModifiedDate":"2023-10-16"},{"lineNumber":60,"author":{"gitId":"InfiBeyond"},"content":"        return new ToStringBuilder(this).toString();","lastModifiedDate":"2023-10-16"},{"lineNumber":61,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":62,"author":{"gitId":"InfiBeyond"},"content":"}","lastModifiedDate":"2023-10-16"},{"lineNumber":63,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-16"}],"authorContributionMap":{"InfiBeyond":63}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ADDRESS;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_EMAIL;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_NAME;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_PHONE;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_TAG;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-03-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-03-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-03-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-03-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":34,"author":{"gitId":"jean-cq"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PERSON_NAME, PREFIX_PERSON_PHONE,","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"                        PREFIX_PERSON_EMAIL, PREFIX_PERSON_ADDRESS, PREFIX_PERSON_TAG);","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":37,"author":{"gitId":"jean-cq"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_PERSON_NAME, PREFIX_PERSON_ADDRESS,","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"                PREFIX_PERSON_PHONE, PREFIX_PERSON_EMAIL)","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":43,"author":{"gitId":"jean-cq"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_PERSON_NAME, PREFIX_PERSON_PHONE,","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"jean-cq"},"content":"                PREFIX_PERSON_EMAIL, PREFIX_PERSON_ADDRESS);","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"jean-cq"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_PERSON_NAME).get());","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"jean-cq"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PERSON_PHONE).get());","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"jean-cq"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_PERSON_EMAIL).get());","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"jean-cq"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_PERSON_ADDRESS).get());","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"jean-cq"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_PERSON_TAG));","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Person person \u003d new Person(name, phone, email, address, tagList);","lastModifiedDate":"2018-01-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"jean-cq":16,"-":48}},{"path":"src/main/java/seedu/address/logic/parser/AddLeaveCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-28"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-28"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.Messages.MESSAGE_NO_STATUS_PREFIX;","lastModifiedDate":"2023-11-09"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_DATE_END;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_DATE_START;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_DESCRIPTION;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_STATUS;","lastModifiedDate":"2023-11-09"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_TITLE;","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.commands.AddLeaveCommand;","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Description;","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Range;","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Title;","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"/**","lastModifiedDate":"2023-10-28"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2023-10-28"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":" */","lastModifiedDate":"2023-10-28"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":"public class AddLeaveCommandParser implements Parser\u003cAddLeaveCommand\u003e {","lastModifiedDate":"2023-10-28"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2023-10-28"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2023-10-28"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-28"},{"lineNumber":29,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":30,"author":{"gitId":"jean-cq"},"content":"    public AddLeaveCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-28"},{"lineNumber":31,"author":{"gitId":"jean-cq"},"content":"        Index index;","lastModifiedDate":"2023-10-28"},{"lineNumber":32,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":33,"author":{"gitId":"jean-cq"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-10-28"},{"lineNumber":34,"author":{"gitId":"jean-cq"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_LEAVE_TITLE, PREFIX_LEAVE_DATE_START,","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"                        PREFIX_LEAVE_DATE_END, PREFIX_LEAVE_DESCRIPTION, PREFIX_LEAVE_STATUS);","lastModifiedDate":"2023-11-09"},{"lineNumber":36,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":37,"author":{"gitId":"jean-cq"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_LEAVE_TITLE, PREFIX_LEAVE_DATE_START,","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"                PREFIX_LEAVE_DATE_END)) {","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"jean-cq"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLeaveCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-28"},{"lineNumber":40,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":41,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":42,"author":{"gitId":"jean-cq"},"content":"        if (arePrefixesPresent(argMultimap, PREFIX_LEAVE_STATUS)) {","lastModifiedDate":"2023-11-09"},{"lineNumber":43,"author":{"gitId":"jean-cq"},"content":"            throw new ParseException(String.format(MESSAGE_NO_STATUS_PREFIX, AddLeaveCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-11-09"},{"lineNumber":44,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":45,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":46,"author":{"gitId":"jean-cq"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_LEAVE_TITLE, PREFIX_LEAVE_DATE_START,","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"jean-cq"},"content":"                PREFIX_LEAVE_DATE_END, PREFIX_LEAVE_DESCRIPTION);","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":49,"author":{"gitId":"jean-cq"},"content":"        try {","lastModifiedDate":"2023-10-28"},{"lineNumber":50,"author":{"gitId":"jean-cq"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2023-10-28"},{"lineNumber":51,"author":{"gitId":"jean-cq"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-28"},{"lineNumber":52,"author":{"gitId":"jean-cq"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLeaveCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-28"},{"lineNumber":53,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":54,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":55,"author":{"gitId":"jean-cq"},"content":"        Title title;","lastModifiedDate":"2023-11-03"},{"lineNumber":56,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":57,"author":{"gitId":"jean-cq"},"content":"        try {","lastModifiedDate":"2023-11-03"},{"lineNumber":58,"author":{"gitId":"jean-cq"},"content":"            title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_LEAVE_TITLE).get());","lastModifiedDate":"2023-11-03"},{"lineNumber":59,"author":{"gitId":"jean-cq"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-11-03"},{"lineNumber":60,"author":{"gitId":"jean-cq"},"content":"            throw new ParseException(Title.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-03"},{"lineNumber":61,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-03"},{"lineNumber":62,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"        Range dateRange \u003d ParserUtil.parseNonNullRange(argMultimap.getValue(PREFIX_LEAVE_DATE_START).get(),","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"jean-cq"},"content":"                argMultimap.getValue(PREFIX_LEAVE_DATE_END).get());","lastModifiedDate":"2023-11-01"},{"lineNumber":65,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":66,"author":{"gitId":"jean-cq"},"content":"        Description description;","lastModifiedDate":"2023-11-11"},{"lineNumber":67,"author":{"gitId":"jean-cq"},"content":"        try {","lastModifiedDate":"2023-11-11"},{"lineNumber":68,"author":{"gitId":"jean-cq"},"content":"            description \u003d argMultimap.getValue(PREFIX_LEAVE_DESCRIPTION)","lastModifiedDate":"2023-11-11"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"                    .map(ParserUtil::parseDescription)","lastModifiedDate":"2023-11-02"},{"lineNumber":70,"author":{"gitId":"ong-wei-hong"},"content":"                    .orElse(new Description(Description.DESCRIPTION_PLACEHOLDER));","lastModifiedDate":"2023-11-10"},{"lineNumber":71,"author":{"gitId":"jean-cq"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-11-11"},{"lineNumber":72,"author":{"gitId":"jean-cq"},"content":"            throw new ParseException(Description.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-11"},{"lineNumber":73,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-11"},{"lineNumber":74,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"        return new AddLeaveCommand(index, title, dateRange, description);","lastModifiedDate":"2023-11-02"},{"lineNumber":76,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":77,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":78,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":79,"author":{"gitId":"jean-cq"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2023-10-28"},{"lineNumber":80,"author":{"gitId":"jean-cq"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-10-28"},{"lineNumber":81,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":82,"author":{"gitId":"jean-cq"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-10-28"},{"lineNumber":83,"author":{"gitId":"jean-cq"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-10-28"},{"lineNumber":84,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":85,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":86,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-10-28"}],"authorContributionMap":{"ryanozx":6,"jean-cq":79,"ong-wei-hong":1}},{"path":"src/main/java/seedu/address/logic/parser/AddTagCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ong-wei-hong"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-11"},{"lineNumber":2,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":3,"author":{"gitId":"ong-wei-hong"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-11"},{"lineNumber":4,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-11"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_TAG;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":7,"author":{"gitId":"ong-wei-hong"},"content":"import java.util.Collection;","lastModifiedDate":"2023-10-11"},{"lineNumber":8,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":9,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-11"},{"lineNumber":10,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.commands.AddTagCommand;","lastModifiedDate":"2023-10-11"},{"lineNumber":11,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-11"},{"lineNumber":12,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":13,"author":{"gitId":"ong-wei-hong"},"content":"/**","lastModifiedDate":"2023-10-11"},{"lineNumber":14,"author":{"gitId":"ong-wei-hong"},"content":" * Parses input arguments and creates a new AddTagCommand Object","lastModifiedDate":"2023-10-11"},{"lineNumber":15,"author":{"gitId":"ong-wei-hong"},"content":" */","lastModifiedDate":"2023-10-11"},{"lineNumber":16,"author":{"gitId":"ong-wei-hong"},"content":"public class AddTagCommandParser implements Parser\u003cAddTagCommand\u003e {","lastModifiedDate":"2023-10-11"},{"lineNumber":17,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":18,"author":{"gitId":"ong-wei-hong"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":19,"author":{"gitId":"ong-wei-hong"},"content":"     * Parses the given {@code String} of arguments in the context of the AddTagCommand","lastModifiedDate":"2023-10-11"},{"lineNumber":20,"author":{"gitId":"ong-wei-hong"},"content":"     * and returns an AddTagCommand object for execution.","lastModifiedDate":"2023-10-11"},{"lineNumber":21,"author":{"gitId":"ong-wei-hong"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-11"},{"lineNumber":22,"author":{"gitId":"ong-wei-hong"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":23,"author":{"gitId":"ong-wei-hong"},"content":"    public AddTagCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-11"},{"lineNumber":24,"author":{"gitId":"ong-wei-hong"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-10-11"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PERSON_TAG);","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":27,"author":{"gitId":"ong-wei-hong"},"content":"        Index index;","lastModifiedDate":"2023-10-11"},{"lineNumber":28,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":29,"author":{"gitId":"ong-wei-hong"},"content":"        try {","lastModifiedDate":"2023-10-11"},{"lineNumber":30,"author":{"gitId":"ong-wei-hong"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2023-10-11"},{"lineNumber":31,"author":{"gitId":"ong-wei-hong"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-11"},{"lineNumber":32,"author":{"gitId":"ong-wei-hong"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-11"},{"lineNumber":33,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":34,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"        Collection\u003cString\u003e tags \u003d argMultimap.getAllValues(PREFIX_PERSON_TAG);","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":37,"author":{"gitId":"ong-wei-hong"},"content":"        if (isTagsEmpty(tags)) {","lastModifiedDate":"2023-10-11"},{"lineNumber":38,"author":{"gitId":"ong-wei-hong"},"content":"            throw new ParseException(AddTagCommand.MESSAGE_NO_TAGS_ADDED);","lastModifiedDate":"2023-10-11"},{"lineNumber":39,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":40,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":41,"author":{"gitId":"ong-wei-hong"},"content":"        return new AddTagCommand(index, ParserUtil.parseTags(tags));","lastModifiedDate":"2023-10-11"},{"lineNumber":42,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":43,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":44,"author":{"gitId":"ong-wei-hong"},"content":"    private boolean isTagsEmpty(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2023-10-11"},{"lineNumber":45,"author":{"gitId":"ong-wei-hong"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2023-10-11"},{"lineNumber":46,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":47,"author":{"gitId":"ong-wei-hong"},"content":"        return tags.isEmpty();","lastModifiedDate":"2023-11-10"},{"lineNumber":48,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":49,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":50,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":51,"author":{"gitId":"ong-wei-hong"},"content":"}","lastModifiedDate":"2023-10-11"}],"authorContributionMap":{"jean-cq":3,"ong-wei-hong":48}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.commands.AddLeaveCommand;","lastModifiedDate":"2023-10-28"},{"lineNumber":13,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.commands.AddTagCommand;","lastModifiedDate":"2023-10-11"},{"lineNumber":14,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.commands.ApproveLeaveCommand;","lastModifiedDate":"2023-10-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":18,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.commands.DeleteLeaveCommand;","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.logic.commands.DeleteTagCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.commands.EditLeaveCommand;","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.ExportContactCommand;","lastModifiedDate":"2023-11-03"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.ExportLeaveCommand;","lastModifiedDate":"2023-11-03"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.FindAllLeaveCommand;","lastModifiedDate":"2023-11-03"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.commands.FindAllTagCommand;","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.FindLeaveByPeriodCommand;","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.FindLeaveByStatusCommand;","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.commands.FindLeaveCommand;","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.commands.FindSomeTagCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.ImportContactCommand;","lastModifiedDate":"2023-11-03"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.ImportLeaveCommand;","lastModifiedDate":"2023-11-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":36,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.commands.RejectLeaveCommand;","lastModifiedDate":"2023-10-31"},{"lineNumber":37,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.commands.ViewTagCommand;","lastModifiedDate":"2023-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AddressBookParser.class);","lastModifiedDate":"2023-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2023-11-11"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Note to developers: Change the log level in config.json to enable lower level (i.e., FINE, FINER and lower)","lastModifiedDate":"2023-07-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // log messages such as the one below.","lastModifiedDate":"2023-07-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // Lower level log messages are used sparingly to minimize noise in the code.","lastModifiedDate":"2023-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.fine(\"Command word: \" + commandWord + \"; Arguments: \" + arguments);","lastModifiedDate":"2023-11-11"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2023-11-11"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"InfiBeyond"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-28"},{"lineNumber":78,"author":{"gitId":"InfiBeyond"},"content":"            return new ClearCommand();","lastModifiedDate":"2023-10-28"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"InfiBeyond"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-28"},{"lineNumber":84,"author":{"gitId":"InfiBeyond"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2023-10-28"},{"lineNumber":85,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":86,"author":{"gitId":"InfiBeyond"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-28"},{"lineNumber":87,"author":{"gitId":"InfiBeyond"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-10-28"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-28"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2023-10-28"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":92,"author":{"gitId":"InfiBeyond"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-28"},{"lineNumber":93,"author":{"gitId":"InfiBeyond"},"content":"            return new HelpCommand();","lastModifiedDate":"2023-10-28"},{"lineNumber":94,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-28"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2023-10-28"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":98,"author":{"gitId":"InfiBeyond"},"content":"        case AddTagCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-28"},{"lineNumber":99,"author":{"gitId":"InfiBeyond"},"content":"            return new AddTagCommandParser().parse(arguments);","lastModifiedDate":"2023-10-28"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":101,"author":{"gitId":"ivyy-poison"},"content":"        case DeleteTagCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-13"},{"lineNumber":102,"author":{"gitId":"ivyy-poison"},"content":"            return new DeleteTagCommandParser().parse(arguments);","lastModifiedDate":"2023-10-13"},{"lineNumber":103,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":104,"author":{"gitId":"jean-cq"},"content":"        case FindAllTagCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-14"},{"lineNumber":105,"author":{"gitId":"jean-cq"},"content":"            return new FindAllTagCommandParser().parse(arguments);","lastModifiedDate":"2023-10-14"},{"lineNumber":106,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":107,"author":{"gitId":"jean-cq"},"content":"        case FindSomeTagCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-13"},{"lineNumber":108,"author":{"gitId":"jean-cq"},"content":"            return new FindSomeTagCommandParser().parse(arguments);","lastModifiedDate":"2023-10-13"},{"lineNumber":109,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":110,"author":{"gitId":"InfiBeyond"},"content":"        case ViewTagCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-16"},{"lineNumber":111,"author":{"gitId":"InfiBeyond"},"content":"            return new ViewTagCommand();","lastModifiedDate":"2023-10-17"},{"lineNumber":112,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":113,"author":{"gitId":"ryanozx"},"content":"        case ImportContactCommand.COMMAND_WORD:","lastModifiedDate":"2023-11-03"},{"lineNumber":114,"author":{"gitId":"ryanozx"},"content":"            return new ImportContactCommand();","lastModifiedDate":"2023-11-03"},{"lineNumber":115,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":116,"author":{"gitId":"ryanozx"},"content":"        case ImportLeaveCommand.COMMAND_WORD:","lastModifiedDate":"2023-11-03"},{"lineNumber":117,"author":{"gitId":"ryanozx"},"content":"            return new ImportLeaveCommand();","lastModifiedDate":"2023-11-03"},{"lineNumber":118,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":119,"author":{"gitId":"ryanozx"},"content":"        case ExportContactCommand.COMMAND_WORD:","lastModifiedDate":"2023-11-03"},{"lineNumber":120,"author":{"gitId":"ryanozx"},"content":"            return new ExportContactCommandParser().parse(arguments);","lastModifiedDate":"2023-11-03"},{"lineNumber":121,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":122,"author":{"gitId":"ryanozx"},"content":"        case ExportLeaveCommand.COMMAND_WORD:","lastModifiedDate":"2023-11-03"},{"lineNumber":123,"author":{"gitId":"ryanozx"},"content":"            return new ExportLeaveCommandParser().parse(arguments);","lastModifiedDate":"2023-11-03"},{"lineNumber":124,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":125,"author":{"gitId":"ong-wei-hong"},"content":"        case DeleteLeaveCommand.COMMAND_WORD:","lastModifiedDate":"2023-11-01"},{"lineNumber":126,"author":{"gitId":"ong-wei-hong"},"content":"            return new DeleteLeaveCommandParser().parse(arguments);","lastModifiedDate":"2023-11-01"},{"lineNumber":127,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":128,"author":{"gitId":"jean-cq"},"content":"        case AddLeaveCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-28"},{"lineNumber":129,"author":{"gitId":"jean-cq"},"content":"            return new AddLeaveCommandParser().parse(arguments);","lastModifiedDate":"2023-10-28"},{"lineNumber":130,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":131,"author":{"gitId":"InfiBeyond"},"content":"        case ApproveLeaveCommand.COMMAND_WORD:","lastModifiedDate":"2023-11-02"},{"lineNumber":132,"author":{"gitId":"InfiBeyond"},"content":"            return new ApproveLeaveCommandParser().parse(arguments);","lastModifiedDate":"2023-11-02"},{"lineNumber":133,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":134,"author":{"gitId":"ong-wei-hong"},"content":"        case EditLeaveCommand.COMMAND_WORD:","lastModifiedDate":"2023-11-02"},{"lineNumber":135,"author":{"gitId":"ong-wei-hong"},"content":"            return new EditLeaveCommandParser().parse(arguments);","lastModifiedDate":"2023-11-02"},{"lineNumber":136,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":137,"author":{"gitId":"InfiBeyond"},"content":"        case FindAllLeaveCommand.COMMAND_WORD:","lastModifiedDate":"2023-11-02"},{"lineNumber":138,"author":{"gitId":"InfiBeyond"},"content":"            return new FindAllLeaveCommand();","lastModifiedDate":"2023-11-02"},{"lineNumber":139,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":140,"author":{"gitId":"InfiBeyond"},"content":"        case FindLeaveCommand.COMMAND_WORD:","lastModifiedDate":"2023-11-02"},{"lineNumber":141,"author":{"gitId":"InfiBeyond"},"content":"            return new FindLeaveCommandParser().parse(arguments);","lastModifiedDate":"2023-11-02"},{"lineNumber":142,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":143,"author":{"gitId":"ryanozx"},"content":"        case FindLeaveByPeriodCommand.COMMAND_WORD:","lastModifiedDate":"2023-11-02"},{"lineNumber":144,"author":{"gitId":"ryanozx"},"content":"            return new FindLeaveByPeriodCommandParser().parse(arguments);","lastModifiedDate":"2023-11-02"},{"lineNumber":145,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":146,"author":{"gitId":"ryanozx"},"content":"        case FindLeaveByStatusCommand.COMMAND_WORD:","lastModifiedDate":"2023-11-02"},{"lineNumber":147,"author":{"gitId":"ryanozx"},"content":"            return new FindLeaveByStatusCommandParser().parse(arguments);","lastModifiedDate":"2023-11-02"},{"lineNumber":148,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":149,"author":{"gitId":"InfiBeyond"},"content":"        case RejectLeaveCommand.COMMAND_WORD:","lastModifiedDate":"2023-11-02"},{"lineNumber":150,"author":{"gitId":"InfiBeyond"},"content":"            return new RejectLeaveCommandParser().parse(arguments);","lastModifiedDate":"2023-11-02"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            logger.finer(\"This user input caused a ParseException: \" + userInput);","lastModifiedDate":"2023-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ryanozx":25,"jean-cq":12,"InfiBeyond":30,"ivyy-poison":4,"-":78,"ong-wei-hong":9}},{"path":"src/main/java/seedu/address/logic/parser/ApproveLeaveCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"InfiBeyond"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-28"},{"lineNumber":2,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":3,"author":{"gitId":"InfiBeyond"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-28"},{"lineNumber":4,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-28"},{"lineNumber":5,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.logic.parser.ParserUtil.parseIndex;","lastModifiedDate":"2023-10-28"},{"lineNumber":6,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":7,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-28"},{"lineNumber":8,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.commands.ApproveLeaveCommand;","lastModifiedDate":"2023-10-28"},{"lineNumber":9,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-28"},{"lineNumber":10,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":11,"author":{"gitId":"InfiBeyond"},"content":"/**","lastModifiedDate":"2023-10-28"},{"lineNumber":12,"author":{"gitId":"InfiBeyond"},"content":" * Parses input arguments and creates a new ApproveLeave object","lastModifiedDate":"2023-10-28"},{"lineNumber":13,"author":{"gitId":"InfiBeyond"},"content":" */","lastModifiedDate":"2023-10-28"},{"lineNumber":14,"author":{"gitId":"InfiBeyond"},"content":"public class ApproveLeaveCommandParser implements Parser\u003cApproveLeaveCommand\u003e {","lastModifiedDate":"2023-10-28"},{"lineNumber":15,"author":{"gitId":"InfiBeyond"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":16,"author":{"gitId":"InfiBeyond"},"content":"     * Parses the given {@code String} of arguments in the context of the ApproveLeaveCommand","lastModifiedDate":"2023-10-28"},{"lineNumber":17,"author":{"gitId":"InfiBeyond"},"content":"     * and returns an ApproveLeaveCommand object for execution.","lastModifiedDate":"2023-10-28"},{"lineNumber":18,"author":{"gitId":"InfiBeyond"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-28"},{"lineNumber":19,"author":{"gitId":"InfiBeyond"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":20,"author":{"gitId":"InfiBeyond"},"content":"    public ApproveLeaveCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-28"},{"lineNumber":21,"author":{"gitId":"InfiBeyond"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-10-28"},{"lineNumber":22,"author":{"gitId":"InfiBeyond"},"content":"        Index index;","lastModifiedDate":"2023-10-28"},{"lineNumber":23,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":24,"author":{"gitId":"InfiBeyond"},"content":"        try {","lastModifiedDate":"2023-10-28"},{"lineNumber":25,"author":{"gitId":"InfiBeyond"},"content":"            index \u003d parseIndex(args);","lastModifiedDate":"2023-10-28"},{"lineNumber":26,"author":{"gitId":"InfiBeyond"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-28"},{"lineNumber":27,"author":{"gitId":"InfiBeyond"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-28"},{"lineNumber":28,"author":{"gitId":"InfiBeyond"},"content":"                    ApproveLeaveCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-28"},{"lineNumber":29,"author":{"gitId":"InfiBeyond"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":30,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":31,"author":{"gitId":"InfiBeyond"},"content":"        return new ApproveLeaveCommand(index);","lastModifiedDate":"2023-10-28"},{"lineNumber":32,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":33,"author":{"gitId":"InfiBeyond"},"content":"}","lastModifiedDate":"2023-10-28"}],"authorContributionMap":{"InfiBeyond":33}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"    public static final Prefix PREFIX_PERSON_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"    public static final Prefix PREFIX_PERSON_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"    public static final Prefix PREFIX_PERSON_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"    public static final Prefix PREFIX_PERSON_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"    public static final Prefix PREFIX_PERSON_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"    public static final Prefix PREFIX_LEAVE_TITLE \u003d new Prefix(\"title/\");","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":"    public static final Prefix PREFIX_LEAVE_DATE_START \u003d new Prefix(\"start/\");","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"    public static final Prefix PREFIX_LEAVE_DATE_END \u003d new Prefix(\"end/\");","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"    public static final Prefix PREFIX_LEAVE_DESCRIPTION \u003d new Prefix(\"d/\");","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"    public static final Prefix PREFIX_LEAVE_STATUS \u003d new Prefix(\"s/\");","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"jean-cq":10,"-":10}},{"path":"src/main/java/seedu/address/logic/parser/DeleteLeaveCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ong-wei-hong"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.commands.DeleteLeaveCommand;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"ong-wei-hong"},"content":"/**","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"ong-wei-hong"},"content":" * Parses input arguments and creates a new DeleteLeaveCommand object","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"ong-wei-hong"},"content":" */","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"ong-wei-hong"},"content":"public class DeleteLeaveCommandParser implements Parser\u003cDeleteLeaveCommand\u003e {","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"ong-wei-hong"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"ong-wei-hong"},"content":"     * Parses the given {@code String} of arguments inthe context of the DeleteLeaveCommand","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"ong-wei-hong"},"content":"     * and returns a DeleteLeaveCommand object for execution.","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"ong-wei-hong"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"ong-wei-hong"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"ong-wei-hong"},"content":"    public DeleteLeaveCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"ong-wei-hong"},"content":"        try {","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"ong-wei-hong"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"ong-wei-hong"},"content":"            return new DeleteLeaveCommand(index);","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"ong-wei-hong"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"ong-wei-hong"},"content":"            throw new ParseException(","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"ong-wei-hong"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteLeaveCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"ong-wei-hong"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"ong-wei-hong":28}},{"path":"src/main/java/seedu/address/logic/parser/DeleteTagCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_TAG;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"import java.util.Collection;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.logic.commands.DeleteTagCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":" * Parses input arguments and creates a new DeleteTagCommand Object","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"public class DeleteTagCommandParser implements Parser\u003cDeleteTagCommand\u003e {","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteTagCommand","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":"     * and returns an DeleteTagCommand object for execution.","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"ivyy-poison"},"content":"     * @param args arguments to be parsed","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"ivyy-poison"},"content":"     * @return DeleteTagCommand object","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"ivyy-poison"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"ivyy-poison"},"content":"    public DeleteTagCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"jean-cq"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PERSON_TAG);","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"        Index index;","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"        try {","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTagCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"jean-cq"},"content":"        Collection\u003cString\u003e tags \u003d argMultimap.getAllValues(PREFIX_PERSON_TAG);","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"        if (isTagsEmpty(tags)) {","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"            throw new ParseException(DeleteTagCommand.MESSAGE_NO_TAGS_REMOVED);","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"        return new DeleteTagCommand(index, ParserUtil.parseTags(tags));","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"ivyy-poison"},"content":"    private boolean isTagsEmpty(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"ivyy-poison"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"ivyy-poison"},"content":"        return tags.isEmpty() || (tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"jean-cq":3,"ivyy-poison":52}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ADDRESS;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_EMAIL;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_NAME;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_PHONE;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_TAG;","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.logic.parser.exceptions.InvalidIndexException;","lastModifiedDate":"2023-11-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"jean-cq"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PERSON_NAME, PREFIX_PERSON_PHONE, PREFIX_PERSON_EMAIL,","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"jean-cq"},"content":"                        PREFIX_PERSON_ADDRESS, PREFIX_PERSON_TAG);","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"        } catch (InvalidIndexException iie) {","lastModifiedDate":"2023-11-08"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"            throw new ParseException(iie.getMessage());","lastModifiedDate":"2023-11-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":49,"author":{"gitId":"jean-cq"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_PERSON_NAME, PREFIX_PERSON_PHONE,","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"jean-cq"},"content":"                PREFIX_PERSON_EMAIL, PREFIX_PERSON_ADDRESS);","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":54,"author":{"gitId":"jean-cq"},"content":"        if (argMultimap.getValue(PREFIX_PERSON_NAME).isPresent()) {","lastModifiedDate":"2023-11-01"},{"lineNumber":55,"author":{"gitId":"jean-cq"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_PERSON_NAME).get()));","lastModifiedDate":"2023-11-01"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"jean-cq"},"content":"        if (argMultimap.getValue(PREFIX_PERSON_PHONE).isPresent()) {","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"jean-cq"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PERSON_PHONE).get()));","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"jean-cq"},"content":"        if (argMultimap.getValue(PREFIX_PERSON_EMAIL).isPresent()) {","lastModifiedDate":"2023-11-01"},{"lineNumber":61,"author":{"gitId":"jean-cq"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_PERSON_EMAIL).get()));","lastModifiedDate":"2023-11-01"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"jean-cq"},"content":"        if (argMultimap.getValue(PREFIX_PERSON_ADDRESS).isPresent()) {","lastModifiedDate":"2023-11-01"},{"lineNumber":64,"author":{"gitId":"jean-cq"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_PERSON_ADDRESS).get()));","lastModifiedDate":"2023-11-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":66,"author":{"gitId":"jean-cq"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_PERSON_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2023-11-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"jean-cq":18,"ivyy-poison":3,"-":69}},{"path":"src/main/java/seedu/address/logic/parser/EditLeaveCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ong-wei-hong"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"ong-wei-hong"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_DATE_END;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_DATE_START;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_DESCRIPTION;","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_STATUS;","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_TITLE;","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"ong-wei-hong"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-11-07"},{"lineNumber":12,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":13,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.commands.EditLeaveCommand;","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.commands.EditLeaveCommand.EditLeaveDescriptor;","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Date;","lastModifiedDate":"2023-11-07"},{"lineNumber":18,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Description;","lastModifiedDate":"2023-11-07"},{"lineNumber":19,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Status;","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.leave.Title;","lastModifiedDate":"2023-11-03"},{"lineNumber":21,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"ong-wei-hong"},"content":"/**","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"ong-wei-hong"},"content":" * Parses input arguments and creates a new EditLeaveCommand object","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ong-wei-hong"},"content":" */","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ong-wei-hong"},"content":"public class EditLeaveCommandParser implements Parser\u003cEditLeaveCommand\u003e {","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"ong-wei-hong"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ong-wei-hong"},"content":"     * Parses the given {@code String} of arguments in the context of the EditLeaveCommand","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ong-wei-hong"},"content":"     * and returns an EditLeaveCommand object for execution.","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ong-wei-hong"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"ong-wei-hong"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ong-wei-hong"},"content":"    public EditLeaveCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"ong-wei-hong"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"ong-wei-hong"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_LEAVE_TITLE, PREFIX_LEAVE_DESCRIPTION,","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ong-wei-hong"},"content":"                PREFIX_LEAVE_DATE_START, PREFIX_LEAVE_DATE_END, PREFIX_LEAVE_STATUS);","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"ong-wei-hong"},"content":"        Index index;","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"ong-wei-hong"},"content":"        try {","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"ong-wei-hong"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"ong-wei-hong"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"ong-wei-hong"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditLeaveCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":45,"author":{"gitId":"ong-wei-hong"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_LEAVE_TITLE, PREFIX_LEAVE_DESCRIPTION, PREFIX_LEAVE_DATE_START,","lastModifiedDate":"2023-11-07"},{"lineNumber":46,"author":{"gitId":"ong-wei-hong"},"content":"                PREFIX_LEAVE_DATE_END, PREFIX_LEAVE_STATUS);","lastModifiedDate":"2023-11-07"},{"lineNumber":47,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveDescriptor editLeaveDescriptor \u003d new EditLeaveDescriptor();","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"jean-cq"},"content":"        try {","lastModifiedDate":"2023-11-03"},{"lineNumber":51,"author":{"gitId":"ong-wei-hong"},"content":"            argMultimap.getValue(PREFIX_LEAVE_TITLE).ifPresent((s) -\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"ong-wei-hong"},"content":"                editLeaveDescriptor.setTitle(ParserUtil.parseTitle(s)));","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"jean-cq"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-11-03"},{"lineNumber":54,"author":{"gitId":"jean-cq"},"content":"            throw new ParseException(Title.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-03"},{"lineNumber":55,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-03"},{"lineNumber":56,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":57,"author":{"gitId":"ong-wei-hong"},"content":"        try {","lastModifiedDate":"2023-11-07"},{"lineNumber":58,"author":{"gitId":"ong-wei-hong"},"content":"            argMultimap.getValue(PREFIX_LEAVE_DESCRIPTION).ifPresent((s) -\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"ong-wei-hong"},"content":"                    editLeaveDescriptor.setDescription(ParserUtil.parseDescription(s)));","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"ong-wei-hong"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-11-07"},{"lineNumber":61,"author":{"gitId":"ong-wei-hong"},"content":"            throw new ParseException(Description.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-07"},{"lineNumber":62,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-07"},{"lineNumber":63,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"ong-wei-hong"},"content":"        try {","lastModifiedDate":"2023-11-07"},{"lineNumber":65,"author":{"gitId":"ong-wei-hong"},"content":"            argMultimap.getValue(PREFIX_LEAVE_DATE_START).ifPresent((s) -\u003e editLeaveDescriptor.setStart(Date.of(s)));","lastModifiedDate":"2023-11-07"},{"lineNumber":66,"author":{"gitId":"ong-wei-hong"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-11-07"},{"lineNumber":67,"author":{"gitId":"ong-wei-hong"},"content":"            throw new ParseException(Date.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-07"},{"lineNumber":68,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":69,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":70,"author":{"gitId":"ong-wei-hong"},"content":"        try {","lastModifiedDate":"2023-11-07"},{"lineNumber":71,"author":{"gitId":"ong-wei-hong"},"content":"            argMultimap.getValue(PREFIX_LEAVE_DATE_END).ifPresent((s) -\u003e editLeaveDescriptor.setEnd(Date.of(s)));","lastModifiedDate":"2023-11-07"},{"lineNumber":72,"author":{"gitId":"ong-wei-hong"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-11-07"},{"lineNumber":73,"author":{"gitId":"ong-wei-hong"},"content":"            throw new ParseException(Date.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-07"},{"lineNumber":74,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":75,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":76,"author":{"gitId":"ong-wei-hong"},"content":"        try {","lastModifiedDate":"2023-11-02"},{"lineNumber":77,"author":{"gitId":"ong-wei-hong"},"content":"            argMultimap.getValue(PREFIX_LEAVE_STATUS).ifPresent((s) -\u003e editLeaveDescriptor.setStatus(Status.of(s)));","lastModifiedDate":"2023-11-02"},{"lineNumber":78,"author":{"gitId":"ong-wei-hong"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-11-02"},{"lineNumber":79,"author":{"gitId":"ong-wei-hong"},"content":"            throw new ParseException(Status.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-02"},{"lineNumber":80,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":81,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":82,"author":{"gitId":"ong-wei-hong"},"content":"        if (!editLeaveDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2023-11-02"},{"lineNumber":83,"author":{"gitId":"ong-wei-hong"},"content":"            throw new ParseException(EditLeaveCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2023-11-02"},{"lineNumber":84,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":85,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":86,"author":{"gitId":"ong-wei-hong"},"content":"        return new EditLeaveCommand(index, editLeaveDescriptor);","lastModifiedDate":"2023-11-02"},{"lineNumber":87,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":88,"author":{"gitId":"ong-wei-hong"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"jean-cq":6,"ong-wei-hong":82}},{"path":"src/main/java/seedu/address/logic/parser/ExportCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.CsvUtil;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.ExportCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":" * Parses input arguments for child Export parsers","lastModifiedDate":"2023-11-03"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"public abstract class ExportCommandParser {","lastModifiedDate":"2023-11-03"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"    private final Path exportFolder \u003d Path.of(ExportCommand.EXPORT_DEST);","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"     * Parses the given {@code String} of arguments in the context of the ExportCommand","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"     * and returns a file name for the child Export commands to save to.","lastModifiedDate":"2023-11-03"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"     * @param args String containing file name to parse","lastModifiedDate":"2023-11-03"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"     * @param messageUsage Message to display if file name is not of the expected format","lastModifiedDate":"2023-11-03"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"     * @throws ParseException if the user input does not conform to the expected format","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"    public Path parseFileName(String args, String messageUsage) throws ParseException {","lastModifiedDate":"2023-11-03"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"        boolean inputPathIsDirectory \u003d trimmedArgs.endsWith(\"/\");","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"        if (!FileUtil.isValidPath(trimmedArgs) || inputPathIsDirectory) {","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, messageUsage));","lastModifiedDate":"2023-11-03"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"        Path fileName \u003d getFileName(trimmedArgs);","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"        if (fileName.toString().isEmpty()) {","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, messageUsage));","lastModifiedDate":"2023-11-03"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"        String fileWithExtension \u003d appendExtension(fileName.toString());","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"        return exportFolder.resolve(fileWithExtension);","lastModifiedDate":"2023-11-03"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"    private Path getFileName(String path) {","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"        Path filePath \u003d Paths.get(path);","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"        System.out.println(filePath);","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"        return filePath.getFileName();","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"     * Strips the extension provided by the user (if any) and appends the CSV extension","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"     * @param path File path provided by user","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"     * @return File path containing CSV extension","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"    private String appendExtension(String path) {","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"        int extensionPos \u003d path.lastIndexOf(\u0027.\u0027);","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"        boolean pathContainsExtension \u003d extensionPos \u003e -1;","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"        String pathStrippedExtension;","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"        if (pathContainsExtension) {","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"            pathStrippedExtension \u003d path.substring(0, extensionPos);","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"        } else {","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"            pathStrippedExtension \u003d path;","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"        return pathStrippedExtension.concat(CsvUtil.EXTENSION);","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"ryanozx":70}},{"path":"src/main/java/seedu/address/logic/parser/ExportContactCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-11-03"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-11-03"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.ExportContactCommand;","lastModifiedDate":"2023-11-03"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-11-03"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-11-03"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":" * Parses user input into a ExportContactCommand","lastModifiedDate":"2023-11-03"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-11-03"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"public class ExportContactCommandParser extends ExportCommandParser implements Parser\u003cExportContactCommand\u003e {","lastModifiedDate":"2023-11-03"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-03"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"    public ExportContactCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2023-11-03"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"        Path fileName \u003d parseFileName(userInput, ExportContactCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-11-03"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"        return new ExportContactCommand(fileName);","lastModifiedDate":"2023-11-03"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-03"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-03"}],"authorContributionMap":{"ryanozx":18}},{"path":"src/main/java/seedu/address/logic/parser/ExportLeaveCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-11-03"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-11-03"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.ExportLeaveCommand;","lastModifiedDate":"2023-11-03"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-11-03"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-11-03"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":" * Parses user input into a ExportLeaveCommand","lastModifiedDate":"2023-11-03"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-11-03"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"public class ExportLeaveCommandParser extends ExportCommandParser implements Parser\u003cExportLeaveCommand\u003e {","lastModifiedDate":"2023-11-03"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-03"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"    public ExportLeaveCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2023-11-03"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"        Path fileName \u003d parseFileName(userInput, ExportLeaveCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-11-03"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"        return new ExportLeaveCommand(fileName);","lastModifiedDate":"2023-11-03"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-03"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-03"}],"authorContributionMap":{"ryanozx":18}},{"path":"src/main/java/seedu/address/logic/parser/FindAllTagCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-14"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_TAG;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"import java.util.List;","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-10-15"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.commands.FindAllTagCommand;","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.person.TagsContainAllTagsPredicate;","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"/**","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":" * Parses input arguments and creates a new FindAllTagCommand object","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":" */","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"public class FindAllTagCommandParser implements Parser\u003cFindAllTagCommand\u003e {","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"    public static final String MESSAGE_FORMAT_REMINDER \u003d","lastModifiedDate":"2023-10-15"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"            String.format(\"\\nFormat reminder: %1$s\", FindAllTagCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-15"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"    public static final String MESSAGE_INVALID_TAG \u003d","lastModifiedDate":"2023-10-15"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":"            \"Tags names only allows alphanumeric characters, spaces, and dashes.\";","lastModifiedDate":"2023-10-15"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"     * Parses the given {@code String} of arguments in the context of the FindAllTagCommand","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"     * and returns a FindAllTagCommand object for execution.","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":"    public FindAllTagCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"jean-cq"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PERSON_TAG);","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"jean-cq"},"content":"        if (args.isEmpty() || !isPrefixPresent(argMultimap, PREFIX_PERSON_TAG)) {","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"jean-cq"},"content":"            throw new ParseException(","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"jean-cq"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindAllTagCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-14"},{"lineNumber":33,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":34,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"        List\u003cString\u003e tagArguments \u003d argMultimap.getAllValues(PREFIX_PERSON_TAG);","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-14"},{"lineNumber":37,"author":{"gitId":"jean-cq"},"content":"        for (String keyword : tagArguments) {","lastModifiedDate":"2023-10-15"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"            try {","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"jean-cq"},"content":"                Tag tag \u003d new Tag(keyword);","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"jean-cq"},"content":"                tagList.add(tag);","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"jean-cq"},"content":"            } catch (IllegalArgumentException ie) {","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"jean-cq"},"content":"                throw new ParseException(MESSAGE_INVALID_TAG + MESSAGE_FORMAT_REMINDER, ie);","lastModifiedDate":"2023-10-15"},{"lineNumber":43,"author":{"gitId":"jean-cq"},"content":"            }","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"jean-cq"},"content":"        return new FindAllTagCommand(new TagsContainAllTagsPredicate(tagList));","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":48,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-15"},{"lineNumber":50,"author":{"gitId":"jean-cq"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2023-10-15"},{"lineNumber":51,"author":{"gitId":"jean-cq"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-10-15"},{"lineNumber":52,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-15"},{"lineNumber":53,"author":{"gitId":"jean-cq"},"content":"    private static boolean isPrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-10-15"},{"lineNumber":54,"author":{"gitId":"jean-cq"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-10-15"},{"lineNumber":55,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":56,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":57,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-10-14"}],"authorContributionMap":{"jean-cq":57}},{"path":"src/main/java/seedu/address/logic/parser/FindLeaveByPeriodCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_DATE_END;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_DATE_START;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.FindLeaveByPeriodCommand;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.LeaveInPeriodPredicate;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Range;","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":" * Parses input arguments and creates a FindLeaveByPeriodCommand object","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"public class FindLeaveByPeriodCommandParser implements Parser\u003cFindLeaveByPeriodCommand\u003e {","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"     * Parses the given {@code String} of arguments in the context of the FindLeaveByPeriodCommand","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"     * and returns a FindLeaveByPeriod object for execution.","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    public FindLeaveByPeriodCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"                ArgumentTokenizer.tokenize(userInput, PREFIX_LEAVE_DATE_START, PREFIX_LEAVE_DATE_END);","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_LEAVE_DATE_START, PREFIX_LEAVE_DATE_END);","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"        String startDate \u003d argMultimap.getValue(PREFIX_LEAVE_DATE_START).orElse(null);","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"        String endDate \u003d argMultimap.getValue(PREFIX_LEAVE_DATE_END).orElse(null);","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"        Range dateRange \u003d ParserUtil.parseNullableRange(startDate, endDate);","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate predicate \u003d new LeaveInPeriodPredicate(dateRange);","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"        return new FindLeaveByPeriodCommand(predicate);","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"ryanozx":36}},{"path":"src/main/java/seedu/address/logic/parser/FindLeaveByStatusCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.FindLeaveByStatusCommand;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.LeaveHasStatusPredicate;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Status;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":" * Parses input arguments and creates a FindLeaveByStatusCommand object","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"public class FindLeaveByStatusCommandParser implements Parser\u003cFindLeaveByStatusCommand\u003e {","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"     * Parses the given {@code String} of arguments in the context of the FindLeaveByStatusCommand","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"     * and returns a FindLeaveByPeriod object for execution.","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"    public FindLeaveByStatusCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"        try {","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"            // trims the input and is case-agnostic","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"            String trimmedUpperCaseInput \u003d userInput.trim().toUpperCase();","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"            LeaveHasStatusPredicate predicate \u003d new LeaveHasStatusPredicate(","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"                    Status.of(trimmedUpperCaseInput)","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"            );","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"            return new FindLeaveByStatusCommand(predicate);","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"        } catch (IllegalArgumentException | NullPointerException e) {","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"            throw new ParseException(FindLeaveByStatusCommand.MESSAGE_FAILED);","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"ryanozx":30}},{"path":"src/main/java/seedu/address/logic/parser/FindLeaveCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"InfiBeyond"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"InfiBeyond"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.logic.parser.ParserUtil.parseIndex;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.commands.FindLeaveCommand;","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"InfiBeyond"},"content":"/**","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"InfiBeyond"},"content":" * Parses input arguments and creates a new FindLeaveCommand object","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"InfiBeyond"},"content":" */","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"InfiBeyond"},"content":"public class FindLeaveCommandParser implements Parser\u003cFindLeaveCommand\u003e {","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"InfiBeyond"},"content":"    public static final String MESSAGE_FORMAT_REMINDER \u003d","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"InfiBeyond"},"content":"            String.format(\"\\nFormat reminder: %1$s\", FindLeaveCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"InfiBeyond"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"InfiBeyond"},"content":"     * Parses the given {@code String} of arguments in the context of the FindLeaveCommand","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"InfiBeyond"},"content":"     * and returns a FindLeaveCommand object for execution.","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"InfiBeyond"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"InfiBeyond"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"InfiBeyond"},"content":"    public FindLeaveCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"InfiBeyond"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"InfiBeyond"},"content":"        Index index;","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"InfiBeyond"},"content":"        try {","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"InfiBeyond"},"content":"            index \u003d parseIndex(args);","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"InfiBeyond"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"InfiBeyond"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"InfiBeyond"},"content":"                    FindLeaveCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"InfiBeyond"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"InfiBeyond"},"content":"        return new FindLeaveCommand(index);","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"InfiBeyond"},"content":"}","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"InfiBeyond":37}},{"path":"src/main/java/seedu/address/logic/parser/FindSomeTagCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_TAG;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"import java.util.List;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-10-15"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.commands.FindAllTagCommand;","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.commands.FindSomeTagCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.person.TagsContainSomeTagsPredicate;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":" * Parses input arguments and creates a new FindSomeTagCommand object","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"public class FindSomeTagCommandParser implements Parser\u003cFindSomeTagCommand\u003e {","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"    public static final String MESSAGE_FORMAT_REMINDER \u003d","lastModifiedDate":"2023-10-15"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"            String.format(\"\\nFormat reminder: %1$s\", FindAllTagCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-15"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":"    public static final String MESSAGE_INVALID_TAG \u003d","lastModifiedDate":"2023-10-15"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":"            \"Tags names only allows alphanumeric characters, spaces, and dashes.\";","lastModifiedDate":"2023-10-15"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"     * Parses the given {@code String} of arguments in the context of the FindSomeTagCommand","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":"     * and returns a FindSomeTagCommand object for execution.","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"jean-cq"},"content":"    public FindSomeTagCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"jean-cq"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PERSON_TAG);","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"jean-cq"},"content":"        if (args.isEmpty() || !isPrefixPresent(argMultimap, PREFIX_PERSON_TAG)) {","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"jean-cq"},"content":"            throw new ParseException(","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"jean-cq"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindSomeTagCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"jean-cq"},"content":"        List\u003cString\u003e tagArguments \u003d argMultimap.getAllValues(PREFIX_PERSON_TAG);","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"        for (String keyword : tagArguments) {","lastModifiedDate":"2023-10-15"},{"lineNumber":39,"author":{"gitId":"jean-cq"},"content":"            try {","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"jean-cq"},"content":"                Tag tag \u003d new Tag(keyword);","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"jean-cq"},"content":"                tagList.add(tag);","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"jean-cq"},"content":"            } catch (IllegalArgumentException ie) {","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"jean-cq"},"content":"                throw new ParseException(MESSAGE_INVALID_TAG + MESSAGE_FORMAT_REMINDER, ie);","lastModifiedDate":"2023-10-15"},{"lineNumber":44,"author":{"gitId":"jean-cq"},"content":"            }","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"jean-cq"},"content":"        return new FindSomeTagCommand(new TagsContainSomeTagsPredicate(tagList));","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-15"},{"lineNumber":51,"author":{"gitId":"jean-cq"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2023-10-15"},{"lineNumber":52,"author":{"gitId":"jean-cq"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-10-15"},{"lineNumber":53,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-15"},{"lineNumber":54,"author":{"gitId":"jean-cq"},"content":"    private static boolean isPrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-10-15"},{"lineNumber":55,"author":{"gitId":"jean-cq"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-10-15"},{"lineNumber":56,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":57,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":58,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"jean-cq":58}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-11-08"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.logic.parser.exceptions.InvalidIndexException;","lastModifiedDate":"2023-11-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.leave.Date;","lastModifiedDate":"2023-10-28"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Description;","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Range;","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Title;","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.exceptions.EndBeforeStartException;","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-02-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-02-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-02-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not an integer.\";","lastModifiedDate":"2023-11-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"        // Once trimmed, first check the completely invalid formats, ie empty string, or non-integer","lastModifiedDate":"2023-11-08"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"        // Then check if is a non-zero unsigned integer","lastModifiedDate":"2023-11-08"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"        if (!StringUtil.isInteger(trimmedIndex)) {","lastModifiedDate":"2023-11-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":47,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":48,"author":{"gitId":"ivyy-poison"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2023-11-08"},{"lineNumber":49,"author":{"gitId":"ivyy-poison"},"content":"            throw new InvalidIndexException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-11-08"},{"lineNumber":50,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-11-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":140,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":141,"author":{"gitId":"jean-cq"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LeavesBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-28"},{"lineNumber":142,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":143,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":144,"author":{"gitId":"jean-cq"},"content":"     * Parses a {@code String title} into a {@code String}.","lastModifiedDate":"2023-10-28"},{"lineNumber":145,"author":{"gitId":"jean-cq"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-28"},{"lineNumber":146,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":147,"author":{"gitId":"ryanozx"},"content":"    public static Title parseTitle(String title) {","lastModifiedDate":"2023-11-02"},{"lineNumber":148,"author":{"gitId":"jean-cq"},"content":"        requireNonNull(title);","lastModifiedDate":"2023-10-28"},{"lineNumber":149,"author":{"gitId":"jean-cq"},"content":"        String trimmedTitle \u003d title.trim();","lastModifiedDate":"2023-11-03"},{"lineNumber":150,"author":{"gitId":"jean-cq"},"content":"        return new Title(trimmedTitle);","lastModifiedDate":"2023-11-03"},{"lineNumber":151,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":152,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":153,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":154,"author":{"gitId":"ryanozx"},"content":"     * Parses a {@code String start} {@code String end} into an {@code Range}. Both start and","lastModifiedDate":"2023-11-02"},{"lineNumber":155,"author":{"gitId":"ryanozx"},"content":"     * end must be non-null.","lastModifiedDate":"2023-11-02"},{"lineNumber":156,"author":{"gitId":"jean-cq"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-28"},{"lineNumber":157,"author":{"gitId":"jean-cq"},"content":"     *","lastModifiedDate":"2023-10-28"},{"lineNumber":158,"author":{"gitId":"ryanozx"},"content":"     * @param start Non-null string containing the start date","lastModifiedDate":"2023-11-02"},{"lineNumber":159,"author":{"gitId":"ryanozx"},"content":"     * @param end Non-null string containing the end date","lastModifiedDate":"2023-11-02"},{"lineNumber":160,"author":{"gitId":"ryanozx"},"content":"     * @throws ParseException if the given {@code start} and {@code end} is invalid, or if","lastModifiedDate":"2023-11-02"},{"lineNumber":161,"author":{"gitId":"ryanozx"},"content":"     *      the end date is before the start date","lastModifiedDate":"2023-11-02"},{"lineNumber":162,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":163,"author":{"gitId":"ryanozx"},"content":"    public static Range parseNonNullRange(String start, String end) throws ParseException {","lastModifiedDate":"2023-11-02"},{"lineNumber":164,"author":{"gitId":"jean-cq"},"content":"        requireNonNull(end);","lastModifiedDate":"2023-10-28"},{"lineNumber":165,"author":{"gitId":"jean-cq"},"content":"        requireNonNull(start);","lastModifiedDate":"2023-10-28"},{"lineNumber":166,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":167,"author":{"gitId":"jean-cq"},"content":"        try {","lastModifiedDate":"2023-11-01"},{"lineNumber":168,"author":{"gitId":"ryanozx"},"content":"            String trimmedStart \u003d start.trim();","lastModifiedDate":"2023-11-02"},{"lineNumber":169,"author":{"gitId":"ryanozx"},"content":"            String trimmedEnd \u003d end.trim();","lastModifiedDate":"2023-11-02"},{"lineNumber":170,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":171,"author":{"gitId":"ryanozx"},"content":"            Date startDate \u003d Date.of(trimmedStart);","lastModifiedDate":"2023-11-02"},{"lineNumber":172,"author":{"gitId":"ryanozx"},"content":"            Date endDate \u003d Date.of(trimmedEnd);","lastModifiedDate":"2023-11-02"},{"lineNumber":173,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":174,"author":{"gitId":"ryanozx"},"content":"            return Range.createNonNullRange(startDate, endDate);","lastModifiedDate":"2023-11-02"},{"lineNumber":175,"author":{"gitId":"ryanozx"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-11-02"},{"lineNumber":176,"author":{"gitId":"ryanozx"},"content":"            throw new ParseException(Date.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-02"},{"lineNumber":177,"author":{"gitId":"ryanozx"},"content":"        } catch (EndBeforeStartException e) {","lastModifiedDate":"2023-11-02"},{"lineNumber":178,"author":{"gitId":"ryanozx"},"content":"            throw new ParseException(Range.MESSAGE_INVALID_END_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":179,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":180,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":181,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":182,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":183,"author":{"gitId":"ryanozx"},"content":"     * Parses a {@code String start} {@code String end} into an {@code Range}.","lastModifiedDate":"2023-11-02"},{"lineNumber":184,"author":{"gitId":"ryanozx"},"content":"     * Start and end can be null.","lastModifiedDate":"2023-11-02"},{"lineNumber":185,"author":{"gitId":"ryanozx"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-11-02"},{"lineNumber":186,"author":{"gitId":"ryanozx"},"content":"     *","lastModifiedDate":"2023-11-02"},{"lineNumber":187,"author":{"gitId":"ryanozx"},"content":"     * @param start String containing the start date / null","lastModifiedDate":"2023-11-02"},{"lineNumber":188,"author":{"gitId":"ryanozx"},"content":"     * @param end String containing the end date / null","lastModifiedDate":"2023-11-02"},{"lineNumber":189,"author":{"gitId":"ryanozx"},"content":"     * @throws ParseException if the given {@code start} and {@code end} is invalid, or if","lastModifiedDate":"2023-11-02"},{"lineNumber":190,"author":{"gitId":"ryanozx"},"content":"     *      the end date is before the start date","lastModifiedDate":"2023-11-02"},{"lineNumber":191,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":192,"author":{"gitId":"ryanozx"},"content":"    public static Range parseNullableRange(String start, String end) throws ParseException {","lastModifiedDate":"2023-11-02"},{"lineNumber":193,"author":{"gitId":"ryanozx"},"content":"        try {","lastModifiedDate":"2023-11-02"},{"lineNumber":194,"author":{"gitId":"ryanozx"},"content":"            boolean hasStart \u003d start !\u003d null;","lastModifiedDate":"2023-11-02"},{"lineNumber":195,"author":{"gitId":"ryanozx"},"content":"            boolean hasEnd \u003d end !\u003d null;","lastModifiedDate":"2023-11-02"},{"lineNumber":196,"author":{"gitId":"ryanozx"},"content":"            Date startDate \u003d hasStart ? Date.of(start.trim()) : null;","lastModifiedDate":"2023-11-02"},{"lineNumber":197,"author":{"gitId":"ryanozx"},"content":"            Date endDate \u003d hasEnd ? Date.of(end.trim()) : null;","lastModifiedDate":"2023-11-02"},{"lineNumber":198,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":199,"author":{"gitId":"ryanozx"},"content":"            return Range.createNullableRange(startDate, endDate);","lastModifiedDate":"2023-11-02"},{"lineNumber":200,"author":{"gitId":"jean-cq"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-11-01"},{"lineNumber":201,"author":{"gitId":"jean-cq"},"content":"            throw new ParseException(Date.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-01"},{"lineNumber":202,"author":{"gitId":"ryanozx"},"content":"        } catch (EndBeforeStartException e) {","lastModifiedDate":"2023-11-02"},{"lineNumber":203,"author":{"gitId":"ryanozx"},"content":"            throw new ParseException(Range.MESSAGE_INVALID_END_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":204,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":205,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":206,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":207,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":208,"author":{"gitId":"jean-cq"},"content":"     * Parses a {@code String description} into a {@code String}.","lastModifiedDate":"2023-10-28"},{"lineNumber":209,"author":{"gitId":"jean-cq"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-28"},{"lineNumber":210,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":211,"author":{"gitId":"ryanozx"},"content":"    public static Description parseDescription(String description) {","lastModifiedDate":"2023-11-02"},{"lineNumber":212,"author":{"gitId":"jean-cq"},"content":"        requireNonNull(description);","lastModifiedDate":"2023-10-28"},{"lineNumber":213,"author":{"gitId":"jean-cq"},"content":"        String trimmedDescription \u003d description.trim();","lastModifiedDate":"2023-11-03"},{"lineNumber":214,"author":{"gitId":"ong-wei-hong"},"content":"        if (trimmedDescription.isEmpty()) {","lastModifiedDate":"2023-11-10"},{"lineNumber":215,"author":{"gitId":"ong-wei-hong"},"content":"            trimmedDescription \u003d Description.DESCRIPTION_PLACEHOLDER;","lastModifiedDate":"2023-11-10"},{"lineNumber":216,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-10"},{"lineNumber":217,"author":{"gitId":"jean-cq"},"content":"        return new Description(trimmedDescription);","lastModifiedDate":"2023-11-03"},{"lineNumber":218,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":219,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"ryanozx":47,"jean-cq":35,"ivyy-poison":12,"-":122,"ong-wei-hong":3}},{"path":"src/main/java/seedu/address/logic/parser/RejectLeaveCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"InfiBeyond"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-31"},{"lineNumber":2,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":3,"author":{"gitId":"InfiBeyond"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-31"},{"lineNumber":4,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-31"},{"lineNumber":5,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.logic.parser.ParserUtil.parseIndex;","lastModifiedDate":"2023-10-31"},{"lineNumber":6,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-31"},{"lineNumber":8,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.commands.RejectLeaveCommand;","lastModifiedDate":"2023-10-31"},{"lineNumber":9,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-31"},{"lineNumber":10,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":11,"author":{"gitId":"InfiBeyond"},"content":"/**","lastModifiedDate":"2023-10-31"},{"lineNumber":12,"author":{"gitId":"InfiBeyond"},"content":" * Parses input arguments and creates a new RejectLeaveCommand object","lastModifiedDate":"2023-10-31"},{"lineNumber":13,"author":{"gitId":"InfiBeyond"},"content":" */","lastModifiedDate":"2023-10-31"},{"lineNumber":14,"author":{"gitId":"InfiBeyond"},"content":"public class RejectLeaveCommandParser implements Parser\u003cRejectLeaveCommand\u003e {","lastModifiedDate":"2023-10-31"},{"lineNumber":15,"author":{"gitId":"InfiBeyond"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":16,"author":{"gitId":"InfiBeyond"},"content":"     * Parses the given {@code String} of arguments in the context of the RejectLeaveCommand","lastModifiedDate":"2023-10-31"},{"lineNumber":17,"author":{"gitId":"InfiBeyond"},"content":"     * and returns an RejectLeaveCommand object for execution.","lastModifiedDate":"2023-10-31"},{"lineNumber":18,"author":{"gitId":"InfiBeyond"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-31"},{"lineNumber":19,"author":{"gitId":"InfiBeyond"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":20,"author":{"gitId":"InfiBeyond"},"content":"    public RejectLeaveCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-31"},{"lineNumber":21,"author":{"gitId":"InfiBeyond"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-10-31"},{"lineNumber":22,"author":{"gitId":"InfiBeyond"},"content":"        Index index;","lastModifiedDate":"2023-10-31"},{"lineNumber":23,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":24,"author":{"gitId":"InfiBeyond"},"content":"        try {","lastModifiedDate":"2023-10-31"},{"lineNumber":25,"author":{"gitId":"InfiBeyond"},"content":"            index \u003d parseIndex(args);","lastModifiedDate":"2023-10-31"},{"lineNumber":26,"author":{"gitId":"InfiBeyond"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-31"},{"lineNumber":27,"author":{"gitId":"InfiBeyond"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-31"},{"lineNumber":28,"author":{"gitId":"InfiBeyond"},"content":"                    RejectLeaveCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-31"},{"lineNumber":29,"author":{"gitId":"InfiBeyond"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":30,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":31,"author":{"gitId":"InfiBeyond"},"content":"        return new RejectLeaveCommand(index);","lastModifiedDate":"2023-10-31"},{"lineNumber":32,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":33,"author":{"gitId":"InfiBeyond"},"content":"}","lastModifiedDate":"2023-10-31"}],"authorContributionMap":{"InfiBeyond":33}},{"path":"src/main/java/seedu/address/logic/parser/exceptions/InvalidIndexException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.logic.parser.exceptions;","lastModifiedDate":"2023-11-08"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"/**","lastModifiedDate":"2023-11-08"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":" * Represents a parse error encountered by a parser. Whereby the index is invalid.","lastModifiedDate":"2023-11-08"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":" */","lastModifiedDate":"2023-11-08"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"public class InvalidIndexException extends ParseException {","lastModifiedDate":"2023-11-08"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"    public InvalidIndexException(String message) {","lastModifiedDate":"2023-11-08"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"        super(message);","lastModifiedDate":"2023-11-08"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-11-08"}],"authorContributionMap":{"ivyy-poison":10}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.person.ComparablePerson;","lastModifiedDate":"2023-10-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public AddressBook() {}","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2018-03-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"ivyy-poison"},"content":"    public boolean hasPerson(ComparablePerson person) {","lastModifiedDate":"2023-10-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"ivyy-poison"},"content":"    public Person getPerson(ComparablePerson target) throws PersonNotFoundException {","lastModifiedDate":"2023-10-27"},{"lineNumber":74,"author":{"gitId":"ivyy-poison"},"content":"        requireNonNull(target);","lastModifiedDate":"2023-10-27"},{"lineNumber":75,"author":{"gitId":"ivyy-poison"},"content":"        for (Person person : persons) {","lastModifiedDate":"2023-10-27"},{"lineNumber":76,"author":{"gitId":"ivyy-poison"},"content":"            if (person.isSamePerson(target)) {","lastModifiedDate":"2023-10-27"},{"lineNumber":77,"author":{"gitId":"ivyy-poison"},"content":"                return person;","lastModifiedDate":"2023-10-27"},{"lineNumber":78,"author":{"gitId":"ivyy-poison"},"content":"            }","lastModifiedDate":"2023-10-26"},{"lineNumber":79,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":80,"author":{"gitId":"ivyy-poison"},"content":"        throw new PersonNotFoundException();","lastModifiedDate":"2023-10-26"},{"lineNumber":81,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":82,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .add(\"persons\", persons)","lastModifiedDate":"2019-02-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        if (!(other instanceof AddressBook)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        AddressBook otherAddressBook \u003d (AddressBook) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return persons.equals(otherAddressBook.persons);","lastModifiedDate":"2023-07-13"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        return persons.hashCode();","lastModifiedDate":"2018-03-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"ivyy-poison":13,"-":130}},{"path":"src/main/java/seedu/address/model/LeavesBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"package seedu.address.model;","lastModifiedDate":"2023-10-28"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-28"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"import java.util.List;","lastModifiedDate":"2023-10-28"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-28"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-28"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-10-28"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.leave.UniqueLeaveList;","lastModifiedDate":"2023-10-28"},{"lineNumber":11,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"/**","lastModifiedDate":"2023-10-28"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":" * Wraps all data at the leaves-book level","lastModifiedDate":"2023-10-28"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":" * Duplicates are not allowed (by .isSameLeave comparison)","lastModifiedDate":"2023-10-28"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":" */","lastModifiedDate":"2023-10-28"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"public class LeavesBook implements ReadOnlyLeavesBook {","lastModifiedDate":"2023-10-28"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"    private final UniqueLeaveList leaves;","lastModifiedDate":"2023-10-28"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"    /*","lastModifiedDate":"2023-10-28"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2023-10-28"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2023-10-28"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"     *","lastModifiedDate":"2023-10-28"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2023-10-28"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":"     *   among constructors.","lastModifiedDate":"2023-10-28"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":"    {","lastModifiedDate":"2023-10-28"},{"lineNumber":29,"author":{"gitId":"jean-cq"},"content":"        leaves \u003d new UniqueLeaveList();","lastModifiedDate":"2023-10-28"},{"lineNumber":30,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":31,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":32,"author":{"gitId":"jean-cq"},"content":"    public LeavesBook() {","lastModifiedDate":"2023-10-28"},{"lineNumber":33,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":34,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":36,"author":{"gitId":"jean-cq"},"content":"     * Creates an LeavesBook using the Leaves in the {@code toBeCopied}","lastModifiedDate":"2023-10-28"},{"lineNumber":37,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"    public LeavesBook(ReadOnlyLeavesBook toBeCopied) {","lastModifiedDate":"2023-10-28"},{"lineNumber":39,"author":{"gitId":"jean-cq"},"content":"        this();","lastModifiedDate":"2023-10-28"},{"lineNumber":40,"author":{"gitId":"jean-cq"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2023-10-28"},{"lineNumber":41,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":42,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":43,"author":{"gitId":"jean-cq"},"content":"    //// list overwrite operations","lastModifiedDate":"2023-10-28"},{"lineNumber":44,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":45,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":46,"author":{"gitId":"jean-cq"},"content":"     * Replaces the contents of the leave list with {@code leaves}.","lastModifiedDate":"2023-10-28"},{"lineNumber":47,"author":{"gitId":"jean-cq"},"content":"     * {@code leaves} must not contain duplicate leaves.","lastModifiedDate":"2023-10-28"},{"lineNumber":48,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":49,"author":{"gitId":"jean-cq"},"content":"    public void setLeaves(List\u003cLeave\u003e leaves) {","lastModifiedDate":"2023-10-28"},{"lineNumber":50,"author":{"gitId":"jean-cq"},"content":"        this.leaves.setLeaves(leaves);","lastModifiedDate":"2023-10-28"},{"lineNumber":51,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":52,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":53,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":54,"author":{"gitId":"jean-cq"},"content":"     * Resets the existing data of this {@code LeavesBook} with {@code newData}.","lastModifiedDate":"2023-10-28"},{"lineNumber":55,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":56,"author":{"gitId":"jean-cq"},"content":"    public void resetData(ReadOnlyLeavesBook newData) {","lastModifiedDate":"2023-10-28"},{"lineNumber":57,"author":{"gitId":"jean-cq"},"content":"        requireNonNull(newData);","lastModifiedDate":"2023-10-28"},{"lineNumber":58,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":59,"author":{"gitId":"jean-cq"},"content":"        setLeaves(newData.getLeaveList());","lastModifiedDate":"2023-10-28"},{"lineNumber":60,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":61,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":62,"author":{"gitId":"jean-cq"},"content":"    //// leave-level operations","lastModifiedDate":"2023-10-28"},{"lineNumber":63,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":64,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":65,"author":{"gitId":"jean-cq"},"content":"     * Returns true if a leave with the same identity as {@code leave} exists in the leaves book.","lastModifiedDate":"2023-10-28"},{"lineNumber":66,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":67,"author":{"gitId":"jean-cq"},"content":"    public boolean hasLeave(Leave leave) {","lastModifiedDate":"2023-10-28"},{"lineNumber":68,"author":{"gitId":"jean-cq"},"content":"        requireNonNull(leave);","lastModifiedDate":"2023-10-28"},{"lineNumber":69,"author":{"gitId":"jean-cq"},"content":"        return leaves.contains(leave);","lastModifiedDate":"2023-10-28"},{"lineNumber":70,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":71,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":72,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-11-08"},{"lineNumber":73,"author":{"gitId":"ivyy-poison"},"content":"     * Returns true if a leave belonging to same employee has overlapping dates as {@code leave} exists in the","lastModifiedDate":"2023-11-08"},{"lineNumber":74,"author":{"gitId":"ivyy-poison"},"content":"     * leaves book.","lastModifiedDate":"2023-11-08"},{"lineNumber":75,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-11-08"},{"lineNumber":76,"author":{"gitId":"ivyy-poison"},"content":"     * @param leave","lastModifiedDate":"2023-11-08"},{"lineNumber":77,"author":{"gitId":"ivyy-poison"},"content":"     * @return","lastModifiedDate":"2023-11-08"},{"lineNumber":78,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-11-08"},{"lineNumber":79,"author":{"gitId":"ivyy-poison"},"content":"    public boolean hasConcurrentLeave(Leave leave) {","lastModifiedDate":"2023-11-08"},{"lineNumber":80,"author":{"gitId":"ivyy-poison"},"content":"        requireNonNull(leave);","lastModifiedDate":"2023-11-08"},{"lineNumber":81,"author":{"gitId":"ivyy-poison"},"content":"        return leaves.hasConcurrentLeave(leave);","lastModifiedDate":"2023-11-08"},{"lineNumber":82,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":83,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":84,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":85,"author":{"gitId":"jean-cq"},"content":"     * Adds a leave to the leaves book.","lastModifiedDate":"2023-10-28"},{"lineNumber":86,"author":{"gitId":"jean-cq"},"content":"     * The leave must not already exist in the leaves book.","lastModifiedDate":"2023-10-28"},{"lineNumber":87,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":88,"author":{"gitId":"jean-cq"},"content":"    public void addLeave(Leave l) {","lastModifiedDate":"2023-10-28"},{"lineNumber":89,"author":{"gitId":"jean-cq"},"content":"        leaves.add(l);","lastModifiedDate":"2023-10-28"},{"lineNumber":90,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":91,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":92,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":93,"author":{"gitId":"jean-cq"},"content":"     * Replaces the given leave {@code target} in the list with {@code editedLeave}.","lastModifiedDate":"2023-10-28"},{"lineNumber":94,"author":{"gitId":"jean-cq"},"content":"     * {@code target} must exist in the leaves book.","lastModifiedDate":"2023-10-28"},{"lineNumber":95,"author":{"gitId":"jean-cq"},"content":"     * The leave identity of {@code editedLeave} must not be the same as another existing leave in the leaves book.","lastModifiedDate":"2023-10-28"},{"lineNumber":96,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":97,"author":{"gitId":"jean-cq"},"content":"    public void setLeave(Leave target, Leave editedLeave) {","lastModifiedDate":"2023-10-28"},{"lineNumber":98,"author":{"gitId":"jean-cq"},"content":"        requireNonNull(editedLeave);","lastModifiedDate":"2023-10-28"},{"lineNumber":99,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":100,"author":{"gitId":"jean-cq"},"content":"        leaves.setLeave(target, editedLeave);","lastModifiedDate":"2023-10-28"},{"lineNumber":101,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":102,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":103,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":104,"author":{"gitId":"jean-cq"},"content":"     * Removes {@code key} from this {@code LeavesBook}.","lastModifiedDate":"2023-10-28"},{"lineNumber":105,"author":{"gitId":"jean-cq"},"content":"     * {@code key} must exist in the leaves book.","lastModifiedDate":"2023-10-28"},{"lineNumber":106,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":107,"author":{"gitId":"jean-cq"},"content":"    public void removeLeave(Leave key) {","lastModifiedDate":"2023-10-28"},{"lineNumber":108,"author":{"gitId":"jean-cq"},"content":"        leaves.remove(key);","lastModifiedDate":"2023-10-28"},{"lineNumber":109,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":110,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":111,"author":{"gitId":"ong-wei-hong"},"content":"    public void removePerson(Person p) {","lastModifiedDate":"2023-11-02"},{"lineNumber":112,"author":{"gitId":"ong-wei-hong"},"content":"        leaves.removePerson(p);","lastModifiedDate":"2023-11-02"},{"lineNumber":113,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":114,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":115,"author":{"gitId":"ong-wei-hong"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2023-11-02"},{"lineNumber":116,"author":{"gitId":"ong-wei-hong"},"content":"        leaves.setPerson(target, editedPerson);","lastModifiedDate":"2023-11-02"},{"lineNumber":117,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":118,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":119,"author":{"gitId":"jean-cq"},"content":"    //// util methods","lastModifiedDate":"2023-10-28"},{"lineNumber":120,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":121,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":122,"author":{"gitId":"jean-cq"},"content":"    public String toString() {","lastModifiedDate":"2023-10-28"},{"lineNumber":123,"author":{"gitId":"jean-cq"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-28"},{"lineNumber":124,"author":{"gitId":"jean-cq"},"content":"                .add(\"leaves\", leaves.asUnmodifiableObservableList())","lastModifiedDate":"2023-10-28"},{"lineNumber":125,"author":{"gitId":"jean-cq"},"content":"                .toString();","lastModifiedDate":"2023-10-28"},{"lineNumber":126,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":127,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":128,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":129,"author":{"gitId":"jean-cq"},"content":"    public ObservableList\u003cLeave\u003e getLeaveList() {","lastModifiedDate":"2023-10-28"},{"lineNumber":130,"author":{"gitId":"jean-cq"},"content":"        return leaves.asUnmodifiableObservableList();","lastModifiedDate":"2023-10-28"},{"lineNumber":131,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":132,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":133,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":134,"author":{"gitId":"jean-cq"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-28"},{"lineNumber":135,"author":{"gitId":"jean-cq"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-28"},{"lineNumber":136,"author":{"gitId":"jean-cq"},"content":"            return true;","lastModifiedDate":"2023-10-28"},{"lineNumber":137,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":138,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":139,"author":{"gitId":"jean-cq"},"content":"        return other instanceof LeavesBook","lastModifiedDate":"2023-10-28"},{"lineNumber":140,"author":{"gitId":"jean-cq"},"content":"                \u0026\u0026 leaves.equals(((LeavesBook) other).leaves);","lastModifiedDate":"2023-10-28"},{"lineNumber":141,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":142,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":143,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":144,"author":{"gitId":"jean-cq"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-28"},{"lineNumber":145,"author":{"gitId":"jean-cq"},"content":"        return leaves.hashCode();","lastModifiedDate":"2023-10-28"},{"lineNumber":146,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":147,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-10-28"}],"authorContributionMap":{"jean-cq":126,"ivyy-poison":12,"ong-wei-hong":9}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2023-10-28"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"    Predicate\u003cLeave\u003e PREDICATE_SHOW_ALL_LEAVES \u003d unused -\u003e true;","lastModifiedDate":"2023-10-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":58,"author":{"gitId":"ong-wei-hong"},"content":"    ReadOnlyLeavesBook getLeavesBook();","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":87,"author":{"gitId":"ong-wei-hong"},"content":"    /** Returns an unmodifiable view of the filtered leave list */","lastModifiedDate":"2023-11-01"},{"lineNumber":88,"author":{"gitId":"ong-wei-hong"},"content":"    ObservableList\u003cLeave\u003e getFilteredLeaveList();","lastModifiedDate":"2023-11-01"},{"lineNumber":89,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":95,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":96,"author":{"gitId":"ong-wei-hong"},"content":"    void deleteLeave(Leave leaveToDelete);","lastModifiedDate":"2023-11-01"},{"lineNumber":97,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":98,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":99,"author":{"gitId":"jean-cq"},"content":"     * Replaces leave book data with the data in {@code leavesBook}.","lastModifiedDate":"2023-10-28"},{"lineNumber":100,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":101,"author":{"gitId":"jean-cq"},"content":"    void setLeavesBook(ReadOnlyLeavesBook leavesBook);","lastModifiedDate":"2023-10-28"},{"lineNumber":102,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":103,"author":{"gitId":"InfiBeyond"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":104,"author":{"gitId":"jean-cq"},"content":"     * Returns true if a leave with the same identity as {@code leave} exists in the leave book.","lastModifiedDate":"2023-10-28"},{"lineNumber":105,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":106,"author":{"gitId":"jean-cq"},"content":"    boolean hasLeave(Leave leave);","lastModifiedDate":"2023-10-28"},{"lineNumber":107,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":108,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-11-08"},{"lineNumber":109,"author":{"gitId":"ivyy-poison"},"content":"     * Returns true if a leave belonging to same employee has overlapping dates as {@code leave} exists in the","lastModifiedDate":"2023-11-08"},{"lineNumber":110,"author":{"gitId":"ivyy-poison"},"content":"     * leave book.","lastModifiedDate":"2023-11-08"},{"lineNumber":111,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-11-08"},{"lineNumber":112,"author":{"gitId":"ivyy-poison"},"content":"     * @param leave","lastModifiedDate":"2023-11-08"},{"lineNumber":113,"author":{"gitId":"ivyy-poison"},"content":"     * @return","lastModifiedDate":"2023-11-08"},{"lineNumber":114,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-11-08"},{"lineNumber":115,"author":{"gitId":"ivyy-poison"},"content":"    boolean hasConcurrentLeave(Leave leave);","lastModifiedDate":"2023-11-08"},{"lineNumber":116,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":117,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":118,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":119,"author":{"gitId":"jean-cq"},"content":"     * Adds the given leave.","lastModifiedDate":"2023-10-28"},{"lineNumber":120,"author":{"gitId":"jean-cq"},"content":"     * {@code leave} must not already exist in the leave book.","lastModifiedDate":"2023-10-28"},{"lineNumber":121,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":122,"author":{"gitId":"jean-cq"},"content":"    void addLeave(Leave leave);","lastModifiedDate":"2023-10-28"},{"lineNumber":123,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":124,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":125,"author":{"gitId":"jean-cq"},"content":"     * Replaces the given leave {@code target} with {@code editedPerson}.","lastModifiedDate":"2023-10-28"},{"lineNumber":126,"author":{"gitId":"InfiBeyond"},"content":"     * {@code target} must exist in the leave book.","lastModifiedDate":"2023-10-28"},{"lineNumber":127,"author":{"gitId":"jean-cq"},"content":"     * The leave identity of {@code editedLeave} must not be the same as another existing leave in the leave book.","lastModifiedDate":"2023-10-28"},{"lineNumber":128,"author":{"gitId":"InfiBeyond"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":129,"author":{"gitId":"InfiBeyond"},"content":"    void setLeave(Leave target, Leave editedLeave);","lastModifiedDate":"2023-10-28"},{"lineNumber":130,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":131,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":132,"author":{"gitId":"jean-cq"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2023-10-28"},{"lineNumber":133,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":134,"author":{"gitId":"jean-cq"},"content":"    Path getLeavesBookFilePath();","lastModifiedDate":"2023-10-28"},{"lineNumber":135,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":136,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":137,"author":{"gitId":"jean-cq"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2023-10-28"},{"lineNumber":138,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":139,"author":{"gitId":"jean-cq"},"content":"    void setLeavesBookFilePath(Path leavesBookFilePath);","lastModifiedDate":"2023-10-28"},{"lineNumber":140,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":141,"author":{"gitId":"InfiBeyond"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":142,"author":{"gitId":"InfiBeyond"},"content":"     * Updates the filter of the filtered leave list to filter by the given {@code predicate}.","lastModifiedDate":"2023-10-31"},{"lineNumber":143,"author":{"gitId":"InfiBeyond"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2023-10-31"},{"lineNumber":144,"author":{"gitId":"InfiBeyond"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":145,"author":{"gitId":"InfiBeyond"},"content":"    void updateFilteredLeaveList(Predicate\u003cLeave\u003e predicate);","lastModifiedDate":"2023-10-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"jean-cq":29,"InfiBeyond":12,"ivyy-poison":9,"-":87,"ong-wei-hong":9}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":14,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":25,"author":{"gitId":"ong-wei-hong"},"content":"    private final LeavesBook leavesBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"ong-wei-hong"},"content":"    private final FilteredList\u003cLeave\u003e filteredLeaves;","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"     * Initializes a ModelManager with the given addressBook, leavesBook and userPrefs.","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyLeavesBook leavesBook,","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"                        ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"        requireAllNonNull(addressBook, leavesBook, userPrefs);","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"                + \" and leaves book: \" + leavesBook","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"                + \" and user prefs \" + userPrefs);","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"        this.leavesBook \u003d new LeavesBook(leavesBook);","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"ong-wei-hong"},"content":"        filteredLeaves \u003d new FilteredList\u003c\u003e(this.leavesBook.getLeaveList());","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"ivyy-poison"},"content":"        this(new AddressBook(), new LeavesBook(), new UserPrefs());","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":87,"author":{"gitId":"jean-cq"},"content":"    public Path getLeavesBookFilePath() {","lastModifiedDate":"2023-10-28"},{"lineNumber":88,"author":{"gitId":"jean-cq"},"content":"        return userPrefs.getLeavesBookFilePath();","lastModifiedDate":"2023-10-28"},{"lineNumber":89,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":90,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":91,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":92,"author":{"gitId":"jean-cq"},"content":"    public void setLeavesBookFilePath(Path leavesBookFilePath) {","lastModifiedDate":"2023-10-28"},{"lineNumber":93,"author":{"gitId":"jean-cq"},"content":"        requireNonNull(leavesBookFilePath);","lastModifiedDate":"2023-10-28"},{"lineNumber":94,"author":{"gitId":"jean-cq"},"content":"        userPrefs.setAddressBookFilePath(leavesBookFilePath);","lastModifiedDate":"2023-10-28"},{"lineNumber":95,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":96,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":109,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":119,"author":{"gitId":"ong-wei-hong"},"content":"        leavesBook.removePerson(target);","lastModifiedDate":"2023-11-02"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":133,"author":{"gitId":"ong-wei-hong"},"content":"        leavesBook.setPerson(target, editedPerson);","lastModifiedDate":"2023-11-02"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":136,"author":{"gitId":"ivyy-poison"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LeavesBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-26"},{"lineNumber":137,"author":{"gitId":"ong-wei-hong"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":138,"author":{"gitId":"ivyy-poison"},"content":"    public ReadOnlyLeavesBook getLeavesBook() {","lastModifiedDate":"2023-10-26"},{"lineNumber":139,"author":{"gitId":"ivyy-poison"},"content":"        return leavesBook;","lastModifiedDate":"2023-10-26"},{"lineNumber":140,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":141,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":142,"author":{"gitId":"ong-wei-hong"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":143,"author":{"gitId":"ong-wei-hong"},"content":"    public void deleteLeave(Leave leaveToDelete) {","lastModifiedDate":"2023-11-01"},{"lineNumber":144,"author":{"gitId":"ong-wei-hong"},"content":"        leavesBook.removeLeave(leaveToDelete);","lastModifiedDate":"2023-11-01"},{"lineNumber":145,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":146,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":147,"author":{"gitId":"InfiBeyond"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":148,"author":{"gitId":"InfiBeyond"},"content":"    public void setLeave(Leave target, Leave editedLeave) {","lastModifiedDate":"2023-10-28"},{"lineNumber":149,"author":{"gitId":"InfiBeyond"},"content":"        requireAllNonNull(target, editedLeave);","lastModifiedDate":"2023-10-28"},{"lineNumber":150,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":151,"author":{"gitId":"InfiBeyond"},"content":"        leavesBook.setLeave(target, editedLeave);","lastModifiedDate":"2023-10-28"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":170,"author":{"gitId":"jean-cq"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LeavesBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-28"},{"lineNumber":171,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":172,"author":{"gitId":"jean-cq"},"content":"    public void setLeavesBook(ReadOnlyLeavesBook leavesBook) {","lastModifiedDate":"2023-10-28"},{"lineNumber":173,"author":{"gitId":"jean-cq"},"content":"        this.leavesBook.resetData(leavesBook);","lastModifiedDate":"2023-10-28"},{"lineNumber":174,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":176,"author":{"gitId":"ong-wei-hong"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Leave List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-11-01"},{"lineNumber":177,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":178,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":179,"author":{"gitId":"jean-cq"},"content":"    public boolean hasLeave(Leave leave) {","lastModifiedDate":"2023-10-28"},{"lineNumber":180,"author":{"gitId":"jean-cq"},"content":"        requireNonNull(leave);","lastModifiedDate":"2023-10-28"},{"lineNumber":181,"author":{"gitId":"jean-cq"},"content":"        return leavesBook.hasLeave(leave);","lastModifiedDate":"2023-10-28"},{"lineNumber":182,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":183,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":184,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-11-08"},{"lineNumber":185,"author":{"gitId":"ivyy-poison"},"content":"    public boolean hasConcurrentLeave(Leave leave) {","lastModifiedDate":"2023-11-08"},{"lineNumber":186,"author":{"gitId":"ivyy-poison"},"content":"        requireNonNull(leave);","lastModifiedDate":"2023-11-08"},{"lineNumber":187,"author":{"gitId":"ivyy-poison"},"content":"        return leavesBook.hasConcurrentLeave(leave);","lastModifiedDate":"2023-11-08"},{"lineNumber":188,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":189,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":190,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":191,"author":{"gitId":"jean-cq"},"content":"    public void addLeave(Leave leave) {","lastModifiedDate":"2023-10-28"},{"lineNumber":192,"author":{"gitId":"jean-cq"},"content":"        leavesBook.addLeave(leave);","lastModifiedDate":"2023-10-28"},{"lineNumber":193,"author":{"gitId":"jean-cq"},"content":"        updateFilteredLeaveList(PREDICATE_SHOW_ALL_LEAVES);","lastModifiedDate":"2023-10-28"},{"lineNumber":194,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":195,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":196,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":197,"author":{"gitId":"jean-cq"},"content":"     * Returns an unmodifiable view of the list of {@code Leave} backed by the internal list of","lastModifiedDate":"2023-10-26"},{"lineNumber":198,"author":{"gitId":"jean-cq"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2023-10-26"},{"lineNumber":199,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":200,"author":{"gitId":"ong-wei-hong"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":201,"author":{"gitId":"ong-wei-hong"},"content":"    public ObservableList\u003cLeave\u003e getFilteredLeaveList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":202,"author":{"gitId":"ong-wei-hong"},"content":"        return filteredLeaves;","lastModifiedDate":"2023-11-01"},{"lineNumber":203,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":204,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":205,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":206,"author":{"gitId":"jean-cq"},"content":"    public void updateFilteredLeaveList(Predicate\u003cLeave\u003e predicate) {","lastModifiedDate":"2023-10-26"},{"lineNumber":207,"author":{"gitId":"jean-cq"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2023-10-26"},{"lineNumber":208,"author":{"gitId":"jean-cq"},"content":"        filteredLeaves.setPredicate(predicate);","lastModifiedDate":"2023-10-26"},{"lineNumber":209,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-07-13"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        if (!(other instanceof ModelManager)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        ModelManager otherModelManager \u003d (ModelManager) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":223,"author":{"gitId":"ong-wei-hong"},"content":"        // TODO implement leaves import so the below test case passes","lastModifiedDate":"2023-11-02"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        return addressBook.equals(otherModelManager.addressBook)","lastModifiedDate":"2023-07-13"},{"lineNumber":225,"author":{"gitId":"ryanozx"},"content":"                \u0026\u0026 leavesBook.equals(otherModelManager.leavesBook)","lastModifiedDate":"2023-11-12"},{"lineNumber":226,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(otherModelManager.userPrefs)","lastModifiedDate":"2023-07-13"},{"lineNumber":227,"author":{"gitId":"ryanozx"},"content":"                \u0026\u0026 filteredPersons.equals(otherModelManager.filteredPersons)","lastModifiedDate":"2023-11-12"},{"lineNumber":228,"author":{"gitId":"ryanozx"},"content":"                \u0026\u0026 filteredLeaves.equals(otherModelManager.filteredLeaves);","lastModifiedDate":"2023-11-12"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":231,"author":{"gitId":"ong-wei-hong"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":232,"author":{"gitId":"ong-wei-hong"},"content":"    public String toString() {","lastModifiedDate":"2023-11-02"},{"lineNumber":233,"author":{"gitId":"ong-wei-hong"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-11-02"},{"lineNumber":234,"author":{"gitId":"ong-wei-hong"},"content":"                .add(\"addressBook\", addressBook)","lastModifiedDate":"2023-11-02"},{"lineNumber":235,"author":{"gitId":"ong-wei-hong"},"content":"                .add(\"leavesBook\", leavesBook)","lastModifiedDate":"2023-11-02"},{"lineNumber":236,"author":{"gitId":"ong-wei-hong"},"content":"                .add(\"userPrefs\", userPrefs)","lastModifiedDate":"2023-11-02"},{"lineNumber":237,"author":{"gitId":"ong-wei-hong"},"content":"                .add(\"filteredPersons\", filteredPersons)","lastModifiedDate":"2023-11-02"},{"lineNumber":238,"author":{"gitId":"ong-wei-hong"},"content":"                .add(\"filteredLeaves\", filteredLeaves)","lastModifiedDate":"2023-11-02"},{"lineNumber":239,"author":{"gitId":"ong-wei-hong"},"content":"                .toString();","lastModifiedDate":"2023-11-02"},{"lineNumber":240,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":241,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"ryanozx":3,"jean-cq":37,"InfiBeyond":6,"ivyy-poison":20,"-":144,"ong-wei-hong":32}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"jean-cq":1,"-":17}},{"path":"src/main/java/seedu/address/model/ReadOnlyFilteredAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.model;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":" * Wrapper for a filtered list of people to enable the export of these","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":" * records in CSV format","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"public class ReadOnlyFilteredAddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"    private final ObservableList\u003cPerson\u003e persons;","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"     * Constructs a ReadOnlyFilteredAddressBook object","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"     * @param model Current model of the address book data","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"    public ReadOnlyFilteredAddressBook(Model model) {","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"        this.persons \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"        return persons;","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"ryanozx":25}},{"path":"src/main/java/seedu/address/model/ReadOnlyFilteredLeavesBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"package seedu.address.model;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"/**","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":" * Wrapper for a filtered list of people to enable the export of these","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":" * records in CSV format","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":" */","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"public class ReadOnlyFilteredLeavesBook implements ReadOnlyLeavesBook {","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"    private final ObservableList\u003cLeave\u003e leaves;","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"     * Constructs a ReadOnlyFilteredAddressBook object","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"     * @param model Current model of the address book data","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"    public ReadOnlyFilteredLeavesBook(Model model) {","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"        this.leaves \u003d model.getFilteredLeaveList();","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":"    public ObservableList\u003cLeave\u003e getLeaveList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":"        return leaves;","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"jean-cq":27}},{"path":"src/main/java/seedu/address/model/ReadOnlyLeavesBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.model;","lastModifiedDate":"2023-10-23"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-23"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-10-23"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":" * Unmodifiable view of a leaves book","lastModifiedDate":"2023-10-23"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"public interface ReadOnlyLeavesBook {","lastModifiedDate":"2023-10-23"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"     * Returns an unmodifiable view of the leaves list.","lastModifiedDate":"2023-10-23"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":"     * This list will not contain any duplicate leaves.","lastModifiedDate":"2023-10-23"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"    ObservableList\u003cLeave\u003e getLeaveList();","lastModifiedDate":"2023-10-23"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-23"}],"authorContributionMap":{"ivyy-poison":16}},{"path":"src/main/java/seedu/address/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2018-11-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"    Path getLeavesBookFilePath();","lastModifiedDate":"2023-10-28"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"jean-cq":2,"-":14}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"    private Path leavesBookFilePath \u003d Paths.get(\"data\" , \"leavesbook.json\");","lastModifiedDate":"2023-10-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"jean-cq"},"content":"        setLeavesBookFilePath(newUserPrefs.getLeavesBookFilePath());","lastModifiedDate":"2023-10-28"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":51,"author":{"gitId":"jean-cq"},"content":"    public Path getLeavesBookFilePath() {","lastModifiedDate":"2023-10-28"},{"lineNumber":52,"author":{"gitId":"jean-cq"},"content":"        return leavesBookFilePath;","lastModifiedDate":"2023-10-28"},{"lineNumber":53,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":54,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":60,"author":{"gitId":"jean-cq"},"content":"    public void setLeavesBookFilePath(Path leavesBookFilePath) {","lastModifiedDate":"2023-10-28"},{"lineNumber":61,"author":{"gitId":"jean-cq"},"content":"        requireNonNull(leavesBookFilePath);","lastModifiedDate":"2023-10-28"},{"lineNumber":62,"author":{"gitId":"jean-cq"},"content":"        this.leavesBookFilePath \u003d leavesBookFilePath;","lastModifiedDate":"2023-10-28"},{"lineNumber":63,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":64,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs otherUserPrefs \u003d (UserPrefs) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return guiSettings.equals(otherUserPrefs.guiSettings)","lastModifiedDate":"2023-07-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                \u0026\u0026 addressBookFilePath.equals(otherUserPrefs.addressBookFilePath);","lastModifiedDate":"2023-07-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath);","lastModifiedDate":"2018-08-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"jean-cq":11,"-":78}},{"path":"src/main/java/seedu/address/model/leave/Date.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.model.leave;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-10-25"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"import java.time.format.ResolverStyle;","lastModifiedDate":"2023-10-25"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":" * Represents a Date in the address book.","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":"public class Date {","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":"            \"Date should be valid and in a format of `yyyy-MM-dd`\";","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"    private static final DateTimeFormatter formatter \u003d","lastModifiedDate":"2023-10-25"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"            DateTimeFormatter.ofPattern(\"uuuu-MM-dd\").withResolverStyle(ResolverStyle.STRICT);","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":"    private final LocalDate date;","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"     * Constructs a Date object from a LocalDate object","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"     * @param date LocalDate containing date","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":"    private Date(LocalDate date) {","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"ivyy-poison"},"content":"        this.date \u003d date;","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"     * Factory method for constructing a Date object with a LocalDate object.","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"     * @param date LocalDate to construct Date from","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"     * @return Date object","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"    public static Date of(LocalDate date) {","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(date);","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"        return new Date(date);","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"     * Factory method for constructing a Date object with a String.","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"     * @param date String containing date in \"yyyy-MM-dd\" format","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"     * @return Date object","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"     * @throws DateTimeParseException if the string does not follow the format","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"    public static Date of(String date) throws DateTimeParseException {","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(date);","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"jean-cq"},"content":"        return new Date(LocalDate.parse(date, formatter));","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":52,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"     * Returns true if this date occurs before the other date","lastModifiedDate":"2023-11-01"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"     * @param other Date to compare against","lastModifiedDate":"2023-11-01"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"     * @return True if this date occurs before the other date, False otherwise","lastModifiedDate":"2023-11-01"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"ivyy-poison"},"content":"    public boolean isBefore(Date other) {","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"ivyy-poison"},"content":"        return date.isBefore(other.date);","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":61,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"     * Returns true if this date occurs after the other date","lastModifiedDate":"2023-11-01"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"     * @param other Date to compare against","lastModifiedDate":"2023-11-01"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"     * @return True if this date occurs after the other date, False otherwise","lastModifiedDate":"2023-11-01"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"    public boolean isAfter(Date other) {","lastModifiedDate":"2023-11-01"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"        return date.isAfter(other.date);","lastModifiedDate":"2023-11-01"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":71,"author":{"gitId":"ivyy-poison"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2023-10-24"},{"lineNumber":72,"author":{"gitId":"ivyy-poison"},"content":"        return date;","lastModifiedDate":"2023-10-24"},{"lineNumber":73,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":74,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":75,"author":{"gitId":"ivyy-poison"},"content":"    public String toString() {","lastModifiedDate":"2023-10-24"},{"lineNumber":76,"author":{"gitId":"ivyy-poison"},"content":"        return date.toString();","lastModifiedDate":"2023-10-24"},{"lineNumber":77,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":78,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":79,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":80,"author":{"gitId":"ivyy-poison"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-24"},{"lineNumber":81,"author":{"gitId":"ivyy-poison"},"content":"        return other \u003d\u003d this","lastModifiedDate":"2023-10-24"},{"lineNumber":82,"author":{"gitId":"ivyy-poison"},"content":"                || (other instanceof Date","lastModifiedDate":"2023-10-24"},{"lineNumber":83,"author":{"gitId":"ivyy-poison"},"content":"                \u0026\u0026 date.equals(((Date) other).date));","lastModifiedDate":"2023-10-24"},{"lineNumber":84,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":85,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":86,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":87,"author":{"gitId":"ivyy-poison"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-24"},{"lineNumber":88,"author":{"gitId":"ivyy-poison"},"content":"        return date.hashCode();","lastModifiedDate":"2023-10-24"},{"lineNumber":89,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":90,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":91,"author":{"gitId":"ong-wei-hong"},"content":"    public String toFormattedString() {","lastModifiedDate":"2023-11-02"},{"lineNumber":92,"author":{"gitId":"ong-wei-hong"},"content":"        return formatter.format(date);","lastModifiedDate":"2023-11-02"},{"lineNumber":93,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":94,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ryanozx":26,"jean-cq":6,"ivyy-poison":57,"ong-wei-hong":5}},{"path":"src/main/java/seedu/address/model/leave/Description.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.model.leave;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"/**","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":" * Represents a Leave\u0027s description in the leaves book.","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":" */","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"public class Description {","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String DESCRIPTION_PLACEHOLDER \u003d \"NONE\";","lastModifiedDate":"2023-11-10"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Leave descriptions should only contain\"","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":"                + \" alphanumeric characters, spaces, dashes, commas, apostrophes and full stops.\";","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":"    public static final String VALIDATION_REGEX \u003d \"^[\\\\p{Alnum} \\\\-\u0027,.]*$\";","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"    private final String description;","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"     * Constructs a {@code Description}.","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":"     * @param description A valid description.","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"ivyy-poison"},"content":"    public Description(String description) {","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"ivyy-poison"},"content":"        requireNonNull(description);","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"ivyy-poison"},"content":"        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"     * Returns a default description that is empty.","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"     * @return A default description that is empty.","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"    public static Description getDefault() {","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"        return new Description(\"\");","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"     * Returns true if a given string is a valid description.","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"    public static boolean isValidDescription(String test) {","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"ivyy-poison"},"content":"    public String toString() {","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"ivyy-poison"},"content":"        return description;","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"ivyy-poison"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"ivyy-poison"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"ivyy-poison"},"content":"                || (other instanceof Description // instanceof handles nulls","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"ivyy-poison"},"content":"                \u0026\u0026 description.equals(((Description) other).description)); // state check","lastModifiedDate":"2023-11-01"},{"lineNumber":55,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":56,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"ryanozx":1,"ivyy-poison":54,"ong-wei-hong":1}},{"path":"src/main/java/seedu/address/model/leave/Leave.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.model.leave;","lastModifiedDate":"2023-10-23"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-23"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-23"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.leave.exceptions.EndBeforeStartException;","lastModifiedDate":"2023-10-23"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.person.ComparablePerson;","lastModifiedDate":"2023-10-27"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-23"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":" * Represents a Leave request of an employee in the address book","lastModifiedDate":"2023-10-23"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"public class Leave {","lastModifiedDate":"2023-10-23"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"    private final ComparablePerson employee;","lastModifiedDate":"2023-10-27"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"    private final Title title;","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"    private final Description description;","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":"    private final Date start;","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":"    private final Date end;","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"ivyy-poison"},"content":"    private final Status status;","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":24,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"     * Constructs a Leave object. Takes in a Person object, title and description, date range.","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":"     * Requires all fields to be non-null.","lastModifiedDate":"2023-10-23"},{"lineNumber":27,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"     * @param employee Employee that implements ComparablePerson","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"     * @param title Leave title","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"     * @param dateRange Range representing start and end dates of leaves, both start and end cannot be null","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"     * @param description Leave description","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"    public Leave(ComparablePerson employee, Title title, Range dateRange, Description description)","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"            throws EndBeforeStartException {","lastModifiedDate":"2023-10-23"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"        requireAllNonNull(employee, title, description, dateRange);","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(employee.getName());","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        assert(dateRange.getStartDate().isPresent() \u0026\u0026 dateRange.getEndDate().isPresent());","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"        this.employee \u003d employee;","lastModifiedDate":"2023-10-23"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"        this.title \u003d title;","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"        this.start \u003d dateRange.getStartDate().get();","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"        this.end \u003d dateRange.getEndDate().get();","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"        this.status \u003d Status.getDefault();","lastModifiedDate":"2023-10-25"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":46,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":47,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"     * Constructs a Leave object without the optional description field.","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"     * @param employee Employee that implements ComparablePerson","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"     * @param title Leave title","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"     * @param dateRange Range representing start and end dates of leaves, both start and end cannot be null","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"    public Leave(ComparablePerson employee, Title title, Range dateRange)","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"ivyy-poison"},"content":"            throws EndBeforeStartException {","lastModifiedDate":"2023-10-23"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"        requireAllNonNull(employee, title, dateRange);","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(employee.getName());","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"        assert(dateRange.getStartDate().isPresent() \u0026\u0026 dateRange.getEndDate().isPresent());","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":60,"author":{"gitId":"ivyy-poison"},"content":"        this.employee \u003d employee;","lastModifiedDate":"2023-10-23"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"        this.title \u003d title;","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"ivyy-poison"},"content":"        this.description \u003d Description.getDefault();","lastModifiedDate":"2023-11-01"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"        this.start \u003d dateRange.getStartDate().get();","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"        this.end \u003d dateRange.getEndDate().get();","lastModifiedDate":"2023-11-02"},{"lineNumber":65,"author":{"gitId":"ivyy-poison"},"content":"        this.status \u003d Status.getDefault();","lastModifiedDate":"2023-10-25"},{"lineNumber":66,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":67,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":68,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"     * Constructs a Leave object with status.","lastModifiedDate":"2023-11-02"},{"lineNumber":70,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"     * @param employee Employee that implements ComparablePerson","lastModifiedDate":"2023-11-02"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"     * @param title Leave title","lastModifiedDate":"2023-11-02"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"     * @param dateRange Range representing start and end dates of leaves, both start and end cannot be null","lastModifiedDate":"2023-11-02"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"     * @param description Leave description","lastModifiedDate":"2023-11-02"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"     * @param status Leave status","lastModifiedDate":"2023-11-02"},{"lineNumber":76,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"    public Leave(ComparablePerson employee, Title title, Range dateRange, Description description, Status status)","lastModifiedDate":"2023-11-02"},{"lineNumber":78,"author":{"gitId":"ivyy-poison"},"content":"            throws EndBeforeStartException {","lastModifiedDate":"2023-10-26"},{"lineNumber":79,"author":{"gitId":"ryanozx"},"content":"        requireAllNonNull(employee, title, description, dateRange, status);","lastModifiedDate":"2023-11-02"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(employee.getName());","lastModifiedDate":"2023-11-02"},{"lineNumber":81,"author":{"gitId":"ryanozx"},"content":"        assert(dateRange.getStartDate().isPresent() \u0026\u0026 dateRange.getEndDate().isPresent());","lastModifiedDate":"2023-11-02"},{"lineNumber":82,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":83,"author":{"gitId":"ivyy-poison"},"content":"        this.employee \u003d employee;","lastModifiedDate":"2023-10-26"},{"lineNumber":84,"author":{"gitId":"ryanozx"},"content":"        this.title \u003d title;","lastModifiedDate":"2023-11-02"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-11-02"},{"lineNumber":86,"author":{"gitId":"ryanozx"},"content":"        this.start \u003d dateRange.getStartDate().get();","lastModifiedDate":"2023-11-02"},{"lineNumber":87,"author":{"gitId":"ryanozx"},"content":"        this.end \u003d dateRange.getEndDate().get();","lastModifiedDate":"2023-11-02"},{"lineNumber":88,"author":{"gitId":"ivyy-poison"},"content":"        this.status \u003d status;","lastModifiedDate":"2023-10-26"},{"lineNumber":89,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":90,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":91,"author":{"gitId":"ivyy-poison"},"content":"    public ComparablePerson getEmployee() {","lastModifiedDate":"2023-10-27"},{"lineNumber":92,"author":{"gitId":"ivyy-poison"},"content":"        return employee;","lastModifiedDate":"2023-10-23"},{"lineNumber":93,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":94,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":95,"author":{"gitId":"ryanozx"},"content":"    public Title getTitle() {","lastModifiedDate":"2023-11-02"},{"lineNumber":96,"author":{"gitId":"ryanozx"},"content":"        return title;","lastModifiedDate":"2023-11-02"},{"lineNumber":97,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":98,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":99,"author":{"gitId":"ryanozx"},"content":"    public Description getDescription() {","lastModifiedDate":"2023-11-02"},{"lineNumber":100,"author":{"gitId":"ryanozx"},"content":"        return description;","lastModifiedDate":"2023-11-02"},{"lineNumber":101,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":102,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":103,"author":{"gitId":"ivyy-poison"},"content":"    public Date getStart() {","lastModifiedDate":"2023-10-24"},{"lineNumber":104,"author":{"gitId":"ivyy-poison"},"content":"        return start;","lastModifiedDate":"2023-10-23"},{"lineNumber":105,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":106,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":107,"author":{"gitId":"ivyy-poison"},"content":"    public Date getEnd() {","lastModifiedDate":"2023-10-24"},{"lineNumber":108,"author":{"gitId":"ivyy-poison"},"content":"        return end;","lastModifiedDate":"2023-10-23"},{"lineNumber":109,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":110,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":111,"author":{"gitId":"ryanozx"},"content":"    public Status getStatus() {","lastModifiedDate":"2023-11-02"},{"lineNumber":112,"author":{"gitId":"ryanozx"},"content":"        return status;","lastModifiedDate":"2023-11-02"},{"lineNumber":113,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":114,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":115,"author":{"gitId":"ivyy-poison"},"content":"    public boolean belongsTo(Person employee) {","lastModifiedDate":"2023-10-23"},{"lineNumber":116,"author":{"gitId":"ryanozx"},"content":"        return this.employee.isSamePerson(employee);","lastModifiedDate":"2023-11-12"},{"lineNumber":117,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":118,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":119,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-12"},{"lineNumber":120,"author":{"gitId":"ryanozx"},"content":"     * Creates a new Leave instance with all fields identical to the leave the method is called on,","lastModifiedDate":"2023-11-12"},{"lineNumber":121,"author":{"gitId":"ryanozx"},"content":"     * except with a new person","lastModifiedDate":"2023-11-12"},{"lineNumber":122,"author":{"gitId":"ryanozx"},"content":"     * @param p Person to replace the person field in the leave with","lastModifiedDate":"2023-11-12"},{"lineNumber":123,"author":{"gitId":"ryanozx"},"content":"     * @return New Leave instance containing the person","lastModifiedDate":"2023-11-12"},{"lineNumber":124,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-12"},{"lineNumber":125,"author":{"gitId":"ong-wei-hong"},"content":"    public Leave copyWithNewPerson(Person p) {","lastModifiedDate":"2023-11-02"},{"lineNumber":126,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(p);","lastModifiedDate":"2023-11-12"},{"lineNumber":127,"author":{"gitId":"ong-wei-hong"},"content":"        return new Leave(p, title, Range.createNonNullRange(start, end), description, status);","lastModifiedDate":"2023-11-02"},{"lineNumber":128,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":129,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":130,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-23"},{"lineNumber":131,"author":{"gitId":"ivyy-poison"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-10-23"},{"lineNumber":132,"author":{"gitId":"ivyy-poison"},"content":"        if (o \u003d\u003d this) {","lastModifiedDate":"2023-10-23"},{"lineNumber":133,"author":{"gitId":"ivyy-poison"},"content":"            return true;","lastModifiedDate":"2023-10-23"},{"lineNumber":134,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-23"},{"lineNumber":135,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":136,"author":{"gitId":"ivyy-poison"},"content":"        if (!(o instanceof Leave)) {","lastModifiedDate":"2023-10-23"},{"lineNumber":137,"author":{"gitId":"ivyy-poison"},"content":"            return false;","lastModifiedDate":"2023-10-23"},{"lineNumber":138,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-23"},{"lineNumber":139,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":140,"author":{"gitId":"ivyy-poison"},"content":"        Leave otherLeave \u003d (Leave) o;","lastModifiedDate":"2023-10-23"},{"lineNumber":141,"author":{"gitId":"ivyy-poison"},"content":"        return otherLeave.getEmployee().isSamePerson(getEmployee())","lastModifiedDate":"2023-10-27"},{"lineNumber":142,"author":{"gitId":"ivyy-poison"},"content":"                \u0026\u0026 otherLeave.getTitle().equals(getTitle())","lastModifiedDate":"2023-10-23"},{"lineNumber":143,"author":{"gitId":"ivyy-poison"},"content":"                \u0026\u0026 otherLeave.getDescription().equals(getDescription())","lastModifiedDate":"2023-10-23"},{"lineNumber":144,"author":{"gitId":"ivyy-poison"},"content":"                \u0026\u0026 otherLeave.getStart().equals(getStart())","lastModifiedDate":"2023-10-23"},{"lineNumber":145,"author":{"gitId":"ivyy-poison"},"content":"                \u0026\u0026 otherLeave.getEnd().equals(getEnd())","lastModifiedDate":"2023-10-23"},{"lineNumber":146,"author":{"gitId":"ivyy-poison"},"content":"                \u0026\u0026 otherLeave.getStatus().equals(getStatus());","lastModifiedDate":"2023-10-23"},{"lineNumber":147,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":148,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":149,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":150,"author":{"gitId":"ivyy-poison"},"content":"     * Returns true if both leaves have the same identity and data fields.","lastModifiedDate":"2023-10-23"},{"lineNumber":151,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":152,"author":{"gitId":"ivyy-poison"},"content":"    public boolean isSameLeave(Leave otherLeave) {","lastModifiedDate":"2023-10-23"},{"lineNumber":153,"author":{"gitId":"ivyy-poison"},"content":"        if (otherLeave \u003d\u003d this) {","lastModifiedDate":"2023-10-23"},{"lineNumber":154,"author":{"gitId":"ivyy-poison"},"content":"            return true;","lastModifiedDate":"2023-10-23"},{"lineNumber":155,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-23"},{"lineNumber":156,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":157,"author":{"gitId":"ivyy-poison"},"content":"        return otherLeave !\u003d null","lastModifiedDate":"2023-10-23"},{"lineNumber":158,"author":{"gitId":"ivyy-poison"},"content":"                \u0026\u0026 otherLeave.getEmployee().isSamePerson(getEmployee())","lastModifiedDate":"2023-10-27"},{"lineNumber":159,"author":{"gitId":"ivyy-poison"},"content":"                \u0026\u0026 otherLeave.getStart().equals(getStart())","lastModifiedDate":"2023-10-23"},{"lineNumber":160,"author":{"gitId":"ivyy-poison"},"content":"                \u0026\u0026 otherLeave.getEnd().equals(getEnd());","lastModifiedDate":"2023-10-23"},{"lineNumber":161,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":162,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":163,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-11-08"},{"lineNumber":164,"author":{"gitId":"ivyy-poison"},"content":"     * Returns true if both leaves have overlapping date ranges.","lastModifiedDate":"2023-11-08"},{"lineNumber":165,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-11-08"},{"lineNumber":166,"author":{"gitId":"ivyy-poison"},"content":"     * @param otherLeave","lastModifiedDate":"2023-11-08"},{"lineNumber":167,"author":{"gitId":"ivyy-poison"},"content":"     * @return","lastModifiedDate":"2023-11-08"},{"lineNumber":168,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-11-08"},{"lineNumber":169,"author":{"gitId":"ivyy-poison"},"content":"    public boolean isConcurrent(Leave otherLeave) {","lastModifiedDate":"2023-11-08"},{"lineNumber":170,"author":{"gitId":"ivyy-poison"},"content":"        if (otherLeave \u003d\u003d this) {","lastModifiedDate":"2023-11-08"},{"lineNumber":171,"author":{"gitId":"ivyy-poison"},"content":"            return true;","lastModifiedDate":"2023-11-08"},{"lineNumber":172,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-11-08"},{"lineNumber":173,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":174,"author":{"gitId":"ivyy-poison"},"content":"        return otherLeave !\u003d null","lastModifiedDate":"2023-11-08"},{"lineNumber":175,"author":{"gitId":"ivyy-poison"},"content":"                \u0026\u0026 otherLeave.getEmployee().isSamePerson(getEmployee())","lastModifiedDate":"2023-11-08"},{"lineNumber":176,"author":{"gitId":"ivyy-poison"},"content":"                \u0026\u0026 !otherLeave.getEnd().isBefore(getStart())","lastModifiedDate":"2023-11-08"},{"lineNumber":177,"author":{"gitId":"ivyy-poison"},"content":"                \u0026\u0026 !otherLeave.getStart().isAfter(getEnd());","lastModifiedDate":"2023-11-08"},{"lineNumber":178,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":179,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":180,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-23"},{"lineNumber":181,"author":{"gitId":"ivyy-poison"},"content":"    public String toString() {","lastModifiedDate":"2023-10-23"},{"lineNumber":182,"author":{"gitId":"ivyy-poison"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2023-10-23"},{"lineNumber":183,"author":{"gitId":"ivyy-poison"},"content":"        builder.append(\"Employee: \")","lastModifiedDate":"2023-10-23"},{"lineNumber":184,"author":{"gitId":"ivyy-poison"},"content":"                .append(getEmployee().getName())","lastModifiedDate":"2023-10-23"},{"lineNumber":185,"author":{"gitId":"ivyy-poison"},"content":"                .append(\" Title: \")","lastModifiedDate":"2023-10-23"},{"lineNumber":186,"author":{"gitId":"ivyy-poison"},"content":"                .append(getTitle())","lastModifiedDate":"2023-10-23"},{"lineNumber":187,"author":{"gitId":"ivyy-poison"},"content":"                .append(\" Start: \")","lastModifiedDate":"2023-10-23"},{"lineNumber":188,"author":{"gitId":"ivyy-poison"},"content":"                .append(getStart())","lastModifiedDate":"2023-10-23"},{"lineNumber":189,"author":{"gitId":"ivyy-poison"},"content":"                .append(\" End: \")","lastModifiedDate":"2023-10-23"},{"lineNumber":190,"author":{"gitId":"ivyy-poison"},"content":"                .append(getEnd())","lastModifiedDate":"2023-10-23"},{"lineNumber":191,"author":{"gitId":"ivyy-poison"},"content":"                .append(\" Status: \")","lastModifiedDate":"2023-10-23"},{"lineNumber":192,"author":{"gitId":"ivyy-poison"},"content":"                .append(getStatus());","lastModifiedDate":"2023-10-23"},{"lineNumber":193,"author":{"gitId":"ivyy-poison"},"content":"        return builder.toString();","lastModifiedDate":"2023-10-23"},{"lineNumber":194,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":195,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":196,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-23"},{"lineNumber":197,"author":{"gitId":"ivyy-poison"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-23"},{"lineNumber":198,"author":{"gitId":"ivyy-poison"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2023-10-23"},{"lineNumber":199,"author":{"gitId":"ivyy-poison"},"content":"        return Objects.hash(employee, title, description, start, end);","lastModifiedDate":"2023-10-23"},{"lineNumber":200,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":201,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-23"}],"authorContributionMap":{"ryanozx":53,"ivyy-poison":144,"ong-wei-hong":4}},{"path":"src/main/java/seedu/address/model/leave/LeaveContainsPersonPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"InfiBeyond"},"content":"package seedu.address.model.leave;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"InfiBeyond"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"InfiBeyond"},"content":"/**","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"InfiBeyond"},"content":" * Tests that a {@code Leave}\u0027s {@code employee} matches the employee of the given index.","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"InfiBeyond"},"content":" */","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"InfiBeyond"},"content":"public class LeaveContainsPersonPredicate implements Predicate\u003cLeave\u003e {","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"InfiBeyond"},"content":"    private final Person employee;","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"InfiBeyond"},"content":"    public LeaveContainsPersonPredicate(Person employee) {","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"InfiBeyond"},"content":"        this.employee \u003d employee;","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"InfiBeyond"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"InfiBeyond"},"content":"    public boolean test(Leave leave) {","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"InfiBeyond"},"content":"        return employee.isSamePerson(leave.getEmployee());","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"InfiBeyond"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"InfiBeyond"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"InfiBeyond"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"InfiBeyond"},"content":"            return true;","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"InfiBeyond"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"InfiBeyond"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"InfiBeyond"},"content":"        if (!(other instanceof seedu.address.model.leave.LeaveContainsPersonPredicate)) {","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"InfiBeyond"},"content":"            return false;","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"InfiBeyond"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"InfiBeyond"},"content":"        seedu.address.model.leave.LeaveContainsPersonPredicate otherLeaveContainsPersonPredicate \u003d","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"InfiBeyond"},"content":"                (seedu.address.model.leave.LeaveContainsPersonPredicate) other;","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"InfiBeyond"},"content":"        return employee.equals(otherLeaveContainsPersonPredicate.employee);","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"InfiBeyond"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"InfiBeyond"},"content":"    public String toString() {","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"InfiBeyond"},"content":"        return new ToStringBuilder(this).add(\"employee\", employee).toString();","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"InfiBeyond"},"content":"}","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"InfiBeyond":43}},{"path":"src/main/java/seedu/address/model/leave/LeaveHasStatusPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.model.leave;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":" * Predicate to test if a leave has a given status","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"public class LeaveHasStatusPredicate implements Predicate\u003cLeave\u003e {","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"    private final Status status;","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"     * Constructs a LeaveHasStatusPredicate object.","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"     * @param status Status to match against","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"    public LeaveHasStatusPredicate(Status status) {","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(status);","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"        this.status \u003d status;","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"    public boolean test(Leave leave) {","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"        return leave.getStatus().equals(status);","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"        if (this \u003d\u003d other) {","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"            return true;","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"        if (!(other instanceof LeaveHasStatusPredicate)) {","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"            return false;","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"        LeaveHasStatusPredicate otherPred \u003d (LeaveHasStatusPredicate) other;","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        return this.status.equals(otherPred.status);","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"ryanozx":40}},{"path":"src/main/java/seedu/address/model/leave/LeaveInPeriodPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.model.leave;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":" * Predicate to test if a leave\u0027s period intersects with the","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":" * queried period.","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"public class LeaveInPeriodPredicate implements Predicate\u003cLeave\u003e {","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"    private final Date start;","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"    private final Date end;","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"     * Constructs a LeaveInPeriodPredicate object. There are 4 possible inputs for the range","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"     * 1) Both start and end dates are supplied - return only leaves that have periods","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"     * intersecting with this period","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"     * 2) Only the start date is supplied - return only leaves whose end date lies on or","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"     * is after the provided start date","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"     * 3) Only the end date is supplied - return only leaves whose start date lies on or","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"     * is after the provided end date","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"     * 4) No start date or end date is supplied - return all leaves","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"     * @param dateRange Range object representing query range","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"    public LeaveInPeriodPredicate(Range dateRange) {","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(dateRange);","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"        this.start \u003d dateRange.getStartDate().orElse(null);","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"        this.end \u003d dateRange.getEndDate().orElse(null);","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"    public boolean test(Leave leave) {","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"        boolean hasStartDate \u003d start !\u003d null;","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"        boolean hasEndDate \u003d end !\u003d null;","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        boolean isLeaveEndBeforeQueryStart \u003d hasStartDate \u0026\u0026 leave.getEnd().isBefore(start);","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"        boolean isLeaveStartAfterQueryEnd \u003d hasEndDate \u0026\u0026 leave.getStart().isAfter(end);","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"        return !isLeaveEndBeforeQueryStart \u0026\u0026 !isLeaveStartAfterQueryEnd;","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"            return true;","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"        if (!(other instanceof LeaveInPeriodPredicate)) {","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"            return false;","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate otherPredicate \u003d (LeaveInPeriodPredicate) other;","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"        boolean hasMatchingStarts \u003d (","lastModifiedDate":"2023-11-01"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"                this.start !\u003d null \u0026\u0026 otherPredicate.start !\u003d null \u0026\u0026 this.start.equals(otherPredicate.start))","lastModifiedDate":"2023-11-01"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"                || (this.start \u003d\u003d null \u0026\u0026 otherPredicate.start \u003d\u003d null);","lastModifiedDate":"2023-11-01"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"        boolean hasMatchingEnds \u003d (","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"                this.end !\u003d null \u0026\u0026 otherPredicate.end !\u003d null \u0026\u0026 this.end.equals(otherPredicate.end))","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"                || (this.end \u003d\u003d null \u0026\u0026 otherPredicate.end \u003d\u003d null);","lastModifiedDate":"2023-11-01"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"        return hasMatchingStarts \u0026\u0026 hasMatchingEnds;","lastModifiedDate":"2023-11-01"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"ryanozx":62}},{"path":"src/main/java/seedu/address/model/leave/PersonEntry.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.model.leave;","lastModifiedDate":"2023-10-27"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-08"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.person.ComparablePerson;","lastModifiedDate":"2023-10-27"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-27"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"/**","lastModifiedDate":"2023-10-27"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":" * Represents the Employee field of a JsonAdaptedLeave object in storage","lastModifiedDate":"2023-10-27"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":" */","lastModifiedDate":"2023-10-27"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":"public class PersonEntry implements ComparablePerson {","lastModifiedDate":"2023-10-27"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":"    private final Name name;","lastModifiedDate":"2023-10-27"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-11-08"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":"     * Constructs a {@code PersonEntry}.","lastModifiedDate":"2023-11-08"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-11-08"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"     * @param name","lastModifiedDate":"2023-11-08"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-11-08"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":"    public PersonEntry(String name) {","lastModifiedDate":"2023-10-27"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":"        requireNonNull(name);","lastModifiedDate":"2023-11-08"},{"lineNumber":22,"author":{"gitId":"ivyy-poison"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2023-10-27"},{"lineNumber":23,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":24,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":25,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-27"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":"    public Name getName() {","lastModifiedDate":"2023-10-27"},{"lineNumber":27,"author":{"gitId":"ivyy-poison"},"content":"        return name;","lastModifiedDate":"2023-10-27"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-27"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"    public boolean isSamePerson(ComparablePerson otherPerson) {","lastModifiedDate":"2023-10-27"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2023-10-27"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"            return true;","lastModifiedDate":"2023-10-27"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-27"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2023-10-27"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2023-10-27"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-27"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"    public String toString() {","lastModifiedDate":"2023-10-27"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"        return name.toString();","lastModifiedDate":"2023-10-27"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-27"}],"authorContributionMap":{"ivyy-poison":44}},{"path":"src/main/java/seedu/address/model/leave/Range.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.model.leave;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import java.util.Optional;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.exceptions.EndBeforeStartException;","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":" * Represents a range of dates","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":" * Guarantees: End date will not be before start date, if both are present","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"public class Range {","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"    public static final String MESSAGE_INVALID_END_DATE \u003d","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"            \"The end date is earlier than the start date!\";","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"    private final Date startDate;","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"    private final Date endDate;","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"     * Constructs a Range object. Since construction is only possible via the static methods,","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"     * it is guaranteed that the end date will not be before the start date, if both are present","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"     * @param startDate Start date of range/null","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"     * @param endDate End date of range/null","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"    private Range(Date startDate, Date endDate) {","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"     * Constructs a Range object with a non-null start date and a non-null end date","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"     * @param startDate Start date of range","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"     * @param endDate End date of range","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"     * @return Range object representing a range of dates from start date to end date inclusive","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"     * @throws EndBeforeStartException if end date is before start date","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"     * @throws NullPointerException if start or end date is null","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"    public static Range createNonNullRange(Date startDate, Date endDate) throws EndBeforeStartException,","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"            NullPointerException {","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(startDate);","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(endDate);","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"        if (endDate.isBefore(startDate)) {","lastModifiedDate":"2023-11-02"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"            throw new EndBeforeStartException();","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"        return new Range(startDate, endDate);","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"     * Constructs a Range object with nullable start date and nullable end date","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"     * @param startDate Start date of range","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"     * @param endDate End date of range","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"     * @return Range object representing a range of dates from start date (if present) to end date (if present)","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"     *      inclusive","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"     * @throws EndBeforeStartException if end date is before start date","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"    public static Range createNullableRange(Date startDate, Date endDate) throws EndBeforeStartException {","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"        boolean hasStartDate \u003d startDate !\u003d null;","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"        boolean hasEndDate \u003d endDate !\u003d null;","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"        if (hasStartDate \u0026\u0026 hasEndDate \u0026\u0026 endDate.isBefore(startDate)) {","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"            throw new EndBeforeStartException();","lastModifiedDate":"2023-11-02"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"        return new Range(startDate, endDate);","lastModifiedDate":"2023-11-02"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"     * Returns the start date of the range as an Optional","lastModifiedDate":"2023-11-02"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"     * @return Start date of range. Can be an empty Optional if no start date was provided.","lastModifiedDate":"2023-11-02"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"    public Optional\u003cDate\u003e getStartDate() {","lastModifiedDate":"2023-11-02"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"        return Optional.ofNullable(startDate);","lastModifiedDate":"2023-11-02"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":78,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":79,"author":{"gitId":"ryanozx"},"content":"     * Returns the end date of the range as an Optional","lastModifiedDate":"2023-11-02"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"     * @return End date of range. Can be an empty Optional if no end date was provided.","lastModifiedDate":"2023-11-02"},{"lineNumber":81,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":82,"author":{"gitId":"ryanozx"},"content":"    public Optional\u003cDate\u003e getEndDate() {","lastModifiedDate":"2023-11-02"},{"lineNumber":83,"author":{"gitId":"ryanozx"},"content":"        return Optional.ofNullable(endDate);","lastModifiedDate":"2023-11-02"},{"lineNumber":84,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":86,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":87,"author":{"gitId":"ryanozx"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-11-02"},{"lineNumber":88,"author":{"gitId":"ryanozx"},"content":"        if (this \u003d\u003d other) {","lastModifiedDate":"2023-11-02"},{"lineNumber":89,"author":{"gitId":"ryanozx"},"content":"            return true;","lastModifiedDate":"2023-11-02"},{"lineNumber":90,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":91,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":92,"author":{"gitId":"ryanozx"},"content":"        if (!(other instanceof Range)) {","lastModifiedDate":"2023-11-02"},{"lineNumber":93,"author":{"gitId":"ryanozx"},"content":"            return false;","lastModifiedDate":"2023-11-02"},{"lineNumber":94,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":95,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":96,"author":{"gitId":"ryanozx"},"content":"        Range otherRange \u003d (Range) other;","lastModifiedDate":"2023-11-02"},{"lineNumber":97,"author":{"gitId":"ryanozx"},"content":"        boolean hasMatchingStart \u003d (this.startDate !\u003d null \u0026\u0026 otherRange.startDate !\u003d null","lastModifiedDate":"2023-11-02"},{"lineNumber":98,"author":{"gitId":"ryanozx"},"content":"                \u0026\u0026 this.startDate.equals(otherRange.startDate))","lastModifiedDate":"2023-11-02"},{"lineNumber":99,"author":{"gitId":"ryanozx"},"content":"                || (this.startDate \u003d\u003d null \u0026\u0026 otherRange.startDate \u003d\u003d null);","lastModifiedDate":"2023-11-02"},{"lineNumber":100,"author":{"gitId":"ryanozx"},"content":"        boolean hasMatchingEnd \u003d (this.endDate !\u003d null \u0026\u0026 otherRange.endDate !\u003d null","lastModifiedDate":"2023-11-02"},{"lineNumber":101,"author":{"gitId":"ryanozx"},"content":"                \u0026\u0026 this.endDate.equals(otherRange.endDate))","lastModifiedDate":"2023-11-02"},{"lineNumber":102,"author":{"gitId":"ryanozx"},"content":"                || (this.endDate \u003d\u003d null \u0026\u0026 otherRange.endDate \u003d\u003d null);","lastModifiedDate":"2023-11-02"},{"lineNumber":103,"author":{"gitId":"ryanozx"},"content":"        return hasMatchingStart \u0026\u0026 hasMatchingEnd;","lastModifiedDate":"2023-11-02"},{"lineNumber":104,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":105,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"ryanozx":105}},{"path":"src/main/java/seedu/address/model/leave/Status.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.model.leave;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":" * Represents the status of a leave request.","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"public class Status {","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":"     * Represents all possible status types of a leave request.","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"    public enum StatusType {","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":"        PENDING, APPROVED, REJECTED","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Status should be one of the following: \"","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"            + \"PENDING, APPROVED, REJECTED\";","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"    private static final String REGEX \u003d \"PENDING|APPROVED|REJECTED\";","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"    private final StatusType status;","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"     * Constructs a Status object from a StatusType enum","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"     * @param status One of PENDING, APPROVED, or REJECTED","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":"    private Status(StatusType status) {","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(status);","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"        this.status \u003d status;","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"     * Returns a {@code Status} object given a {@code String} status.","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"     * @param status String containing status","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"     * @return Status object","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"     * @throws IllegalArgumentException if string does not match known status types","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"    public static Status of(String status) throws IllegalArgumentException {","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"        requireNonNull(status);","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"        if (!isValidStatus(status)) {","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"        return new Status(StatusType.valueOf(status.toUpperCase()));","lastModifiedDate":"2023-11-08"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"     * Returns a {@code Status} object given a {@code StatusType} status.","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"     *","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"     * @param status StatusType value","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"     * @return Status object","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"     * @throws NullPointerException if no status supplied","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"    public static Status of(StatusType status) throws NullPointerException {","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(status);","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"        return new Status(status);","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"     * Returns whether the string matches the value of a valid StatusType","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"     * @param status String to check","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"     * @return True if string matches a StatusType value, False otherwise","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"    public static boolean isValidStatus(String status) {","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"ivyy-poison"},"content":"        return status.toUpperCase().matches(REGEX);","lastModifiedDate":"2023-11-08"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":68,"author":{"gitId":"ivyy-poison"},"content":"     * Returns a {@code Status} object with a default PENDING status","lastModifiedDate":"2023-10-25"},{"lineNumber":69,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-10-25"},{"lineNumber":70,"author":{"gitId":"ivyy-poison"},"content":"     * @return Status object","lastModifiedDate":"2023-10-25"},{"lineNumber":71,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":72,"author":{"gitId":"ivyy-poison"},"content":"    public static Status getDefault() {","lastModifiedDate":"2023-10-25"},{"lineNumber":73,"author":{"gitId":"ivyy-poison"},"content":"        return new Status(StatusType.PENDING);","lastModifiedDate":"2023-10-25"},{"lineNumber":74,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":75,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"    public StatusType getStatusType() {","lastModifiedDate":"2023-11-02"},{"lineNumber":77,"author":{"gitId":"ivyy-poison"},"content":"        return status;","lastModifiedDate":"2023-10-24"},{"lineNumber":78,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":79,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":80,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":81,"author":{"gitId":"ivyy-poison"},"content":"    public String toString() {","lastModifiedDate":"2023-10-24"},{"lineNumber":82,"author":{"gitId":"ivyy-poison"},"content":"        return status.toString();","lastModifiedDate":"2023-10-24"},{"lineNumber":83,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":84,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":85,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":86,"author":{"gitId":"ivyy-poison"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-24"},{"lineNumber":87,"author":{"gitId":"ivyy-poison"},"content":"        return other \u003d\u003d this","lastModifiedDate":"2023-10-24"},{"lineNumber":88,"author":{"gitId":"ivyy-poison"},"content":"                || (other instanceof Status","lastModifiedDate":"2023-10-24"},{"lineNumber":89,"author":{"gitId":"ivyy-poison"},"content":"                \u0026\u0026 status.equals(((Status) other).status));","lastModifiedDate":"2023-10-24"},{"lineNumber":90,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":91,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":92,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":93,"author":{"gitId":"ivyy-poison"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-24"},{"lineNumber":94,"author":{"gitId":"ivyy-poison"},"content":"        return status.hashCode();","lastModifiedDate":"2023-10-24"},{"lineNumber":95,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":96,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ryanozx":32,"ivyy-poison":64}},{"path":"src/main/java/seedu/address/model/leave/Title.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.model.leave;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"/**","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":" * Represents a Leave\u0027s title in the leaves book.","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":" */","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"public class Title {","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Leave titles should only contain\"","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"            + \" alphanumeric characters, spaces, and dashes.\"","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":"            + \"It should not be blank\";","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":"    public static final String VALIDATION_REGEX \u003d \"^[\\\\p{Alnum} \\\\-\u0027]+$\";","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"    private final String title;","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"     * Constructs a {@code Title}.","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":"     * @param title A valid title.","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"ivyy-poison"},"content":"    public Title(String title) {","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"ivyy-poison"},"content":"        requireNonNull(title);","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"ivyy-poison"},"content":"        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":"        this.title \u003d title;","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"     * Returns true if a given string is a valid title.","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"    public static boolean isValidTitle(String test) {","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"        return test.trim().length() \u003e 0 \u0026\u0026 test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"    public String toString() {","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"        return title;","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"                || (other instanceof Title // instanceof handles nulls","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"                \u0026\u0026 title.equals(((Title) other).title)); // state check","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"ryanozx":1,"ivyy-poison":47}},{"path":"src/main/java/seedu/address/model/leave/UniqueLeaveList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.model.leave;","lastModifiedDate":"2023-10-23"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-23"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-23"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-10-23"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"import java.util.List;","lastModifiedDate":"2023-10-23"},{"lineNumber":8,"author":{"gitId":"ong-wei-hong"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-10-23"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-23"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.leave.exceptions.DuplicateLeaveException;","lastModifiedDate":"2023-10-23"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.leave.exceptions.LeaveNotFoundException;","lastModifiedDate":"2023-10-23"},{"lineNumber":14,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":" * A list of leaves that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2023-10-23"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":" * A leave is considered unique by comparing using {@code Leave#isSameLeave(Leave)}. As such, adding and updating of","lastModifiedDate":"2023-10-23"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":" * leaves uses Leave#isSameLeave(Leave) for equality so as to ensure that the leave being added or updated is","lastModifiedDate":"2023-10-23"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":" * unique in terms of identity in the UniqueLeaveList. However, the removal of a leave uses Leave#equals(Object) so","lastModifiedDate":"2023-10-23"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":" * as to ensure that the leave with exactly the same fields will be removed.","lastModifiedDate":"2023-10-23"},{"lineNumber":22,"author":{"gitId":"ivyy-poison"},"content":" *","lastModifiedDate":"2023-10-23"},{"lineNumber":23,"author":{"gitId":"ivyy-poison"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2023-10-23"},{"lineNumber":24,"author":{"gitId":"ivyy-poison"},"content":" *","lastModifiedDate":"2023-10-23"},{"lineNumber":25,"author":{"gitId":"ivyy-poison"},"content":" * @see Leave#isSameLeave(Leave)","lastModifiedDate":"2023-10-23"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":27,"author":{"gitId":"ivyy-poison"},"content":"public class UniqueLeaveList implements Iterable\u003cLeave\u003e {","lastModifiedDate":"2023-10-23"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"    private final ObservableList\u003cLeave\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-10-23"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"    private final ObservableList\u003cLeave\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2023-10-23"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2023-10-23"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"     * Returns true if the list contains an equivalent leave as the given argument.","lastModifiedDate":"2023-10-23"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"    public boolean contains(Leave leave) {","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"        requireNonNull(leave);","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"        return internalList.stream().anyMatch(leave::isSameLeave);","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-11-08"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"     * Returns true if the list contains a leave that overlaps with the given argument.","lastModifiedDate":"2023-11-08"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-11-08"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"     * @param leave","lastModifiedDate":"2023-11-08"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"     * @return","lastModifiedDate":"2023-11-08"},{"lineNumber":46,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-11-08"},{"lineNumber":47,"author":{"gitId":"ivyy-poison"},"content":"    public boolean hasConcurrentLeave(Leave leave) {","lastModifiedDate":"2023-11-08"},{"lineNumber":48,"author":{"gitId":"ivyy-poison"},"content":"        requireNonNull(leave);","lastModifiedDate":"2023-11-08"},{"lineNumber":49,"author":{"gitId":"ivyy-poison"},"content":"        return internalList.stream().anyMatch(leave::isConcurrent);","lastModifiedDate":"2023-11-08"},{"lineNumber":50,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":51,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":52,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":53,"author":{"gitId":"ivyy-poison"},"content":"     * Adds a leave to the list.","lastModifiedDate":"2023-10-23"},{"lineNumber":54,"author":{"gitId":"ivyy-poison"},"content":"     * The leave must not already exist in the list.","lastModifiedDate":"2023-10-23"},{"lineNumber":55,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":56,"author":{"gitId":"ivyy-poison"},"content":"    public void add(Leave toAdd) {","lastModifiedDate":"2023-10-23"},{"lineNumber":57,"author":{"gitId":"ivyy-poison"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2023-10-23"},{"lineNumber":58,"author":{"gitId":"ivyy-poison"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2023-10-23"},{"lineNumber":59,"author":{"gitId":"ivyy-poison"},"content":"            throw new DuplicateLeaveException();","lastModifiedDate":"2023-10-23"},{"lineNumber":60,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-23"},{"lineNumber":61,"author":{"gitId":"ivyy-poison"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2023-10-23"},{"lineNumber":62,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":63,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":64,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":65,"author":{"gitId":"ivyy-poison"},"content":"     * Replaces the leave {@code target} in the list with {@code editedLeave}.","lastModifiedDate":"2023-10-23"},{"lineNumber":66,"author":{"gitId":"ivyy-poison"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2023-10-23"},{"lineNumber":67,"author":{"gitId":"ivyy-poison"},"content":"     * The leave identity of {@code editedLeave} must not be the same as another existing leave in the list.","lastModifiedDate":"2023-10-23"},{"lineNumber":68,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":69,"author":{"gitId":"ivyy-poison"},"content":"    public void setLeave(Leave target, Leave editedLeave) {","lastModifiedDate":"2023-10-23"},{"lineNumber":70,"author":{"gitId":"ivyy-poison"},"content":"        requireAllNonNull(target, editedLeave);","lastModifiedDate":"2023-10-23"},{"lineNumber":71,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":72,"author":{"gitId":"ivyy-poison"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2023-10-23"},{"lineNumber":73,"author":{"gitId":"ivyy-poison"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2023-10-23"},{"lineNumber":74,"author":{"gitId":"ivyy-poison"},"content":"            throw new LeaveNotFoundException();","lastModifiedDate":"2023-10-23"},{"lineNumber":75,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-23"},{"lineNumber":76,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":77,"author":{"gitId":"ivyy-poison"},"content":"        if (!target.isSameLeave(editedLeave) \u0026\u0026 contains(editedLeave)) {","lastModifiedDate":"2023-10-23"},{"lineNumber":78,"author":{"gitId":"ivyy-poison"},"content":"            throw new DuplicateLeaveException();","lastModifiedDate":"2023-10-23"},{"lineNumber":79,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-23"},{"lineNumber":80,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":81,"author":{"gitId":"ivyy-poison"},"content":"        internalList.set(index, editedLeave);","lastModifiedDate":"2023-10-23"},{"lineNumber":82,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":83,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":84,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":85,"author":{"gitId":"ivyy-poison"},"content":"     * Returns true if {@code leaves} contains only unique leaves.","lastModifiedDate":"2023-10-23"},{"lineNumber":86,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":87,"author":{"gitId":"ivyy-poison"},"content":"    private boolean leavesAreUnique(List\u003cLeave\u003e leaves) {","lastModifiedDate":"2023-10-23"},{"lineNumber":88,"author":{"gitId":"ivyy-poison"},"content":"        for (int i \u003d 0; i \u003c leaves.size() - 1; i++) {","lastModifiedDate":"2023-10-23"},{"lineNumber":89,"author":{"gitId":"ivyy-poison"},"content":"            for (int j \u003d i + 1; j \u003c leaves.size(); j++) {","lastModifiedDate":"2023-10-23"},{"lineNumber":90,"author":{"gitId":"ivyy-poison"},"content":"                if (leaves.get(i).isSameLeave(leaves.get(j))) {","lastModifiedDate":"2023-10-23"},{"lineNumber":91,"author":{"gitId":"ivyy-poison"},"content":"                    return false;","lastModifiedDate":"2023-10-23"},{"lineNumber":92,"author":{"gitId":"ivyy-poison"},"content":"                }","lastModifiedDate":"2023-10-23"},{"lineNumber":93,"author":{"gitId":"ivyy-poison"},"content":"            }","lastModifiedDate":"2023-10-23"},{"lineNumber":94,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-23"},{"lineNumber":95,"author":{"gitId":"ivyy-poison"},"content":"        return true;","lastModifiedDate":"2023-10-23"},{"lineNumber":96,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":97,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":98,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":99,"author":{"gitId":"ivyy-poison"},"content":"     * Replaces the contents of this list with {@code leaves}.","lastModifiedDate":"2023-10-23"},{"lineNumber":100,"author":{"gitId":"ivyy-poison"},"content":"     * {@code leaves} must not contain duplicate leaves.","lastModifiedDate":"2023-10-23"},{"lineNumber":101,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":102,"author":{"gitId":"ivyy-poison"},"content":"    public void setLeaves(List\u003cLeave\u003e leaves) {","lastModifiedDate":"2023-10-23"},{"lineNumber":103,"author":{"gitId":"ivyy-poison"},"content":"        requireAllNonNull(leaves);","lastModifiedDate":"2023-10-23"},{"lineNumber":104,"author":{"gitId":"ivyy-poison"},"content":"        if (!leavesAreUnique(leaves)) {","lastModifiedDate":"2023-10-23"},{"lineNumber":105,"author":{"gitId":"ivyy-poison"},"content":"            throw new DuplicateLeaveException();","lastModifiedDate":"2023-10-23"},{"lineNumber":106,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-23"},{"lineNumber":107,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":108,"author":{"gitId":"ivyy-poison"},"content":"        internalList.setAll(leaves);","lastModifiedDate":"2023-10-23"},{"lineNumber":109,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":110,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":111,"author":{"gitId":"ivyy-poison"},"content":"    public void setLeaves(UniqueLeaveList replacement) {","lastModifiedDate":"2023-10-23"},{"lineNumber":112,"author":{"gitId":"ivyy-poison"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2023-10-23"},{"lineNumber":113,"author":{"gitId":"ivyy-poison"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2023-10-23"},{"lineNumber":114,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":115,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":116,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":117,"author":{"gitId":"ivyy-poison"},"content":"     * Removes the equivalent leave from the list.","lastModifiedDate":"2023-10-23"},{"lineNumber":118,"author":{"gitId":"ivyy-poison"},"content":"     * The leave must exist in the list.","lastModifiedDate":"2023-10-23"},{"lineNumber":119,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":120,"author":{"gitId":"ivyy-poison"},"content":"    public void remove(Leave toRemove) {","lastModifiedDate":"2023-10-23"},{"lineNumber":121,"author":{"gitId":"ivyy-poison"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2023-10-23"},{"lineNumber":122,"author":{"gitId":"ivyy-poison"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2023-10-23"},{"lineNumber":123,"author":{"gitId":"ivyy-poison"},"content":"            throw new LeaveNotFoundException();","lastModifiedDate":"2023-10-23"},{"lineNumber":124,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-23"},{"lineNumber":125,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":126,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":127,"author":{"gitId":"ong-wei-hong"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":128,"author":{"gitId":"ong-wei-hong"},"content":"     * Removes the leaves which belongs to Person p.","lastModifiedDate":"2023-11-02"},{"lineNumber":129,"author":{"gitId":"ong-wei-hong"},"content":"     * @see Leave#belongsTo(Person)","lastModifiedDate":"2023-11-02"},{"lineNumber":130,"author":{"gitId":"ong-wei-hong"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":131,"author":{"gitId":"ong-wei-hong"},"content":"    public void removePerson(Person p) {","lastModifiedDate":"2023-11-02"},{"lineNumber":132,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(p);","lastModifiedDate":"2023-11-12"},{"lineNumber":133,"author":{"gitId":"ong-wei-hong"},"content":"        List\u003cLeave\u003e toRemove \u003d internalList.stream().filter((l) -\u003e l.belongsTo(p)).collect(Collectors.toList());","lastModifiedDate":"2023-11-02"},{"lineNumber":134,"author":{"gitId":"ong-wei-hong"},"content":"        toRemove.forEach(this::remove);","lastModifiedDate":"2023-11-02"},{"lineNumber":135,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":136,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":137,"author":{"gitId":"ong-wei-hong"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":138,"author":{"gitId":"ong-wei-hong"},"content":"     * Replaces leaves belonging to {@code target} with {@code editedPerson}","lastModifiedDate":"2023-11-02"},{"lineNumber":139,"author":{"gitId":"ong-wei-hong"},"content":"     * @see Leave#belongsTo(Person)","lastModifiedDate":"2023-11-02"},{"lineNumber":140,"author":{"gitId":"ong-wei-hong"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":141,"author":{"gitId":"ong-wei-hong"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2023-11-02"},{"lineNumber":142,"author":{"gitId":"ryanozx"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2023-11-12"},{"lineNumber":143,"author":{"gitId":"ong-wei-hong"},"content":"        List\u003cLeave\u003e toEdit \u003d internalList.stream().filter((l) -\u003e l.belongsTo(target)).collect(Collectors.toList());","lastModifiedDate":"2023-11-02"},{"lineNumber":144,"author":{"gitId":"ong-wei-hong"},"content":"        toEdit.forEach((l) -\u003e setLeave(l, l.copyWithNewPerson(editedPerson)));","lastModifiedDate":"2023-11-02"},{"lineNumber":145,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":146,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":147,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":148,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":149,"author":{"gitId":"ivyy-poison"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2023-10-23"},{"lineNumber":150,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":151,"author":{"gitId":"ivyy-poison"},"content":"    public ObservableList\u003cLeave\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2023-10-23"},{"lineNumber":152,"author":{"gitId":"ivyy-poison"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2023-10-23"},{"lineNumber":153,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":154,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":155,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-23"},{"lineNumber":156,"author":{"gitId":"ivyy-poison"},"content":"    public Iterator\u003cLeave\u003e iterator() {","lastModifiedDate":"2023-10-23"},{"lineNumber":157,"author":{"gitId":"ivyy-poison"},"content":"        return internalList.iterator();","lastModifiedDate":"2023-10-23"},{"lineNumber":158,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":159,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":160,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-23"},{"lineNumber":161,"author":{"gitId":"ivyy-poison"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-23"},{"lineNumber":162,"author":{"gitId":"ivyy-poison"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-23"},{"lineNumber":163,"author":{"gitId":"ivyy-poison"},"content":"            return true;","lastModifiedDate":"2023-10-23"},{"lineNumber":164,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-23"},{"lineNumber":165,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":166,"author":{"gitId":"ivyy-poison"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-23"},{"lineNumber":167,"author":{"gitId":"ivyy-poison"},"content":"        if (!(other instanceof UniqueLeaveList)) {","lastModifiedDate":"2023-10-23"},{"lineNumber":168,"author":{"gitId":"ivyy-poison"},"content":"            return false;","lastModifiedDate":"2023-10-23"},{"lineNumber":169,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-23"},{"lineNumber":170,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":171,"author":{"gitId":"ivyy-poison"},"content":"        UniqueLeaveList otherUniqueLeaveList \u003d (UniqueLeaveList) other;","lastModifiedDate":"2023-10-23"},{"lineNumber":172,"author":{"gitId":"ivyy-poison"},"content":"        return internalList.equals(otherUniqueLeaveList.internalList);","lastModifiedDate":"2023-10-23"},{"lineNumber":173,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":174,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":175,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-23"},{"lineNumber":176,"author":{"gitId":"ivyy-poison"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-23"},{"lineNumber":177,"author":{"gitId":"ivyy-poison"},"content":"        return internalList.hashCode();","lastModifiedDate":"2023-10-23"},{"lineNumber":178,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":179,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":180,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-23"},{"lineNumber":181,"author":{"gitId":"ivyy-poison"},"content":"    public String toString() {","lastModifiedDate":"2023-10-23"},{"lineNumber":182,"author":{"gitId":"ivyy-poison"},"content":"        return internalList.toString();","lastModifiedDate":"2023-10-23"},{"lineNumber":183,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":184,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-23"}],"authorContributionMap":{"ryanozx":2,"jean-cq":1,"ivyy-poison":161,"ong-wei-hong":20}},{"path":"src/main/java/seedu/address/model/leave/exceptions/DuplicateLeaveException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"package seedu.address.model.leave.exceptions;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"/**","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":" * Signals that the operation will result in duplicate Leaves (Leaves are considered duplicates if they have the same","lastModifiedDate":"2023-10-23"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":" * identity).","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":" */","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"public class DuplicateLeaveException extends RuntimeException {","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"    public DuplicateLeaveException() {","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"        super(\"Operation would result in duplicate leaves of the same person.\");","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"jean-cq":10,"ivyy-poison":1}},{"path":"src/main/java/seedu/address/model/leave/exceptions/EndBeforeStartException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.model.leave.exceptions;","lastModifiedDate":"2023-10-23"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":" * Signals that the end date is before the start date.","lastModifiedDate":"2023-10-23"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"public class EndBeforeStartException extends RuntimeException {","lastModifiedDate":"2023-10-23"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"    public EndBeforeStartException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"        super(\"End date cannot be before start date.\");","lastModifiedDate":"2023-10-23"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-23"}],"authorContributionMap":{"ivyy-poison":10}},{"path":"src/main/java/seedu/address/model/leave/exceptions/LeaveNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.model.leave.exceptions;","lastModifiedDate":"2023-10-23"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":" * Signals that the operation was unable to find the specified leave.","lastModifiedDate":"2023-10-23"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"public class LeaveNotFoundException extends RuntimeException {}","lastModifiedDate":"2023-10-23"}],"authorContributionMap":{"ivyy-poison":6}},{"path":"src/main/java/seedu/address/model/person/ComparablePerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-27"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"/**","lastModifiedDate":"2023-10-27"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":" * Interface to allow for comparing Person objects by name","lastModifiedDate":"2023-10-27"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":" */","lastModifiedDate":"2023-10-27"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"public interface ComparablePerson {","lastModifiedDate":"2023-10-27"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2023-10-27"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-10-27"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":"     * @param otherPerson","lastModifiedDate":"2023-10-27"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"     * @return","lastModifiedDate":"2023-10-27"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":"    boolean isSamePerson(ComparablePerson otherPerson);","lastModifiedDate":"2023-10-27"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"     * Returns the Name field of a ComparablePerson object","lastModifiedDate":"2023-10-27"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-10-27"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"     * @return","lastModifiedDate":"2023-10-27"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":"    Name getName();","lastModifiedDate":"2023-10-27"},{"lineNumber":22,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-27"}],"authorContributionMap":{"ivyy-poison":22}},{"path":"src/main/java/seedu/address/model/person/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s name in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2018-04-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"    public static final String VALIDATION_REGEX \u003d \"^[\\\\p{Alpha}][\\\\p{Alpha} \\\\d-/()]*$\";","lastModifiedDate":"2023-11-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"    private final String fullName;","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (!(other instanceof Name)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Name otherName \u003d (Name) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return fullName.equals(otherName.fullName);","lastModifiedDate":"2023-07-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ryanozx":1,"ivyy-poison":1,"-":65}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2018-01-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().toString(), keyword));","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (!(other instanceof NameContainsKeywordsPredicate)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate otherNameContainsKeywordsPredicate \u003d (NameContainsKeywordsPredicate) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return keywords.equals(otherNameContainsKeywordsPredicate.keywords);","lastModifiedDate":"2023-07-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this).add(\"keywords\", keywords).toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"ryanozx":1,"-":43}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"ong-wei-hong"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"ong-wei-hong"},"content":"import java.util.Collection;","lastModifiedDate":"2023-10-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"public class Person implements ComparablePerson {","lastModifiedDate":"2023-10-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-03-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);","lastModifiedDate":"2017-05-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"ong-wei-hong"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"     * Constructor for Person object that is used to copy another Person object.","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"     * @param toCopy Person object to copy.","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"ong-wei-hong"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":47,"author":{"gitId":"ong-wei-hong"},"content":"    public Person(Person toCopy) {","lastModifiedDate":"2023-10-11"},{"lineNumber":48,"author":{"gitId":"ong-wei-hong"},"content":"        requireNonNull(toCopy);","lastModifiedDate":"2023-10-11"},{"lineNumber":49,"author":{"gitId":"ong-wei-hong"},"content":"        this.name \u003d toCopy.name;","lastModifiedDate":"2023-10-11"},{"lineNumber":50,"author":{"gitId":"ong-wei-hong"},"content":"        this.phone \u003d toCopy.phone;","lastModifiedDate":"2023-10-11"},{"lineNumber":51,"author":{"gitId":"ong-wei-hong"},"content":"        this.email \u003d toCopy.email;","lastModifiedDate":"2023-10-11"},{"lineNumber":52,"author":{"gitId":"ong-wei-hong"},"content":"        this.address \u003d toCopy.address;","lastModifiedDate":"2023-10-11"},{"lineNumber":53,"author":{"gitId":"ong-wei-hong"},"content":"        this.tags.addAll(toCopy.tags);","lastModifiedDate":"2023-10-11"},{"lineNumber":54,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":55,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":56,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":81,"author":{"gitId":"ong-wei-hong"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":82,"author":{"gitId":"ong-wei-hong"},"content":"     * Adds tags in toAdd to tags","lastModifiedDate":"2023-10-11"},{"lineNumber":83,"author":{"gitId":"ong-wei-hong"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":84,"author":{"gitId":"ong-wei-hong"},"content":"    public void addTags(Collection\u003cTag\u003e toAdd) {","lastModifiedDate":"2023-10-11"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"        tags.addAll(toAdd);","lastModifiedDate":"2023-11-02"},{"lineNumber":86,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":87,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":88,"author":{"gitId":"ong-wei-hong"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":89,"author":{"gitId":"ong-wei-hong"},"content":"     * Add tag to tags","lastModifiedDate":"2023-10-11"},{"lineNumber":90,"author":{"gitId":"ong-wei-hong"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":91,"author":{"gitId":"ong-wei-hong"},"content":"    public void addTag(Tag tag) {","lastModifiedDate":"2023-10-11"},{"lineNumber":92,"author":{"gitId":"ong-wei-hong"},"content":"        tags.add(tag);","lastModifiedDate":"2023-10-11"},{"lineNumber":93,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":94,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":95,"author":{"gitId":"ong-wei-hong"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":96,"author":{"gitId":"ong-wei-hong"},"content":"     * Checks if any tag in tags is in this.tags","lastModifiedDate":"2023-10-14"},{"lineNumber":97,"author":{"gitId":"ong-wei-hong"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":98,"author":{"gitId":"ong-wei-hong"},"content":"    public boolean hasAnyTags(Collection\u003cTag\u003e tags) {","lastModifiedDate":"2023-10-14"},{"lineNumber":99,"author":{"gitId":"ryanozx"},"content":"        return tags.stream().anyMatch(this.tags::contains);","lastModifiedDate":"2023-11-02"},{"lineNumber":100,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":101,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":102,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":103,"author":{"gitId":"ivyy-poison"},"content":"     * Checks if this person has all the tags in the argument collection.","lastModifiedDate":"2023-10-13"},{"lineNumber":104,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-10-13"},{"lineNumber":105,"author":{"gitId":"ivyy-poison"},"content":"     * @param tags Collection of tags to check.","lastModifiedDate":"2023-10-13"},{"lineNumber":106,"author":{"gitId":"ivyy-poison"},"content":"     * @return true if this person has all the tags in the argument collection, false otherwise.","lastModifiedDate":"2023-10-13"},{"lineNumber":107,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":108,"author":{"gitId":"ivyy-poison"},"content":"    public boolean hasAllTags(Collection\u003cTag\u003e tags) {","lastModifiedDate":"2023-10-13"},{"lineNumber":109,"author":{"gitId":"ivyy-poison"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2023-10-13"},{"lineNumber":110,"author":{"gitId":"ivyy-poison"},"content":"        assert !tags.isEmpty();","lastModifiedDate":"2023-10-13"},{"lineNumber":111,"author":{"gitId":"ivyy-poison"},"content":"        return this.tags.containsAll(tags);","lastModifiedDate":"2023-10-13"},{"lineNumber":112,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":113,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":114,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":115,"author":{"gitId":"ivyy-poison"},"content":"     * Checks if this person has the argument tag.","lastModifiedDate":"2023-10-13"},{"lineNumber":116,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-10-13"},{"lineNumber":117,"author":{"gitId":"ivyy-poison"},"content":"     * @param tag Tag to check.","lastModifiedDate":"2023-10-13"},{"lineNumber":118,"author":{"gitId":"ivyy-poison"},"content":"     * @return true if this person has the argument tag, false otherwise.","lastModifiedDate":"2023-10-13"},{"lineNumber":119,"author":{"gitId":"ong-wei-hong"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":120,"author":{"gitId":"ong-wei-hong"},"content":"    public boolean hasTag(Tag tag) {","lastModifiedDate":"2023-10-11"},{"lineNumber":121,"author":{"gitId":"ivyy-poison"},"content":"        assert tag !\u003d null;","lastModifiedDate":"2023-10-13"},{"lineNumber":122,"author":{"gitId":"ivyy-poison"},"content":"        return this.tags.contains(tag);","lastModifiedDate":"2023-10-13"},{"lineNumber":123,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":124,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":125,"author":{"gitId":"ong-wei-hong"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":126,"author":{"gitId":"ivyy-poison"},"content":"     * Removes the tags in the argument collection from this person.","lastModifiedDate":"2023-10-13"},{"lineNumber":127,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-10-13"},{"lineNumber":128,"author":{"gitId":"ivyy-poison"},"content":"     * @param tags Collection of tags to remove.","lastModifiedDate":"2023-10-13"},{"lineNumber":129,"author":{"gitId":"ong-wei-hong"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":130,"author":{"gitId":"ivyy-poison"},"content":"    public void removeTags(Collection\u003cTag\u003e tags) {","lastModifiedDate":"2023-10-13"},{"lineNumber":131,"author":{"gitId":"ivyy-poison"},"content":"        assert hasAllTags(tags);","lastModifiedDate":"2023-10-13"},{"lineNumber":132,"author":{"gitId":"ivyy-poison"},"content":"        this.tags.removeAll(tags);","lastModifiedDate":"2023-10-13"},{"lineNumber":133,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":134,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":135,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":136,"author":{"gitId":"ivyy-poison"},"content":"     * Removes a tag from this person.","lastModifiedDate":"2023-10-13"},{"lineNumber":137,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-10-13"},{"lineNumber":138,"author":{"gitId":"ivyy-poison"},"content":"     * @param tag Tag to remove.","lastModifiedDate":"2023-10-13"},{"lineNumber":139,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":140,"author":{"gitId":"ivyy-poison"},"content":"    public void removeTag(Tag tag) {","lastModifiedDate":"2023-10-13"},{"lineNumber":141,"author":{"gitId":"ivyy-poison"},"content":"        assert hasTag(tag);","lastModifiedDate":"2023-10-13"},{"lineNumber":142,"author":{"gitId":"ivyy-poison"},"content":"        this.tags.remove(tag);","lastModifiedDate":"2023-10-13"},{"lineNumber":143,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":144,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":149,"author":{"gitId":"ivyy-poison"},"content":"    public boolean isSamePerson(ComparablePerson otherPerson) {","lastModifiedDate":"2023-10-27"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        return name.equals(otherPerson.name)","lastModifiedDate":"2023-07-13"},{"lineNumber":175,"author":{"gitId":"-"},"content":"                \u0026\u0026 phone.equals(otherPerson.phone)","lastModifiedDate":"2023-07-13"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                \u0026\u0026 email.equals(otherPerson.email)","lastModifiedDate":"2023-07-13"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                \u0026\u0026 address.equals(otherPerson.address)","lastModifiedDate":"2023-07-13"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                \u0026\u0026 tags.equals(otherPerson.tags);","lastModifiedDate":"2023-07-13"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);","lastModifiedDate":"2016-08-24"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":189,"author":{"gitId":"ivyy-poison"},"content":"        ToStringBuilder personString \u003d new ToStringBuilder(this)","lastModifiedDate":"2023-11-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"                .add(\"name\", name)","lastModifiedDate":"2019-02-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"                .add(\"phone\", phone)","lastModifiedDate":"2019-02-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"                .add(\"email\", email)","lastModifiedDate":"2019-02-23"},{"lineNumber":193,"author":{"gitId":"ivyy-poison"},"content":"                .add(\"address\", address);","lastModifiedDate":"2023-11-08"},{"lineNumber":194,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":195,"author":{"gitId":"ivyy-poison"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2023-11-08"},{"lineNumber":196,"author":{"gitId":"ivyy-poison"},"content":"            personString.add(\"tags\", tags);","lastModifiedDate":"2023-11-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":199,"author":{"gitId":"ivyy-poison"},"content":"        return personString.toString();","lastModifiedDate":"2023-11-08"},{"lineNumber":200,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ryanozx":2,"ivyy-poison":48,"-":111,"ong-wei-hong":40}},{"path":"src/main/java/seedu/address/model/person/TagsContainAllTagsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-14"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"import java.util.List;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"/**","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":" */","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"public class TagsContainAllTagsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"    private final List\u003cTag\u003e tags;","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":"    public TagsContainAllTagsPredicate(List\u003cTag\u003e tags) {","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"        this.tags \u003d tags;","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":"        Set\u003cTag\u003e personTags \u003d person.getTags();","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"InfiBeyond"},"content":"        return personTags.containsAll(tags);","lastModifiedDate":"2023-11-10"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"jean-cq"},"content":"            return true;","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"jean-cq"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-14"},{"lineNumber":33,"author":{"gitId":"jean-cq"},"content":"        if (!(other instanceof TagsContainAllTagsPredicate)) {","lastModifiedDate":"2023-10-14"},{"lineNumber":34,"author":{"gitId":"jean-cq"},"content":"            return false;","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":37,"author":{"gitId":"jean-cq"},"content":"        TagsContainAllTagsPredicate otherNameContainsKeywordsPredicate \u003d (TagsContainAllTagsPredicate) other;","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"        return tags.equals(otherNameContainsKeywordsPredicate.tags);","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"jean-cq"},"content":"    public String toString() {","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"jean-cq"},"content":"        return new ToStringBuilder(this).add(\"tags\", tags).toString();","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-10-14"}],"authorContributionMap":{"jean-cq":44,"InfiBeyond":1}},{"path":"src/main/java/seedu/address/model/person/TagsContainSomeTagsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"import java.util.List;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"public class TagsContainSomeTagsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"    private final List\u003cTag\u003e tags;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"    public TagsContainSomeTagsPredicate(List\u003cTag\u003e tags) {","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"        this.tags \u003d tags;","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":"        return tags.stream()","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"                .anyMatch(tag -\u003e person.getTags().contains(tag));","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"jean-cq"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"jean-cq"},"content":"            return true;","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"jean-cq"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"jean-cq"},"content":"        if (!(other instanceof TagsContainSomeTagsPredicate)) {","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"            return false;","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"        TagsContainSomeTagsPredicate otherNameContainsKeywordsPredicate \u003d (TagsContainSomeTagsPredicate) other;","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"jean-cq"},"content":"        return tags.equals(otherNameContainsKeywordsPredicate.tags);","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"jean-cq"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"jean-cq"},"content":"    public String toString() {","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"jean-cq"},"content":"        return new ToStringBuilder(this).add(\"tags\", tags).toString();","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"jean-cq":46}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"    public boolean contains(ComparablePerson person) {","lastModifiedDate":"2023-10-31"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"        requireNonNull(person);","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"        return internalList.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {","lastModifiedDate":"2018-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"ivyy-poison"},"content":"        if (!contains(target)) {","lastModifiedDate":"2023-10-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":61,"author":{"gitId":"ivyy-poison"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2023-10-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {","lastModifiedDate":"2016-10-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2018-01-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2018-04-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {","lastModifiedDate":"2016-08-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        if (!(other instanceof UniquePersonList)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        UniquePersonList otherUniquePersonList \u003d (UniquePersonList) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return internalList.equals(otherUniquePersonList.internalList);","lastModifiedDate":"2023-07-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return internalList.toString();","lastModifiedDate":"2019-02-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-04-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {","lastModifiedDate":"2018-04-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":149,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ivyy-poison":5,"-":144}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.tag;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Tag in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Tag {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2023-10-15"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"            \"Tags names only allows alphanumeric characters, spaces, and dashes.\";","lastModifiedDate":"2023-10-15"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"    public static final String VALIDATION_REGEX \u003d \"^[\\\\p{Alnum} -]+$\";","lastModifiedDate":"2023-10-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String tagName;","lastModifiedDate":"2016-10-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name.","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name.","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        if (!(other instanceof Tag)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Tag otherTag \u003d (Tag) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return tagName.equals(otherTag.tagName);","lastModifiedDate":"2023-07-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return tagName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"jean-cq":3,"-":60}},{"path":"src/main/java/seedu/address/storage/AdaptedLeave.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Date;","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Description;","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.PersonEntry;","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Range;","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Status;","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Title;","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.exceptions.EndBeforeStartException;","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.person.ComparablePerson;","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":" * Base class of AdaptedLeave used to serialise and deserialise the Leave class into different formats","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"abstract class AdaptedLeave implements ToModelTyper\u003cLeave\u003e {","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Leave\u0027s %s field is missing!\";","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    protected final String start;","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"    protected final String end;","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"    protected final String title;","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"    protected final String description;","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"    protected final String status;","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"    protected final ComparablePerson employee;","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"     * Initialises fields in the AdaptedLeave base class","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"     * @param start Start date of leave","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"     * @param end End date of leave","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"     * @param title Title of leave","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"     * @param description Description of leave","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"     * @param status Status of leave","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"     * @param employee Name of employee","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"     * @throws IllegalArgumentException if name of employee violates naming constraints","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"     * @throws NullPointerException if null is passed in for employee","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"    public AdaptedLeave(String start, String end, String title, String description,","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"                        String status, String employee)","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"            throws IllegalArgumentException, NullPointerException {","lastModifiedDate":"2023-11-02"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"        this.title \u003d title;","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"        this.status \u003d status;","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"        this.employee \u003d new PersonEntry(employee);","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"     * Constructs an AdaptedLeave instance from a Leave object","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"     * @param leave Leave to extract fields from","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"    public AdaptedLeave(Leave leave) {","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(leave);","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"        this.start \u003d leave.getStart().toFormattedString();","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"        this.end \u003d leave.getEnd().toFormattedString();","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"        this.title \u003d leave.getTitle().toString();","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"        this.description \u003d leave.getDescription().toString();","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"        this.status \u003d leave.getStatus().toString();","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"        this.employee \u003d leave.getEmployee();","lastModifiedDate":"2023-11-02"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"     * Converts this Jackson-friendly adapted leave object into the model\u0027s {@code Leave} object.","lastModifiedDate":"2023-11-02"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"     *","lastModifiedDate":"2023-11-02"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted leave.","lastModifiedDate":"2023-11-02"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"    public Leave toModelType() throws IllegalValueException {","lastModifiedDate":"2023-11-02"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"        final Title modelTitle \u003d createTitle();","lastModifiedDate":"2023-11-02"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"        final Description modelDescription \u003d createDescription();","lastModifiedDate":"2023-11-02"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"        final Range dateRange \u003d createRange();","lastModifiedDate":"2023-11-02"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"        final Status modelStatus \u003d createStatus();","lastModifiedDate":"2023-11-02"},{"lineNumber":78,"author":{"gitId":"ryanozx"},"content":"        final ComparablePerson modelEmployee \u003d validateEmployee();","lastModifiedDate":"2023-11-02"},{"lineNumber":79,"author":{"gitId":"ryanozx"},"content":"        return new Leave(modelEmployee, modelTitle, dateRange, modelDescription, modelStatus);","lastModifiedDate":"2023-11-02"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":81,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":82,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":83,"author":{"gitId":"ryanozx"},"content":"     * Checks validity of title field and creates a Title object","lastModifiedDate":"2023-11-02"},{"lineNumber":84,"author":{"gitId":"ryanozx"},"content":"     * @return Title object containing the title field","lastModifiedDate":"2023-11-02"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"     * @throws IllegalValueException if the field does not satisfy Title\u0027s data constraints","lastModifiedDate":"2023-11-02"},{"lineNumber":86,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":87,"author":{"gitId":"ryanozx"},"content":"    private Title createTitle() throws IllegalValueException {","lastModifiedDate":"2023-11-02"},{"lineNumber":88,"author":{"gitId":"ryanozx"},"content":"        checkNullField(title, \"title\");","lastModifiedDate":"2023-11-02"},{"lineNumber":89,"author":{"gitId":"ryanozx"},"content":"        if (!Title.isValidTitle(title)) {","lastModifiedDate":"2023-11-02"},{"lineNumber":90,"author":{"gitId":"ryanozx"},"content":"            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-02"},{"lineNumber":91,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":92,"author":{"gitId":"ryanozx"},"content":"        return new Title(title);","lastModifiedDate":"2023-11-02"},{"lineNumber":93,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":94,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":95,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":96,"author":{"gitId":"ryanozx"},"content":"     * Checks if the field is null","lastModifiedDate":"2023-11-02"},{"lineNumber":97,"author":{"gitId":"ryanozx"},"content":"     * @param field Field to check","lastModifiedDate":"2023-11-02"},{"lineNumber":98,"author":{"gitId":"ryanozx"},"content":"     * @param fieldName Name of field","lastModifiedDate":"2023-11-02"},{"lineNumber":99,"author":{"gitId":"ryanozx"},"content":"     * @throws IllegalValueException if field is null","lastModifiedDate":"2023-11-02"},{"lineNumber":100,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":101,"author":{"gitId":"ryanozx"},"content":"    private void checkNullField(Object field, String fieldName) throws IllegalValueException {","lastModifiedDate":"2023-11-02"},{"lineNumber":102,"author":{"gitId":"ryanozx"},"content":"        if (field \u003d\u003d null) {","lastModifiedDate":"2023-11-02"},{"lineNumber":103,"author":{"gitId":"ryanozx"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, fieldName));","lastModifiedDate":"2023-11-02"},{"lineNumber":104,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":105,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":106,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":107,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":108,"author":{"gitId":"ryanozx"},"content":"     * Checks validity of description field and creates a Description object","lastModifiedDate":"2023-11-02"},{"lineNumber":109,"author":{"gitId":"ryanozx"},"content":"     * @return Description object containing the description field","lastModifiedDate":"2023-11-02"},{"lineNumber":110,"author":{"gitId":"ryanozx"},"content":"     * @throws IllegalValueException if the field does not satisfy Description\u0027s data constraints","lastModifiedDate":"2023-11-02"},{"lineNumber":111,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":112,"author":{"gitId":"ryanozx"},"content":"    private Description createDescription() throws IllegalValueException {","lastModifiedDate":"2023-11-02"},{"lineNumber":113,"author":{"gitId":"ryanozx"},"content":"        checkNullField(description, \"description\");","lastModifiedDate":"2023-11-02"},{"lineNumber":114,"author":{"gitId":"ryanozx"},"content":"        if (!Description.isValidDescription(description)) {","lastModifiedDate":"2023-11-02"},{"lineNumber":115,"author":{"gitId":"ryanozx"},"content":"            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-02"},{"lineNumber":116,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":117,"author":{"gitId":"ryanozx"},"content":"        return new Description(description);","lastModifiedDate":"2023-11-02"},{"lineNumber":118,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":119,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":120,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":121,"author":{"gitId":"ryanozx"},"content":"     * Creates a Range object from the start and end fields","lastModifiedDate":"2023-11-02"},{"lineNumber":122,"author":{"gitId":"ryanozx"},"content":"     * @return Range representing the range of dates from start to end","lastModifiedDate":"2023-11-02"},{"lineNumber":123,"author":{"gitId":"ryanozx"},"content":"     * @throws IllegalValueException if the start and end dates are not in the correct format or the","lastModifiedDate":"2023-11-02"},{"lineNumber":124,"author":{"gitId":"ryanozx"},"content":"     *      end date is before the start date","lastModifiedDate":"2023-11-02"},{"lineNumber":125,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":126,"author":{"gitId":"ryanozx"},"content":"    private Range createRange() throws IllegalValueException {","lastModifiedDate":"2023-11-02"},{"lineNumber":127,"author":{"gitId":"ryanozx"},"content":"        checkNullField(start, \"start\");","lastModifiedDate":"2023-11-02"},{"lineNumber":128,"author":{"gitId":"ryanozx"},"content":"        checkNullField(end, \"end\");","lastModifiedDate":"2023-11-02"},{"lineNumber":129,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":130,"author":{"gitId":"ryanozx"},"content":"        try {","lastModifiedDate":"2023-11-02"},{"lineNumber":131,"author":{"gitId":"ryanozx"},"content":"            final Date modelStart \u003d Date.of(start);","lastModifiedDate":"2023-11-02"},{"lineNumber":132,"author":{"gitId":"ryanozx"},"content":"            final Date modelEnd \u003d Date.of(end);","lastModifiedDate":"2023-11-02"},{"lineNumber":133,"author":{"gitId":"ryanozx"},"content":"            return Range.createNonNullRange(modelStart, modelEnd);","lastModifiedDate":"2023-11-02"},{"lineNumber":134,"author":{"gitId":"ryanozx"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-11-02"},{"lineNumber":135,"author":{"gitId":"ryanozx"},"content":"            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-02"},{"lineNumber":136,"author":{"gitId":"ryanozx"},"content":"        } catch (EndBeforeStartException e) {","lastModifiedDate":"2023-11-02"},{"lineNumber":137,"author":{"gitId":"ryanozx"},"content":"            throw new IllegalValueException(Range.MESSAGE_INVALID_END_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":138,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":139,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":140,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":141,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":142,"author":{"gitId":"ryanozx"},"content":"     * Checks validity of status field and creates a Status object","lastModifiedDate":"2023-11-02"},{"lineNumber":143,"author":{"gitId":"ryanozx"},"content":"     * @return Status object containing the status field","lastModifiedDate":"2023-11-02"},{"lineNumber":144,"author":{"gitId":"ryanozx"},"content":"     * @throws IllegalValueException if the field does not satisfy Status\u0027s data constraints","lastModifiedDate":"2023-11-02"},{"lineNumber":145,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":146,"author":{"gitId":"ryanozx"},"content":"    private Status createStatus() throws IllegalValueException {","lastModifiedDate":"2023-11-02"},{"lineNumber":147,"author":{"gitId":"ryanozx"},"content":"        checkNullField(status, \"status\");","lastModifiedDate":"2023-11-02"},{"lineNumber":148,"author":{"gitId":"ryanozx"},"content":"        if (!Status.isValidStatus(status)) {","lastModifiedDate":"2023-11-02"},{"lineNumber":149,"author":{"gitId":"ryanozx"},"content":"            throw new IllegalValueException(Status.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-02"},{"lineNumber":150,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":151,"author":{"gitId":"ryanozx"},"content":"        return Status.of(status);","lastModifiedDate":"2023-11-02"},{"lineNumber":152,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":153,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":154,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":155,"author":{"gitId":"ryanozx"},"content":"     * Checks that employee is non-null and employee has a name. It is not necessary to","lastModifiedDate":"2023-11-02"},{"lineNumber":156,"author":{"gitId":"ryanozx"},"content":"     * test for name validity, or whether the full name in Name is non-null, as these checks","lastModifiedDate":"2023-11-02"},{"lineNumber":157,"author":{"gitId":"ryanozx"},"content":"     * have already been performed during the initialisation of the Name object.","lastModifiedDate":"2023-11-02"},{"lineNumber":158,"author":{"gitId":"ryanozx"},"content":"     * @return the same ComparablePerson instance","lastModifiedDate":"2023-11-02"},{"lineNumber":159,"author":{"gitId":"ryanozx"},"content":"     * @throws IllegalValueException if either the employee field is null or the employee\u0027s name","lastModifiedDate":"2023-11-02"},{"lineNumber":160,"author":{"gitId":"ryanozx"},"content":"     *      field is null","lastModifiedDate":"2023-11-02"},{"lineNumber":161,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":162,"author":{"gitId":"ryanozx"},"content":"    private ComparablePerson validateEmployee() throws IllegalValueException {","lastModifiedDate":"2023-11-02"},{"lineNumber":163,"author":{"gitId":"ryanozx"},"content":"        checkNullField(employee, \"employee\");","lastModifiedDate":"2023-11-02"},{"lineNumber":164,"author":{"gitId":"ryanozx"},"content":"        checkNullField(employee.getName(), \"employee name\");","lastModifiedDate":"2023-11-02"},{"lineNumber":165,"author":{"gitId":"ryanozx"},"content":"        return employee;","lastModifiedDate":"2023-11-02"},{"lineNumber":166,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":167,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"ryanozx":167}},{"path":"src/main/java/seedu/address/storage/AdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import java.util.List;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":" * Base class of AdaptedPerson used to serialise and deserialise the Person class into different formats","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"abstract class AdaptedPerson implements ToModelTyper\u003cPerson\u003e {","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"    protected final String name;","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    protected final String phone;","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"    protected final String email;","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"    protected final String address;","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"    final List\u003cAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"     * Initialises fields in the AdaptedPerson base class","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"    public AdaptedPerson(String name, String phone, String email, String address, List\u003cAdaptedTag\u003e tags) {","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"        this.email \u003d email;","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"        this.address \u003d address;","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        if (tags !\u003d null) {","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"            this.tags.addAll(tags);","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"     * Converts a given {@code Person} into this class","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"    public AdaptedPerson(Person source) {","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"        name \u003d source.getName().toString();","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2023-10-20"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"        tags.addAll(source.getTags().stream()","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"                .map(AdaptedTag::new)","lastModifiedDate":"2023-10-20"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2023-10-20"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"     *","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-20"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"        for (AdaptedTag tag : tags) {","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2023-10-20"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2023-10-20"},{"lineNumber":78,"author":{"gitId":"ryanozx"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-20"},{"lineNumber":79,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2023-10-20"},{"lineNumber":81,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":82,"author":{"gitId":"ryanozx"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2023-10-20"},{"lineNumber":83,"author":{"gitId":"ryanozx"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2023-10-20"},{"lineNumber":84,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2023-10-20"},{"lineNumber":86,"author":{"gitId":"ryanozx"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-20"},{"lineNumber":87,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":88,"author":{"gitId":"ryanozx"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2023-10-20"},{"lineNumber":89,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":90,"author":{"gitId":"ryanozx"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2023-10-20"},{"lineNumber":91,"author":{"gitId":"ryanozx"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2023-10-20"},{"lineNumber":92,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":93,"author":{"gitId":"ryanozx"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2023-10-20"},{"lineNumber":94,"author":{"gitId":"ryanozx"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-20"},{"lineNumber":95,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":96,"author":{"gitId":"ryanozx"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2023-10-20"},{"lineNumber":97,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":98,"author":{"gitId":"ryanozx"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2023-10-20"},{"lineNumber":99,"author":{"gitId":"ryanozx"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);","lastModifiedDate":"2023-10-20"},{"lineNumber":100,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":101,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"ryanozx":101}},{"path":"src/main/java/seedu/address/storage/AdaptedTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":" * Serializable-friendly version of {@link Tag}.","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"class AdaptedTag {","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}.","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"    public AdaptedTag(String tagName) {","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Converts a given {@code Tag} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"    public AdaptedTag(Tag source) {","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        tagName \u003d source.tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public String getTagName() {","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag.","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Tag toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Tag(tagName);","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"ryanozx":4,"-":43}},{"path":"src/main/java/seedu/address/storage/CsvAdaptedLeave.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import java.util.List;","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.CsvMissingFieldException;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.CsvParsable;","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.GetValuer;","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":" * CSV-friendly version of {@link Leave}","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"public class CsvAdaptedLeave extends AdaptedLeave implements CsvParsable {","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"    public static final String TITLE_HEADER \u003d \"Title\";","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"    public static final String EMPLOYEE_HEADER \u003d \"Employee\";","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"    public static final String START_HEADER \u003d \"Start\";","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"    public static final String END_HEADER \u003d \"End\";","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"    public static final String DESCRIPTION_HEADER \u003d \"Description\";","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"    public static final String STATUS_HEADER \u003d \"Status\";","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"     * Constructs a CsvAdaptedLeave","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"     * @param start Start date of leave","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"     * @param end End date of leave","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"     * @param title Title of leave","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"     * @param description Description of leave","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"     * @param status Status of leave","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"     * @param employee Name of employee","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"    private CsvAdaptedLeave(String start, String end, String title, String description,","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"                            String status, String employee) {","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"        super(start, end, title, description, status, employee);","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"     * Converts a given {@code Leave} into this class","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"    public CsvAdaptedLeave(Leave source) {","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"        super(source);","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"    public List\u003cString\u003e getCsvValues() {","lastModifiedDate":"2023-11-02"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"        String[] fieldValues \u003d {title, employee.getName().toString(), start, end, description, status};","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"        return Arrays.asList(fieldValues);","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"     * Returns a list of the column headers","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"     * @return List of column headers","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"    public static List\u003cString\u003e getHeader() {","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"        String[] headers \u003d {TITLE_HEADER, EMPLOYEE_HEADER, START_HEADER,","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"            END_HEADER, DESCRIPTION_HEADER, STATUS_HEADER};","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"        return Arrays.asList(headers);","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"     * Constructs a CsvAdaptedLeave object from an object where values are queried using getValue()","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"     * @param row An object that contains values associated with a Leave, queried using getValue()","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"     * @return A CsvAdaptedLeave object with field values from the CsvRow","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"     * @throws CsvMissingFieldException if the CsvRow does not contain the field requested","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"    public static CsvAdaptedLeave deserialiseLeave(GetValuer row) throws CsvMissingFieldException {","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"        String title \u003d row.getValue(TITLE_HEADER);","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"        String employee \u003d row.getValue(EMPLOYEE_HEADER);","lastModifiedDate":"2023-11-02"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"        String start \u003d row.getValue(START_HEADER);","lastModifiedDate":"2023-11-02"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"        String end \u003d row.getValue(END_HEADER);","lastModifiedDate":"2023-11-02"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"        String description \u003d row.getValue(DESCRIPTION_HEADER);","lastModifiedDate":"2023-11-02"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"        String status \u003d row.getValue(STATUS_HEADER);","lastModifiedDate":"2023-11-02"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"        return new CsvAdaptedLeave(start, end, title, description, status, employee);","lastModifiedDate":"2023-11-02"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"ryanozx":74}},{"path":"src/main/java/seedu/address/storage/CsvAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import java.util.List;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.CsvMissingFieldException;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.CsvParsable;","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.GetValuer;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":" * CSV-friendly version of {@link Person}","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"class CsvAdaptedPerson extends AdaptedPerson implements CsvParsable {","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"     * Initialises fields in the CsvAdaptedPerson base class","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"    public static final String TAG_DELIMITER \u003d \",\";","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    public static final String NAME_HEADER \u003d \"Name\";","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"    public static final String PHONE_HEADER \u003d \"Phone\";","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    public static final String EMAIL_HEADER \u003d \"Email\";","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"    public static final String ADDRESS_HEADER \u003d \"Address\";","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"    public static final String TAGS_HEADER \u003d \"Tags\";","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"     * Constructs a CsvAdaptedPerson","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"     * @param name Name of person","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"     * @param phone Phone number of person","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"     * @param email Email address of person","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"     * @param address Address of person","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"     * @param tags Tags associated with person","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"    private CsvAdaptedPerson(String name, String phone, String email, String address, List\u003cAdaptedTag\u003e tags) {","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        super(name, phone, email, address, tags);","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"     * Converts a given {@code Person} into this class","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"    public CsvAdaptedPerson(Person source) {","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"        super(source);","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"     * Returns list of string values of the fields in Person","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"     * @return List of string values of fields","lastModifiedDate":"2023-10-20"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"    public List\u003cString\u003e getCsvValues() {","lastModifiedDate":"2023-10-26"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"        String serialisedTags \u003d serialiseTags();","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"        String[] fieldValues \u003d {name, phone, email, address, serialisedTags};","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"        return Arrays.asList(fieldValues);","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"     * Serialises the tags into a single string - a different delimiter has to be used to avoid problems in","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"     * deserializing the Person string","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"     * @return CSV string representation of tags","lastModifiedDate":"2023-10-20"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"    private String serialiseTags() {","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"        List\u003cString\u003e tagNames \u003d tags.stream().map(AdaptedTag::getTagName).collect(Collectors.toList());","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"        return String.join(TAG_DELIMITER, tagNames);","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"     * Constructs a CsvAdaptedPerson object from an object where values are queried using getValue()","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"     * @param row An object that contains values associated with a Person, queried using getValue()","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"     * @return A CsvAdaptedPerson object with field values from the CsvRow","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"     * @throws CsvMissingFieldException if the CsvRow does not contain the field requested","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"    public static CsvAdaptedPerson deserialisePerson(GetValuer row) throws CsvMissingFieldException {","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"        String name \u003d row.getValue(NAME_HEADER);","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"        String phone \u003d row.getValue(PHONE_HEADER);","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"        String email \u003d row.getValue(EMAIL_HEADER);","lastModifiedDate":"2023-10-20"},{"lineNumber":78,"author":{"gitId":"ryanozx"},"content":"        String address \u003d row.getValue(ADDRESS_HEADER);","lastModifiedDate":"2023-10-20"},{"lineNumber":79,"author":{"gitId":"ryanozx"},"content":"        List\u003cAdaptedTag\u003e tags \u003d deserialiseTags(row.getValue(TAGS_HEADER));","lastModifiedDate":"2023-10-20"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":81,"author":{"gitId":"ryanozx"},"content":"        return new CsvAdaptedPerson(name, phone, email, address, tags);","lastModifiedDate":"2023-10-20"},{"lineNumber":82,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":83,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":84,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"     * Returns a list of the column headers","lastModifiedDate":"2023-10-20"},{"lineNumber":86,"author":{"gitId":"ryanozx"},"content":"     * @return List of the column headers","lastModifiedDate":"2023-10-20"},{"lineNumber":87,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":88,"author":{"gitId":"ryanozx"},"content":"    public static List\u003cString\u003e getHeader() {","lastModifiedDate":"2023-10-20"},{"lineNumber":89,"author":{"gitId":"ryanozx"},"content":"        String[] headers \u003d {NAME_HEADER, PHONE_HEADER, EMAIL_HEADER, ADDRESS_HEADER, TAGS_HEADER};","lastModifiedDate":"2023-10-20"},{"lineNumber":90,"author":{"gitId":"ryanozx"},"content":"        return Arrays.asList(headers);","lastModifiedDate":"2023-10-20"},{"lineNumber":91,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":92,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":93,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":94,"author":{"gitId":"ryanozx"},"content":"     * Deserializes the CSV string representation of the tags","lastModifiedDate":"2023-10-26"},{"lineNumber":95,"author":{"gitId":"ryanozx"},"content":"     * @param tags CSV string representation of tags","lastModifiedDate":"2023-10-20"},{"lineNumber":96,"author":{"gitId":"ryanozx"},"content":"     * @return List of tags","lastModifiedDate":"2023-10-20"},{"lineNumber":97,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":98,"author":{"gitId":"ryanozx"},"content":"    private static List\u003cAdaptedTag\u003e deserialiseTags(String tags) {","lastModifiedDate":"2023-10-20"},{"lineNumber":99,"author":{"gitId":"ryanozx"},"content":"        return Arrays.stream(tags.split(TAG_DELIMITER))","lastModifiedDate":"2023-10-20"},{"lineNumber":100,"author":{"gitId":"ryanozx"},"content":"                .filter(tagName -\u003e !Objects.equals(tagName, \"\"))","lastModifiedDate":"2023-10-20"},{"lineNumber":101,"author":{"gitId":"ryanozx"},"content":"                .map(AdaptedTag::new).collect(Collectors.toList());","lastModifiedDate":"2023-10-20"},{"lineNumber":102,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":103,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"ryanozx":103}},{"path":"src/main/java/seedu/address/storage/CsvAddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import java.util.List;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.CsvMissingFieldException;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.CsvFile;","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.CsvUtil;","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":" * Represents a CSV storage for the address book","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"public class CsvAddressBookStorage implements AddressBookStorage {","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    private final Path filePath;","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"     * Constructs a CsvAddressBook","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"     * @param filePath","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"    public CsvAddressBookStorage(Path filePath) {","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"        return filePath;","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataLoadingException {","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"        return readAddressBook(filePath);","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataLoadingException {","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"        Optional\u003cCsvFile\u003e file \u003d CsvUtil.readCsvFile(filePath);","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"        if (file.isEmpty()) {","lastModifiedDate":"2023-10-20"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"            return Optional.empty();","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"        List\u003cCsvAdaptedPerson\u003e persons \u003d getPersons(file.get());","lastModifiedDate":"2023-10-20"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"        try {","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"            if (persons.isEmpty()) {","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"                return Optional.empty();","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"            return Optional.of(new CsvSerializableAddressBook(persons).toModelType());","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"        } catch (IllegalValueException e) {","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"            throw new DataLoadingException(e);","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"     * Returns a list of CsvAdaptedPersons initialised with values read from a CsvFile object","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"     * @param file CsvFile containing field values of Persons","lastModifiedDate":"2023-10-20"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"     * @return List of CsvAdaptedPersons","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"    private static List\u003cCsvAdaptedPerson\u003e getPersons(CsvFile file) {","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"        return file.getRows().map(row -\u003e {","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"            try {","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"                return CsvAdaptedPerson.deserialisePerson(row);","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"            } catch (CsvMissingFieldException e) {","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"                return null;","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"        })","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"            .filter(Objects::nonNull)","lastModifiedDate":"2023-10-20"},{"lineNumber":78,"author":{"gitId":"ryanozx"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2023-10-20"},{"lineNumber":79,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":81,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":82,"author":{"gitId":"ryanozx"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2023-10-20"},{"lineNumber":83,"author":{"gitId":"ryanozx"},"content":"        saveAddressBook(addressBook, filePath);","lastModifiedDate":"2023-10-20"},{"lineNumber":84,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":86,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":87,"author":{"gitId":"ryanozx"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2023-10-20"},{"lineNumber":88,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(addressBook);","lastModifiedDate":"2023-10-20"},{"lineNumber":89,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2023-10-20"},{"lineNumber":90,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":91,"author":{"gitId":"ryanozx"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2023-10-20"},{"lineNumber":92,"author":{"gitId":"ryanozx"},"content":"        List\u003cCsvAdaptedPerson\u003e csvPersons \u003d addressBook.getPersonList().stream()","lastModifiedDate":"2023-10-20"},{"lineNumber":93,"author":{"gitId":"ryanozx"},"content":"                .map(CsvAdaptedPerson::new).collect(Collectors.toList());","lastModifiedDate":"2023-10-20"},{"lineNumber":94,"author":{"gitId":"ryanozx"},"content":"        CsvSerializableAddressBook csvAddressBook \u003d new CsvSerializableAddressBook(csvPersons);","lastModifiedDate":"2023-10-20"},{"lineNumber":95,"author":{"gitId":"ryanozx"},"content":"        CsvFile fileToSave \u003d csvAddressBook.saveAddressBook();","lastModifiedDate":"2023-10-20"},{"lineNumber":96,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":97,"author":{"gitId":"ryanozx"},"content":"        CsvUtil.saveCsvFile(fileToSave, filePath);","lastModifiedDate":"2023-10-20"},{"lineNumber":98,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":99,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"ryanozx":99}},{"path":"src/main/java/seedu/address/storage/CsvLeavesBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import java.io.IOException;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import java.util.List;","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import java.util.Objects;","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import java.util.Optional;","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.CsvMissingFieldException;","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.CsvFile;","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.CsvUtil;","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.ReadOnlyLeavesBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":" * Represents a CSV storage for the leaves book","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"public class CsvLeavesBookStorage implements LeavesBookStorage {","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"    private final Path filePath;","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"    public CsvLeavesBookStorage(Path filePath) {","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"    public Path getLeavesBookFilePath() {","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"        return filePath;","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"    public Optional\u003cReadOnlyLeavesBook\u003e readLeavesBook(AddressBook addressBook) throws DataLoadingException {","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        return readLeavesBook(filePath, addressBook);","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"    public Optional\u003cReadOnlyLeavesBook\u003e readLeavesBook(Path filePath, AddressBook addressBook)","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"            throws DataLoadingException {","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"        Optional\u003cCsvFile\u003e file \u003d CsvUtil.readCsvFile(filePath);","lastModifiedDate":"2023-11-02"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"        if (file.isEmpty()) {","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"            return Optional.empty();","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"        List\u003cCsvAdaptedLeave\u003e leaves \u003d getLeaves(file.get());","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"        try {","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"            if (leaves.isEmpty()) {","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"                return Optional.empty();","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"            return Optional.of(new CsvSerializableLeavesBook(leaves).toModelType(addressBook));","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"        } catch (IllegalValueException e) {","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"            throw new DataLoadingException(e);","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"     * Returns a list of CsvAdaptedLeaves initialised with values read from a CsvFile object","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"     * @param file CsvFile containing field values of Leaves","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"     * @return List of CsvAdaptedLeaves","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"    private static List\u003cCsvAdaptedLeave\u003e getLeaves(CsvFile file) {","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"        return file.getRows().map(row -\u003e {","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"            try {","lastModifiedDate":"2023-11-02"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"                return CsvAdaptedLeave.deserialiseLeave(row);","lastModifiedDate":"2023-11-02"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"            } catch (CsvMissingFieldException e) {","lastModifiedDate":"2023-11-02"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"                return null;","lastModifiedDate":"2023-11-02"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-11-02"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"        })","lastModifiedDate":"2023-11-02"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"        .filter(Objects::nonNull)","lastModifiedDate":"2023-11-02"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"        .collect(Collectors.toList());","lastModifiedDate":"2023-11-02"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":78,"author":{"gitId":"ryanozx"},"content":"    public void saveLeavesBook(ReadOnlyLeavesBook leavesBook) throws IOException {","lastModifiedDate":"2023-11-02"},{"lineNumber":79,"author":{"gitId":"ryanozx"},"content":"        saveLeavesBook(leavesBook, filePath);","lastModifiedDate":"2023-11-02"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":81,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":82,"author":{"gitId":"ryanozx"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":83,"author":{"gitId":"ryanozx"},"content":"    public void saveLeavesBook(ReadOnlyLeavesBook leavesBook, Path filePath) throws IOException {","lastModifiedDate":"2023-11-02"},{"lineNumber":84,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(leavesBook);","lastModifiedDate":"2023-11-02"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2023-11-02"},{"lineNumber":86,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":87,"author":{"gitId":"ryanozx"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2023-11-02"},{"lineNumber":88,"author":{"gitId":"ryanozx"},"content":"        List\u003cCsvAdaptedLeave\u003e csvLeaves \u003d leavesBook.getLeaveList().stream()","lastModifiedDate":"2023-11-02"},{"lineNumber":89,"author":{"gitId":"ryanozx"},"content":"                .map(CsvAdaptedLeave::new).collect(Collectors.toList());","lastModifiedDate":"2023-11-02"},{"lineNumber":90,"author":{"gitId":"ryanozx"},"content":"        CsvSerializableLeavesBook csvLeavesBook \u003d new CsvSerializableLeavesBook(csvLeaves);","lastModifiedDate":"2023-11-02"},{"lineNumber":91,"author":{"gitId":"ryanozx"},"content":"        CsvFile fileToSave \u003d csvLeavesBook.saveLeavesBook();","lastModifiedDate":"2023-11-02"},{"lineNumber":92,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":93,"author":{"gitId":"ryanozx"},"content":"        CsvUtil.saveCsvFile(fileToSave, filePath);","lastModifiedDate":"2023-11-02"},{"lineNumber":94,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":95,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"ryanozx":95}},{"path":"src/main/java/seedu/address/storage/CsvSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import java.util.List;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.CsvFile;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.CsvUtil;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":" * An Immutable AddressBook that is serializable to CSV format.","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"class CsvSerializableAddressBook extends SerializableAddressBook\u003cCsvAdaptedPerson\u003e {","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"    public CsvSerializableAddressBook(List\u003cCsvAdaptedPerson\u003e persons) {","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"     * Creates a CsvFile from the list of AdaptedPersons in the serializableAddressBook","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"     * @return CsvFile containing records of all persons in this address book","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    public CsvFile saveAddressBook() {","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"        CsvFile addressBookFile \u003d new CsvFile(CsvAdaptedPerson.getHeader(), CsvUtil.DELIMITER);","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"        persons.forEach(addressBookFile::addRow);","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"        return addressBookFile;","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"ryanozx":27}},{"path":"src/main/java/seedu/address/storage/CsvSerializableLeavesBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import java.util.List;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.CsvFile;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.CsvUtil;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":" * An Immutable LeavesBook that is serializable to CSV format.","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"public class CsvSerializableLeavesBook extends SerializableLeavesBook\u003cCsvAdaptedLeave\u003e {","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"    public CsvSerializableLeavesBook(List\u003cCsvAdaptedLeave\u003e leaves) {","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"        this.leaves.addAll(leaves);","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"     * Creates a CsvFile from the list of AdaptedLeaves in the serializableLeaveBook","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"     * @return CsvFile containing records of all persons in this address book","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"    public CsvFile saveLeavesBook() {","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"        CsvFile leavesBookFile \u003d new CsvFile(CsvAdaptedLeave.getHeader(), CsvUtil.DELIMITER);","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"        leaves.forEach(leavesBookFile::addRow);","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"        return leavesBookFile;","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"ryanozx":25}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedLeave.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"/**","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":" * Jackson-friendly version of {@link Leave}.","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":" */","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"public class JsonAdaptedLeave extends AdaptedLeave {","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"     * Converts a given {@code Leave} into this class for Jackson use.","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"    public JsonAdaptedLeave(Leave source) {","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"        super(source);","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"    private JsonAdaptedLeave(String start, String end, String title, String description,","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"                             String status, String employee) {","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"        super(start, end, title, description, status, employee);","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"     * Constructs a {@code JsonAdaptedLeave} with the given leave details. The purpose of this static method","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"     * is to enable checking of the Employee instance to ensure it is non-null before initialising the base","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"     * AdaptedLeave instance.","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"    @JsonCreator","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"    public static JsonAdaptedLeave of(@JsonProperty(\"start\") String start, @JsonProperty(\"end\") String end,","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"                                      @JsonProperty(\"title\") String title,","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"                                      @JsonProperty(\"description\") String description,","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"                                      @JsonProperty(\"status\") String status,","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"                                      @JsonProperty(\"employee\") Employee employee) {","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"        requireNonNull(employee);","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"        return new JsonAdaptedLeave(start, end, title, description, status, employee.getName().getFullName());","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"     * Helper class to access nested field in serialized JSON Leave object","lastModifiedDate":"2023-10-27"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"    public static class Employee {","lastModifiedDate":"2023-10-31"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"        private final Name name;","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"        /**","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"         * Constructs an Employee instance","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"         * @param name Name of employee","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"         */","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"ivyy-poison"},"content":"        @JsonCreator","lastModifiedDate":"2023-10-27"},{"lineNumber":50,"author":{"gitId":"ivyy-poison"},"content":"        public Employee(@JsonProperty(\"name\") Name name) {","lastModifiedDate":"2023-10-27"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"            requireNonNull(name);","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"ivyy-poison"},"content":"            this.name \u003d name;","lastModifiedDate":"2023-10-27"},{"lineNumber":53,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-27"},{"lineNumber":54,"author":{"gitId":"ivyy-poison"},"content":"        public Name getName() {","lastModifiedDate":"2023-10-27"},{"lineNumber":55,"author":{"gitId":"ivyy-poison"},"content":"            return name;","lastModifiedDate":"2023-10-27"},{"lineNumber":56,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-27"},{"lineNumber":57,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":58,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":59,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":60,"author":{"gitId":"ivyy-poison"},"content":"     * Helper class to access nested field in serialized JSON Leave object","lastModifiedDate":"2023-10-27"},{"lineNumber":61,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":62,"author":{"gitId":"ivyy-poison"},"content":"    public static class Name {","lastModifiedDate":"2023-10-31"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"        private final String fullName;","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"ivyy-poison"},"content":"        @JsonCreator","lastModifiedDate":"2023-10-27"},{"lineNumber":65,"author":{"gitId":"ivyy-poison"},"content":"        public Name(@JsonProperty(\"fullName\") String fullName) {","lastModifiedDate":"2023-10-27"},{"lineNumber":66,"author":{"gitId":"ivyy-poison"},"content":"            this.fullName \u003d fullName;","lastModifiedDate":"2023-10-27"},{"lineNumber":67,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-27"},{"lineNumber":68,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":69,"author":{"gitId":"ivyy-poison"},"content":"        public String getFullName() {","lastModifiedDate":"2023-10-27"},{"lineNumber":70,"author":{"gitId":"ivyy-poison"},"content":"            return fullName;","lastModifiedDate":"2023-10-27"},{"lineNumber":71,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-27"},{"lineNumber":72,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":73,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"ryanozx":32,"ivyy-poison":41}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"class JsonAdaptedPerson extends AdaptedPerson {","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"            @JsonProperty(\"tags\") List\u003cAdaptedTag\u003e tags) {","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"        super(name, phone, email, address, tags);","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"        super(source);","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"ryanozx":4,"-":26}},{"path":"src/main/java/seedu/address/storage/JsonAddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A class to access AddressBook data stored as a json file on the hard disk.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorage implements AddressBookStorage {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    private final Path filePath;","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public JsonAddressBookStorage(Path filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return readAddressBook(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Similar to {@link #readAddressBook()}.","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DataLoadingException if loading the data from storage failed.","lastModifiedDate":"2023-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                filePath, JsonSerializableAddressBook.class);","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"        if (jsonAddressBook.isEmpty()) {","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Optional.of(jsonAddressBook.get().toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new DataLoadingException(ive);","lastModifiedDate":"2023-06-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}.","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(addressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"ryanozx":2,"-":78}},{"path":"src/main/java/seedu/address/storage/JsonLeavesBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.ReadOnlyLeavesBook;","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"/**","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":" * A class to access LeavesBook data stored as a json file on the hard disk.","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":" */","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":"public class JsonLeavesBookStorage implements LeavesBookStorage {","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"ivyy-poison"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonLeavesBookStorage.class);","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"ivyy-poison"},"content":"    private final Path filePath;","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"ivyy-poison"},"content":"    public JsonLeavesBookStorage(Path filePath) {","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"    public Path getLeavesBookFilePath() {","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"        return filePath;","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"    public Optional\u003cReadOnlyLeavesBook\u003e readLeavesBook(AddressBook addressBook) throws DataLoadingException {","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"        return readLeavesBook(filePath, addressBook);","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"     * Similar to {@link #readLeavesBook(AddressBook addressBook)} ()}","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"     * @throws DataLoadingException if the file is not found.","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"    public Optional\u003cReadOnlyLeavesBook\u003e readLeavesBook(Path filePath, AddressBook addressBook)","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"ivyy-poison"},"content":"            throws DataLoadingException {","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"ivyy-poison"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"ivyy-poison"},"content":"        Optional\u003cJsonSerializableLeavesBook\u003e jsonLeavesBook \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2023-10-26"},{"lineNumber":50,"author":{"gitId":"ivyy-poison"},"content":"                filePath, JsonSerializableLeavesBook.class);","lastModifiedDate":"2023-10-26"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"        if (jsonLeavesBook.isEmpty()) {","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"ivyy-poison"},"content":"            return Optional.empty();","lastModifiedDate":"2023-10-26"},{"lineNumber":53,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":54,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":55,"author":{"gitId":"ivyy-poison"},"content":"        try {","lastModifiedDate":"2023-10-26"},{"lineNumber":56,"author":{"gitId":"ivyy-poison"},"content":"            return Optional.of(jsonLeavesBook.get().toModelType(addressBook));","lastModifiedDate":"2023-10-26"},{"lineNumber":57,"author":{"gitId":"ivyy-poison"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2023-10-26"},{"lineNumber":58,"author":{"gitId":"ivyy-poison"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2023-10-26"},{"lineNumber":59,"author":{"gitId":"ivyy-poison"},"content":"            throw new DataLoadingException(ive);","lastModifiedDate":"2023-10-26"},{"lineNumber":60,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":63,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":64,"author":{"gitId":"ivyy-poison"},"content":"    public void saveLeavesBook(ReadOnlyLeavesBook leavesBook) throws IOException {","lastModifiedDate":"2023-10-26"},{"lineNumber":65,"author":{"gitId":"ivyy-poison"},"content":"        saveLeavesBook(leavesBook, filePath);","lastModifiedDate":"2023-10-26"},{"lineNumber":66,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":67,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":68,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":69,"author":{"gitId":"ivyy-poison"},"content":"     * Similar to {@link #saveLeavesBook(ReadOnlyLeavesBook)}","lastModifiedDate":"2023-10-26"},{"lineNumber":70,"author":{"gitId":"ivyy-poison"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2023-10-26"},{"lineNumber":71,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":72,"author":{"gitId":"ivyy-poison"},"content":"    public void saveLeavesBook(ReadOnlyLeavesBook leavesBook, Path filePath) throws IOException {","lastModifiedDate":"2023-10-26"},{"lineNumber":73,"author":{"gitId":"ivyy-poison"},"content":"        requireNonNull(leavesBook);","lastModifiedDate":"2023-10-26"},{"lineNumber":74,"author":{"gitId":"ivyy-poison"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2023-10-26"},{"lineNumber":75,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":76,"author":{"gitId":"ivyy-poison"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2023-10-26"},{"lineNumber":77,"author":{"gitId":"ivyy-poison"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableLeavesBook(leavesBook), filePath);","lastModifiedDate":"2023-10-26"},{"lineNumber":78,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":79,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"ryanozx":2,"ivyy-poison":77}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"class JsonSerializableAddressBook extends SerializableAddressBook\u003cJsonAdaptedPerson\u003e {","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons.","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"ryanozx":1,"-":33}},{"path":"src/main/java/seedu/address/storage/JsonSerializableLeavesBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import java.util.List;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.ReadOnlyLeavesBook;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"/**","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":" * An Immutable LeavesBook that is serializable to JSON format.","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":" */","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"@JsonRootName(value \u003d \"leavesbook\")","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"public class JsonSerializableLeavesBook extends SerializableLeavesBook\u003cJsonAdaptedLeave\u003e {","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"     * Constructs a {@code JsonSerializableLeavesBook} with the given leaves.","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":"    @JsonCreator","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":"    public JsonSerializableLeavesBook(@JsonProperty(\"leaves\") List\u003cJsonAdaptedLeave\u003e leaves) {","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"ivyy-poison"},"content":"        this.leaves.addAll(leaves);","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":"     * Converts a given {@code ReadOnlyLeavesBook} into this class for Jackson use.","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableLeavesBook}.","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"    public JsonSerializableLeavesBook(ReadOnlyLeavesBook source) {","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"        leaves.addAll(source.getLeaveList().stream().map(JsonAdaptedLeave::new).collect(Collectors.toList()));","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"ryanozx":1,"ivyy-poison":32}},{"path":"src/main/java/seedu/address/storage/LeavesBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.ReadOnlyLeavesBook;","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":"/**","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":" * Represents a storage for {@link seedu.address.model.LeavesBook}.","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":" */","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":"public interface LeavesBookStorage {","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"    Path getLeavesBookFilePath();","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"ivyy-poison"},"content":"     * Returns LeavesBook data as a {@link seedu.address.model.LeavesBook}.","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"ivyy-poison"},"content":"     * Returns {@code null} if storage file is not found.","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"ivyy-poison"},"content":"     * @throws DataLoadingException if loading the data from storage failed.","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"ivyy-poison"},"content":"    Optional\u003cReadOnlyLeavesBook\u003e readLeavesBook(AddressBook addressBook) throws DataLoadingException;","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"     * @see #getLeavesBookFilePath()","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"    Optional\u003cReadOnlyLeavesBook\u003e readLeavesBook(Path filePath, AddressBook addressBook) throws DataLoadingException;","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"     * Saves the given {@link ReadOnlyLeavesBook} to the storage.","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"     * @param leavesBook cannot be null.","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"    void saveLeavesBook(ReadOnlyLeavesBook leavesBook) throws IOException;","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"     * @see #saveLeavesBook(ReadOnlyLeavesBook)","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"    void saveLeavesBook(ReadOnlyLeavesBook leavesBook, Path filePath) throws IOException;","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"ivyy-poison":45}},{"path":"src/main/java/seedu/address/storage/SerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import java.util.List;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":" * An abstract class for an Immutable AddressBook that can be serialised to different types.","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"abstract class SerializableAddressBook\u003cT extends AdaptedPerson\u003e {","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"    protected final List\u003cT\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"     *","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    public AddressBook toModelType() throws IllegalValueException {","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"        for (T adaptedPerson : persons) {","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"            Person person \u003d adaptedPerson.toModelType();","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"            if (addressBook.hasPerson(person)) {","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"            addressBook.addPerson(person);","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"        return addressBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"ryanozx":33}},{"path":"src/main/java/seedu/address/storage/SerializableLeavesBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import java.util.List;","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.LeavesBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":" * An abstract class for an Immutable LeavesBook that can be serialised to different types.","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"abstract class SerializableLeavesBook\u003cT extends AdaptedLeave\u003e {","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"    public static final String MESSAGE_DUPLICATE_LEAVE \u003d \"Leaves list contains duplicate leave(s).\";","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"    protected final List\u003cT\u003e leaves \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"     * Converts this leaves book into the model\u0027s {@code LeavesBook} object.","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"     *","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    public LeavesBook toModelType(AddressBook addressBook) throws IllegalValueException, PersonNotFoundException {","lastModifiedDate":"2023-11-03"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"        LeavesBook leavesBook \u003d new LeavesBook();","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"        for (T adaptedLeave : leaves) {","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"            Leave leave \u003d adaptedLeave.toModelType();","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"            if (leavesBook.hasLeave(leave)) {","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_LEAVE);","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"            if (!addressBook.hasPerson(leave.getEmployee())) {","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"                continue;","lastModifiedDate":"2023-11-03"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"            leavesBook.addLeave(leave);","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"        return leavesBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"ryanozx":38}},{"path":"src/main/java/seedu/address/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.ReadOnlyLeavesBook;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage, LeavesBookStorage {","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataLoadingException;","lastModifiedDate":"2023-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataLoadingException;","lastModifiedDate":"2023-06-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"    Path getLeavesBookFilePath();","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"    Optional\u003cReadOnlyLeavesBook\u003e readLeavesBook(AddressBook addressBook) throws DataLoadingException;","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"    void saveLeavesBook(ReadOnlyLeavesBook leavesBook) throws IOException;","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"ivyy-poison":12,"-":31}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.ReadOnlyLeavesBook;","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Manages storage of AddressBook data in local storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private AddressBookStorage addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":23,"author":{"gitId":"ivyy-poison"},"content":"    private LeavesBookStorage leavesBookStorage;","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"ivyy-poison"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage},","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"     * {@code UserPrefStorage}, and {@code LeavesBookStorage}.","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"            LeavesBookStorage leavesBookStorage) {","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"        this.addressBookStorage \u003d addressBookStorage;","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"        this.leavesBookStorage \u003d leavesBookStorage;","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataLoadingException {","lastModifiedDate":"2023-06-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataLoadingException {","lastModifiedDate":"2023-06-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataLoadingException {","lastModifiedDate":"2023-06-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"ivyy-poison"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LeavesBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-26"},{"lineNumber":93,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":94,"author":{"gitId":"ivyy-poison"},"content":"    public Path getLeavesBookFilePath() {","lastModifiedDate":"2023-10-26"},{"lineNumber":95,"author":{"gitId":"ivyy-poison"},"content":"        return leavesBookStorage.getLeavesBookFilePath();","lastModifiedDate":"2023-10-26"},{"lineNumber":96,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":97,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":98,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":99,"author":{"gitId":"ivyy-poison"},"content":"    public Optional\u003cReadOnlyLeavesBook\u003e readLeavesBook(AddressBook addressBook) throws DataLoadingException {","lastModifiedDate":"2023-10-26"},{"lineNumber":100,"author":{"gitId":"ivyy-poison"},"content":"        return readLeavesBook(leavesBookStorage.getLeavesBookFilePath(), addressBook);","lastModifiedDate":"2023-10-26"},{"lineNumber":101,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":102,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":103,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":104,"author":{"gitId":"ivyy-poison"},"content":"    public Optional\u003cReadOnlyLeavesBook\u003e readLeavesBook(Path filePath, AddressBook addressBook)","lastModifiedDate":"2023-10-26"},{"lineNumber":105,"author":{"gitId":"ivyy-poison"},"content":"            throws DataLoadingException {","lastModifiedDate":"2023-10-26"},{"lineNumber":106,"author":{"gitId":"ivyy-poison"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2023-10-26"},{"lineNumber":107,"author":{"gitId":"ivyy-poison"},"content":"        return leavesBookStorage.readLeavesBook(filePath, addressBook);","lastModifiedDate":"2023-10-26"},{"lineNumber":108,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":109,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":110,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":111,"author":{"gitId":"ivyy-poison"},"content":"    public void saveLeavesBook(ReadOnlyLeavesBook leavesBook) throws IOException {","lastModifiedDate":"2023-10-26"},{"lineNumber":112,"author":{"gitId":"ivyy-poison"},"content":"        saveLeavesBook(leavesBook, leavesBookStorage.getLeavesBookFilePath());","lastModifiedDate":"2023-10-26"},{"lineNumber":113,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":114,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":115,"author":{"gitId":"ivyy-poison"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":116,"author":{"gitId":"ivyy-poison"},"content":"    public void saveLeavesBook(ReadOnlyLeavesBook leavesBook, Path filePath) throws IOException {","lastModifiedDate":"2023-10-26"},{"lineNumber":117,"author":{"gitId":"ivyy-poison"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2023-10-26"},{"lineNumber":118,"author":{"gitId":"ivyy-poison"},"content":"        leavesBookStorage.saveLeavesBook(leavesBook, filePath);","lastModifiedDate":"2023-10-26"},{"lineNumber":119,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":120,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"ivyy-poison":42,"-":78}},{"path":"src/main/java/seedu/address/storage/ToModelTyper.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":" * Interface for objects that implement toModelType(), which converts an object from","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":" * an adapted variant to the models\u0027 variant","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":" * @param \u003cT\u003e Type of object in the model","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"public interface ToModelTyper\u003cT\u003e {","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"    T toModelType() throws IllegalValueException;","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"ryanozx":12}},{"path":"src/main/java/seedu/address/ui/AddressStatusBarFooter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2018-12-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"public class AddressStatusBarFooter extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-14"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"    private static final String FXML \u003d \"AddressStatusBarFooter.fxml\";","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-10"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"    private Label saveAddressBookLocationStatus;","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Creates a {@code StatusBarFooter} with the given {@code Path}.","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"    public AddressStatusBarFooter(Path saveLocation) {","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2017-04-01"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":"        saveAddressBookLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"jean-cq":7,"-":23}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2324s1-cs2103t-w11-1.github.io/tp/UserGuide.html\";","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"    public static final String URL_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"jean-cq"},"content":"        helpMessage.setText(URL_MESSAGE);","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     *     \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *             if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *             if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *             if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *             if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"jean-cq":3,"-":98}},{"path":"src/main/java/seedu/address/ui/LeaveCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"/**","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":" * An UI component that displays information of a {@code leave}.","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":" */","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"public class LeaveCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"    private static final String FXML \u003d \"LeaveListCard.fxml\";","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"    public final Leave leave;","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":"    @FXML","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":"    private HBox cardPane;","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"jean-cq"},"content":"    @FXML","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"jean-cq"},"content":"    private Label id;","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"jean-cq"},"content":"    @FXML","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"jean-cq"},"content":"    private Label name;","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"jean-cq"},"content":"    @FXML","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"jean-cq"},"content":"    private Label title;","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"    @FXML","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"jean-cq"},"content":"    private Label description;","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"jean-cq"},"content":"    @FXML","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"    private Label dateStart;","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"jean-cq"},"content":"    @FXML","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"jean-cq"},"content":"    private Label dateEnd;","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"jean-cq"},"content":"    @FXML","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"jean-cq"},"content":"    private FlowPane status;","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"jean-cq"},"content":"     * Creates a {@code LeaveCode} with the given {@code Leave} and index to display.","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"jean-cq"},"content":"    public LeaveCard(Leave leave, int displayedIndex) {","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"jean-cq"},"content":"        super(FXML);","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"jean-cq"},"content":"        this.leave \u003d leave;","lastModifiedDate":"2023-10-26"},{"lineNumber":50,"author":{"gitId":"jean-cq"},"content":"        if (leave \u003d\u003d null) {","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"jean-cq"},"content":"            throw new IllegalArgumentException(\"Leave cannot be null.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"        String statusType \u003d leave.getStatus().toString();","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":56,"author":{"gitId":"jean-cq"},"content":"        String styleClass;","lastModifiedDate":"2023-11-01"},{"lineNumber":57,"author":{"gitId":"jean-cq"},"content":"        switch (statusType) {","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"jean-cq"},"content":"        case \"PENDING\":","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"jean-cq"},"content":"            styleClass \u003d \"status-pending\";","lastModifiedDate":"2023-11-01"},{"lineNumber":60,"author":{"gitId":"jean-cq"},"content":"            break;","lastModifiedDate":"2023-11-01"},{"lineNumber":61,"author":{"gitId":"jean-cq"},"content":"        case \"APPROVED\":","lastModifiedDate":"2023-11-01"},{"lineNumber":62,"author":{"gitId":"jean-cq"},"content":"            styleClass \u003d \"status-approved\";","lastModifiedDate":"2023-11-01"},{"lineNumber":63,"author":{"gitId":"jean-cq"},"content":"            break;","lastModifiedDate":"2023-11-01"},{"lineNumber":64,"author":{"gitId":"jean-cq"},"content":"        case \"REJECTED\":","lastModifiedDate":"2023-11-01"},{"lineNumber":65,"author":{"gitId":"jean-cq"},"content":"            styleClass \u003d \"status-rejected\";","lastModifiedDate":"2023-11-01"},{"lineNumber":66,"author":{"gitId":"jean-cq"},"content":"            break;","lastModifiedDate":"2023-11-01"},{"lineNumber":67,"author":{"gitId":"jean-cq"},"content":"        default:","lastModifiedDate":"2023-11-01"},{"lineNumber":68,"author":{"gitId":"jean-cq"},"content":"            styleClass \u003d \"\";","lastModifiedDate":"2023-11-01"},{"lineNumber":69,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":70,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":71,"author":{"gitId":"jean-cq"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2023-11-01"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"        title.setText(leave.getTitle().toString());","lastModifiedDate":"2023-11-02"},{"lineNumber":73,"author":{"gitId":"ong-wei-hong"},"content":"        name.setText(\"Employee: \" + leave.getEmployee().getName().toString());","lastModifiedDate":"2023-11-02"},{"lineNumber":74,"author":{"gitId":"jean-cq"},"content":"        description.setText(\"Description:\\n\" + leave.getDescription());","lastModifiedDate":"2023-11-01"},{"lineNumber":75,"author":{"gitId":"jean-cq"},"content":"        dateStart.setText(\"Date Start: \" + leave.getStart().toString());","lastModifiedDate":"2023-11-01"},{"lineNumber":76,"author":{"gitId":"jean-cq"},"content":"        dateEnd.setText(\"Date End: \" + leave.getEnd().toString());","lastModifiedDate":"2023-11-01"},{"lineNumber":77,"author":{"gitId":"jean-cq"},"content":"        status.getStyleClass().setAll(styleClass);","lastModifiedDate":"2023-11-01"},{"lineNumber":78,"author":{"gitId":"jean-cq"},"content":"        status.getChildren().add(new Label(leave.getStatus().toString()));","lastModifiedDate":"2023-10-26"},{"lineNumber":79,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":80,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"ryanozx":2,"jean-cq":77,"ong-wei-hong":1}},{"path":"src/main/java/seedu/address/ui/LeaveListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"/**","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":" */","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":"public class LeaveListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"    private static final String FXML \u003d \"LeaveListPanel.fxml\";","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LeaveListPanel.class);","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"    @FXML","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"    private ListView\u003cLeave\u003e leaveListView;","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":"    public LeaveListPanel(ObservableList\u003cLeave\u003e leaveList) {","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":"        super(FXML);","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":"        leaveListView.setItems(leaveList);","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"jean-cq"},"content":"        leaveListView.setCellFactory(listView -\u003e new LeaveListViewCell());","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"jean-cq"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Leave} using a {@code LeaveCard}.","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"    class LeaveListViewCell extends ListCell\u003cLeave\u003e {","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"jean-cq"},"content":"        protected void updateItem(Leave leave, boolean empty) {","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"            super.updateItem(leave, empty);","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"jean-cq"},"content":"            if (empty || leave \u003d\u003d null) {","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"jean-cq"},"content":"                setGraphic(null);","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"jean-cq"},"content":"                setText(null);","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"jean-cq"},"content":"            } else {","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"jean-cq"},"content":"                setGraphic(new LeaveCard(leave, getIndex() + 1).getRoot());","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"jean-cq"},"content":"            }","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"jean-cq":49}},{"path":"src/main/java/seedu/address/ui/LeaveStatusBarFooter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2018-12-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"public class LeaveStatusBarFooter extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-14"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"    private static final String FXML \u003d \"LeaveStatusBarFooter.fxml\";","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-10"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"    private Label saveLeavesBookLocationStatus;","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code StatusBarFooter} with the given {@code Path}.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":"    public LeaveStatusBarFooter(Path saveLocation) {","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2017-04-01"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"        saveLeavesBookLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"jean-cq":5,"-":23}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2016-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"    private LeaveListPanel leaveListPanel;","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"jean-cq"},"content":"    @FXML","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"jean-cq"},"content":"    private StackPane leaveListPanelPlaceholder;","lastModifiedDate":"2023-10-26"},{"lineNumber":50,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"jean-cq"},"content":"    private StackPane addressStatusbarPlaceholder;","lastModifiedDate":"2023-11-01"},{"lineNumber":56,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":57,"author":{"gitId":"jean-cq"},"content":"    @FXML","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"jean-cq"},"content":"    private StackPane leaveStatusbarPlaceholder;","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":123,"author":{"gitId":"jean-cq"},"content":"        leaveListPanel \u003d new LeaveListPanel(logic.getFilteredLeaveList());","lastModifiedDate":"2023-10-26"},{"lineNumber":124,"author":{"gitId":"jean-cq"},"content":"        leaveListPanelPlaceholder.getChildren().add(leaveListPanel.getRoot());","lastModifiedDate":"2023-10-26"},{"lineNumber":125,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":129,"author":{"gitId":"jean-cq"},"content":"        AddressStatusBarFooter addressStatusBarFooter \u003d new AddressStatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2023-11-01"},{"lineNumber":130,"author":{"gitId":"jean-cq"},"content":"        LeaveStatusBarFooter leaveStatusBarFooter \u003d new LeaveStatusBarFooter(logic.getLeavesBookFilePath());","lastModifiedDate":"2023-11-01"},{"lineNumber":131,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":132,"author":{"gitId":"jean-cq"},"content":"        addressStatusbarPlaceholder.getChildren().add(addressStatusBarFooter.getRoot());","lastModifiedDate":"2023-11-01"},{"lineNumber":133,"author":{"gitId":"jean-cq"},"content":"        leaveStatusbarPlaceholder.getChildren().add(leaveStatusBarFooter.getRoot());","lastModifiedDate":"2023-11-01"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":168,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {","lastModifiedDate":"2016-08-25"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        return personListPanel;","lastModifiedDate":"2018-08-14"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":199,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            logger.info(\"An error occurred while executing command: \" + commandText);","lastModifiedDate":"2023-06-13"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":209,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"jean-cq":16,"-":193}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"        name.setText(person.getName().toString());","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        person.getTags().stream()","lastModifiedDate":"2019-01-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2019-01-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2019-01-02"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"ryanozx":1,"-":58}},{"path":"src/main/java/seedu/address/ui/ResultDisplay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextArea;","lastModifiedDate":"2016-09-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the header of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-10-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private TextArea resultDisplay;","lastModifiedDate":"2016-10-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-15"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"     * Constructs ResultDisplay with starting welcome message.","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public ResultDisplay() {","lastModifiedDate":"2017-06-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"        resultDisplay.setText(\"Welcome to HR Mate! Type \u0027help\u0027 to know more commands :D\");","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"jean-cq":4,"-":27}},{"path":"src/main/resources/view/AddressStatusBarFooter.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"    \u003cLabel fx:id\u003d\"saveAddressBookLocationStatus\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"\u003c/GridPane\u003e","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"jean-cq":12}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    background-color: #383838; /* Used in the default.html file */","lastModifiedDate":"2017-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2016-08-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2017-03-02"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":96,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;","lastModifiedDate":"2017-03-02"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":106,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;","lastModifiedDate":"2017-03-02"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":110,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;","lastModifiedDate":"2017-03-02"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":119,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2022-01-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-05-09"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     -fx-border-color: derive(#1d1d1d, 10%);","lastModifiedDate":"2017-05-09"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":145,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2018-12-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2016-09-14"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":189,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;","lastModifiedDate":"2022-01-13"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2016-08-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  -fx-background-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":236,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":265,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":275,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    -fx-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":284,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":286,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":288,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2016-08-15"},{"lineNumber":291,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":293,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2016-08-15"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":296,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":298,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":300,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":302,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":304,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":306,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":308,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":310,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":313,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":315,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2016-08-08"},{"lineNumber":318,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":320,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":329,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":331,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {","lastModifiedDate":"2016-08-15"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2016-08-15"},{"lineNumber":333,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":334,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":335,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":338,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":340,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":343,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":344,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":345,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-12-18"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":352,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":353,"author":{"gitId":"jean-cq"},"content":"#status {","lastModifiedDate":"2023-11-01"},{"lineNumber":354,"author":{"gitId":"jean-cq"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2023-11-01"},{"lineNumber":355,"author":{"gitId":"jean-cq"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2023-11-01"},{"lineNumber":356,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-11-01"},{"lineNumber":357,"author":{"gitId":"jean-cq"},"content":"#status .label {","lastModifiedDate":"2023-11-01"},{"lineNumber":358,"author":{"gitId":"jean-cq"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-11-01"},{"lineNumber":359,"author":{"gitId":"jean-cq"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2023-11-01"},{"lineNumber":360,"author":{"gitId":"jean-cq"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2023-11-01"},{"lineNumber":361,"author":{"gitId":"jean-cq"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2023-11-01"},{"lineNumber":362,"author":{"gitId":"jean-cq"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2023-11-01"},{"lineNumber":363,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-11-01"},{"lineNumber":364,"author":{"gitId":"jean-cq"},"content":"#status.status-pending .label {","lastModifiedDate":"2023-11-01"},{"lineNumber":365,"author":{"gitId":"jean-cq"},"content":"    -fx-background-color: orange;","lastModifiedDate":"2023-11-01"},{"lineNumber":366,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-11-01"},{"lineNumber":367,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":368,"author":{"gitId":"jean-cq"},"content":"#status.status-approved .label {","lastModifiedDate":"2023-11-01"},{"lineNumber":369,"author":{"gitId":"jean-cq"},"content":"    -fx-background-color: green;","lastModifiedDate":"2023-11-01"},{"lineNumber":370,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-11-01"},{"lineNumber":371,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":372,"author":{"gitId":"jean-cq"},"content":"#status.status-rejected .label {","lastModifiedDate":"2023-11-01"},{"lineNumber":373,"author":{"gitId":"jean-cq"},"content":"    -fx-background-color: red;","lastModifiedDate":"2023-11-01"},{"lineNumber":374,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-11-01"},{"lineNumber":375,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":376,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":377,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":378,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"jean-cq":26,"-":352}},{"path":"src/main/resources/view/LeaveListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":"        \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$title\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"jean-cq"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"jean-cq"},"content":"      \u003cFlowPane fx:id\u003d\"status\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"InfiBeyond"},"content":"      \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$name\" /\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"jean-cq"},"content":"      \u003cLabel fx:id\u003d\"dateStart\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateStart\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"jean-cq"},"content":"      \u003cLabel fx:id\u003d\"dateEnd\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateEnd\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"jean-cq"},"content":"        \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"jean-cq"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"jean-cq"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"jean-cq"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"jean-cq"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"jean-cq"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"jean-cq"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"jean-cq"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"jean-cq"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"jean-cq":44,"InfiBeyond":1}},{"path":"src/main/resources/view/LeaveListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"\u003c?import javafx.scene.shape.Line?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"  \u003cstylesheets\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"    \u003cURL value\u003d\"@PanelStyle.css\" /\u003e \u003c!-- Adjust the path to your CSS file relative to your resources directory --\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"  \u003c/stylesheets\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"  \u003cVBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"      \u003cInsets bottom\u003d\"5\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"    \u003cLabel fx:id\u003d\"leavesList\" styleClass\u003d\"title_label\" text\u003d\"Leave List\"/\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"    \u003cLine startX\u003d\"0.0\" startY\u003d\"0.0\" endX\u003d\"88.0\" endY\u003d\"0.0\" styleClass\u003d\"separation_line\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"    \u003c/Line\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":"  \u003c/VBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":"  \u003cListView fx:id\u003d\"leaveListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"jean-cq":24}},{"path":"src/main/resources/view/LeaveStatusBarFooter.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"    \u003cLabel fx:id\u003d\"saveLeavesBookLocationStatus\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"\u003c/GridPane\u003e","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"jean-cq":12}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2023-07-27"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":"         title\u003d\"HR Mate\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"        \u003cURL value\u003d\"@MenuBar.css\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\"","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":51,"author":{"gitId":"jean-cq"},"content":"        \u003cHBox HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":52,"author":{"gitId":"jean-cq"},"content":"          \u003cVBox HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"jean-cq"},"content":"            \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":54,"author":{"gitId":"jean-cq"},"content":"              \u003cpadding\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":55,"author":{"gitId":"jean-cq"},"content":"                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":56,"author":{"gitId":"jean-cq"},"content":"              \u003c/padding\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":57,"author":{"gitId":"jean-cq"},"content":"              \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":58,"author":{"gitId":"jean-cq"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":59,"author":{"gitId":"jean-cq"},"content":"            \u003cStackPane fx:id\u003d\"addressStatusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":60,"author":{"gitId":"jean-cq"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":61,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":62,"author":{"gitId":"jean-cq"},"content":"          \u003cVBox HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":63,"author":{"gitId":"jean-cq"},"content":"            \u003cVBox fx:id\u003d\"leaveList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"              \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"              \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":67,"author":{"gitId":"jean-cq"},"content":"                \u003cStackPane fx:id\u003d\"leaveListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":69,"author":{"gitId":"jean-cq"},"content":"            \u003cStackPane fx:id\u003d\"leaveStatusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":70,"author":{"gitId":"jean-cq"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":71,"author":{"gitId":"jean-cq"},"content":"        \u003c/HBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"jean-cq":21,"-":55}},{"path":"src/main/resources/view/MenuBar.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"/* Custom style for the submenu */","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":".menu-item .label {","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"    -fx-text-fill: #FFFFFF; /* Text color */","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"    -fx-alignment: center;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"jean-cq":7}},{"path":"src/main/resources/view/PanelStyle.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":".title_label {","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"    -fx-font-size: 20px; /* Font size */","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"    -fx-text-fill: #FFFFFF; /* Text color (red in this example) */","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":".separation_line {","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"    -fx-stroke: #808080; /* Set the color you desire (black in this example) */","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"    -fx-stroke-width: 2;","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"jean-cq":9}},{"path":"src/main/resources/view/PersonListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"\u003c?import javafx.scene.shape.Line?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-07-27"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"    \u003cstylesheets\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"    \u003cURL value\u003d\"@PanelStyle.css\" /\u003e \u003c!-- Adjust the path to your CSS file relative to your resources directory --\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"\u003c/stylesheets\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"\u003cVBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"        \u003cInsets bottom\u003d\"5\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"    \u003cLabel fx:id\u003d\"employeeList\" styleClass\u003d\"title_label\" text\u003d\"Employee List\"/\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"    \u003cLine startX\u003d\"0.0\" startY\u003d\"0.0\" endX\u003d\"125.0\" endY\u003d\"0.0\" styleClass\u003d\"separation_line\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"    \u003c/Line\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":"  \u003c/VBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"jean-cq":16,"-":8}},{"path":"src/test/java/seedu/address/commons/util/CsvFileTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import java.util.List;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.CsvMismatchedColumnException;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.CsvMissingFieldException;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"public class CsvFileTest {","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"    private static final String TEST_DELIMITER \u003d \";\";","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"    private static final List\u003cString\u003e TEST_HEADER_LIST \u003d Arrays.asList(\"first\", \"second\", \"third\");","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"    private static final String TEST_HEADER \u003d String.join(TEST_DELIMITER, TEST_HEADER_LIST);","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"    private static final String NON_EXISTENT_HEADER \u003d \"fourth\";","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"    private static final List\u003cString\u003e FIRST_ROW_VALS \u003d Arrays.asList(\"firstVal\", \"secondVal\", \"thirdVal\");","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    private static final String FIRST_ROW \u003d String.join(TEST_DELIMITER, FIRST_ROW_VALS);","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"    public void constructor_stringHeader_returnsCsvFile() {","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"        CsvFile file \u003d new CsvFile(TEST_HEADER, TEST_DELIMITER);","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"        // Only way to retrieve header for now is to obtain the file stream and","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"        // extract the second string from the stream (since the first string contains the delimiter)","lastModifiedDate":"2023-10-27"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"        List\u003cString\u003e lines \u003d getLines(file);","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"        assert(lines.size() \u003d\u003d 2);","lastModifiedDate":"2023-10-27"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"        assertDelimiter(lines, TEST_DELIMITER);","lastModifiedDate":"2023-10-27"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"        assertEquals(lines.get(1), TEST_HEADER);","lastModifiedDate":"2023-10-27"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"    private List\u003cString\u003e getLines(CsvFile file) {","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        return file.getFileStream().collect(Collectors.toList());","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"    private void assertDelimiter(List\u003cString\u003e lines, String delimiter) {","lastModifiedDate":"2023-10-27"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"        assert(!lines.isEmpty());","lastModifiedDate":"2023-10-27"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"        assertEquals(lines.get(0), String.format(CsvFile.DELIMITER_SPECIFIER, delimiter));","lastModifiedDate":"2023-10-27"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"    public void constructor_listHeader_returnsCsvFile() {","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"        CsvFile file \u003d new CsvFile(TEST_HEADER_LIST, TEST_DELIMITER);","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"        List\u003cString\u003e lines \u003d getLines(file);","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"        assert(lines.size() \u003d\u003d 2);","lastModifiedDate":"2023-10-27"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"        assertDelimiter(lines, TEST_DELIMITER);","lastModifiedDate":"2023-10-27"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"        String expectedResult \u003d String.join(TEST_DELIMITER, TEST_HEADER_LIST);","lastModifiedDate":"2023-10-27"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"        assertEquals(lines.get(1), expectedResult);","lastModifiedDate":"2023-10-27"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"    public void addRow_stringRow() {","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"        CsvFile file \u003d new CsvFile(TEST_HEADER, TEST_DELIMITER);","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"        file.addRow(FIRST_ROW);","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"        List\u003cString\u003e lines \u003d getLines(file);","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"        // 1 line for header, 1 line for row","lastModifiedDate":"2023-10-20"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"        assert(lines.size() \u003d\u003d 3);","lastModifiedDate":"2023-10-27"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"        assertEquals(lines.get(2), FIRST_ROW);","lastModifiedDate":"2023-10-27"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"    public void addRow_listRow() {","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"        CsvFile file \u003d new CsvFile(TEST_HEADER, TEST_DELIMITER);","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"        file.addRow(new MockCsvParsable(FIRST_ROW_VALS));","lastModifiedDate":"2023-10-26"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"        List\u003cString\u003e lines \u003d getLines(file);","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"        assert(lines.size() \u003d\u003d 3);","lastModifiedDate":"2023-10-27"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"        assertEquals(lines.get(2), FIRST_ROW);","lastModifiedDate":"2023-10-27"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"    private static class MockCsvParsable implements CsvParsable {","lastModifiedDate":"2023-10-26"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"        private final List\u003cString\u003e values;","lastModifiedDate":"2023-10-26"},{"lineNumber":78,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":79,"author":{"gitId":"ryanozx"},"content":"        public MockCsvParsable(List\u003cString\u003e values) {","lastModifiedDate":"2023-10-26"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"            this.values \u003d values;","lastModifiedDate":"2023-10-26"},{"lineNumber":81,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":82,"author":{"gitId":"ryanozx"},"content":"        public List\u003cString\u003e getCsvValues() {","lastModifiedDate":"2023-10-26"},{"lineNumber":83,"author":{"gitId":"ryanozx"},"content":"            return values;","lastModifiedDate":"2023-10-26"},{"lineNumber":84,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":86,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":87,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":88,"author":{"gitId":"ryanozx"},"content":"    public void getFileStream() {","lastModifiedDate":"2023-10-20"},{"lineNumber":89,"author":{"gitId":"ryanozx"},"content":"        CsvFile file \u003d new CsvFile(TEST_HEADER, TEST_DELIMITER);","lastModifiedDate":"2023-10-20"},{"lineNumber":90,"author":{"gitId":"ryanozx"},"content":"        List\u003cString\u003e secondRowVals \u003d Arrays.asList(\"fourthVal\", \"fifthVal\", \"sixthVal\");","lastModifiedDate":"2023-10-20"},{"lineNumber":91,"author":{"gitId":"ryanozx"},"content":"        String secondRow \u003d String.join(TEST_DELIMITER, secondRowVals);","lastModifiedDate":"2023-10-20"},{"lineNumber":92,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":93,"author":{"gitId":"ryanozx"},"content":"        file.addRow(FIRST_ROW);","lastModifiedDate":"2023-10-20"},{"lineNumber":94,"author":{"gitId":"ryanozx"},"content":"        file.addRow(secondRow);","lastModifiedDate":"2023-10-20"},{"lineNumber":95,"author":{"gitId":"ryanozx"},"content":"        List\u003cString\u003e lines \u003d getLines(file);","lastModifiedDate":"2023-10-20"},{"lineNumber":96,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":97,"author":{"gitId":"ryanozx"},"content":"        assert(lines.size() \u003d\u003d 4);","lastModifiedDate":"2023-10-27"},{"lineNumber":98,"author":{"gitId":"ryanozx"},"content":"        assertDelimiter(lines, TEST_DELIMITER);","lastModifiedDate":"2023-10-27"},{"lineNumber":99,"author":{"gitId":"ryanozx"},"content":"        assertEquals(lines.get(1), TEST_HEADER);","lastModifiedDate":"2023-10-27"},{"lineNumber":100,"author":{"gitId":"ryanozx"},"content":"        assertEquals(lines.get(2), FIRST_ROW);","lastModifiedDate":"2023-10-27"},{"lineNumber":101,"author":{"gitId":"ryanozx"},"content":"        assertEquals(lines.get(3), secondRow);","lastModifiedDate":"2023-10-27"},{"lineNumber":102,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":103,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":104,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":105,"author":{"gitId":"ryanozx"},"content":"    public void getRows_success() {","lastModifiedDate":"2023-10-20"},{"lineNumber":106,"author":{"gitId":"ryanozx"},"content":"        // Also doubles as the test for CsvRow constructor via string, where the number","lastModifiedDate":"2023-10-20"},{"lineNumber":107,"author":{"gitId":"ryanozx"},"content":"        // of values supplied equals to the number of columns in the header","lastModifiedDate":"2023-10-20"},{"lineNumber":108,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":109,"author":{"gitId":"ryanozx"},"content":"        // Additionally, this can be taken as the test for CsvRow printRow()","lastModifiedDate":"2023-10-20"},{"lineNumber":110,"author":{"gitId":"ryanozx"},"content":"        CsvFile file \u003d new CsvFile(TEST_HEADER, TEST_DELIMITER);","lastModifiedDate":"2023-10-20"},{"lineNumber":111,"author":{"gitId":"ryanozx"},"content":"        file.addRow(FIRST_ROW);","lastModifiedDate":"2023-10-20"},{"lineNumber":112,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":113,"author":{"gitId":"ryanozx"},"content":"        List\u003cCsvFile.CsvRow\u003e rows \u003d getRows(file);","lastModifiedDate":"2023-10-20"},{"lineNumber":114,"author":{"gitId":"ryanozx"},"content":"        assert(rows.size() \u003d\u003d 1);","lastModifiedDate":"2023-10-20"},{"lineNumber":115,"author":{"gitId":"ryanozx"},"content":"        assertEquals(rows.get(0).printRow(), FIRST_ROW);","lastModifiedDate":"2023-10-20"},{"lineNumber":116,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":117,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":118,"author":{"gitId":"ryanozx"},"content":"    private List\u003cCsvFile.CsvRow\u003e getRows(CsvFile file) {","lastModifiedDate":"2023-10-20"},{"lineNumber":119,"author":{"gitId":"ryanozx"},"content":"        return file.getRows().collect(Collectors.toList());","lastModifiedDate":"2023-10-20"},{"lineNumber":120,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":121,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":122,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":123,"author":{"gitId":"ryanozx"},"content":"    public void csvRowAddRow_nullRow_throwsException() {","lastModifiedDate":"2023-10-26"},{"lineNumber":124,"author":{"gitId":"ryanozx"},"content":"        CsvFile file \u003d new CsvFile(TEST_HEADER, TEST_DELIMITER);","lastModifiedDate":"2023-10-26"},{"lineNumber":125,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e file.addRow((CsvParsable) null));","lastModifiedDate":"2023-10-26"},{"lineNumber":126,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":127,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":128,"author":{"gitId":"ryanozx"},"content":"    public void csvRowStringConstructor_fewerColsThanHeader_success() {","lastModifiedDate":"2023-10-20"},{"lineNumber":129,"author":{"gitId":"ryanozx"},"content":"        CsvFile file \u003d new CsvFile(TEST_HEADER, TEST_DELIMITER);","lastModifiedDate":"2023-10-20"},{"lineNumber":130,"author":{"gitId":"ryanozx"},"content":"        List\u003cString\u003e vals \u003d Arrays.asList(\"firstVal\", \"secondVal\");","lastModifiedDate":"2023-10-20"},{"lineNumber":131,"author":{"gitId":"ryanozx"},"content":"        String row \u003d String.join(TEST_DELIMITER, vals);","lastModifiedDate":"2023-10-20"},{"lineNumber":132,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":133,"author":{"gitId":"ryanozx"},"content":"        file.addRow(row);","lastModifiedDate":"2023-10-20"},{"lineNumber":134,"author":{"gitId":"ryanozx"},"content":"        List\u003cCsvFile.CsvRow\u003e rows \u003d getRows(file);","lastModifiedDate":"2023-10-20"},{"lineNumber":135,"author":{"gitId":"ryanozx"},"content":"        assert(rows.size() \u003d\u003d 1);","lastModifiedDate":"2023-10-20"},{"lineNumber":136,"author":{"gitId":"ryanozx"},"content":"        List\u003cString\u003e expectedVals \u003d Arrays.asList(\"firstVal\", \"secondVal\", \"\");","lastModifiedDate":"2023-10-20"},{"lineNumber":137,"author":{"gitId":"ryanozx"},"content":"        String expectedRow \u003d String.join(TEST_DELIMITER, expectedVals);","lastModifiedDate":"2023-10-20"},{"lineNumber":138,"author":{"gitId":"ryanozx"},"content":"        assertEquals(rows.get(0).printRow(), expectedRow);","lastModifiedDate":"2023-10-20"},{"lineNumber":139,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":140,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":141,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":142,"author":{"gitId":"ryanozx"},"content":"    public void csvRowStringConstructor_moreColsThanHeader_throwsException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":143,"author":{"gitId":"ryanozx"},"content":"        CsvFile file \u003d new CsvFile(TEST_HEADER, TEST_DELIMITER);","lastModifiedDate":"2023-10-20"},{"lineNumber":144,"author":{"gitId":"ryanozx"},"content":"        List\u003cString\u003e vals \u003d Arrays.asList(\"firstVal\", \"secondVal\", \"thirdVal\", \"fourthVal\");","lastModifiedDate":"2023-10-20"},{"lineNumber":145,"author":{"gitId":"ryanozx"},"content":"        String row \u003d String.join(TEST_DELIMITER, vals);","lastModifiedDate":"2023-10-20"},{"lineNumber":146,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":147,"author":{"gitId":"ryanozx"},"content":"        assertThrows(CsvMismatchedColumnException.class, () -\u003e file.addRow(row));","lastModifiedDate":"2023-10-20"},{"lineNumber":148,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":149,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":150,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":151,"author":{"gitId":"ryanozx"},"content":"    public void csvRowListConstructor_sameColsAsHeader_success() {","lastModifiedDate":"2023-10-20"},{"lineNumber":152,"author":{"gitId":"ryanozx"},"content":"        CsvFile file \u003d new CsvFile(TEST_HEADER, TEST_DELIMITER);","lastModifiedDate":"2023-10-20"},{"lineNumber":153,"author":{"gitId":"ryanozx"},"content":"        file.addRow(new MockCsvParsable(FIRST_ROW_VALS));","lastModifiedDate":"2023-10-26"},{"lineNumber":154,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":155,"author":{"gitId":"ryanozx"},"content":"        List\u003cCsvFile.CsvRow\u003e rows \u003d getRows(file);","lastModifiedDate":"2023-10-20"},{"lineNumber":156,"author":{"gitId":"ryanozx"},"content":"        assert(rows.size() \u003d\u003d 1);","lastModifiedDate":"2023-10-20"},{"lineNumber":157,"author":{"gitId":"ryanozx"},"content":"        assertEquals(rows.get(0).printRow(), FIRST_ROW);","lastModifiedDate":"2023-10-20"},{"lineNumber":158,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":159,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":160,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":161,"author":{"gitId":"ryanozx"},"content":"    public void csvRowListConstructor_fewerColsThanHeader_success() {","lastModifiedDate":"2023-10-20"},{"lineNumber":162,"author":{"gitId":"ryanozx"},"content":"        CsvFile file \u003d new CsvFile(TEST_HEADER, TEST_DELIMITER);","lastModifiedDate":"2023-10-20"},{"lineNumber":163,"author":{"gitId":"ryanozx"},"content":"        List\u003cString\u003e vals \u003d Arrays.asList(\"firstVal\", \"secondVal\");","lastModifiedDate":"2023-10-20"},{"lineNumber":164,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":165,"author":{"gitId":"ryanozx"},"content":"        file.addRow(new MockCsvParsable(vals));","lastModifiedDate":"2023-10-26"},{"lineNumber":166,"author":{"gitId":"ryanozx"},"content":"        List\u003cCsvFile.CsvRow\u003e rows \u003d getRows(file);","lastModifiedDate":"2023-10-20"},{"lineNumber":167,"author":{"gitId":"ryanozx"},"content":"        assert(rows.size() \u003d\u003d 1);","lastModifiedDate":"2023-10-20"},{"lineNumber":168,"author":{"gitId":"ryanozx"},"content":"        List\u003cString\u003e expectedVals \u003d Arrays.asList(\"firstVal\", \"secondVal\", \"\");","lastModifiedDate":"2023-10-20"},{"lineNumber":169,"author":{"gitId":"ryanozx"},"content":"        String expectedRow \u003d String.join(TEST_DELIMITER, expectedVals);","lastModifiedDate":"2023-10-20"},{"lineNumber":170,"author":{"gitId":"ryanozx"},"content":"        assertEquals(rows.get(0).printRow(), expectedRow);","lastModifiedDate":"2023-10-20"},{"lineNumber":171,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":172,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":173,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":174,"author":{"gitId":"ryanozx"},"content":"    public void csvRowListConstructor_moreColsThanHeader_throwsException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":175,"author":{"gitId":"ryanozx"},"content":"        CsvFile file \u003d new CsvFile(TEST_HEADER, TEST_DELIMITER);","lastModifiedDate":"2023-10-20"},{"lineNumber":176,"author":{"gitId":"ryanozx"},"content":"        List\u003cString\u003e vals \u003d Arrays.asList(\"firstVal\", \"secondVal\", \"thirdVal\", \"fourthVal\");","lastModifiedDate":"2023-10-20"},{"lineNumber":177,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":178,"author":{"gitId":"ryanozx"},"content":"        assertThrows(CsvMismatchedColumnException.class, () -\u003e file.addRow(new MockCsvParsable(vals)));","lastModifiedDate":"2023-10-26"},{"lineNumber":179,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":180,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":181,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":182,"author":{"gitId":"ryanozx"},"content":"    public void csvRowGetValue_allValuesPresent_success() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":183,"author":{"gitId":"ryanozx"},"content":"        CsvFile file \u003d new CsvFile(TEST_HEADER, TEST_DELIMITER);","lastModifiedDate":"2023-10-20"},{"lineNumber":184,"author":{"gitId":"ryanozx"},"content":"        file.addRow(new MockCsvParsable(FIRST_ROW_VALS));","lastModifiedDate":"2023-10-26"},{"lineNumber":185,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":186,"author":{"gitId":"ryanozx"},"content":"        List\u003cCsvFile.CsvRow\u003e rows \u003d getRows(file);","lastModifiedDate":"2023-10-20"},{"lineNumber":187,"author":{"gitId":"ryanozx"},"content":"        assert(rows.size() \u003d\u003d 1);","lastModifiedDate":"2023-10-20"},{"lineNumber":188,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":189,"author":{"gitId":"ryanozx"},"content":"        CsvFile.CsvRow firstCsvRow \u003d rows.get(0);","lastModifiedDate":"2023-10-20"},{"lineNumber":190,"author":{"gitId":"ryanozx"},"content":"        for (int i \u003d 0; i \u003c TEST_HEADER_LIST.size(); ++i) {","lastModifiedDate":"2023-10-20"},{"lineNumber":191,"author":{"gitId":"ryanozx"},"content":"            assertEquals(firstCsvRow.getValue(TEST_HEADER_LIST.get(i)),","lastModifiedDate":"2023-10-20"},{"lineNumber":192,"author":{"gitId":"ryanozx"},"content":"                    FIRST_ROW_VALS.get(i));","lastModifiedDate":"2023-10-20"},{"lineNumber":193,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":194,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":195,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":196,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":197,"author":{"gitId":"ryanozx"},"content":"    public void csvRowGetValue_missingField_throwsException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":198,"author":{"gitId":"ryanozx"},"content":"        CsvFile file \u003d new CsvFile(TEST_HEADER, TEST_DELIMITER);","lastModifiedDate":"2023-10-20"},{"lineNumber":199,"author":{"gitId":"ryanozx"},"content":"        file.addRow(new MockCsvParsable(FIRST_ROW_VALS));","lastModifiedDate":"2023-10-26"},{"lineNumber":200,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":201,"author":{"gitId":"ryanozx"},"content":"        List\u003cCsvFile.CsvRow\u003e rows \u003d getRows(file);","lastModifiedDate":"2023-10-20"},{"lineNumber":202,"author":{"gitId":"ryanozx"},"content":"        assert(rows.size() \u003d\u003d 1);","lastModifiedDate":"2023-10-20"},{"lineNumber":203,"author":{"gitId":"ryanozx"},"content":"        CsvFile.CsvRow firstCsvRow \u003d rows.get(0);","lastModifiedDate":"2023-10-20"},{"lineNumber":204,"author":{"gitId":"ryanozx"},"content":"        assertThrows(CsvMissingFieldException.class, () -\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":205,"author":{"gitId":"ryanozx"},"content":"                firstCsvRow.getValue(NON_EXISTENT_HEADER));","lastModifiedDate":"2023-10-20"},{"lineNumber":206,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":207,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"ryanozx":207}},{"path":"src/test/java/seedu/address/commons/util/CsvUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import java.util.List;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"import seedu.address.testutil.FileAndPathUtil;","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"public class CsvUtilTest {","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"    private static final Path TEST_FOLDER_PATH \u003d Paths.get(","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"            \"src\", \"test\", \"data\", \"CsvUtilTest\");","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    private static final String DELIMITER \u003d \";\";","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"    private static final List\u003cString\u003e HEADER_LIST \u003d Arrays.asList(\"first\", \"second\", \"third\");","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    private static final String HEADER \u003d String.join(DELIMITER, HEADER_LIST);","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"    private static final List\u003cString\u003e FIRST_ROW_VALS \u003d Arrays.asList(\"firstVal\", \"secondVal\", \"thirdVal\");","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"    private static final String FIRST_ROW \u003d String.join(DELIMITER, FIRST_ROW_VALS);","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"    public void readCsvFile_nullFilePath_throwsException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e CsvUtil.readCsvFile(null));","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"    public void readCsvFile_wrongFileType_throwsException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"        Path invalidExtensionFile \u003d addToTestDataPathIfNotNull(\"badExtension.txt\");","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        assertThrows(DataLoadingException.class, () -\u003e CsvUtil.readCsvFile(invalidExtensionFile));","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"    private Path addToTestDataPathIfNotNull(String fileName) {","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"        return FileAndPathUtil.addToTestDataPathIfNotNull(TEST_FOLDER_PATH, fileName);","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"    public void readCsvFile_nonExistentFile_returnsEmpty() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"        Path nonExistentFile \u003d addToTestDataPathIfNotNull(\"nonExistentFile.csv\");","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"        Optional\u003cCsvFile\u003e csvFile \u003d CsvUtil.readCsvFile(nonExistentFile);","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"        assertFalse(csvFile.isPresent());","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"    public void readCsvFile_columnCountMatchesHeader_returnsFile() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"        Path file \u003d addToTestDataPathIfNotNull(\"CsvFileMatchingColumns.csv\");","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"        Optional\u003cCsvFile\u003e csvFile \u003d CsvUtil.readCsvFile(file);","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"        List\u003cString\u003e lines \u003d csvFile.get().getFileStream()","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"        assert(lines.size() \u003d\u003d 3);","lastModifiedDate":"2023-10-27"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"        // first line in lines should be \"sep\u003d;\"","lastModifiedDate":"2023-10-27"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"        assertDelimiter(lines);","lastModifiedDate":"2023-10-27"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"        assertEquals(lines.get(1), HEADER);","lastModifiedDate":"2023-10-27"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"        assertEquals(lines.get(2), FIRST_ROW);","lastModifiedDate":"2023-10-27"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"    private void assertDelimiter(List\u003cString\u003e lines) {","lastModifiedDate":"2023-10-27"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"        assert(!lines.isEmpty());","lastModifiedDate":"2023-10-27"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"        assertEquals(lines.get(0), String.format(CsvFile.DELIMITER_SPECIFIER, DELIMITER));","lastModifiedDate":"2023-10-27"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"    public void readCsvFile_columnCountMismatch_skipsMisMatch() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"        // if no. of values provided for the row is less than the number of columns, row","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"        // is still read into the CsvFile as the other columns will be padded","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"        // if no. of values provided for the row is more than the number of columns, the","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"        // entire row will be skipped","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"        Path file \u003d addToTestDataPathIfNotNull(\"CsvFileMismatchColumns.csv\");","lastModifiedDate":"2023-10-20"},{"lineNumber":78,"author":{"gitId":"ryanozx"},"content":"        Optional\u003cCsvFile\u003e csvFile \u003d CsvUtil.readCsvFile(file);","lastModifiedDate":"2023-10-20"},{"lineNumber":79,"author":{"gitId":"ryanozx"},"content":"        List\u003cString\u003e secondRowVals \u003d Arrays.asList(\"fourthVal\", \"fifthVal\", \"\");","lastModifiedDate":"2023-10-20"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"        String expectedSecondRow \u003d String.join(DELIMITER, secondRowVals);","lastModifiedDate":"2023-10-20"},{"lineNumber":81,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":82,"author":{"gitId":"ryanozx"},"content":"        List\u003cString\u003e lines \u003d csvFile.get().getFileStream()","lastModifiedDate":"2023-10-20"},{"lineNumber":83,"author":{"gitId":"ryanozx"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2023-10-20"},{"lineNumber":84,"author":{"gitId":"ryanozx"},"content":"        assert(lines.size() \u003d\u003d 4);","lastModifiedDate":"2023-10-27"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"        assertDelimiter(lines);","lastModifiedDate":"2023-10-27"},{"lineNumber":86,"author":{"gitId":"ryanozx"},"content":"        assertEquals(lines.get(1), HEADER);","lastModifiedDate":"2023-10-27"},{"lineNumber":87,"author":{"gitId":"ryanozx"},"content":"        assertEquals(lines.get(2), FIRST_ROW);","lastModifiedDate":"2023-10-27"},{"lineNumber":88,"author":{"gitId":"ryanozx"},"content":"        assertEquals(lines.get(3), expectedSecondRow);","lastModifiedDate":"2023-10-27"},{"lineNumber":89,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":90,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":91,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":92,"author":{"gitId":"ryanozx"},"content":"    public void saveCsvFile_nullFile_throwsException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":93,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e CsvUtil.saveCsvFile(null,","lastModifiedDate":"2023-10-20"},{"lineNumber":94,"author":{"gitId":"ryanozx"},"content":"                addToTestDataPathIfNotNull(\"nonRead.csv\")));","lastModifiedDate":"2023-10-20"},{"lineNumber":95,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":96,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":97,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":98,"author":{"gitId":"ryanozx"},"content":"    public void saveCsvFile_nullPath_throwsException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":99,"author":{"gitId":"ryanozx"},"content":"        CsvFile file \u003d new CsvFile(HEADER, DELIMITER);","lastModifiedDate":"2023-10-20"},{"lineNumber":100,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e CsvUtil.saveCsvFile(file,","lastModifiedDate":"2023-10-20"},{"lineNumber":101,"author":{"gitId":"ryanozx"},"content":"                addToTestDataPathIfNotNull(null)));","lastModifiedDate":"2023-10-20"},{"lineNumber":102,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":103,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":104,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":105,"author":{"gitId":"ryanozx"},"content":"    public void saveAndReadCsvFile_success() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":106,"author":{"gitId":"ryanozx"},"content":"        CsvFile file \u003d new CsvFile(HEADER, DELIMITER);","lastModifiedDate":"2023-10-20"},{"lineNumber":107,"author":{"gitId":"ryanozx"},"content":"        file.addRow(FIRST_ROW);","lastModifiedDate":"2023-10-20"},{"lineNumber":108,"author":{"gitId":"ryanozx"},"content":"        Path savePath \u003d addToTestDataPathIfNotNull(\"tempFile.csv\");","lastModifiedDate":"2023-10-20"},{"lineNumber":109,"author":{"gitId":"ryanozx"},"content":"        CsvUtil.saveCsvFile(file, savePath);","lastModifiedDate":"2023-10-20"},{"lineNumber":110,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":111,"author":{"gitId":"ryanozx"},"content":"        Optional\u003cCsvFile\u003e readFile \u003d CsvUtil.readCsvFile(savePath);","lastModifiedDate":"2023-10-20"},{"lineNumber":112,"author":{"gitId":"ryanozx"},"content":"        List\u003cString\u003e lines \u003d readFile.get().getFileStream()","lastModifiedDate":"2023-10-20"},{"lineNumber":113,"author":{"gitId":"ryanozx"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2023-10-20"},{"lineNumber":114,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":115,"author":{"gitId":"ryanozx"},"content":"        assert(lines.size() \u003d\u003d 3);","lastModifiedDate":"2023-10-27"},{"lineNumber":116,"author":{"gitId":"ryanozx"},"content":"        assertDelimiter(lines);","lastModifiedDate":"2023-10-27"},{"lineNumber":117,"author":{"gitId":"ryanozx"},"content":"        assertEquals(lines.get(1), HEADER);","lastModifiedDate":"2023-10-27"},{"lineNumber":118,"author":{"gitId":"ryanozx"},"content":"        assertEquals(lines.get(2), FIRST_ROW);","lastModifiedDate":"2023-10-27"},{"lineNumber":119,"author":{"gitId":"ryanozx"},"content":"        FileAndPathUtil.cleanupCreatedFiles(savePath);","lastModifiedDate":"2023-10-20"},{"lineNumber":120,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":121,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"ryanozx":121}},{"path":"src/test/java/seedu/address/commons/util/FileUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class FileUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"    private static final String newLine \u003d System.lineSeparator();","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"    @TempDir","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"    public Path testFolder;","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void isValidPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // valid path","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // invalid path","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertFalse(FileUtil.isValidPath(\"a\\0\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // null path -\u003e throws NullPointerException","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"    public void writeAndReadToFile_stringInput_success() throws IOException {","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"        Path filePath \u003d testFolder.resolve(\"testFile.txt\");","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"        String input \u003d \"Hello\" + newLine + \"world!\" + newLine;","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"        FileUtil.writeToFile(filePath, input);","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"        String readString \u003d FileUtil.readFromFile(filePath);","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"        assertEquals(input, readString);","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"    public void writeAndReadToFile_streamInput_success() throws IOException {","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"        Path filePath \u003d testFolder.resolve(\"testFile.txt\");","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"        String firstLine \u003d \"Hello\";","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"        String secondLine \u003d \"world!\";","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"        Stream\u003cString\u003e lineStream \u003d Stream.of(firstLine, secondLine);","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"        FileUtil.writeToFile(filePath, lineStream);","lastModifiedDate":"2023-10-20"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"        String expectedResult \u003d \"Hello\" + newLine + \"world!\" + newLine;","lastModifiedDate":"2023-10-20"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"        String readString \u003d FileUtil.readFromFile(filePath);","lastModifiedDate":"2023-10-20"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"        assertEquals(expectedResult, readString);","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"ryanozx":33,"-":22}},{"path":"src/test/java/seedu/address/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------","lastModifiedDate":"2019-02-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {","lastModifiedDate":"2019-02-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));","lastModifiedDate":"2017-06-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // EP: zero as prefix","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: signed numbers","lastModifiedDate":"2016-10-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // EP: numbers with white space","lastModifiedDate":"2016-10-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle","lastModifiedDate":"2017-06-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE","lastModifiedDate":"2017-06-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2017-06-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true","lastModifiedDate":"2016-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null","lastModifiedDate":"2016-10-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time.","lastModifiedDate":"2016-10-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:","lastModifiedDate":"2016-10-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *   - any word","lastModifiedDate":"2016-10-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers","lastModifiedDate":"2016-10-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:","lastModifiedDate":"2016-10-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *   - empty string","lastModifiedDate":"2016-10-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *   - one word","lastModifiedDate":"2016-10-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *   - multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:","lastModifiedDate":"2016-10-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *   - last word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *   - middle word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *   - matches multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:","lastModifiedDate":"2016-10-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word","lastModifiedDate":"2016-10-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases.","lastModifiedDate":"2016-10-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {","lastModifiedDate":"2016-10-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // Empty sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case","lastModifiedDate":"2016-10-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Matches a partial word only","lastModifiedDate":"2016-10-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word","lastModifiedDate":"2016-10-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters","lastModifiedDate":"2016-10-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object","lastModifiedDate":"2016-10-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {","lastModifiedDate":"2016-09-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":143,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":144,"author":{"gitId":"ivyy-poison"},"content":"    public void isIntegerMethod() {","lastModifiedDate":"2023-11-08"},{"lineNumber":145,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(StringUtil.isInteger(\"1\"));","lastModifiedDate":"2023-11-08"},{"lineNumber":146,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(StringUtil.isInteger(\"123\"));","lastModifiedDate":"2023-11-08"},{"lineNumber":147,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(StringUtil.isInteger(\"-123\")); // Signed negative integers","lastModifiedDate":"2023-11-08"},{"lineNumber":148,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(StringUtil.isInteger(\"+123\")); // Signed positive integers","lastModifiedDate":"2023-11-08"},{"lineNumber":149,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":150,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(StringUtil.isInteger(\"\")); // Empty string","lastModifiedDate":"2023-11-08"},{"lineNumber":151,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(StringUtil.isInteger(\" \")); // Whitespace","lastModifiedDate":"2023-11-08"},{"lineNumber":152,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(StringUtil.isInteger(\"a\")); // Non-numeric characters","lastModifiedDate":"2023-11-08"},{"lineNumber":153,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(StringUtil.isInteger(\"123a\")); // Non-numeric characters","lastModifiedDate":"2023-11-08"},{"lineNumber":154,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":155,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"ivyy-poison":13,"-":143}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.AccessDeniedException;","lastModifiedDate":"2023-06-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"jean-cq"},"content":"import seedu.address.storage.JsonLeavesBookStorage;","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy IO exception\");","lastModifiedDate":"2023-06-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_AD_EXCEPTION \u003d new AccessDeniedException(\"dummy access denied exception\");","lastModifiedDate":"2023-06-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":51,"author":{"gitId":"jean-cq"},"content":"        JsonLeavesBookStorage leavesBookStorage \u003d","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"jean-cq"},"content":"                new JsonLeavesBookStorage(temporaryFolder.resolve(\"leavesBook.json\"));","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":54,"author":{"gitId":"jean-cq"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, leavesBookStorage);","lastModifiedDate":"2023-11-01"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertCommandFailureForExceptionFromStorage(DUMMY_IO_EXCEPTION, String.format(","lastModifiedDate":"2023-06-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                LogicManager.FILE_OPS_ERROR_FORMAT, DUMMY_IO_EXCEPTION.getMessage()));","lastModifiedDate":"2023-06-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-06-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-06-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsAdException_throwsCommandException() {","lastModifiedDate":"2023-06-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertCommandFailureForExceptionFromStorage(DUMMY_AD_EXCEPTION, String.format(","lastModifiedDate":"2023-06-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                LogicManager.FILE_OPS_PERMISSION_ERROR_FORMAT, DUMMY_AD_EXCEPTION.getMessage()));","lastModifiedDate":"2023-06-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":94,"author":{"gitId":"jean-cq"},"content":"    public void getFilteredLeaveList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-26"},{"lineNumber":95,"author":{"gitId":"jean-cq"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredLeaveList().remove(0));","lastModifiedDate":"2023-10-26"},{"lineNumber":96,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":97,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":134,"author":{"gitId":"ong-wei-hong"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * Tests the Logic component\u0027s handling of an {@code IOException} thrown by the Storage component.","lastModifiedDate":"2023-06-13"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-06-13"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * @param e the exception to be thrown by the Storage component","lastModifiedDate":"2023-06-13"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * @param expectedMessage the message expected inside exception thrown by the Logic component","lastModifiedDate":"2023-06-13"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    private void assertCommandFailureForExceptionFromStorage(IOException e, String expectedMessage) {","lastModifiedDate":"2023-06-13"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        Path prefPath \u003d temporaryFolder.resolve(\"ExceptionUserPrefs.json\");","lastModifiedDate":"2023-06-13"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // Inject LogicManager with an AddressBookStorage that throws the IOException e when saving","lastModifiedDate":"2023-06-13"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(prefPath) {","lastModifiedDate":"2023-06-13"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath)","lastModifiedDate":"2023-06-13"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                    throws IOException {","lastModifiedDate":"2023-06-13"},{"lineNumber":165,"author":{"gitId":"-"},"content":"                throw e;","lastModifiedDate":"2023-06-13"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2023-06-13"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2023-06-13"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ExceptionUserPrefs.json\"));","lastModifiedDate":"2023-06-13"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2023-06-13"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2023-06-13"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // Triggers the saveAddressBook method by executing an add command","lastModifiedDate":"2023-06-13"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY","lastModifiedDate":"2023-06-13"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;","lastModifiedDate":"2023-06-13"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2023-06-13"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2023-06-13"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2023-06-13"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2023-06-13"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"jean-cq":9,"-":173,"ong-wei-hong":1}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":27,"author":{"gitId":"ong-wei-hong"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"ong-wei-hong"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);","lastModifiedDate":"2017-06-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new AddCommand(validPerson), model,","lastModifiedDate":"2019-01-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, Messages.format(validPerson)),","lastModifiedDate":"2019-02-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                expectedModel);","lastModifiedDate":"2019-02-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);","lastModifiedDate":"2018-01-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertCommandFailure(new AddCommand(personInList), model,","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                AddCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"-":46,"ong-wei-hong":3}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":24,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.ReadOnlyLeavesBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, Messages.format(validPerson)),","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2019-05-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(ALICE);","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String expected \u003d AddCommand.class.getCanonicalName() + \"{toAdd\u003d\" + ALICE + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertEquals(expected, addCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":90,"author":{"gitId":"InfiBeyond"},"content":"     * A default model stub that have all the methods failing.","lastModifiedDate":"2023-10-28"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":157,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":158,"author":{"gitId":"jean-cq"},"content":"        public ObservableList\u003cLeave\u003e getFilteredLeaveList() {","lastModifiedDate":"2023-10-26"},{"lineNumber":159,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-26"},{"lineNumber":160,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":166,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":167,"author":{"gitId":"jean-cq"},"content":"        /**","lastModifiedDate":"2023-11-01"},{"lineNumber":168,"author":{"gitId":"jean-cq"},"content":"         * Replaces leave book data with the data in {@code leavesBook}.","lastModifiedDate":"2023-11-01"},{"lineNumber":169,"author":{"gitId":"jean-cq"},"content":"         *","lastModifiedDate":"2023-11-01"},{"lineNumber":170,"author":{"gitId":"ryanozx"},"content":"         * @param leave","lastModifiedDate":"2023-11-02"},{"lineNumber":171,"author":{"gitId":"jean-cq"},"content":"         */","lastModifiedDate":"2023-11-01"},{"lineNumber":172,"author":{"gitId":"ong-wei-hong"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":173,"author":{"gitId":"ong-wei-hong"},"content":"        public void deleteLeave(Leave leave) {","lastModifiedDate":"2023-11-01"},{"lineNumber":174,"author":{"gitId":"ong-wei-hong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":175,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":176,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":177,"author":{"gitId":"InfiBeyond"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":178,"author":{"gitId":"jean-cq"},"content":"        public void setLeavesBook(ReadOnlyLeavesBook leavesBook) {","lastModifiedDate":"2023-11-01"},{"lineNumber":179,"author":{"gitId":"InfiBeyond"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":180,"author":{"gitId":"InfiBeyond"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":181,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":182,"author":{"gitId":"jean-cq"},"content":"        /**","lastModifiedDate":"2023-11-01"},{"lineNumber":183,"author":{"gitId":"jean-cq"},"content":"         * Returns true if a leave with the same identity as {@code leave} exists in the leave book.","lastModifiedDate":"2023-11-01"},{"lineNumber":184,"author":{"gitId":"jean-cq"},"content":"         *","lastModifiedDate":"2023-11-01"},{"lineNumber":185,"author":{"gitId":"jean-cq"},"content":"         * @param leave","lastModifiedDate":"2023-11-01"},{"lineNumber":186,"author":{"gitId":"jean-cq"},"content":"         */","lastModifiedDate":"2023-11-01"},{"lineNumber":187,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":188,"author":{"gitId":"jean-cq"},"content":"        public boolean hasLeave(Leave leave) {","lastModifiedDate":"2023-11-01"},{"lineNumber":189,"author":{"gitId":"jean-cq"},"content":"            return false;","lastModifiedDate":"2023-11-01"},{"lineNumber":190,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":191,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":192,"author":{"gitId":"ivyy-poison"},"content":"        @Override","lastModifiedDate":"2023-11-08"},{"lineNumber":193,"author":{"gitId":"ivyy-poison"},"content":"        public boolean hasConcurrentLeave(Leave leave) {","lastModifiedDate":"2023-11-08"},{"lineNumber":194,"author":{"gitId":"ivyy-poison"},"content":"            return false;","lastModifiedDate":"2023-11-08"},{"lineNumber":195,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-11-08"},{"lineNumber":196,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":197,"author":{"gitId":"jean-cq"},"content":"        /**","lastModifiedDate":"2023-11-01"},{"lineNumber":198,"author":{"gitId":"jean-cq"},"content":"         * Adds the given leave.","lastModifiedDate":"2023-11-01"},{"lineNumber":199,"author":{"gitId":"jean-cq"},"content":"         * {@code leave} must not already exist in the leave book.","lastModifiedDate":"2023-11-01"},{"lineNumber":200,"author":{"gitId":"jean-cq"},"content":"         *","lastModifiedDate":"2023-11-01"},{"lineNumber":201,"author":{"gitId":"jean-cq"},"content":"         * @param leave","lastModifiedDate":"2023-11-01"},{"lineNumber":202,"author":{"gitId":"jean-cq"},"content":"         */","lastModifiedDate":"2023-11-01"},{"lineNumber":203,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":204,"author":{"gitId":"jean-cq"},"content":"        public void addLeave(Leave leave) {","lastModifiedDate":"2023-11-01"},{"lineNumber":205,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":206,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":207,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":208,"author":{"gitId":"jean-cq"},"content":"        /**","lastModifiedDate":"2023-11-01"},{"lineNumber":209,"author":{"gitId":"jean-cq"},"content":"         * Replaces the given leave {@code target} with {@code editedPerson}.","lastModifiedDate":"2023-11-01"},{"lineNumber":210,"author":{"gitId":"jean-cq"},"content":"         * {@code target} must exist in the leave book.","lastModifiedDate":"2023-11-01"},{"lineNumber":211,"author":{"gitId":"jean-cq"},"content":"         * The leave identity of {@code editedLeave} must not be the same as another existing leave in the leave book.","lastModifiedDate":"2023-11-01"},{"lineNumber":212,"author":{"gitId":"jean-cq"},"content":"         *","lastModifiedDate":"2023-11-01"},{"lineNumber":213,"author":{"gitId":"jean-cq"},"content":"         * @param target","lastModifiedDate":"2023-11-01"},{"lineNumber":214,"author":{"gitId":"jean-cq"},"content":"         * @param editedLeave","lastModifiedDate":"2023-11-01"},{"lineNumber":215,"author":{"gitId":"jean-cq"},"content":"         */","lastModifiedDate":"2023-11-01"},{"lineNumber":216,"author":{"gitId":"InfiBeyond"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":217,"author":{"gitId":"InfiBeyond"},"content":"        public void setLeave(Leave target, Leave editedLeave) {","lastModifiedDate":"2023-10-28"},{"lineNumber":218,"author":{"gitId":"InfiBeyond"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":219,"author":{"gitId":"InfiBeyond"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":220,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":221,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":222,"author":{"gitId":"jean-cq"},"content":"        /**","lastModifiedDate":"2023-11-01"},{"lineNumber":223,"author":{"gitId":"jean-cq"},"content":"         * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2023-11-01"},{"lineNumber":224,"author":{"gitId":"jean-cq"},"content":"         */","lastModifiedDate":"2023-11-01"},{"lineNumber":225,"author":{"gitId":"ong-wei-hong"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":226,"author":{"gitId":"jean-cq"},"content":"        public Path getLeavesBookFilePath() {","lastModifiedDate":"2023-11-01"},{"lineNumber":227,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":228,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":229,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":230,"author":{"gitId":"jean-cq"},"content":"        /**","lastModifiedDate":"2023-11-01"},{"lineNumber":231,"author":{"gitId":"jean-cq"},"content":"         * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2023-11-01"},{"lineNumber":232,"author":{"gitId":"jean-cq"},"content":"         *","lastModifiedDate":"2023-11-01"},{"lineNumber":233,"author":{"gitId":"jean-cq"},"content":"         * @param leavesBookFilePath","lastModifiedDate":"2023-11-01"},{"lineNumber":234,"author":{"gitId":"jean-cq"},"content":"         */","lastModifiedDate":"2023-11-01"},{"lineNumber":235,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":236,"author":{"gitId":"jean-cq"},"content":"        public void setLeavesBookFilePath(Path leavesBookFilePath) {","lastModifiedDate":"2023-11-01"},{"lineNumber":237,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":238,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":239,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":240,"author":{"gitId":"jean-cq"},"content":"        /**","lastModifiedDate":"2023-11-01"},{"lineNumber":241,"author":{"gitId":"jean-cq"},"content":"         * Returns the LeavesBook","lastModifiedDate":"2023-11-01"},{"lineNumber":242,"author":{"gitId":"jean-cq"},"content":"         */","lastModifiedDate":"2023-11-01"},{"lineNumber":243,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":244,"author":{"gitId":"jean-cq"},"content":"        public ReadOnlyLeavesBook getLeavesBook() {","lastModifiedDate":"2023-11-01"},{"lineNumber":245,"author":{"gitId":"ong-wei-hong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":246,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":247,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":248,"author":{"gitId":"ong-wei-hong"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":249,"author":{"gitId":"InfiBeyond"},"content":"        public void updateFilteredLeaveList(Predicate\u003cLeave\u003e predicate) {","lastModifiedDate":"2023-10-31"},{"lineNumber":250,"author":{"gitId":"ong-wei-hong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":251,"author":{"gitId":"ong-wei-hong"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":255,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":256,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":261,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":262,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":267,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":268,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":273,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":274,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":280,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":281,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":286,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":287,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":288,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":292,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":296,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"ryanozx":1,"jean-cq":61,"InfiBeyond":11,"ivyy-poison":5,"-":203,"ong-wei-hong":15}},{"path":"src/test/java/seedu/address/logic/commands/AddLeaveCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-09"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-11-09"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-11-09"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-11-11"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_LEAVE;","lastModifiedDate":"2023-11-09"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-11-09"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-09"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-11-09"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-09"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-11-09"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-09"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-11-09"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-11-09"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-11-09"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.leave.Range;","lastModifiedDate":"2023-11-09"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"import seedu.address.testutil.LeaveBuilder;","lastModifiedDate":"2023-11-09"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"/**","lastModifiedDate":"2023-11-09"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2023-11-09"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":" */","lastModifiedDate":"2023-11-09"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"public class AddLeaveCommandIntegrationTest {","lastModifiedDate":"2023-11-09"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":"    private Model model;","lastModifiedDate":"2023-11-09"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":"    @BeforeEach","lastModifiedDate":"2023-11-09"},{"lineNumber":29,"author":{"gitId":"jean-cq"},"content":"    public void setUp() {","lastModifiedDate":"2023-11-09"},{"lineNumber":30,"author":{"gitId":"jean-cq"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-09"},{"lineNumber":31,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-11-09"},{"lineNumber":32,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":33,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-11-09"},{"lineNumber":34,"author":{"gitId":"jean-cq"},"content":"    public void execute_newLeave_success() {","lastModifiedDate":"2023-11-09"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"        Leave validLeave \u003d new LeaveBuilder().build();","lastModifiedDate":"2023-11-09"},{"lineNumber":36,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":37,"author":{"gitId":"jean-cq"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-09"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"        expectedModel.addLeave(validLeave);","lastModifiedDate":"2023-11-09"},{"lineNumber":39,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":40,"author":{"gitId":"jean-cq"},"content":"        Range dateRange \u003d Range.createNonNullRange(validLeave.getStart(), validLeave.getEnd());","lastModifiedDate":"2023-11-09"},{"lineNumber":41,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":42,"author":{"gitId":"jean-cq"},"content":"        assertCommandSuccess(new AddLeaveCommand(INDEX_FIRST_LEAVE, validLeave.getTitle(),","lastModifiedDate":"2023-11-09"},{"lineNumber":43,"author":{"gitId":"jean-cq"},"content":"                dateRange, validLeave.getDescription()), model,","lastModifiedDate":"2023-11-09"},{"lineNumber":44,"author":{"gitId":"jean-cq"},"content":"                String.format(AddLeaveCommand.MESSAGE_SUCCESS, Messages.format(validLeave)),","lastModifiedDate":"2023-11-09"},{"lineNumber":45,"author":{"gitId":"jean-cq"},"content":"                expectedModel);","lastModifiedDate":"2023-11-09"},{"lineNumber":46,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-11-09"},{"lineNumber":47,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":48,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-11-11"},{"lineNumber":49,"author":{"gitId":"jean-cq"},"content":"    public void constructor_nullLeave_throwsNullPointerException() {","lastModifiedDate":"2023-11-11"},{"lineNumber":50,"author":{"gitId":"jean-cq"},"content":"        Leave leaveInList \u003d model.getLeavesBook().getLeaveList().get(0);","lastModifiedDate":"2023-11-11"},{"lineNumber":51,"author":{"gitId":"jean-cq"},"content":"        Range validDateRange \u003d Range.createNonNullRange(leaveInList.getStart(), leaveInList.getEnd());","lastModifiedDate":"2023-11-11"},{"lineNumber":52,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":53,"author":{"gitId":"jean-cq"},"content":"        //index null","lastModifiedDate":"2023-11-11"},{"lineNumber":54,"author":{"gitId":"jean-cq"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddLeaveCommand(null, leaveInList.getTitle(),","lastModifiedDate":"2023-11-11"},{"lineNumber":55,"author":{"gitId":"jean-cq"},"content":"                validDateRange, leaveInList.getDescription()));","lastModifiedDate":"2023-11-11"},{"lineNumber":56,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":57,"author":{"gitId":"jean-cq"},"content":"        //title null","lastModifiedDate":"2023-11-11"},{"lineNumber":58,"author":{"gitId":"jean-cq"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddLeaveCommand(INDEX_FIRST_LEAVE, null,","lastModifiedDate":"2023-11-11"},{"lineNumber":59,"author":{"gitId":"jean-cq"},"content":"                validDateRange, leaveInList.getDescription()));","lastModifiedDate":"2023-11-11"},{"lineNumber":60,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":61,"author":{"gitId":"jean-cq"},"content":"        //range null","lastModifiedDate":"2023-11-11"},{"lineNumber":62,"author":{"gitId":"jean-cq"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddLeaveCommand(INDEX_FIRST_LEAVE, leaveInList.getTitle(),","lastModifiedDate":"2023-11-11"},{"lineNumber":63,"author":{"gitId":"jean-cq"},"content":"                null, leaveInList.getDescription()));","lastModifiedDate":"2023-11-11"},{"lineNumber":64,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":65,"author":{"gitId":"jean-cq"},"content":"        //description null","lastModifiedDate":"2023-11-11"},{"lineNumber":66,"author":{"gitId":"jean-cq"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddLeaveCommand(INDEX_FIRST_LEAVE, leaveInList.getTitle(),","lastModifiedDate":"2023-11-11"},{"lineNumber":67,"author":{"gitId":"jean-cq"},"content":"                validDateRange, null));","lastModifiedDate":"2023-11-11"},{"lineNumber":68,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":69,"author":{"gitId":"jean-cq"},"content":"        //all null","lastModifiedDate":"2023-11-11"},{"lineNumber":70,"author":{"gitId":"jean-cq"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddLeaveCommand(null, null,","lastModifiedDate":"2023-11-11"},{"lineNumber":71,"author":{"gitId":"jean-cq"},"content":"                null, null));","lastModifiedDate":"2023-11-11"},{"lineNumber":72,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":73,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-11-11"},{"lineNumber":74,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":75,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-11-09"},{"lineNumber":76,"author":{"gitId":"jean-cq"},"content":"    public void execute_duplicateLeave_throwsCommandException() {","lastModifiedDate":"2023-11-09"},{"lineNumber":77,"author":{"gitId":"jean-cq"},"content":"        Leave leaveInList \u003d model.getLeavesBook().getLeaveList().get(0);","lastModifiedDate":"2023-11-09"},{"lineNumber":78,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":79,"author":{"gitId":"jean-cq"},"content":"        Range dateRange \u003d Range.createNonNullRange(leaveInList.getStart(), leaveInList.getEnd());","lastModifiedDate":"2023-11-09"},{"lineNumber":80,"author":{"gitId":"jean-cq"},"content":"        assertCommandFailure(new AddLeaveCommand(INDEX_FIRST_LEAVE, leaveInList.getTitle(),","lastModifiedDate":"2023-11-09"},{"lineNumber":81,"author":{"gitId":"jean-cq"},"content":"                        dateRange, leaveInList.getDescription()), model,","lastModifiedDate":"2023-11-09"},{"lineNumber":82,"author":{"gitId":"jean-cq"},"content":"                AddLeaveCommand.MESSAGE_DUPLICATE_LEAVE);","lastModifiedDate":"2023-11-09"},{"lineNumber":83,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-11-09"},{"lineNumber":84,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":85,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-11-09"}],"authorContributionMap":{"jean-cq":85}},{"path":"src/test/java/seedu/address/logic/commands/AddLeaveCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-09"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-09"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-09"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-09"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-09"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_DATE_END;","lastModifiedDate":"2023-11-11"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_DATE_START;","lastModifiedDate":"2023-11-11"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_DESCRIPTION;","lastModifiedDate":"2023-11-11"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_TITLE;","lastModifiedDate":"2023-11-11"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-11-09"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_LEAVE;","lastModifiedDate":"2023-11-09"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_LEAVE;","lastModifiedDate":"2023-11-09"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_LEAVE;","lastModifiedDate":"2023-11-11"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.testutil.TypicalLeaves.ALICE_LEAVE;","lastModifiedDate":"2023-11-09"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-11-09"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-09"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-11-09"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-11-09"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-11-09"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-11-09"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-09"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-11-09"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2023-11-09"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-11-09"},{"lineNumber":29,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-11-09"},{"lineNumber":30,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-11-09"},{"lineNumber":31,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.LeavesBook;","lastModifiedDate":"2023-11-09"},{"lineNumber":32,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-09"},{"lineNumber":33,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-11-09"},{"lineNumber":34,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-11-09"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.ReadOnlyLeavesBook;","lastModifiedDate":"2023-11-09"},{"lineNumber":36,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-11-09"},{"lineNumber":37,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-11-09"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.leave.Date;","lastModifiedDate":"2023-11-11"},{"lineNumber":39,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.leave.Description;","lastModifiedDate":"2023-11-11"},{"lineNumber":40,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-11-09"},{"lineNumber":41,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.leave.Range;","lastModifiedDate":"2023-11-09"},{"lineNumber":42,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.leave.Title;","lastModifiedDate":"2023-11-11"},{"lineNumber":43,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-11-09"},{"lineNumber":44,"author":{"gitId":"jean-cq"},"content":"import seedu.address.testutil.LeaveBuilder;","lastModifiedDate":"2023-11-09"},{"lineNumber":45,"author":{"gitId":"jean-cq"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-11-09"},{"lineNumber":46,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":47,"author":{"gitId":"jean-cq"},"content":"public class AddLeaveCommandTest {","lastModifiedDate":"2023-11-09"},{"lineNumber":48,"author":{"gitId":"jean-cq"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-09"},{"lineNumber":49,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-11-09"},{"lineNumber":50,"author":{"gitId":"jean-cq"},"content":"    public void constructor_nullLeave_throwsNullPointerException() {","lastModifiedDate":"2023-11-09"},{"lineNumber":51,"author":{"gitId":"jean-cq"},"content":"        Range validDateRange \u003d Range.createNonNullRange(Date.of(VALID_LEAVE_DATE_START),","lastModifiedDate":"2023-11-11"},{"lineNumber":52,"author":{"gitId":"jean-cq"},"content":"                Date.of(VALID_LEAVE_DATE_END));","lastModifiedDate":"2023-11-11"},{"lineNumber":53,"author":{"gitId":"jean-cq"},"content":"        //index null","lastModifiedDate":"2023-11-11"},{"lineNumber":54,"author":{"gitId":"jean-cq"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddLeaveCommand(null, new Title(VALID_LEAVE_TITLE),","lastModifiedDate":"2023-11-11"},{"lineNumber":55,"author":{"gitId":"jean-cq"},"content":"                validDateRange, new Description(VALID_LEAVE_DESCRIPTION)));","lastModifiedDate":"2023-11-11"},{"lineNumber":56,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":57,"author":{"gitId":"jean-cq"},"content":"        //title null","lastModifiedDate":"2023-11-11"},{"lineNumber":58,"author":{"gitId":"jean-cq"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddLeaveCommand(INDEX_THIRD_LEAVE, null,","lastModifiedDate":"2023-11-11"},{"lineNumber":59,"author":{"gitId":"jean-cq"},"content":"                validDateRange, new Description(VALID_LEAVE_DESCRIPTION)));","lastModifiedDate":"2023-11-11"},{"lineNumber":60,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":61,"author":{"gitId":"jean-cq"},"content":"        //range null","lastModifiedDate":"2023-11-11"},{"lineNumber":62,"author":{"gitId":"jean-cq"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddLeaveCommand(INDEX_THIRD_LEAVE,","lastModifiedDate":"2023-11-11"},{"lineNumber":63,"author":{"gitId":"jean-cq"},"content":"                new Title(VALID_LEAVE_TITLE),","lastModifiedDate":"2023-11-11"},{"lineNumber":64,"author":{"gitId":"jean-cq"},"content":"                null, new Description(VALID_LEAVE_DESCRIPTION)));","lastModifiedDate":"2023-11-11"},{"lineNumber":65,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":66,"author":{"gitId":"jean-cq"},"content":"        //description null","lastModifiedDate":"2023-11-11"},{"lineNumber":67,"author":{"gitId":"jean-cq"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddLeaveCommand(INDEX_THIRD_LEAVE,","lastModifiedDate":"2023-11-11"},{"lineNumber":68,"author":{"gitId":"jean-cq"},"content":"                new Title(VALID_LEAVE_TITLE),","lastModifiedDate":"2023-11-11"},{"lineNumber":69,"author":{"gitId":"jean-cq"},"content":"                validDateRange, null));","lastModifiedDate":"2023-11-11"},{"lineNumber":70,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":71,"author":{"gitId":"jean-cq"},"content":"        //all null","lastModifiedDate":"2023-11-11"},{"lineNumber":72,"author":{"gitId":"jean-cq"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddLeaveCommand(null, null,","lastModifiedDate":"2023-11-11"},{"lineNumber":73,"author":{"gitId":"jean-cq"},"content":"                null, null));","lastModifiedDate":"2023-11-11"},{"lineNumber":74,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":75,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-11-09"},{"lineNumber":76,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":77,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-11-09"},{"lineNumber":78,"author":{"gitId":"jean-cq"},"content":"    public void execute_leaveAcceptedByModel_success() throws Exception {","lastModifiedDate":"2023-11-09"},{"lineNumber":79,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":80,"author":{"gitId":"jean-cq"},"content":"        AddLeaveCommandTest.ModelStubAcceptingLeaveAdded modelStub \u003d new AddLeaveCommandTest","lastModifiedDate":"2023-11-09"},{"lineNumber":81,"author":{"gitId":"jean-cq"},"content":"                .ModelStubAcceptingLeaveAdded();","lastModifiedDate":"2023-11-09"},{"lineNumber":82,"author":{"gitId":"jean-cq"},"content":"        Leave validLeave \u003d new LeaveBuilder().build();","lastModifiedDate":"2023-11-09"},{"lineNumber":83,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":84,"author":{"gitId":"jean-cq"},"content":"        Range dateRange \u003d Range.createNonNullRange(validLeave.getStart(), validLeave.getEnd());","lastModifiedDate":"2023-11-09"},{"lineNumber":85,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":86,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":87,"author":{"gitId":"jean-cq"},"content":"        CommandResult commandResult \u003d new AddLeaveCommand(INDEX_FIRST_LEAVE, validLeave.getTitle(),","lastModifiedDate":"2023-11-09"},{"lineNumber":88,"author":{"gitId":"jean-cq"},"content":"                dateRange, validLeave.getDescription()).execute(modelStub);","lastModifiedDate":"2023-11-09"},{"lineNumber":89,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":90,"author":{"gitId":"jean-cq"},"content":"        assertEquals(String.format(AddLeaveCommand.MESSAGE_SUCCESS, Messages.format(validLeave)),","lastModifiedDate":"2023-11-09"},{"lineNumber":91,"author":{"gitId":"jean-cq"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2023-11-09"},{"lineNumber":92,"author":{"gitId":"jean-cq"},"content":"        assertEquals(Arrays.asList(validLeave), modelStub.leavesAdded);","lastModifiedDate":"2023-11-09"},{"lineNumber":93,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-11-09"},{"lineNumber":94,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":95,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-11-09"},{"lineNumber":96,"author":{"gitId":"jean-cq"},"content":"    public void execute_duplicateLeave_throwsCommandException() {","lastModifiedDate":"2023-11-09"},{"lineNumber":97,"author":{"gitId":"jean-cq"},"content":"        Leave validLeave \u003d new LeaveBuilder().build();","lastModifiedDate":"2023-11-09"},{"lineNumber":98,"author":{"gitId":"jean-cq"},"content":"        Range dateRange \u003d Range.createNonNullRange(validLeave.getStart(), validLeave.getEnd());","lastModifiedDate":"2023-11-09"},{"lineNumber":99,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":100,"author":{"gitId":"jean-cq"},"content":"        AddLeaveCommand addLeaveCommand \u003d new AddLeaveCommand(INDEX_FIRST_LEAVE, validLeave.getTitle(),","lastModifiedDate":"2023-11-09"},{"lineNumber":101,"author":{"gitId":"jean-cq"},"content":"                dateRange, validLeave.getDescription());","lastModifiedDate":"2023-11-09"},{"lineNumber":102,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":103,"author":{"gitId":"jean-cq"},"content":"        AddLeaveCommandTest.ModelStub modelStub \u003d new AddLeaveCommandTest.ModelStubWithLeave(validLeave);","lastModifiedDate":"2023-11-09"},{"lineNumber":104,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":105,"author":{"gitId":"jean-cq"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2023-11-09"},{"lineNumber":106,"author":{"gitId":"jean-cq"},"content":"                AddLeaveCommand.MESSAGE_DUPLICATE_LEAVE, () -\u003e addLeaveCommand.execute(modelStub));","lastModifiedDate":"2023-11-09"},{"lineNumber":107,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-11-09"},{"lineNumber":108,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":109,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-11-09"},{"lineNumber":110,"author":{"gitId":"jean-cq"},"content":"    public void equals() {","lastModifiedDate":"2023-11-09"},{"lineNumber":111,"author":{"gitId":"jean-cq"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2023-11-09"},{"lineNumber":112,"author":{"gitId":"jean-cq"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2023-11-09"},{"lineNumber":113,"author":{"gitId":"jean-cq"},"content":"        Leave aliceLeave \u003d new LeaveBuilder().withEmployee(alice).build();","lastModifiedDate":"2023-11-09"},{"lineNumber":114,"author":{"gitId":"jean-cq"},"content":"        Leave aliceLeaveDifferentTitle \u003d new LeaveBuilder().withEmployee(alice).withTitle(\"Different Title\").build();","lastModifiedDate":"2023-11-11"},{"lineNumber":115,"author":{"gitId":"jean-cq"},"content":"        Leave aliceLeaveDifferentRange \u003d new LeaveBuilder().withEmployee(alice)","lastModifiedDate":"2023-11-11"},{"lineNumber":116,"author":{"gitId":"jean-cq"},"content":"                .withStart(Date.of(\"2000-01-01\")).withEnd(Date.of(\"2000-01-01\")).build();","lastModifiedDate":"2023-11-11"},{"lineNumber":117,"author":{"gitId":"jean-cq"},"content":"        Leave aliceLeaveDifferentDescription \u003d new LeaveBuilder().withEmployee(alice)","lastModifiedDate":"2023-11-11"},{"lineNumber":118,"author":{"gitId":"jean-cq"},"content":"                .withDescription(\"Different Description\").build();","lastModifiedDate":"2023-11-11"},{"lineNumber":119,"author":{"gitId":"jean-cq"},"content":"        Leave bobLeave \u003d new LeaveBuilder().withEmployee(bob).build();","lastModifiedDate":"2023-11-09"},{"lineNumber":120,"author":{"gitId":"jean-cq"},"content":"        Range aliceDateRange \u003d Range.createNonNullRange(aliceLeave.getStart(), aliceLeave.getEnd());","lastModifiedDate":"2023-11-09"},{"lineNumber":121,"author":{"gitId":"jean-cq"},"content":"        Range aliceDifferentDateRange \u003d Range.createNonNullRange(aliceLeaveDifferentRange.getStart(),","lastModifiedDate":"2023-11-11"},{"lineNumber":122,"author":{"gitId":"jean-cq"},"content":"                aliceLeaveDifferentRange.getEnd());","lastModifiedDate":"2023-11-11"},{"lineNumber":123,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":124,"author":{"gitId":"jean-cq"},"content":"        Range bobDateRange \u003d Range.createNonNullRange(bobLeave.getStart(), aliceLeave.getEnd());","lastModifiedDate":"2023-11-09"},{"lineNumber":125,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":126,"author":{"gitId":"jean-cq"},"content":"        AddLeaveCommand addAliceCommand \u003d new AddLeaveCommand(INDEX_FIRST_LEAVE, aliceLeave.getTitle(),","lastModifiedDate":"2023-11-09"},{"lineNumber":127,"author":{"gitId":"jean-cq"},"content":"                aliceDateRange, aliceLeave.getDescription());","lastModifiedDate":"2023-11-09"},{"lineNumber":128,"author":{"gitId":"jean-cq"},"content":"        AddLeaveCommand addAliceDifferentTitleCommand \u003d new AddLeaveCommand(INDEX_FIRST_LEAVE,","lastModifiedDate":"2023-11-11"},{"lineNumber":129,"author":{"gitId":"jean-cq"},"content":"                aliceLeaveDifferentTitle.getTitle(),","lastModifiedDate":"2023-11-11"},{"lineNumber":130,"author":{"gitId":"jean-cq"},"content":"                aliceDateRange, aliceLeave.getDescription());","lastModifiedDate":"2023-11-11"},{"lineNumber":131,"author":{"gitId":"jean-cq"},"content":"        AddLeaveCommand addAliceDifferentRangeCommand \u003d new AddLeaveCommand(INDEX_FIRST_LEAVE,","lastModifiedDate":"2023-11-11"},{"lineNumber":132,"author":{"gitId":"jean-cq"},"content":"                aliceLeave.getTitle(),","lastModifiedDate":"2023-11-11"},{"lineNumber":133,"author":{"gitId":"jean-cq"},"content":"                aliceDifferentDateRange, aliceLeave.getDescription());","lastModifiedDate":"2023-11-11"},{"lineNumber":134,"author":{"gitId":"jean-cq"},"content":"        AddLeaveCommand addAliceDifferentDescriptionCommand \u003d new AddLeaveCommand(INDEX_FIRST_LEAVE,","lastModifiedDate":"2023-11-11"},{"lineNumber":135,"author":{"gitId":"jean-cq"},"content":"                aliceLeave.getTitle(),","lastModifiedDate":"2023-11-11"},{"lineNumber":136,"author":{"gitId":"jean-cq"},"content":"                aliceDifferentDateRange, aliceLeaveDifferentDescription.getDescription());","lastModifiedDate":"2023-11-11"},{"lineNumber":137,"author":{"gitId":"jean-cq"},"content":"        AddLeaveCommand addBobCommand \u003d new AddLeaveCommand(INDEX_SECOND_LEAVE, bobLeave.getTitle(),","lastModifiedDate":"2023-11-09"},{"lineNumber":138,"author":{"gitId":"jean-cq"},"content":"                bobDateRange, bobLeave.getDescription());","lastModifiedDate":"2023-11-09"},{"lineNumber":139,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":140,"author":{"gitId":"jean-cq"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-11-09"},{"lineNumber":141,"author":{"gitId":"jean-cq"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2023-11-09"},{"lineNumber":142,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":143,"author":{"gitId":"jean-cq"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-11-09"},{"lineNumber":144,"author":{"gitId":"jean-cq"},"content":"        AddLeaveCommand addAliceCommandCopy \u003d new AddLeaveCommand(INDEX_FIRST_LEAVE, aliceLeave.getTitle(),","lastModifiedDate":"2023-11-09"},{"lineNumber":145,"author":{"gitId":"jean-cq"},"content":"                aliceDateRange, aliceLeave.getDescription());","lastModifiedDate":"2023-11-09"},{"lineNumber":146,"author":{"gitId":"jean-cq"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2023-11-09"},{"lineNumber":147,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":148,"author":{"gitId":"jean-cq"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-11-09"},{"lineNumber":149,"author":{"gitId":"jean-cq"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2023-11-09"},{"lineNumber":150,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":151,"author":{"gitId":"jean-cq"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-11-09"},{"lineNumber":152,"author":{"gitId":"jean-cq"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2023-11-09"},{"lineNumber":153,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":154,"author":{"gitId":"jean-cq"},"content":"        // different leave -\u003e returns false","lastModifiedDate":"2023-11-11"},{"lineNumber":155,"author":{"gitId":"jean-cq"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2023-11-09"},{"lineNumber":156,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":157,"author":{"gitId":"jean-cq"},"content":"        //Title is not equal","lastModifiedDate":"2023-11-11"},{"lineNumber":158,"author":{"gitId":"jean-cq"},"content":"        assertFalse(addAliceCommand.equals(addAliceDifferentTitleCommand));","lastModifiedDate":"2023-11-11"},{"lineNumber":159,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":160,"author":{"gitId":"jean-cq"},"content":"        //Range is not equal","lastModifiedDate":"2023-11-11"},{"lineNumber":161,"author":{"gitId":"jean-cq"},"content":"        assertFalse(addAliceCommand.equals(addAliceDifferentRangeCommand));","lastModifiedDate":"2023-11-11"},{"lineNumber":162,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":163,"author":{"gitId":"jean-cq"},"content":"        //Description is not equal","lastModifiedDate":"2023-11-11"},{"lineNumber":164,"author":{"gitId":"jean-cq"},"content":"        assertFalse(addAliceCommand.equals(addAliceDifferentDescriptionCommand));","lastModifiedDate":"2023-11-11"},{"lineNumber":165,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-11-09"},{"lineNumber":166,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":167,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-11-09"},{"lineNumber":168,"author":{"gitId":"jean-cq"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-11-09"},{"lineNumber":169,"author":{"gitId":"jean-cq"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2023-11-09"},{"lineNumber":170,"author":{"gitId":"jean-cq"},"content":"        Leave aliceLeave \u003d new LeaveBuilder().withEmployee(alice).withStart(ALICE_LEAVE.getStart())","lastModifiedDate":"2023-11-09"},{"lineNumber":171,"author":{"gitId":"jean-cq"},"content":"                .withEnd(ALICE_LEAVE.getEnd()).build();","lastModifiedDate":"2023-11-09"},{"lineNumber":172,"author":{"gitId":"jean-cq"},"content":"        Range aliceDateRange \u003d Range.createNonNullRange(aliceLeave.getStart(), aliceLeave.getEnd());","lastModifiedDate":"2023-11-09"},{"lineNumber":173,"author":{"gitId":"jean-cq"},"content":"        AddLeaveCommand addAliceCommand \u003d new AddLeaveCommand(INDEX_FIRST_LEAVE, aliceLeave.getTitle(),","lastModifiedDate":"2023-11-09"},{"lineNumber":174,"author":{"gitId":"jean-cq"},"content":"                aliceDateRange, aliceLeave.getDescription());","lastModifiedDate":"2023-11-09"},{"lineNumber":175,"author":{"gitId":"jean-cq"},"content":"        String expected \u003d AddLeaveCommand.class.getCanonicalName() + \"{title\u003d\" + ALICE_LEAVE.getTitle()","lastModifiedDate":"2023-11-09"},{"lineNumber":176,"author":{"gitId":"jean-cq"},"content":"                + \", description\u003d\" + ALICE_LEAVE.getDescription() + \", start\u003d\" + ALICE_LEAVE.getStart()","lastModifiedDate":"2023-11-09"},{"lineNumber":177,"author":{"gitId":"jean-cq"},"content":"                + \", end\u003d\" + ALICE_LEAVE.getEnd() + \"}\";","lastModifiedDate":"2023-11-09"},{"lineNumber":178,"author":{"gitId":"jean-cq"},"content":"        assertEquals(expected, addAliceCommand.toString());","lastModifiedDate":"2023-11-09"},{"lineNumber":179,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-11-09"},{"lineNumber":180,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":181,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-11-09"},{"lineNumber":182,"author":{"gitId":"jean-cq"},"content":"     * A default model stub that have all the methods failing.","lastModifiedDate":"2023-11-09"},{"lineNumber":183,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-11-09"},{"lineNumber":184,"author":{"gitId":"jean-cq"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2023-11-09"},{"lineNumber":185,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":186,"author":{"gitId":"jean-cq"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-11-09"},{"lineNumber":187,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-09"},{"lineNumber":188,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":189,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":190,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":191,"author":{"gitId":"jean-cq"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2023-11-09"},{"lineNumber":192,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(","lastModifiedDate":"2023-11-11"},{"lineNumber":193,"author":{"gitId":"jean-cq"},"content":"                    \"This method should not be called.\");","lastModifiedDate":"2023-11-11"},{"lineNumber":194,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":195,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":196,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":197,"author":{"gitId":"jean-cq"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2023-11-09"},{"lineNumber":198,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(","lastModifiedDate":"2023-11-11"},{"lineNumber":199,"author":{"gitId":"jean-cq"},"content":"                    \"This method should not be called.\");","lastModifiedDate":"2023-11-11"},{"lineNumber":200,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":201,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":202,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":203,"author":{"gitId":"jean-cq"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2023-11-09"},{"lineNumber":204,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-09"},{"lineNumber":205,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":206,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":207,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":208,"author":{"gitId":"jean-cq"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2023-11-09"},{"lineNumber":209,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(","lastModifiedDate":"2023-11-11"},{"lineNumber":210,"author":{"gitId":"jean-cq"},"content":"                    \"This method should not be called.\");","lastModifiedDate":"2023-11-11"},{"lineNumber":211,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":212,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":213,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":214,"author":{"gitId":"jean-cq"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2023-11-09"},{"lineNumber":215,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-09"},{"lineNumber":216,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":217,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":218,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":219,"author":{"gitId":"jean-cq"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2023-11-09"},{"lineNumber":220,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(","lastModifiedDate":"2023-11-11"},{"lineNumber":221,"author":{"gitId":"jean-cq"},"content":"                    \"This method should not be called.\");","lastModifiedDate":"2023-11-11"},{"lineNumber":222,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":223,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":224,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":225,"author":{"gitId":"jean-cq"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2023-11-09"},{"lineNumber":226,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-09"},{"lineNumber":227,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":228,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":229,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":230,"author":{"gitId":"jean-cq"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2023-11-09"},{"lineNumber":231,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(","lastModifiedDate":"2023-11-11"},{"lineNumber":232,"author":{"gitId":"jean-cq"},"content":"                    \"This method should not be called.\");","lastModifiedDate":"2023-11-11"},{"lineNumber":233,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":234,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":235,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":236,"author":{"gitId":"jean-cq"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2023-11-09"},{"lineNumber":237,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(","lastModifiedDate":"2023-11-11"},{"lineNumber":238,"author":{"gitId":"jean-cq"},"content":"                    \"This method should not be called.\");","lastModifiedDate":"2023-11-11"},{"lineNumber":239,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":240,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":241,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":242,"author":{"gitId":"jean-cq"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2023-11-09"},{"lineNumber":243,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(","lastModifiedDate":"2023-11-11"},{"lineNumber":244,"author":{"gitId":"jean-cq"},"content":"                    \"This method should not be called.\");","lastModifiedDate":"2023-11-11"},{"lineNumber":245,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":246,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":247,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":248,"author":{"gitId":"jean-cq"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2023-11-09"},{"lineNumber":249,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-09"},{"lineNumber":250,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":251,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":252,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":253,"author":{"gitId":"jean-cq"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2023-11-09"},{"lineNumber":254,"author":{"gitId":"jean-cq"},"content":"            return model.getFilteredPersonList();","lastModifiedDate":"2023-11-09"},{"lineNumber":255,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":256,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":257,"author":{"gitId":"jean-cq"},"content":"        public ObservableList\u003cLeave\u003e getFilteredLeaveList() {","lastModifiedDate":"2023-11-09"},{"lineNumber":258,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-09"},{"lineNumber":259,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":260,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":261,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":262,"author":{"gitId":"jean-cq"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2023-11-09"},{"lineNumber":263,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-09"},{"lineNumber":264,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":265,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":266,"author":{"gitId":"jean-cq"},"content":"        /**","lastModifiedDate":"2023-11-09"},{"lineNumber":267,"author":{"gitId":"jean-cq"},"content":"         * Replaces leave book data with the data in {@code leavesBook}.","lastModifiedDate":"2023-11-09"},{"lineNumber":268,"author":{"gitId":"jean-cq"},"content":"         *","lastModifiedDate":"2023-11-09"},{"lineNumber":269,"author":{"gitId":"jean-cq"},"content":"         * @param leave","lastModifiedDate":"2023-11-09"},{"lineNumber":270,"author":{"gitId":"jean-cq"},"content":"         */","lastModifiedDate":"2023-11-09"},{"lineNumber":271,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":272,"author":{"gitId":"jean-cq"},"content":"        public void deleteLeave(Leave leave) {","lastModifiedDate":"2023-11-09"},{"lineNumber":273,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(","lastModifiedDate":"2023-11-11"},{"lineNumber":274,"author":{"gitId":"jean-cq"},"content":"                    \"This method should not be called.\");","lastModifiedDate":"2023-11-11"},{"lineNumber":275,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":276,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":277,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":278,"author":{"gitId":"jean-cq"},"content":"        public void setLeavesBook(ReadOnlyLeavesBook leavesBook) {","lastModifiedDate":"2023-11-09"},{"lineNumber":279,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-09"},{"lineNumber":280,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":281,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":282,"author":{"gitId":"jean-cq"},"content":"        /**","lastModifiedDate":"2023-11-09"},{"lineNumber":283,"author":{"gitId":"jean-cq"},"content":"         * Returns true if a leave with the same identity as {@code leave} exists in the leave book.","lastModifiedDate":"2023-11-09"},{"lineNumber":284,"author":{"gitId":"jean-cq"},"content":"         *","lastModifiedDate":"2023-11-09"},{"lineNumber":285,"author":{"gitId":"jean-cq"},"content":"         * @param leave","lastModifiedDate":"2023-11-09"},{"lineNumber":286,"author":{"gitId":"jean-cq"},"content":"         */","lastModifiedDate":"2023-11-09"},{"lineNumber":287,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":288,"author":{"gitId":"jean-cq"},"content":"        public boolean hasLeave(Leave leave) {","lastModifiedDate":"2023-11-09"},{"lineNumber":289,"author":{"gitId":"jean-cq"},"content":"            return false;","lastModifiedDate":"2023-11-09"},{"lineNumber":290,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":291,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":292,"author":{"gitId":"jean-cq"},"content":"        /**","lastModifiedDate":"2023-11-09"},{"lineNumber":293,"author":{"gitId":"jean-cq"},"content":"         * Returns true if a leave belonging to same employee has overlapping dates as {@code leave} exists in the","lastModifiedDate":"2023-11-09"},{"lineNumber":294,"author":{"gitId":"jean-cq"},"content":"         * leave book.","lastModifiedDate":"2023-11-09"},{"lineNumber":295,"author":{"gitId":"jean-cq"},"content":"         *","lastModifiedDate":"2023-11-09"},{"lineNumber":296,"author":{"gitId":"jean-cq"},"content":"         * @param leave","lastModifiedDate":"2023-11-09"},{"lineNumber":297,"author":{"gitId":"jean-cq"},"content":"         * @return","lastModifiedDate":"2023-11-09"},{"lineNumber":298,"author":{"gitId":"jean-cq"},"content":"         */","lastModifiedDate":"2023-11-09"},{"lineNumber":299,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":300,"author":{"gitId":"jean-cq"},"content":"        public boolean hasConcurrentLeave(Leave leave) {","lastModifiedDate":"2023-11-09"},{"lineNumber":301,"author":{"gitId":"jean-cq"},"content":"            return false;","lastModifiedDate":"2023-11-09"},{"lineNumber":302,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":303,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":304,"author":{"gitId":"jean-cq"},"content":"        /**","lastModifiedDate":"2023-11-09"},{"lineNumber":305,"author":{"gitId":"jean-cq"},"content":"         * Adds the given leave.","lastModifiedDate":"2023-11-09"},{"lineNumber":306,"author":{"gitId":"jean-cq"},"content":"         * {@code leave} must not already exist in the leave book.","lastModifiedDate":"2023-11-09"},{"lineNumber":307,"author":{"gitId":"jean-cq"},"content":"         *","lastModifiedDate":"2023-11-09"},{"lineNumber":308,"author":{"gitId":"jean-cq"},"content":"         * @param leave","lastModifiedDate":"2023-11-09"},{"lineNumber":309,"author":{"gitId":"jean-cq"},"content":"         */","lastModifiedDate":"2023-11-09"},{"lineNumber":310,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":311,"author":{"gitId":"jean-cq"},"content":"        public void addLeave(Leave leave) {","lastModifiedDate":"2023-11-09"},{"lineNumber":312,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(","lastModifiedDate":"2023-11-11"},{"lineNumber":313,"author":{"gitId":"jean-cq"},"content":"                    \"This method should not be called.\");","lastModifiedDate":"2023-11-11"},{"lineNumber":314,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":315,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":316,"author":{"gitId":"jean-cq"},"content":"        /**","lastModifiedDate":"2023-11-09"},{"lineNumber":317,"author":{"gitId":"jean-cq"},"content":"         * Replaces the given leave {@code target} with {@code editedPerson}.","lastModifiedDate":"2023-11-09"},{"lineNumber":318,"author":{"gitId":"jean-cq"},"content":"         * {@code target} must exist in the leave book.","lastModifiedDate":"2023-11-09"},{"lineNumber":319,"author":{"gitId":"jean-cq"},"content":"         * The leave identity of {@code editedLeave} must not be the same as another existing leave in the leave book.","lastModifiedDate":"2023-11-09"},{"lineNumber":320,"author":{"gitId":"jean-cq"},"content":"         *","lastModifiedDate":"2023-11-09"},{"lineNumber":321,"author":{"gitId":"jean-cq"},"content":"         * @param target","lastModifiedDate":"2023-11-09"},{"lineNumber":322,"author":{"gitId":"jean-cq"},"content":"         * @param editedLeave","lastModifiedDate":"2023-11-09"},{"lineNumber":323,"author":{"gitId":"jean-cq"},"content":"         */","lastModifiedDate":"2023-11-09"},{"lineNumber":324,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":325,"author":{"gitId":"jean-cq"},"content":"        public void setLeave(Leave target, Leave editedLeave) {","lastModifiedDate":"2023-11-09"},{"lineNumber":326,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-09"},{"lineNumber":327,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":328,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":329,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":330,"author":{"gitId":"jean-cq"},"content":"        /**","lastModifiedDate":"2023-11-09"},{"lineNumber":331,"author":{"gitId":"jean-cq"},"content":"         * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2023-11-09"},{"lineNumber":332,"author":{"gitId":"jean-cq"},"content":"         */","lastModifiedDate":"2023-11-09"},{"lineNumber":333,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":334,"author":{"gitId":"jean-cq"},"content":"        public Path getLeavesBookFilePath() {","lastModifiedDate":"2023-11-09"},{"lineNumber":335,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(","lastModifiedDate":"2023-11-11"},{"lineNumber":336,"author":{"gitId":"jean-cq"},"content":"                    \"This method should not be called.\");","lastModifiedDate":"2023-11-11"},{"lineNumber":337,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":338,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":339,"author":{"gitId":"jean-cq"},"content":"        /**","lastModifiedDate":"2023-11-09"},{"lineNumber":340,"author":{"gitId":"jean-cq"},"content":"         * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2023-11-09"},{"lineNumber":341,"author":{"gitId":"jean-cq"},"content":"         *","lastModifiedDate":"2023-11-09"},{"lineNumber":342,"author":{"gitId":"jean-cq"},"content":"         * @param leavesBookFilePath","lastModifiedDate":"2023-11-09"},{"lineNumber":343,"author":{"gitId":"jean-cq"},"content":"         */","lastModifiedDate":"2023-11-09"},{"lineNumber":344,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":345,"author":{"gitId":"jean-cq"},"content":"        public void setLeavesBookFilePath(Path leavesBookFilePath) {","lastModifiedDate":"2023-11-09"},{"lineNumber":346,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-09"},{"lineNumber":347,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":348,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":349,"author":{"gitId":"jean-cq"},"content":"        /**","lastModifiedDate":"2023-11-09"},{"lineNumber":350,"author":{"gitId":"jean-cq"},"content":"         * Returns the LeavesBook","lastModifiedDate":"2023-11-09"},{"lineNumber":351,"author":{"gitId":"jean-cq"},"content":"         */","lastModifiedDate":"2023-11-09"},{"lineNumber":352,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":353,"author":{"gitId":"jean-cq"},"content":"        public ReadOnlyLeavesBook getLeavesBook() {","lastModifiedDate":"2023-11-09"},{"lineNumber":354,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(","lastModifiedDate":"2023-11-11"},{"lineNumber":355,"author":{"gitId":"jean-cq"},"content":"                    \"This method should not be called.\");","lastModifiedDate":"2023-11-11"},{"lineNumber":356,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":357,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":358,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":359,"author":{"gitId":"jean-cq"},"content":"        public void updateFilteredLeaveList(Predicate\u003cLeave\u003e predicate) {","lastModifiedDate":"2023-11-09"},{"lineNumber":360,"author":{"gitId":"jean-cq"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-09"},{"lineNumber":361,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":362,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-11-09"},{"lineNumber":363,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":364,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-11-09"},{"lineNumber":365,"author":{"gitId":"jean-cq"},"content":"     * A Model stub that contains a single leave.","lastModifiedDate":"2023-11-09"},{"lineNumber":366,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-11-09"},{"lineNumber":367,"author":{"gitId":"jean-cq"},"content":"    private class ModelStubWithLeave extends ModelStub {","lastModifiedDate":"2023-11-09"},{"lineNumber":368,"author":{"gitId":"jean-cq"},"content":"        private final Leave leave;","lastModifiedDate":"2023-11-09"},{"lineNumber":369,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":370,"author":{"gitId":"jean-cq"},"content":"        ModelStubWithLeave(Leave leave) {","lastModifiedDate":"2023-11-09"},{"lineNumber":371,"author":{"gitId":"jean-cq"},"content":"            requireNonNull(leave);","lastModifiedDate":"2023-11-09"},{"lineNumber":372,"author":{"gitId":"jean-cq"},"content":"            this.leave \u003d leave;","lastModifiedDate":"2023-11-09"},{"lineNumber":373,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":374,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":375,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":376,"author":{"gitId":"jean-cq"},"content":"        public boolean hasLeave(Leave leave) {","lastModifiedDate":"2023-11-09"},{"lineNumber":377,"author":{"gitId":"jean-cq"},"content":"            requireNonNull(leave);","lastModifiedDate":"2023-11-09"},{"lineNumber":378,"author":{"gitId":"jean-cq"},"content":"            return this.leave.isSameLeave(leave);","lastModifiedDate":"2023-11-09"},{"lineNumber":379,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":380,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-11-09"},{"lineNumber":381,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":382,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-11-09"},{"lineNumber":383,"author":{"gitId":"jean-cq"},"content":"     * A Model stub that always accept the leave being added.","lastModifiedDate":"2023-11-09"},{"lineNumber":384,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-11-09"},{"lineNumber":385,"author":{"gitId":"jean-cq"},"content":"    private class ModelStubAcceptingLeaveAdded extends ModelStub {","lastModifiedDate":"2023-11-09"},{"lineNumber":386,"author":{"gitId":"jean-cq"},"content":"        final ArrayList\u003cLeave\u003e leavesAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-11-09"},{"lineNumber":387,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":388,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":389,"author":{"gitId":"jean-cq"},"content":"        public boolean hasLeave(Leave leave) {","lastModifiedDate":"2023-11-09"},{"lineNumber":390,"author":{"gitId":"jean-cq"},"content":"            requireNonNull(leave);","lastModifiedDate":"2023-11-09"},{"lineNumber":391,"author":{"gitId":"jean-cq"},"content":"            return leavesAdded.stream().anyMatch(leave::isSameLeave);","lastModifiedDate":"2023-11-09"},{"lineNumber":392,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":393,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":394,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":395,"author":{"gitId":"jean-cq"},"content":"        public void addLeave(Leave leave) {","lastModifiedDate":"2023-11-09"},{"lineNumber":396,"author":{"gitId":"jean-cq"},"content":"            requireNonNull(leave);","lastModifiedDate":"2023-11-09"},{"lineNumber":397,"author":{"gitId":"jean-cq"},"content":"            leavesAdded.add(leave);","lastModifiedDate":"2023-11-09"},{"lineNumber":398,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":399,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":400,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":401,"author":{"gitId":"jean-cq"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2023-11-09"},{"lineNumber":402,"author":{"gitId":"jean-cq"},"content":"            return new AddressBook();","lastModifiedDate":"2023-11-09"},{"lineNumber":403,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":404,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":405,"author":{"gitId":"jean-cq"},"content":"        @Override","lastModifiedDate":"2023-11-09"},{"lineNumber":406,"author":{"gitId":"jean-cq"},"content":"        public ReadOnlyLeavesBook getLeavesBook() {","lastModifiedDate":"2023-11-09"},{"lineNumber":407,"author":{"gitId":"jean-cq"},"content":"            return new LeavesBook();","lastModifiedDate":"2023-11-09"},{"lineNumber":408,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-11-09"},{"lineNumber":409,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-11-09"},{"lineNumber":410,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":411,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-11-09"}],"authorContributionMap":{"jean-cq":411}},{"path":"src/test/java/seedu/address/logic/commands/AddTagCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ong-wei-hong"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-11"},{"lineNumber":2,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":3,"author":{"gitId":"ong-wei-hong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-11"},{"lineNumber":4,"author":{"gitId":"ong-wei-hong"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-11"},{"lineNumber":5,"author":{"gitId":"ong-wei-hong"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-11"},{"lineNumber":6,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2023-10-11"},{"lineNumber":7,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-10-11"},{"lineNumber":8,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-10-11"},{"lineNumber":9,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-11"},{"lineNumber":10,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2023-10-11"},{"lineNumber":11,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-11"},{"lineNumber":12,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-10-11"},{"lineNumber":13,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":16,"author":{"gitId":"ong-wei-hong"},"content":"import java.util.Collection;","lastModifiedDate":"2023-10-11"},{"lineNumber":17,"author":{"gitId":"ong-wei-hong"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-10-11"},{"lineNumber":18,"author":{"gitId":"ong-wei-hong"},"content":"import java.util.List;","lastModifiedDate":"2023-10-11"},{"lineNumber":19,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":20,"author":{"gitId":"ong-wei-hong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-11"},{"lineNumber":21,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":22,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-11"},{"lineNumber":23,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-11"},{"lineNumber":24,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-11"},{"lineNumber":25,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.LeavesBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-11"},{"lineNumber":27,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-10-11"},{"lineNumber":28,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-11"},{"lineNumber":29,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-11"},{"lineNumber":30,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-11"},{"lineNumber":31,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":32,"author":{"gitId":"ong-wei-hong"},"content":"/**","lastModifiedDate":"2023-10-11"},{"lineNumber":33,"author":{"gitId":"ong-wei-hong"},"content":" * Contains integration tests (interaction with the Model) and unit tests for AddTagCommand.","lastModifiedDate":"2023-10-11"},{"lineNumber":34,"author":{"gitId":"ong-wei-hong"},"content":" */","lastModifiedDate":"2023-10-11"},{"lineNumber":35,"author":{"gitId":"ong-wei-hong"},"content":"public class AddTagCommandTest {","lastModifiedDate":"2023-10-11"},{"lineNumber":36,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":37,"author":{"gitId":"ong-wei-hong"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":39,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-10-11"},{"lineNumber":40,"author":{"gitId":"ong-wei-hong"},"content":"    public void execute_oneTagUnfilteredList_success() {","lastModifiedDate":"2023-10-11"},{"lineNumber":41,"author":{"gitId":"ong-wei-hong"},"content":"        AddTagCommand addTagCommand \u003d new AddTagCommand(INDEX_FIRST_PERSON, List.of(new Tag(VALID_TAG_HUSBAND)));","lastModifiedDate":"2023-10-11"},{"lineNumber":42,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":43,"author":{"gitId":"ong-wei-hong"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);","lastModifiedDate":"2023-10-11"},{"lineNumber":44,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":45,"author":{"gitId":"ong-wei-hong"},"content":"        Person editedPerson \u003d new Person(firstPerson);","lastModifiedDate":"2023-10-11"},{"lineNumber":46,"author":{"gitId":"ong-wei-hong"},"content":"        editedPerson.addTag(new Tag(VALID_TAG_HUSBAND));","lastModifiedDate":"2023-10-11"},{"lineNumber":47,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":48,"author":{"gitId":"ong-wei-hong"},"content":"        String expectedMessage \u003d String.format(AddTagCommand.MESSAGE_ADD_TAG_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2023-10-11"},{"lineNumber":49,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":50,"author":{"gitId":"ong-wei-hong"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"ong-wei-hong"},"content":"                new LeavesBook(model.getLeavesBook()), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"ong-wei-hong"},"content":"        expectedModel.setPerson(firstPerson, editedPerson);","lastModifiedDate":"2023-10-11"},{"lineNumber":53,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":54,"author":{"gitId":"ong-wei-hong"},"content":"        assertCommandSuccess(addTagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-11"},{"lineNumber":55,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":56,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":57,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-10-11"},{"lineNumber":58,"author":{"gitId":"ong-wei-hong"},"content":"    public void execute_multipleTagsUnfilteredList_success() {","lastModifiedDate":"2023-10-11"},{"lineNumber":59,"author":{"gitId":"ong-wei-hong"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2023-10-11"},{"lineNumber":60,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":61,"author":{"gitId":"ong-wei-hong"},"content":"        AddTagCommand addTagCommand \u003d new AddTagCommand(","lastModifiedDate":"2023-10-11"},{"lineNumber":62,"author":{"gitId":"ong-wei-hong"},"content":"                indexLastPerson, List.of(new Tag(VALID_TAG_FRIEND), new Tag(VALID_TAG_HUSBAND)));","lastModifiedDate":"2023-10-11"},{"lineNumber":63,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":64,"author":{"gitId":"ong-wei-hong"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2023-10-11"},{"lineNumber":65,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":66,"author":{"gitId":"ong-wei-hong"},"content":"        Person editedPerson \u003d new Person(lastPerson);","lastModifiedDate":"2023-10-11"},{"lineNumber":67,"author":{"gitId":"ong-wei-hong"},"content":"        editedPerson.addTags(List.of(new Tag(VALID_TAG_FRIEND), new Tag(VALID_TAG_HUSBAND)));","lastModifiedDate":"2023-10-11"},{"lineNumber":68,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":69,"author":{"gitId":"ong-wei-hong"},"content":"        String expectedMessage \u003d String.format(AddTagCommand.MESSAGE_ADD_TAG_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2023-10-11"},{"lineNumber":70,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":71,"author":{"gitId":"ong-wei-hong"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2023-11-01"},{"lineNumber":72,"author":{"gitId":"ong-wei-hong"},"content":"                new LeavesBook(model.getLeavesBook()), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":73,"author":{"gitId":"ong-wei-hong"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2023-10-11"},{"lineNumber":74,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":75,"author":{"gitId":"ong-wei-hong"},"content":"        assertCommandSuccess(addTagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-11"},{"lineNumber":76,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":77,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":78,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-10-11"},{"lineNumber":79,"author":{"gitId":"ong-wei-hong"},"content":"    public void execute_noTagsSpecifiedFilteredList_success() {","lastModifiedDate":"2023-10-11"},{"lineNumber":80,"author":{"gitId":"ong-wei-hong"},"content":"        AddTagCommand addTagCommand \u003d new AddTagCommand(INDEX_FIRST_PERSON, List.of());","lastModifiedDate":"2023-10-11"},{"lineNumber":81,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":82,"author":{"gitId":"ong-wei-hong"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-10-11"},{"lineNumber":83,"author":{"gitId":"ong-wei-hong"},"content":"        String expectedMessage \u003d String.format(AddTagCommand.MESSAGE_ADD_TAG_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2023-10-11"},{"lineNumber":84,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":85,"author":{"gitId":"ong-wei-hong"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2023-11-01"},{"lineNumber":86,"author":{"gitId":"ong-wei-hong"},"content":"                new LeavesBook(model.getLeavesBook()), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":87,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":88,"author":{"gitId":"ong-wei-hong"},"content":"        assertCommandSuccess(addTagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-11"},{"lineNumber":89,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":90,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":91,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-10-11"},{"lineNumber":92,"author":{"gitId":"ong-wei-hong"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2023-10-11"},{"lineNumber":93,"author":{"gitId":"ong-wei-hong"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-11"},{"lineNumber":94,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":95,"author":{"gitId":"ong-wei-hong"},"content":"        AddTagCommand addTagCommand \u003d new AddTagCommand(INDEX_FIRST_PERSON, List.of(new Tag(VALID_TAG_HUSBAND)));","lastModifiedDate":"2023-10-11"},{"lineNumber":96,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":97,"author":{"gitId":"ong-wei-hong"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-10-11"},{"lineNumber":98,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":99,"author":{"gitId":"ong-wei-hong"},"content":"        Person editedPerson \u003d new Person(personInFilteredList);","lastModifiedDate":"2023-10-11"},{"lineNumber":100,"author":{"gitId":"ong-wei-hong"},"content":"        editedPerson.addTag(new Tag(VALID_TAG_HUSBAND));","lastModifiedDate":"2023-10-11"},{"lineNumber":101,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":102,"author":{"gitId":"ong-wei-hong"},"content":"        String expectedMessage \u003d String.format(AddTagCommand.MESSAGE_ADD_TAG_SUCCESS,","lastModifiedDate":"2023-11-01"},{"lineNumber":103,"author":{"gitId":"ong-wei-hong"},"content":"                Messages.format(editedPerson));","lastModifiedDate":"2023-11-01"},{"lineNumber":104,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":105,"author":{"gitId":"ong-wei-hong"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2023-11-01"},{"lineNumber":106,"author":{"gitId":"ong-wei-hong"},"content":"                new LeavesBook(model.getLeavesBook()), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":107,"author":{"gitId":"ong-wei-hong"},"content":"        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-11-07"},{"lineNumber":108,"author":{"gitId":"ong-wei-hong"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2023-10-11"},{"lineNumber":109,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":110,"author":{"gitId":"ong-wei-hong"},"content":"        assertCommandSuccess(addTagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-11"},{"lineNumber":111,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":112,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":113,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-10-11"},{"lineNumber":114,"author":{"gitId":"ong-wei-hong"},"content":"    public void execute_duplicateTag_failure() {","lastModifiedDate":"2023-10-11"},{"lineNumber":115,"author":{"gitId":"ong-wei-hong"},"content":"        Tag tag \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased())","lastModifiedDate":"2023-10-11"},{"lineNumber":116,"author":{"gitId":"ong-wei-hong"},"content":"                .getTags().stream().findFirst().get();","lastModifiedDate":"2023-10-11"},{"lineNumber":117,"author":{"gitId":"ong-wei-hong"},"content":"        AddTagCommand addTagCommand \u003d new AddTagCommand(INDEX_FIRST_PERSON, List.of(tag));","lastModifiedDate":"2023-10-11"},{"lineNumber":118,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":119,"author":{"gitId":"ong-wei-hong"},"content":"        assertCommandFailure(addTagCommand, model, AddTagCommand.MESSAGE_DUPLICATE_TAG);","lastModifiedDate":"2023-10-11"},{"lineNumber":120,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":121,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":122,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-10-11"},{"lineNumber":123,"author":{"gitId":"ong-wei-hong"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2023-10-11"},{"lineNumber":124,"author":{"gitId":"ong-wei-hong"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2023-10-11"},{"lineNumber":125,"author":{"gitId":"ong-wei-hong"},"content":"        AddTagCommand addTagCommand \u003d new AddTagCommand(outOfBoundIndex, List.of(new Tag(VALID_TAG_FRIEND)));","lastModifiedDate":"2023-10-11"},{"lineNumber":126,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":127,"author":{"gitId":"ong-wei-hong"},"content":"        assertCommandFailure(addTagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-11"},{"lineNumber":128,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":129,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":130,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-10-11"},{"lineNumber":131,"author":{"gitId":"ong-wei-hong"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2023-10-11"},{"lineNumber":132,"author":{"gitId":"ong-wei-hong"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-11"},{"lineNumber":133,"author":{"gitId":"ong-wei-hong"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2023-10-11"},{"lineNumber":134,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":135,"author":{"gitId":"ong-wei-hong"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2023-10-11"},{"lineNumber":136,"author":{"gitId":"ong-wei-hong"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2023-10-11"},{"lineNumber":137,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":138,"author":{"gitId":"ong-wei-hong"},"content":"        AddTagCommand addTagCommand \u003d new AddTagCommand(outOfBoundIndex, List.of(new Tag(VALID_TAG_FRIEND)));","lastModifiedDate":"2023-10-11"},{"lineNumber":139,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":140,"author":{"gitId":"ong-wei-hong"},"content":"        assertCommandFailure(addTagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-11"},{"lineNumber":141,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":142,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":143,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-10-11"},{"lineNumber":144,"author":{"gitId":"ong-wei-hong"},"content":"    public void equals() {","lastModifiedDate":"2023-10-11"},{"lineNumber":145,"author":{"gitId":"ong-wei-hong"},"content":"        final AddTagCommand standardCommand \u003d new AddTagCommand(","lastModifiedDate":"2023-10-11"},{"lineNumber":146,"author":{"gitId":"ong-wei-hong"},"content":"                INDEX_FIRST_PERSON, List.of(new Tag(VALID_TAG_FRIEND), new Tag(VALID_TAG_HUSBAND)));","lastModifiedDate":"2023-10-11"},{"lineNumber":147,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":148,"author":{"gitId":"ong-wei-hong"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-11"},{"lineNumber":149,"author":{"gitId":"ong-wei-hong"},"content":"        AddTagCommand commandWithSameValues \u003d new AddTagCommand(","lastModifiedDate":"2023-10-11"},{"lineNumber":150,"author":{"gitId":"ong-wei-hong"},"content":"                INDEX_FIRST_PERSON, List.of(new Tag(VALID_TAG_HUSBAND), new Tag(VALID_TAG_FRIEND)));","lastModifiedDate":"2023-10-11"},{"lineNumber":151,"author":{"gitId":"ong-wei-hong"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2023-10-11"},{"lineNumber":152,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":153,"author":{"gitId":"ong-wei-hong"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-11"},{"lineNumber":154,"author":{"gitId":"ong-wei-hong"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2023-10-11"},{"lineNumber":155,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":156,"author":{"gitId":"ong-wei-hong"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-11"},{"lineNumber":157,"author":{"gitId":"ong-wei-hong"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2023-10-11"},{"lineNumber":158,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":159,"author":{"gitId":"ong-wei-hong"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-11"},{"lineNumber":160,"author":{"gitId":"ong-wei-hong"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2023-10-11"},{"lineNumber":161,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":162,"author":{"gitId":"ong-wei-hong"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2023-10-11"},{"lineNumber":163,"author":{"gitId":"ong-wei-hong"},"content":"        assertFalse(standardCommand.equals(new AddTagCommand(","lastModifiedDate":"2023-10-11"},{"lineNumber":164,"author":{"gitId":"ong-wei-hong"},"content":"                        INDEX_SECOND_PERSON, List.of(new Tag(VALID_TAG_HUSBAND), new Tag(VALID_TAG_FRIEND)))));","lastModifiedDate":"2023-10-11"},{"lineNumber":165,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":166,"author":{"gitId":"ong-wei-hong"},"content":"        // different tagsToAdd -\u003e returns false","lastModifiedDate":"2023-10-11"},{"lineNumber":167,"author":{"gitId":"ong-wei-hong"},"content":"        assertFalse(standardCommand.equals(new AddTagCommand(INDEX_FIRST_PERSON, List.of(new Tag(VALID_TAG_HUSBAND)))));","lastModifiedDate":"2023-10-11"},{"lineNumber":168,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":169,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":170,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-10-11"},{"lineNumber":171,"author":{"gitId":"ong-wei-hong"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-11"},{"lineNumber":172,"author":{"gitId":"ong-wei-hong"},"content":"        Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-10-11"},{"lineNumber":173,"author":{"gitId":"ong-wei-hong"},"content":"        Collection\u003cTag\u003e tagsToAdd \u003d new HashSet\u003c\u003e(List.of(new Tag(VALID_TAG_FRIEND)));","lastModifiedDate":"2023-10-11"},{"lineNumber":174,"author":{"gitId":"ong-wei-hong"},"content":"        AddTagCommand addTagCommand \u003d new AddTagCommand(index, tagsToAdd);","lastModifiedDate":"2023-10-11"},{"lineNumber":175,"author":{"gitId":"ong-wei-hong"},"content":"        String expected \u003d AddTagCommand.class.getCanonicalName() + \"{index\u003d\" + index + \", tagsToAdd\u003d\"","lastModifiedDate":"2023-10-11"},{"lineNumber":176,"author":{"gitId":"ong-wei-hong"},"content":"                + tagsToAdd + \"}\";","lastModifiedDate":"2023-10-11"},{"lineNumber":177,"author":{"gitId":"ong-wei-hong"},"content":"        assertEquals(expected, addTagCommand.toString());","lastModifiedDate":"2023-10-11"},{"lineNumber":178,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":179,"author":{"gitId":"ong-wei-hong"},"content":"}","lastModifiedDate":"2023-10-11"}],"authorContributionMap":{"ong-wei-hong":179}},{"path":"src/test/java/seedu/address/logic/commands/ApproveLeaveCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"InfiBeyond"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-29"},{"lineNumber":2,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":3,"author":{"gitId":"InfiBeyond"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-29"},{"lineNumber":4,"author":{"gitId":"InfiBeyond"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-29"},{"lineNumber":5,"author":{"gitId":"InfiBeyond"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-29"},{"lineNumber":6,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-10-29"},{"lineNumber":7,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-29"},{"lineNumber":8,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-10-29"},{"lineNumber":9,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-10-29"},{"lineNumber":10,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":11,"author":{"gitId":"InfiBeyond"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-29"},{"lineNumber":12,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":13,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-29"},{"lineNumber":14,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-29"},{"lineNumber":15,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.LeavesBook;","lastModifiedDate":"2023-10-29"},{"lineNumber":16,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-29"},{"lineNumber":17,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-10-29"},{"lineNumber":18,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-29"},{"lineNumber":19,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-10-29"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Status.StatusType;","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.testutil.LeaveBuilder;","lastModifiedDate":"2023-10-29"},{"lineNumber":22,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.testutil.TestUtil;","lastModifiedDate":"2023-10-29"},{"lineNumber":23,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":24,"author":{"gitId":"InfiBeyond"},"content":"public class ApproveLeaveCommandTest {","lastModifiedDate":"2023-10-29"},{"lineNumber":25,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":26,"author":{"gitId":"InfiBeyond"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-10-29"},{"lineNumber":27,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":28,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":29,"author":{"gitId":"InfiBeyond"},"content":"    public void execute_approveLeave_success() {","lastModifiedDate":"2023-10-29"},{"lineNumber":30,"author":{"gitId":"InfiBeyond"},"content":"        Index indexLastLeave \u003d TestUtil.getLastLeaveIndex(model);","lastModifiedDate":"2023-10-29"},{"lineNumber":31,"author":{"gitId":"InfiBeyond"},"content":"        Leave originalLeave \u003d TestUtil.getLeave(model, indexLastLeave);","lastModifiedDate":"2023-10-29"},{"lineNumber":32,"author":{"gitId":"InfiBeyond"},"content":"        LeaveBuilder leaveInList \u003d new LeaveBuilder(originalLeave);","lastModifiedDate":"2023-10-29"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"        Leave approvedLeave \u003d leaveInList.withStatus(StatusType.APPROVED).build();","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"InfiBeyond"},"content":"        ApproveLeaveCommand approveLeaveCommand \u003d new ApproveLeaveCommand(indexLastLeave);","lastModifiedDate":"2023-10-29"},{"lineNumber":35,"author":{"gitId":"InfiBeyond"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2023-10-29"},{"lineNumber":36,"author":{"gitId":"InfiBeyond"},"content":"                ApproveLeaveCommand.MESSAGE_APPROVE_LEAVE_SUCCESS,","lastModifiedDate":"2023-10-29"},{"lineNumber":37,"author":{"gitId":"InfiBeyond"},"content":"                Messages.format(approvedLeave));","lastModifiedDate":"2023-10-29"},{"lineNumber":38,"author":{"gitId":"InfiBeyond"},"content":"        Model expectedModel \u003d new ModelManager(","lastModifiedDate":"2023-10-29"},{"lineNumber":39,"author":{"gitId":"InfiBeyond"},"content":"                getTypicalAddressBook(),","lastModifiedDate":"2023-10-29"},{"lineNumber":40,"author":{"gitId":"InfiBeyond"},"content":"                new LeavesBook(model.getLeavesBook()), new UserPrefs());","lastModifiedDate":"2023-10-29"},{"lineNumber":41,"author":{"gitId":"InfiBeyond"},"content":"        expectedModel.setLeave(originalLeave, approvedLeave);","lastModifiedDate":"2023-10-29"},{"lineNumber":42,"author":{"gitId":"InfiBeyond"},"content":"        assertCommandSuccess(approveLeaveCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-29"},{"lineNumber":43,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":44,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":45,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":46,"author":{"gitId":"InfiBeyond"},"content":"    public void execute_duplicateApproveLeave_failure() {","lastModifiedDate":"2023-10-29"},{"lineNumber":47,"author":{"gitId":"InfiBeyond"},"content":"        Index indexLastLeave \u003d TestUtil.getLastLeaveIndex(model);","lastModifiedDate":"2023-10-29"},{"lineNumber":48,"author":{"gitId":"InfiBeyond"},"content":"        Leave originalLeave \u003d TestUtil.getLeave(model, indexLastLeave);","lastModifiedDate":"2023-10-29"},{"lineNumber":49,"author":{"gitId":"InfiBeyond"},"content":"        LeaveBuilder leaveInList \u003d new LeaveBuilder(originalLeave);","lastModifiedDate":"2023-10-29"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"        Leave approvedLeave \u003d leaveInList.withStatus(StatusType.APPROVED).build();","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"InfiBeyond"},"content":"        model.setLeave(originalLeave, approvedLeave);","lastModifiedDate":"2023-10-29"},{"lineNumber":52,"author":{"gitId":"InfiBeyond"},"content":"        ApproveLeaveCommand approveLeaveCommand \u003d new ApproveLeaveCommand(indexLastLeave);","lastModifiedDate":"2023-10-29"},{"lineNumber":53,"author":{"gitId":"InfiBeyond"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2023-10-29"},{"lineNumber":54,"author":{"gitId":"InfiBeyond"},"content":"                ApproveLeaveCommand.MESSAGE_DUPLICATE_LEAVE_APPROVE,","lastModifiedDate":"2023-10-29"},{"lineNumber":55,"author":{"gitId":"InfiBeyond"},"content":"                Messages.format(approvedLeave));","lastModifiedDate":"2023-10-29"},{"lineNumber":56,"author":{"gitId":"InfiBeyond"},"content":"        assertCommandFailure(approveLeaveCommand, model, expectedMessage);","lastModifiedDate":"2023-10-29"},{"lineNumber":57,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":58,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":59,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":60,"author":{"gitId":"InfiBeyond"},"content":"    public void execute_invalidIndex_failure() {","lastModifiedDate":"2023-10-29"},{"lineNumber":61,"author":{"gitId":"InfiBeyond"},"content":"        Index outOfBoundIndex \u003d TestUtil.getInvalidLeaveIndex(model);","lastModifiedDate":"2023-10-29"},{"lineNumber":62,"author":{"gitId":"InfiBeyond"},"content":"        ApproveLeaveCommand approveLeaveCommand \u003d new ApproveLeaveCommand(outOfBoundIndex);","lastModifiedDate":"2023-10-29"},{"lineNumber":63,"author":{"gitId":"InfiBeyond"},"content":"        String expectedMessage \u003d Messages.MESSAGE_INVALID_LEAVE_INDEX;","lastModifiedDate":"2023-10-29"},{"lineNumber":64,"author":{"gitId":"InfiBeyond"},"content":"        assertCommandFailure(approveLeaveCommand, model, expectedMessage);","lastModifiedDate":"2023-10-29"},{"lineNumber":65,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":66,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":67,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":68,"author":{"gitId":"InfiBeyond"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-29"},{"lineNumber":69,"author":{"gitId":"InfiBeyond"},"content":"        Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-10-29"},{"lineNumber":70,"author":{"gitId":"InfiBeyond"},"content":"        ApproveLeaveCommand approveLeaveCommand \u003d new ApproveLeaveCommand(index);","lastModifiedDate":"2023-10-29"},{"lineNumber":71,"author":{"gitId":"InfiBeyond"},"content":"        String expected \u003d ApproveLeaveCommand.class.getCanonicalName() + \"{index\u003d\" + index + \"}\";","lastModifiedDate":"2023-10-29"},{"lineNumber":72,"author":{"gitId":"InfiBeyond"},"content":"        assertEquals(expected, approveLeaveCommand.toString());","lastModifiedDate":"2023-10-29"},{"lineNumber":73,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":74,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":75,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":76,"author":{"gitId":"InfiBeyond"},"content":"    public void equalsMethod() {","lastModifiedDate":"2023-10-29"},{"lineNumber":77,"author":{"gitId":"InfiBeyond"},"content":"        final Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-10-29"},{"lineNumber":78,"author":{"gitId":"InfiBeyond"},"content":"        final ApproveLeaveCommand standardCommand \u003d new ApproveLeaveCommand(index);","lastModifiedDate":"2023-10-29"},{"lineNumber":79,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":80,"author":{"gitId":"InfiBeyond"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-29"},{"lineNumber":81,"author":{"gitId":"InfiBeyond"},"content":"        ApproveLeaveCommand commandWithSameValues \u003d new ApproveLeaveCommand(index);","lastModifiedDate":"2023-10-29"},{"lineNumber":82,"author":{"gitId":"InfiBeyond"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2023-10-29"},{"lineNumber":83,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":84,"author":{"gitId":"InfiBeyond"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-29"},{"lineNumber":85,"author":{"gitId":"InfiBeyond"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2023-10-29"},{"lineNumber":86,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":87,"author":{"gitId":"InfiBeyond"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-29"},{"lineNumber":88,"author":{"gitId":"InfiBeyond"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2023-10-29"},{"lineNumber":89,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":90,"author":{"gitId":"InfiBeyond"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-29"},{"lineNumber":91,"author":{"gitId":"InfiBeyond"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2023-10-29"},{"lineNumber":92,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":93,"author":{"gitId":"InfiBeyond"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2023-10-29"},{"lineNumber":94,"author":{"gitId":"InfiBeyond"},"content":"        Index differentIndex \u003d Index.fromOneBased(2);","lastModifiedDate":"2023-10-29"},{"lineNumber":95,"author":{"gitId":"InfiBeyond"},"content":"        assertFalse(standardCommand.equals(new ApproveLeaveCommand(differentIndex)));","lastModifiedDate":"2023-10-29"},{"lineNumber":96,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":97,"author":{"gitId":"InfiBeyond"},"content":"}","lastModifiedDate":"2023-10-29"}],"authorContributionMap":{"ryanozx":3,"InfiBeyond":94}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.LeavesBook;","lastModifiedDate":"2023-11-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"InfiBeyond"},"content":"    public void execute_emptyAddressBookLeavesList_success() {","lastModifiedDate":"2023-11-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":27,"author":{"gitId":"ong-wei-hong"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"ong-wei-hong"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"InfiBeyond"},"content":"        expectedModel.setLeavesBook(new LeavesBook());","lastModifiedDate":"2023-11-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":35,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-11-10"},{"lineNumber":36,"author":{"gitId":"InfiBeyond"},"content":"    public void execute_nonEmptyLeavesList_success() {","lastModifiedDate":"2023-11-10"},{"lineNumber":37,"author":{"gitId":"InfiBeyond"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-10"},{"lineNumber":38,"author":{"gitId":"InfiBeyond"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-10"},{"lineNumber":39,"author":{"gitId":"InfiBeyond"},"content":"        expectedModel.setAddressBook(new AddressBook());","lastModifiedDate":"2023-11-10"},{"lineNumber":40,"author":{"gitId":"InfiBeyond"},"content":"        expectedModel.setLeavesBook(new LeavesBook());","lastModifiedDate":"2023-11-10"},{"lineNumber":41,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":42,"author":{"gitId":"InfiBeyond"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2023-11-10"},{"lineNumber":43,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-10"},{"lineNumber":44,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":45,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-11-10"},{"lineNumber":46,"author":{"gitId":"InfiBeyond"},"content":"    public void execute_clearCommand_success() {","lastModifiedDate":"2023-11-10"},{"lineNumber":47,"author":{"gitId":"InfiBeyond"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-10"},{"lineNumber":48,"author":{"gitId":"InfiBeyond"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-10"},{"lineNumber":49,"author":{"gitId":"InfiBeyond"},"content":"        expectedModel.setAddressBook(new AddressBook());","lastModifiedDate":"2023-11-10"},{"lineNumber":50,"author":{"gitId":"InfiBeyond"},"content":"        expectedModel.setLeavesBook(new LeavesBook());","lastModifiedDate":"2023-11-10"},{"lineNumber":51,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":52,"author":{"gitId":"InfiBeyond"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2023-11-10"},{"lineNumber":53,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"InfiBeyond":22,"-":29,"ong-wei-hong":3}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_DATE_END;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_DATE_START;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_DESCRIPTION;","lastModifiedDate":"2023-11-07"},{"lineNumber":8,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_STATUS;","lastModifiedDate":"2023-11-07"},{"lineNumber":9,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_TITLE;","lastModifiedDate":"2023-11-07"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ADDRESS;","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_EMAIL;","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_NAME;","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_PHONE;","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_TAG;","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.LeavesBook;","lastModifiedDate":"2023-11-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-11-12"},{"lineNumber":27,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.LeaveContainsPersonPredicate;","lastModifiedDate":"2023-11-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-07-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":47,"author":{"gitId":"jean-cq"},"content":"    public static final String VALID_TAG_REMOTE \u003d \"remote\";","lastModifiedDate":"2023-11-09"},{"lineNumber":48,"author":{"gitId":"jean-cq"},"content":"    public static final String VALID_TAG_FULL_TIME \u003d \"full time\";","lastModifiedDate":"2023-11-09"},{"lineNumber":49,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":50,"author":{"gitId":"jean-cq"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_PERSON_NAME + VALID_NAME_AMY;","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"jean-cq"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_PERSON_NAME + VALID_NAME_BOB;","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"jean-cq"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PERSON_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"jean-cq"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PERSON_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"jean-cq"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_PERSON_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2023-11-01"},{"lineNumber":55,"author":{"gitId":"jean-cq"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_PERSON_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2023-11-01"},{"lineNumber":56,"author":{"gitId":"jean-cq"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_PERSON_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2023-11-01"},{"lineNumber":57,"author":{"gitId":"jean-cq"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_PERSON_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"jean-cq"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_PERSON_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"jean-cq"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_PERSON_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2023-11-01"},{"lineNumber":60,"author":{"gitId":"jean-cq"},"content":"    public static final String TAG_DESC_REMOTE \u003d \" \" + PREFIX_PERSON_TAG + VALID_TAG_REMOTE;","lastModifiedDate":"2023-11-09"},{"lineNumber":61,"author":{"gitId":"jean-cq"},"content":"    public static final String TAG_DESC_FULL_TIME \u003d \" \" + PREFIX_PERSON_TAG + VALID_TAG_FULL_TIME;","lastModifiedDate":"2023-11-09"},{"lineNumber":62,"author":{"gitId":"jean-cq"},"content":"    public static final String TAG_EMPTY \u003d \" \" + PREFIX_PERSON_TAG;","lastModifiedDate":"2023-11-01"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"jean-cq"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_PERSON_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2023-11-01"},{"lineNumber":65,"author":{"gitId":"jean-cq"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PERSON_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2023-11-01"},{"lineNumber":66,"author":{"gitId":"jean-cq"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_PERSON_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2023-11-01"},{"lineNumber":67,"author":{"gitId":"jean-cq"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \"","lastModifiedDate":"2023-11-01"},{"lineNumber":68,"author":{"gitId":"jean-cq"},"content":"            + PREFIX_PERSON_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2023-11-01"},{"lineNumber":69,"author":{"gitId":"jean-cq"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_PERSON_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2023-11-01"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":77,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String VALID_LEAVE_TITLE \u003d \"Medical leave\";","lastModifiedDate":"2023-11-07"},{"lineNumber":78,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String VALID_LEAVE_DESCRIPTION \u003d \"going on medical leave\";","lastModifiedDate":"2023-11-07"},{"lineNumber":79,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String VALID_LEAVE_DATE_START \u003d \"2023-10-30\";","lastModifiedDate":"2023-11-07"},{"lineNumber":80,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String VALID_LEAVE_DATE_END \u003d \"2023-10-31\";","lastModifiedDate":"2023-11-07"},{"lineNumber":81,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String VALID_LEAVE_STATUS_APPROVED \u003d \"APPROVED\";","lastModifiedDate":"2023-11-07"},{"lineNumber":82,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String VALID_LEAVE_STATUS_REJECTED \u003d \"REJECTED\";","lastModifiedDate":"2023-11-10"},{"lineNumber":83,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String DESCRIPTION_EMPTY \u003d \" \" + PREFIX_LEAVE_DESCRIPTION;","lastModifiedDate":"2023-11-10"},{"lineNumber":84,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":85,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String VALID_LEAVE_TITLE_DESC \u003d \" \" + PREFIX_LEAVE_TITLE + VALID_LEAVE_TITLE;","lastModifiedDate":"2023-11-07"},{"lineNumber":86,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String VALID_LEAVE_DESCRIPTION_DESC \u003d \" \" + PREFIX_LEAVE_DESCRIPTION + VALID_LEAVE_DESCRIPTION;","lastModifiedDate":"2023-11-07"},{"lineNumber":87,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String VALID_LEAVE_START_DATE_DESC \u003d \" \" + PREFIX_LEAVE_DATE_START + VALID_LEAVE_DATE_START;","lastModifiedDate":"2023-11-07"},{"lineNumber":88,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String VALID_LEAVE_END_DATE_DESC \u003d \" \" + PREFIX_LEAVE_DATE_END + VALID_LEAVE_DATE_END;","lastModifiedDate":"2023-11-07"},{"lineNumber":89,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String VALID_LEAVE_STATUS_DESC \u003d \" \" + PREFIX_LEAVE_STATUS + VALID_LEAVE_STATUS_APPROVED;","lastModifiedDate":"2023-11-07"},{"lineNumber":90,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":91,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String INVALID_LEAVE_TITLE_DESC \u003d \" \" + PREFIX_LEAVE_TITLE + \"Medical leave\u0026\";","lastModifiedDate":"2023-11-07"},{"lineNumber":92,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String INVALID_LEAVE_DESCRIPTION_DESC \u003d \" \" + PREFIX_LEAVE_DESCRIPTION + \"Going to childcare\u0026\";","lastModifiedDate":"2023-11-07"},{"lineNumber":93,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String INVALID_LEAVE_DATE_START_DESC \u003d \" \" + PREFIX_LEAVE_DATE_START + \"2023-13-11\";","lastModifiedDate":"2023-11-07"},{"lineNumber":94,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String INVALID_LEAVE_DATE_END_DESC \u003d \" \" + PREFIX_LEAVE_DATE_END + \"2024-12-32\";","lastModifiedDate":"2023-11-07"},{"lineNumber":95,"author":{"gitId":"jean-cq"},"content":"    public static final String INVALID_LEAVE_LATE_DATE_START_DESC \u003d \" \" + PREFIX_LEAVE_DATE_START","lastModifiedDate":"2023-11-09"},{"lineNumber":96,"author":{"gitId":"jean-cq"},"content":"            + VALID_LEAVE_DATE_END;","lastModifiedDate":"2023-11-09"},{"lineNumber":97,"author":{"gitId":"jean-cq"},"content":"    public static final String INVALID_LEAVE_EARLY_DATE_END_DESC \u003d \" \" + PREFIX_LEAVE_DATE_END + VALID_LEAVE_DATE_START;","lastModifiedDate":"2023-11-09"},{"lineNumber":98,"author":{"gitId":"ong-wei-hong"},"content":"    public static final String INVALID_LEAVE_STATUS_DESC \u003d \" \" + PREFIX_LEAVE_STATUS + \"NONSENSE\";","lastModifiedDate":"2023-11-07"},{"lineNumber":99,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":145,"author":{"gitId":"ryanozx"},"content":"        List\u003cPerson\u003e expectedFilteredPersonList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2023-11-12"},{"lineNumber":146,"author":{"gitId":"ryanozx"},"content":"        LeavesBook expectedLeavesBook \u003d new LeavesBook(actualModel.getLeavesBook());","lastModifiedDate":"2023-11-12"},{"lineNumber":147,"author":{"gitId":"ryanozx"},"content":"        List\u003cLeave\u003e expectedFilteredLeaveList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredLeaveList());","lastModifiedDate":"2023-11-12"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":151,"author":{"gitId":"ryanozx"},"content":"        assertEquals(expectedFilteredPersonList, actualModel.getFilteredPersonList());","lastModifiedDate":"2023-11-12"},{"lineNumber":152,"author":{"gitId":"ryanozx"},"content":"        assertEquals(expectedLeavesBook, actualModel.getLeavesBook());","lastModifiedDate":"2023-11-12"},{"lineNumber":153,"author":{"gitId":"ryanozx"},"content":"        assertEquals(expectedFilteredLeaveList, actualModel.getFilteredLeaveList());","lastModifiedDate":"2023-11-12"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":163,"author":{"gitId":"ryanozx"},"content":"        final String[] splitName \u003d person.getName().toString().split(\"\\\\s+\");","lastModifiedDate":"2023-11-02"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":169,"author":{"gitId":"ong-wei-hong"},"content":"    /**","lastModifiedDate":"2023-11-07"},{"lineNumber":170,"author":{"gitId":"ong-wei-hong"},"content":"     * Updates {@code model}\u0027s filtered list to show only the leave that belongs to the {@code person}","lastModifiedDate":"2023-11-07"},{"lineNumber":171,"author":{"gitId":"ong-wei-hong"},"content":"     */","lastModifiedDate":"2023-11-07"},{"lineNumber":172,"author":{"gitId":"ong-wei-hong"},"content":"    public static void showLeaveByPerson(Model model, Person person) {","lastModifiedDate":"2023-11-07"},{"lineNumber":173,"author":{"gitId":"ong-wei-hong"},"content":"        LeaveContainsPersonPredicate p \u003d new LeaveContainsPersonPredicate(person);","lastModifiedDate":"2023-11-07"},{"lineNumber":174,"author":{"gitId":"ong-wei-hong"},"content":"        model.updateFilteredLeaveList(p);","lastModifiedDate":"2023-11-07"},{"lineNumber":175,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":176,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":177,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"ryanozx":12,"jean-cq":30,"-":104,"ong-wei-hong":31}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-12"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-12"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-11-12"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2023-11-12"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-11-12"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-11-12"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;","lastModifiedDate":"2023-11-12"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2023-11-12"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2023-11-12"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-12"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-12"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-11-12"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-11-12"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.LeavesBook;","lastModifiedDate":"2023-11-12"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-12"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-11-12"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-11-12"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-11-12"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.PersonEntry;","lastModifiedDate":"2023-11-12"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-11-12"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"import seedu.address.testutil.LeaveBuilder;","lastModifiedDate":"2023-11-12"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-11-12"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"public class DeleteCommandIntegrationTest {","lastModifiedDate":"2023-11-12"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"    private Model model;","lastModifiedDate":"2023-11-12"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"    private final Person alice \u003d new PersonBuilder()","lastModifiedDate":"2023-11-12"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"            .withName(ALICE.getName().toString())","lastModifiedDate":"2023-11-12"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"            .withAddress(ALICE.getAddress().toString())","lastModifiedDate":"2023-11-12"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"            .withEmail(ALICE.getEmail().toString())","lastModifiedDate":"2023-11-12"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"            .withPhone(ALICE.getPhone().toString()).build();","lastModifiedDate":"2023-11-12"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"    private final Person bob \u003d new PersonBuilder()","lastModifiedDate":"2023-11-12"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"            .withName(BOB.getName().toString())","lastModifiedDate":"2023-11-12"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"            .withAddress(BOB.getAddress().toString())","lastModifiedDate":"2023-11-12"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"            .withEmail(BOB.getEmail().toString())","lastModifiedDate":"2023-11-12"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"            .withPhone(BOB.getPhone().toString()).build();","lastModifiedDate":"2023-11-12"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"    private final Leave aliceLeave \u003d new LeaveBuilder().withEmployee(","lastModifiedDate":"2023-11-12"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"            new PersonEntry(ALICE.getName().toString())).build();","lastModifiedDate":"2023-11-12"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"    private final Leave bobLeave \u003d new LeaveBuilder().withEmployee(","lastModifiedDate":"2023-11-12"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"            new PersonEntry(BOB.getName().toString())).build();","lastModifiedDate":"2023-11-12"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-12"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"    public void execute_deletePerson_success() {","lastModifiedDate":"2023-11-12"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"        // Checks that deleting a person deletes them from both address book as well as their associated leaves","lastModifiedDate":"2023-11-12"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"        // from the leaves book","lastModifiedDate":"2023-11-12"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"        Index deleteCommandIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-11-12"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"        DeleteCommand command \u003d new DeleteCommand(deleteCommandIndex);","lastModifiedDate":"2023-11-12"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(aliceLeave.getEmployee(), alice);","lastModifiedDate":"2023-11-12"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(bobLeave.getEmployee(), bob);","lastModifiedDate":"2023-11-12"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2023-11-12"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"        ab.addPerson(alice);","lastModifiedDate":"2023-11-12"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"        ab.addPerson(bob);","lastModifiedDate":"2023-11-12"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"        LeavesBook lb \u003d new LeavesBook();","lastModifiedDate":"2023-11-12"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"        lb.addLeave(aliceLeave);","lastModifiedDate":"2023-11-12"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"        lb.addLeave(bobLeave);","lastModifiedDate":"2023-11-12"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"        model \u003d new ModelManager(ab, lb, new UserPrefs());","lastModifiedDate":"2023-11-12"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"        AddressBook expectedAb \u003d new AddressBook();","lastModifiedDate":"2023-11-12"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"        expectedAb.addPerson(bob);","lastModifiedDate":"2023-11-12"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"        LeavesBook expectedLb \u003d new LeavesBook();","lastModifiedDate":"2023-11-12"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"        expectedLb.addLeave(bobLeave);","lastModifiedDate":"2023-11-12"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"        Model expectedModel \u003d new ModelManager(expectedAb, expectedLb, new UserPrefs());","lastModifiedDate":"2023-11-12"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"        // ensure that we will be deleting alice","lastModifiedDate":"2023-11-12"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"        assertEquals(model.getFilteredPersonList().get(0), alice);","lastModifiedDate":"2023-11-12"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"        assertCommandSuccess(command, model,","lastModifiedDate":"2023-11-12"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"                String.format(MESSAGE_DELETE_PERSON_SUCCESS, Messages.format(alice)),","lastModifiedDate":"2023-11-12"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"                expectedModel);","lastModifiedDate":"2023-11-12"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-12"},{"lineNumber":78,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":79,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-12"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"    public void execute_indexOutOfBounds_throwsCommandException() {","lastModifiedDate":"2023-11-12"},{"lineNumber":81,"author":{"gitId":"ryanozx"},"content":"        Index deleteCommandIndex \u003d Index.fromOneBased(2);","lastModifiedDate":"2023-11-12"},{"lineNumber":82,"author":{"gitId":"ryanozx"},"content":"        DeleteCommand command \u003d new DeleteCommand(deleteCommandIndex);","lastModifiedDate":"2023-11-12"},{"lineNumber":83,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":84,"author":{"gitId":"ryanozx"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2023-11-12"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"        ab.addPerson(alice);","lastModifiedDate":"2023-11-12"},{"lineNumber":86,"author":{"gitId":"ryanozx"},"content":"        LeavesBook lb \u003d new LeavesBook();","lastModifiedDate":"2023-11-12"},{"lineNumber":87,"author":{"gitId":"ryanozx"},"content":"        model \u003d new ModelManager(ab, lb, new UserPrefs());","lastModifiedDate":"2023-11-12"},{"lineNumber":88,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":89,"author":{"gitId":"ryanozx"},"content":"        assertCommandFailure(command, model, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-11-12"},{"lineNumber":90,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-12"},{"lineNumber":91,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-12"}],"authorContributionMap":{"ryanozx":91}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS,","lastModifiedDate":"2019-02-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                Messages.format(personToDelete));","lastModifiedDate":"2019-02-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"ong-wei-hong"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-06-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS,","lastModifiedDate":"2019-02-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                Messages.format(personToDelete));","lastModifiedDate":"2019-02-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":63,"author":{"gitId":"ong-wei-hong"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-06-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-06-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2019-02-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(targetIndex);","lastModifiedDate":"2019-02-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        String expected \u003d DeleteCommand.class.getCanonicalName() + \"{targetIndex\u003d\" + targetIndex + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertEquals(expected, deleteCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"ryanozx":1,"-":117,"ong-wei-hong":3}},{"path":"src/test/java/seedu/address/logic/commands/DeleteLeaveCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ong-wei-hong"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"ong-wei-hong"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"ong-wei-hong"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showLeaveByPerson;","lastModifiedDate":"2023-11-07"},{"lineNumber":8,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_LEAVE;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_LEAVE;","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"ong-wei-hong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.testutil.TypicalPersons;","lastModifiedDate":"2023-11-07"},{"lineNumber":22,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"ong-wei-hong"},"content":"public class DeleteLeaveCommandTest {","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"ong-wei-hong"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"ong-wei-hong"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"ong-wei-hong"},"content":"        Leave leaveToDelete \u003d model.getFilteredLeaveList().get(INDEX_FIRST_LEAVE.getZeroBased());","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"ong-wei-hong"},"content":"        DeleteLeaveCommand deleteLeaveCommand \u003d new DeleteLeaveCommand(INDEX_FIRST_LEAVE);","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"ong-wei-hong"},"content":"        String expectedMessage \u003d String.format(DeleteLeaveCommand.MESSAGE_DELETE_LEAVE_SUCCESS,","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"ong-wei-hong"},"content":"                Messages.format(leaveToDelete));","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"ong-wei-hong"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"ong-wei-hong"},"content":"        expectedModel.deleteLeave(leaveToDelete);","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"ong-wei-hong"},"content":"        assertCommandSuccess(deleteLeaveCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"ong-wei-hong"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"ong-wei-hong"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredLeaveList().size() + 1);","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"ong-wei-hong"},"content":"        DeleteLeaveCommand deleteLeaveCommand \u003d new DeleteLeaveCommand(outOfBoundsIndex);","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"ong-wei-hong"},"content":"        assertCommandFailure(deleteLeaveCommand, model, Messages.MESSAGE_INVALID_LEAVE_DISPLAYED_INDEX);","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"ong-wei-hong"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2023-11-07"},{"lineNumber":50,"author":{"gitId":"ong-wei-hong"},"content":"        showLeaveByPerson(model, TypicalPersons.BENSON);","lastModifiedDate":"2023-11-07"},{"lineNumber":51,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"ong-wei-hong"},"content":"        Leave leaveToDelete \u003d model.getFilteredLeaveList().get(INDEX_FIRST_LEAVE.getZeroBased());","lastModifiedDate":"2023-11-07"},{"lineNumber":53,"author":{"gitId":"ong-wei-hong"},"content":"        DeleteLeaveCommand command \u003d new DeleteLeaveCommand(INDEX_FIRST_LEAVE);","lastModifiedDate":"2023-11-07"},{"lineNumber":54,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":55,"author":{"gitId":"ong-wei-hong"},"content":"        String expectedMessage \u003d String.format(DeleteLeaveCommand.MESSAGE_DELETE_LEAVE_SUCCESS,","lastModifiedDate":"2023-11-07"},{"lineNumber":56,"author":{"gitId":"ong-wei-hong"},"content":"                Messages.format(leaveToDelete));","lastModifiedDate":"2023-11-07"},{"lineNumber":57,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":58,"author":{"gitId":"ong-wei-hong"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-07"},{"lineNumber":59,"author":{"gitId":"ong-wei-hong"},"content":"        expectedModel.deleteLeave(leaveToDelete);","lastModifiedDate":"2023-11-07"},{"lineNumber":60,"author":{"gitId":"ong-wei-hong"},"content":"        showNoLeave(expectedModel);","lastModifiedDate":"2023-11-07"},{"lineNumber":61,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":62,"author":{"gitId":"ong-wei-hong"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-11-07"},{"lineNumber":63,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":64,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":65,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":66,"author":{"gitId":"ong-wei-hong"},"content":"    public void execute_invalidIndexFilteredList_failure() {","lastModifiedDate":"2023-11-07"},{"lineNumber":67,"author":{"gitId":"ong-wei-hong"},"content":"        showLeaveByPerson(model, TypicalPersons.BENSON);","lastModifiedDate":"2023-11-07"},{"lineNumber":68,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":69,"author":{"gitId":"ong-wei-hong"},"content":"        Index outofBoundsIndex \u003d INDEX_SECOND_LEAVE;","lastModifiedDate":"2023-11-07"},{"lineNumber":70,"author":{"gitId":"ong-wei-hong"},"content":"        assertTrue(outofBoundsIndex.getZeroBased() \u003c model.getLeavesBook().getLeaveList().size());","lastModifiedDate":"2023-11-07"},{"lineNumber":71,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":72,"author":{"gitId":"ong-wei-hong"},"content":"        DeleteLeaveCommand deleteLeaveCommand \u003d new DeleteLeaveCommand(outofBoundsIndex);","lastModifiedDate":"2023-11-07"},{"lineNumber":73,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":74,"author":{"gitId":"ong-wei-hong"},"content":"        assertCommandFailure(deleteLeaveCommand, model, Messages.MESSAGE_INVALID_LEAVE_DISPLAYED_INDEX);","lastModifiedDate":"2023-11-07"},{"lineNumber":75,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":76,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":77,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":78,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":79,"author":{"gitId":"ong-wei-hong"},"content":"    public void equals() {","lastModifiedDate":"2023-11-01"},{"lineNumber":80,"author":{"gitId":"ong-wei-hong"},"content":"        DeleteLeaveCommand deleteLeaveFirstCommand \u003d new DeleteLeaveCommand(INDEX_FIRST_LEAVE);","lastModifiedDate":"2023-11-01"},{"lineNumber":81,"author":{"gitId":"ong-wei-hong"},"content":"        DeleteLeaveCommand deleteLeaveSecondCommand \u003d new DeleteLeaveCommand(INDEX_SECOND_LEAVE);","lastModifiedDate":"2023-11-01"},{"lineNumber":82,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":83,"author":{"gitId":"ong-wei-hong"},"content":"        assertTrue(deleteLeaveFirstCommand.equals(deleteLeaveFirstCommand));","lastModifiedDate":"2023-11-01"},{"lineNumber":84,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":85,"author":{"gitId":"ong-wei-hong"},"content":"        DeleteLeaveCommand deleteLeaveFirstCommandCopy \u003d new DeleteLeaveCommand(INDEX_FIRST_LEAVE);","lastModifiedDate":"2023-11-01"},{"lineNumber":86,"author":{"gitId":"ong-wei-hong"},"content":"        assertTrue(deleteLeaveFirstCommand.equals(deleteLeaveFirstCommandCopy));","lastModifiedDate":"2023-11-01"},{"lineNumber":87,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":88,"author":{"gitId":"ong-wei-hong"},"content":"        assertFalse(deleteLeaveFirstCommand.equals(1));","lastModifiedDate":"2023-11-01"},{"lineNumber":89,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":90,"author":{"gitId":"ong-wei-hong"},"content":"        assertFalse(deleteLeaveFirstCommand.equals(null));","lastModifiedDate":"2023-11-01"},{"lineNumber":91,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":92,"author":{"gitId":"ong-wei-hong"},"content":"        assertFalse(deleteLeaveFirstCommand.equals(deleteLeaveSecondCommand));","lastModifiedDate":"2023-11-01"},{"lineNumber":93,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":94,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":95,"author":{"gitId":"ong-wei-hong"},"content":"    /**","lastModifiedDate":"2023-11-07"},{"lineNumber":96,"author":{"gitId":"ong-wei-hong"},"content":"     * Updates {@code model}\u0027s filtered list to show no one","lastModifiedDate":"2023-11-07"},{"lineNumber":97,"author":{"gitId":"ong-wei-hong"},"content":"     */","lastModifiedDate":"2023-11-07"},{"lineNumber":98,"author":{"gitId":"ong-wei-hong"},"content":"    private void showNoLeave(Model model) {","lastModifiedDate":"2023-11-07"},{"lineNumber":99,"author":{"gitId":"ong-wei-hong"},"content":"        model.updateFilteredLeaveList(l -\u003e false);","lastModifiedDate":"2023-11-07"},{"lineNumber":100,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":101,"author":{"gitId":"ong-wei-hong"},"content":"        assertTrue(model.getFilteredLeaveList().isEmpty());","lastModifiedDate":"2023-11-07"},{"lineNumber":102,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":103,"author":{"gitId":"ong-wei-hong"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"ong-wei-hong":103}},{"path":"src/test/java/seedu/address/logic/commands/DeleteTagCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":"import java.util.Collection;","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"import java.util.List;","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.LeavesBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"public class DeleteTagCommandTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"    public void constructor_nullIndex_throwsNullPointerException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DeleteTagCommand(null, List.of(new Tag(VALID_TAG_FRIEND))));","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"    public void constructor_nullTags_throwsNullPointerException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DeleteTagCommand(INDEX_FIRST_PERSON, null));","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"ong-wei-hong"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"ivyy-poison"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"ivyy-poison"},"content":"        Person editedPerson \u003d new Person(firstPerson);","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"ivyy-poison"},"content":"        editedPerson.removeTags(firstPerson.getTags());","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"ivyy-poison"},"content":"        DeleteTagCommand deleteTagCommand \u003d new DeleteTagCommand(INDEX_FIRST_PERSON, firstPerson.getTags());","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"ivyy-poison"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"ivyy-poison"},"content":"                DeleteTagCommand.MESSAGE_REMOVE_TAG_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"ong-wei-hong"},"content":"        ModelManager expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"ong-wei-hong"},"content":"                new LeavesBook(model.getLeavesBook()), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"ivyy-poison"},"content":"        expectedModel.setPerson(firstPerson, editedPerson);","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"ivyy-poison"},"content":"        assertCommandSuccess(deleteTagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"ivyy-poison"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"ong-wei-hong"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":61,"author":{"gitId":"ivyy-poison"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"ivyy-poison"},"content":"        DeleteTagCommand deleteTagCommand \u003d new DeleteTagCommand(outOfBoundIndex, List.of(new Tag(VALID_TAG_FRIEND)));","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"ivyy-poison"},"content":"        assertCommandFailure(deleteTagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"ivyy-poison"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"ong-wei-hong"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":69,"author":{"gitId":"ivyy-poison"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"ivyy-poison"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"ivyy-poison"},"content":"        Person editedPerson \u003d new Person(personInFilteredList);","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"ivyy-poison"},"content":"        editedPerson.removeTags(personInFilteredList.getTags());","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"ivyy-poison"},"content":"        DeleteTagCommand deleteTagCommand \u003d new DeleteTagCommand(INDEX_FIRST_PERSON, personInFilteredList.getTags());","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"ivyy-poison"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"ivyy-poison"},"content":"                DeleteTagCommand.MESSAGE_REMOVE_TAG_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"ong-wei-hong"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2023-11-01"},{"lineNumber":77,"author":{"gitId":"ong-wei-hong"},"content":"                new LeavesBook(model.getLeavesBook()), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":78,"author":{"gitId":"ivyy-poison"},"content":"        expectedModel.setPerson(personInFilteredList, editedPerson);","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"ivyy-poison"},"content":"        assertCommandSuccess(deleteTagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":82,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":83,"author":{"gitId":"ivyy-poison"},"content":"    public void execute_invalidIndexFilteredList_failure() {","lastModifiedDate":"2023-10-13"},{"lineNumber":84,"author":{"gitId":"ong-wei-hong"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":85,"author":{"gitId":"ivyy-poison"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-13"},{"lineNumber":86,"author":{"gitId":"ivyy-poison"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2023-10-13"},{"lineNumber":87,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2023-10-13"},{"lineNumber":88,"author":{"gitId":"ivyy-poison"},"content":"        DeleteTagCommand deleteTagCommand \u003d new DeleteTagCommand(outOfBoundIndex, List.of(new Tag(VALID_TAG_FRIEND)));","lastModifiedDate":"2023-10-13"},{"lineNumber":89,"author":{"gitId":"ivyy-poison"},"content":"        assertCommandFailure(deleteTagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-13"},{"lineNumber":90,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":91,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":92,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":93,"author":{"gitId":"ivyy-poison"},"content":"    public void execute_personDoesNotHaveAllTags_failure() {","lastModifiedDate":"2023-10-13"},{"lineNumber":94,"author":{"gitId":"ong-wei-hong"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":95,"author":{"gitId":"ivyy-poison"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-10-13"},{"lineNumber":96,"author":{"gitId":"ivyy-poison"},"content":"        DeleteTagCommand deleteTagCommand \u003d new DeleteTagCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2023-10-13"},{"lineNumber":97,"author":{"gitId":"ivyy-poison"},"content":"                List.of(new Tag(VALID_TAG_FRIEND), new Tag(\"random\")));","lastModifiedDate":"2023-10-13"},{"lineNumber":98,"author":{"gitId":"ivyy-poison"},"content":"        assertCommandFailure(deleteTagCommand, model, DeleteTagCommand.MESSAGE_MISSING_TAGS);","lastModifiedDate":"2023-10-13"},{"lineNumber":99,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":100,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":101,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":102,"author":{"gitId":"ivyy-poison"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-13"},{"lineNumber":103,"author":{"gitId":"ivyy-poison"},"content":"        Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-10-13"},{"lineNumber":104,"author":{"gitId":"ivyy-poison"},"content":"        Collection\u003cTag\u003e tagsToAdd \u003d new HashSet\u003c\u003e(List.of(new Tag(VALID_TAG_FRIEND)));","lastModifiedDate":"2023-10-13"},{"lineNumber":105,"author":{"gitId":"ivyy-poison"},"content":"        DeleteTagCommand deleteTagCommand \u003d new DeleteTagCommand(index, tagsToAdd);","lastModifiedDate":"2023-10-13"},{"lineNumber":106,"author":{"gitId":"ivyy-poison"},"content":"        String expected \u003d DeleteTagCommand.class.getCanonicalName() + \"{index\u003d\" + index + \", tagsToAdd\u003d\"","lastModifiedDate":"2023-10-13"},{"lineNumber":107,"author":{"gitId":"ivyy-poison"},"content":"                + tagsToAdd + \"}\";","lastModifiedDate":"2023-10-13"},{"lineNumber":108,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(expected, deleteTagCommand.toString());","lastModifiedDate":"2023-10-13"},{"lineNumber":109,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":110,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":111,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":112,"author":{"gitId":"ivyy-poison"},"content":"    public void equalsMethod() {","lastModifiedDate":"2023-10-13"},{"lineNumber":113,"author":{"gitId":"ivyy-poison"},"content":"        final DeleteTagCommand standardCommand \u003d new DeleteTagCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2023-10-13"},{"lineNumber":114,"author":{"gitId":"ivyy-poison"},"content":"                List.of(new Tag(VALID_TAG_FRIEND)));","lastModifiedDate":"2023-10-13"},{"lineNumber":115,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":116,"author":{"gitId":"ivyy-poison"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-13"},{"lineNumber":117,"author":{"gitId":"ivyy-poison"},"content":"        DeleteTagCommand commandWithSameValues \u003d new DeleteTagCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2023-10-13"},{"lineNumber":118,"author":{"gitId":"ivyy-poison"},"content":"                List.of(new Tag(VALID_TAG_FRIEND)));","lastModifiedDate":"2023-10-13"},{"lineNumber":119,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2023-10-13"},{"lineNumber":120,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":121,"author":{"gitId":"ivyy-poison"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-13"},{"lineNumber":122,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2023-10-13"},{"lineNumber":123,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":124,"author":{"gitId":"ivyy-poison"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":125,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":126,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":127,"author":{"gitId":"ivyy-poison"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":128,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2023-10-13"},{"lineNumber":129,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":130,"author":{"gitId":"ivyy-poison"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":131,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(standardCommand.equals(new DeleteTagCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2023-10-13"},{"lineNumber":132,"author":{"gitId":"ivyy-poison"},"content":"                List.of(new Tag(VALID_TAG_FRIEND)))));","lastModifiedDate":"2023-10-13"},{"lineNumber":133,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":134,"author":{"gitId":"ivyy-poison"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":135,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(standardCommand.equals(new DeleteTagCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2023-10-13"},{"lineNumber":136,"author":{"gitId":"ivyy-poison"},"content":"                List.of(new Tag(\"different\")))));","lastModifiedDate":"2023-10-13"},{"lineNumber":137,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":138,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"ivyy-poison":126,"ong-wei-hong":12}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-12"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-11-12"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-11-12"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.commands.EditCommand.MESSAGE_DUPLICATE_PERSON;","lastModifiedDate":"2023-11-12"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.commands.EditCommand.MESSAGE_EDIT_PERSON_SUCCESS;","lastModifiedDate":"2023-11-12"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2023-11-12"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2023-11-12"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-11-12"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-12"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-12"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-11-12"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2023-11-12"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-11-12"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.LeavesBook;","lastModifiedDate":"2023-11-12"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-12"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-11-12"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-11-12"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-11-12"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.PersonEntry;","lastModifiedDate":"2023-11-12"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-11-12"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2023-11-12"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"import seedu.address.testutil.LeaveBuilder;","lastModifiedDate":"2023-11-12"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-11-12"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"public class EditCommandIntegrationTest {","lastModifiedDate":"2023-11-12"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"    private Model model;","lastModifiedDate":"2023-11-12"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"    @BeforeEach","lastModifiedDate":"2023-11-12"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"    public void setUp() {","lastModifiedDate":"2023-11-12"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2023-11-12"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"        LeavesBook lb \u003d new LeavesBook();","lastModifiedDate":"2023-11-12"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"        Person person \u003d new PersonBuilder()","lastModifiedDate":"2023-11-12"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"                .withName(ALICE.getName().toString())","lastModifiedDate":"2023-11-12"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"                .withAddress(ALICE.getAddress().toString())","lastModifiedDate":"2023-11-12"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"                .withEmail(ALICE.getEmail().toString())","lastModifiedDate":"2023-11-12"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"                .withPhone(ALICE.getPhone().toString()).build();","lastModifiedDate":"2023-11-12"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"        ab.addPerson(person);","lastModifiedDate":"2023-11-12"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"        // personEntry used to ensure that leaves are associated to employees via ComparablePerson::isSamePerson","lastModifiedDate":"2023-11-12"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"        // rather than equals","lastModifiedDate":"2023-11-12"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"        Leave loadedLeave \u003d new LeaveBuilder().withEmployee(new PersonEntry(ALICE.getName().toString())).build();","lastModifiedDate":"2023-11-12"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"        lb.addLeave(loadedLeave);","lastModifiedDate":"2023-11-12"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"        model \u003d new ModelManager(ab, lb, new UserPrefs());","lastModifiedDate":"2023-11-12"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-12"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-12"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"    public void execute_renamePerson_success() {","lastModifiedDate":"2023-11-12"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"        // Checks that editing a person\u0027s name changes both addressBook and leaveBook entries, even for leaves","lastModifiedDate":"2023-11-12"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"        // that were not created in the current session","lastModifiedDate":"2023-11-12"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"        EditPersonDescriptor editDescriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2023-11-12"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"                .withName(BOB.getName().toString()).build();","lastModifiedDate":"2023-11-12"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"        Index editCommandIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-11-12"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"        EditCommand command \u003d new EditCommand(editCommandIndex, editDescriptor);","lastModifiedDate":"2023-11-12"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"        AddressBook expectedAb \u003d new AddressBook();","lastModifiedDate":"2023-11-12"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"        Person editedPerson \u003d new PersonBuilder()","lastModifiedDate":"2023-11-12"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"                .withName(BOB.getName().toString())","lastModifiedDate":"2023-11-12"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"                .withAddress(ALICE.getAddress().toString())","lastModifiedDate":"2023-11-12"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"                .withEmail(ALICE.getEmail().toString())","lastModifiedDate":"2023-11-12"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"                .withPhone(ALICE.getPhone().toString()).build();","lastModifiedDate":"2023-11-12"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"        expectedAb.addPerson(editedPerson);","lastModifiedDate":"2023-11-12"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"        LeavesBook expectedLb \u003d new LeavesBook();","lastModifiedDate":"2023-11-12"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"        Leave expectedLeave \u003d new LeaveBuilder().withEmployee(new PersonEntry(BOB.getName().toString())).build();","lastModifiedDate":"2023-11-12"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"        expectedLb.addLeave(expectedLeave);","lastModifiedDate":"2023-11-12"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"        Model expectedModel \u003d new ModelManager(expectedAb, expectedLb, new UserPrefs());","lastModifiedDate":"2023-11-12"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"        assertCommandSuccess(command, model,","lastModifiedDate":"2023-11-12"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"                String.format(MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson)),","lastModifiedDate":"2023-11-12"},{"lineNumber":78,"author":{"gitId":"ryanozx"},"content":"                expectedModel);","lastModifiedDate":"2023-11-12"},{"lineNumber":79,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-12"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":81,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-12"},{"lineNumber":82,"author":{"gitId":"ryanozx"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2023-11-12"},{"lineNumber":83,"author":{"gitId":"ryanozx"},"content":"        model.addPerson(BOB);","lastModifiedDate":"2023-11-12"},{"lineNumber":84,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"        EditPersonDescriptor editDescriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2023-11-12"},{"lineNumber":86,"author":{"gitId":"ryanozx"},"content":"                .withName(BOB.getName().toString()).build();","lastModifiedDate":"2023-11-12"},{"lineNumber":87,"author":{"gitId":"ryanozx"},"content":"        Index editCommandIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-11-12"},{"lineNumber":88,"author":{"gitId":"ryanozx"},"content":"        EditCommand command \u003d new EditCommand(editCommandIndex, editDescriptor);","lastModifiedDate":"2023-11-12"},{"lineNumber":89,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":90,"author":{"gitId":"ryanozx"},"content":"        assertCommandFailure(command, model, MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2023-11-12"},{"lineNumber":91,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-12"},{"lineNumber":92,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-12"}],"authorContributionMap":{"ryanozx":92}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":16,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":25,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.LeavesBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-05-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":38,"author":{"gitId":"ong-wei-hong"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"ong-wei-hong"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"ong-wei-hong"},"content":"                new LeavesBook(model.getLeavesBook()), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2019-02-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":70,"author":{"gitId":"ong-wei-hong"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2023-11-01"},{"lineNumber":71,"author":{"gitId":"ong-wei-hong"},"content":"                new LeavesBook(model.getLeavesBook()), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":84,"author":{"gitId":"ong-wei-hong"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2023-11-01"},{"lineNumber":85,"author":{"gitId":"ong-wei-hong"},"content":"                new LeavesBook(model.getLeavesBook()), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2019-02-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":101,"author":{"gitId":"ong-wei-hong"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2023-11-01"},{"lineNumber":102,"author":{"gitId":"ong-wei-hong"},"content":"                new LeavesBook(model.getLeavesBook()), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2017-05-25"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2017-05-25"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2019-02-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2019-02-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2019-02-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        String expected \u003d EditCommand.class.getCanonicalName() + \"{index\u003d\" + index + \", editPersonDescriptor\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                + editPersonDescriptor + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        assertEquals(expected, editCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"-":179,"ong-wei-hong":11}},{"path":"src/test/java/seedu/address/logic/commands/EditLeaveCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":2,"author":{"gitId":"ong-wei-hong"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-07"},{"lineNumber":3,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":4,"author":{"gitId":"ong-wei-hong"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-07"},{"lineNumber":5,"author":{"gitId":"ong-wei-hong"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-07"},{"lineNumber":6,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-11-07"},{"lineNumber":7,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-11-07"},{"lineNumber":8,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showLeaveByPerson;","lastModifiedDate":"2023-11-07"},{"lineNumber":9,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_LEAVE;","lastModifiedDate":"2023-11-07"},{"lineNumber":10,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-11-07"},{"lineNumber":11,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_LEAVE;","lastModifiedDate":"2023-11-07"},{"lineNumber":12,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_LEAVE;","lastModifiedDate":"2023-11-07"},{"lineNumber":13,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalLeaves.DEFAULT_END;","lastModifiedDate":"2023-11-07"},{"lineNumber":14,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalLeaves.DEFAULT_START;","lastModifiedDate":"2023-11-07"},{"lineNumber":15,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-11-07"},{"lineNumber":16,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-07"},{"lineNumber":17,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":18,"author":{"gitId":"ong-wei-hong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-07"},{"lineNumber":19,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":20,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-07"},{"lineNumber":21,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-11-07"},{"lineNumber":22,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.commands.EditLeaveCommand.EditLeaveDescriptor;","lastModifiedDate":"2023-11-07"},{"lineNumber":23,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-11-07"},{"lineNumber":24,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.LeavesBook;","lastModifiedDate":"2023-11-07"},{"lineNumber":25,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-07"},{"lineNumber":26,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-11-07"},{"lineNumber":27,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-11-07"},{"lineNumber":28,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-11-07"},{"lineNumber":29,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Range;","lastModifiedDate":"2023-11-07"},{"lineNumber":30,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Status.StatusType;","lastModifiedDate":"2023-11-07"},{"lineNumber":31,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.testutil.EditLeaveDescriptorBuilder;","lastModifiedDate":"2023-11-07"},{"lineNumber":32,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.testutil.LeaveBuilder;","lastModifiedDate":"2023-11-07"},{"lineNumber":33,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":34,"author":{"gitId":"ong-wei-hong"},"content":"public class EditLeaveCommandTest {","lastModifiedDate":"2023-11-07"},{"lineNumber":35,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":36,"author":{"gitId":"ong-wei-hong"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-07"},{"lineNumber":37,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":38,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-07"},{"lineNumber":39,"author":{"gitId":"ong-wei-hong"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2023-11-07"},{"lineNumber":40,"author":{"gitId":"ong-wei-hong"},"content":"        Leave editedLeave \u003d new LeaveBuilder().build();","lastModifiedDate":"2023-11-07"},{"lineNumber":41,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveDescriptor descriptor \u003d new EditLeaveDescriptorBuilder(editedLeave).build();","lastModifiedDate":"2023-11-07"},{"lineNumber":42,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveCommand editLeaveCommand \u003d new EditLeaveCommand(INDEX_FIRST_LEAVE, descriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":43,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":44,"author":{"gitId":"ong-wei-hong"},"content":"        String expectedMessage \u003d String.format(EditLeaveCommand.MESSAGE_EDIT_LEAVE_SUCCESS,","lastModifiedDate":"2023-11-07"},{"lineNumber":45,"author":{"gitId":"ong-wei-hong"},"content":"                Messages.format(editedLeave));","lastModifiedDate":"2023-11-07"},{"lineNumber":46,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":47,"author":{"gitId":"ong-wei-hong"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2023-11-07"},{"lineNumber":48,"author":{"gitId":"ong-wei-hong"},"content":"                new LeavesBook(model.getLeavesBook()), new UserPrefs());","lastModifiedDate":"2023-11-07"},{"lineNumber":49,"author":{"gitId":"ong-wei-hong"},"content":"        expectedModel.setLeave(model.getFilteredLeaveList().get(0), editedLeave);","lastModifiedDate":"2023-11-07"},{"lineNumber":50,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":51,"author":{"gitId":"ong-wei-hong"},"content":"        assertCommandSuccess(editLeaveCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-11-07"},{"lineNumber":52,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":53,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":54,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-07"},{"lineNumber":55,"author":{"gitId":"ong-wei-hong"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2023-11-07"},{"lineNumber":56,"author":{"gitId":"ong-wei-hong"},"content":"        Index indexLastLeave \u003d Index.fromOneBased(model.getFilteredLeaveList().size());","lastModifiedDate":"2023-11-07"},{"lineNumber":57,"author":{"gitId":"ong-wei-hong"},"content":"        Leave lastLeave \u003d model.getFilteredLeaveList().get(indexLastLeave.getZeroBased());","lastModifiedDate":"2023-11-07"},{"lineNumber":58,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":59,"author":{"gitId":"ong-wei-hong"},"content":"        LeaveBuilder leaveInList \u003d new LeaveBuilder(lastLeave);","lastModifiedDate":"2023-11-07"},{"lineNumber":60,"author":{"gitId":"ong-wei-hong"},"content":"        Leave editedLeave \u003d leaveInList.withTitle(\"NEW LEAVE\").withDescription(\"NEW LEAVE DESCRIPTION\")","lastModifiedDate":"2023-11-07"},{"lineNumber":61,"author":{"gitId":"ong-wei-hong"},"content":"            .withStatus(StatusType.REJECTED).build();","lastModifiedDate":"2023-11-07"},{"lineNumber":62,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":63,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveDescriptor descriptor \u003d new EditLeaveDescriptorBuilder().withTitle(\"NEW LEAVE\")","lastModifiedDate":"2023-11-07"},{"lineNumber":64,"author":{"gitId":"ong-wei-hong"},"content":"            .withDescription(\"NEW LEAVE DESCRIPTION\").withStatus(StatusType.REJECTED).build();","lastModifiedDate":"2023-11-07"},{"lineNumber":65,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveCommand editLeaveCommand \u003d new EditLeaveCommand(indexLastLeave, descriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":66,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":67,"author":{"gitId":"ong-wei-hong"},"content":"        String expectedMessage \u003d String.format(EditLeaveCommand.MESSAGE_EDIT_LEAVE_SUCCESS,","lastModifiedDate":"2023-11-07"},{"lineNumber":68,"author":{"gitId":"ong-wei-hong"},"content":"                Messages.format(editedLeave));","lastModifiedDate":"2023-11-07"},{"lineNumber":69,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":70,"author":{"gitId":"ong-wei-hong"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2023-11-07"},{"lineNumber":71,"author":{"gitId":"ong-wei-hong"},"content":"                new LeavesBook(model.getLeavesBook()), new UserPrefs());","lastModifiedDate":"2023-11-07"},{"lineNumber":72,"author":{"gitId":"ong-wei-hong"},"content":"        expectedModel.setLeave(lastLeave, editedLeave);","lastModifiedDate":"2023-11-07"},{"lineNumber":73,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":74,"author":{"gitId":"ong-wei-hong"},"content":"        assertCommandSuccess(editLeaveCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-11-07"},{"lineNumber":75,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":76,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":77,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-07"},{"lineNumber":78,"author":{"gitId":"ong-wei-hong"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2023-11-07"},{"lineNumber":79,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveCommand editLeaveCommand \u003d new EditLeaveCommand(INDEX_FIRST_LEAVE, new EditLeaveDescriptor());","lastModifiedDate":"2023-11-07"},{"lineNumber":80,"author":{"gitId":"ong-wei-hong"},"content":"        Leave editedLeave \u003d model.getFilteredLeaveList().get(INDEX_FIRST_LEAVE.getZeroBased());","lastModifiedDate":"2023-11-07"},{"lineNumber":81,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":82,"author":{"gitId":"ong-wei-hong"},"content":"        String expectedMessage \u003d String.format(EditLeaveCommand.MESSAGE_EDIT_LEAVE_SUCCESS,","lastModifiedDate":"2023-11-07"},{"lineNumber":83,"author":{"gitId":"ong-wei-hong"},"content":"                Messages.format(editedLeave));","lastModifiedDate":"2023-11-07"},{"lineNumber":84,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":85,"author":{"gitId":"ong-wei-hong"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2023-11-07"},{"lineNumber":86,"author":{"gitId":"ong-wei-hong"},"content":"                new LeavesBook(model.getLeavesBook()), new UserPrefs());","lastModifiedDate":"2023-11-07"},{"lineNumber":87,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":88,"author":{"gitId":"ong-wei-hong"},"content":"        assertCommandSuccess(editLeaveCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-11-07"},{"lineNumber":89,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":90,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":91,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-07"},{"lineNumber":92,"author":{"gitId":"ong-wei-hong"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2023-11-07"},{"lineNumber":93,"author":{"gitId":"ong-wei-hong"},"content":"        showLeaveByPerson(model, model.getFilteredPersonList().get(0));","lastModifiedDate":"2023-11-07"},{"lineNumber":94,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":95,"author":{"gitId":"ong-wei-hong"},"content":"        Leave leaveInFilteredList \u003d model.getFilteredLeaveList().get(INDEX_FIRST_LEAVE.getZeroBased());","lastModifiedDate":"2023-11-07"},{"lineNumber":96,"author":{"gitId":"ong-wei-hong"},"content":"        Leave editedLeave \u003d new LeaveBuilder(leaveInFilteredList).withTitle(\"NEW LEAVE\").build();","lastModifiedDate":"2023-11-07"},{"lineNumber":97,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveCommand editLeaveCommand \u003d new EditLeaveCommand(INDEX_FIRST_LEAVE, new EditLeaveDescriptorBuilder()","lastModifiedDate":"2023-11-07"},{"lineNumber":98,"author":{"gitId":"ong-wei-hong"},"content":"                .withTitle(\"NEW LEAVE\").build());","lastModifiedDate":"2023-11-07"},{"lineNumber":99,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":100,"author":{"gitId":"ong-wei-hong"},"content":"        String expectedMessage \u003d String.format(EditLeaveCommand.MESSAGE_EDIT_LEAVE_SUCCESS,","lastModifiedDate":"2023-11-07"},{"lineNumber":101,"author":{"gitId":"ong-wei-hong"},"content":"                Messages.format(editedLeave));","lastModifiedDate":"2023-11-07"},{"lineNumber":102,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":103,"author":{"gitId":"ong-wei-hong"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2023-11-07"},{"lineNumber":104,"author":{"gitId":"ong-wei-hong"},"content":"                new LeavesBook(model.getLeavesBook()), new UserPrefs());","lastModifiedDate":"2023-11-07"},{"lineNumber":105,"author":{"gitId":"ong-wei-hong"},"content":"        expectedModel.setLeave(model.getFilteredLeaveList().get(0), editedLeave);","lastModifiedDate":"2023-11-07"},{"lineNumber":106,"author":{"gitId":"ong-wei-hong"},"content":"        showLeaveByPerson(expectedModel, expectedModel.getFilteredPersonList().get(0));","lastModifiedDate":"2023-11-07"},{"lineNumber":107,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":108,"author":{"gitId":"ong-wei-hong"},"content":"        assertCommandSuccess(editLeaveCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-11-07"},{"lineNumber":109,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":110,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":111,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-07"},{"lineNumber":112,"author":{"gitId":"ong-wei-hong"},"content":"    public void execute_duplicateLeaveUnfilteredList_failure() {","lastModifiedDate":"2023-11-07"},{"lineNumber":113,"author":{"gitId":"ong-wei-hong"},"content":"        Leave firstLeave \u003d model.getFilteredLeaveList().get(INDEX_FIRST_LEAVE.getZeroBased());","lastModifiedDate":"2023-11-07"},{"lineNumber":114,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveDescriptor descriptor \u003d new EditLeaveDescriptorBuilder(firstLeave).build();","lastModifiedDate":"2023-11-07"},{"lineNumber":115,"author":{"gitId":"ong-wei-hong"},"content":"        // third index has same employee as first index","lastModifiedDate":"2023-11-07"},{"lineNumber":116,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveCommand editLeaveCommand \u003d new EditLeaveCommand(INDEX_THIRD_LEAVE, descriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":117,"author":{"gitId":"ong-wei-hong"},"content":"        assertCommandFailure(editLeaveCommand, model, EditLeaveCommand.MESSAGE_DUPLICATED_LEAVE);","lastModifiedDate":"2023-11-07"},{"lineNumber":118,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":119,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":120,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-07"},{"lineNumber":121,"author":{"gitId":"ong-wei-hong"},"content":"    public void execute_duplicateLeaveFilteredList_failure() {","lastModifiedDate":"2023-11-07"},{"lineNumber":122,"author":{"gitId":"ong-wei-hong"},"content":"        showLeaveByPerson(model, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));","lastModifiedDate":"2023-11-07"},{"lineNumber":123,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":124,"author":{"gitId":"ong-wei-hong"},"content":"        Leave firstLeave \u003d model.getFilteredLeaveList().get(INDEX_FIRST_LEAVE.getZeroBased());","lastModifiedDate":"2023-11-07"},{"lineNumber":125,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveDescriptor descriptor \u003d new EditLeaveDescriptorBuilder(firstLeave).build();","lastModifiedDate":"2023-11-07"},{"lineNumber":126,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveCommand editLeaveCommand \u003d new EditLeaveCommand(INDEX_SECOND_LEAVE, descriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":127,"author":{"gitId":"ong-wei-hong"},"content":"        assertCommandFailure(editLeaveCommand, model, EditLeaveCommand.MESSAGE_DUPLICATED_LEAVE);","lastModifiedDate":"2023-11-07"},{"lineNumber":128,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":129,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":130,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-07"},{"lineNumber":131,"author":{"gitId":"ong-wei-hong"},"content":"    public void execute_invalidLeaveIndexUnfilteredList_failure() {","lastModifiedDate":"2023-11-07"},{"lineNumber":132,"author":{"gitId":"ong-wei-hong"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2023-11-07"},{"lineNumber":133,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveDescriptor descriptor \u003d new EditLeaveDescriptorBuilder().withTitle(\"NEW TITLE\").build();","lastModifiedDate":"2023-11-07"},{"lineNumber":134,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveCommand editLeaveCommand \u003d new EditLeaveCommand(outOfBoundsIndex, descriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":135,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":136,"author":{"gitId":"ong-wei-hong"},"content":"        assertCommandFailure(editLeaveCommand, model, Messages.MESSAGE_INVALID_LEAVE_DISPLAYED_INDEX);","lastModifiedDate":"2023-11-07"},{"lineNumber":137,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":138,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":139,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-07"},{"lineNumber":140,"author":{"gitId":"ong-wei-hong"},"content":"    public void execute_invalidLeaveIndexFilteredList_failure() {","lastModifiedDate":"2023-11-07"},{"lineNumber":141,"author":{"gitId":"ong-wei-hong"},"content":"        showLeaveByPerson(model, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));","lastModifiedDate":"2023-11-07"},{"lineNumber":142,"author":{"gitId":"ong-wei-hong"},"content":"        Index outOfBoundsIndex \u003d INDEX_THIRD_LEAVE;","lastModifiedDate":"2023-11-07"},{"lineNumber":143,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":144,"author":{"gitId":"ong-wei-hong"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getLeavesBook().getLeaveList().size());","lastModifiedDate":"2023-11-07"},{"lineNumber":145,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":146,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveCommand editLeaveCommand \u003d new EditLeaveCommand(outOfBoundsIndex, new EditLeaveDescriptorBuilder()","lastModifiedDate":"2023-11-07"},{"lineNumber":147,"author":{"gitId":"ong-wei-hong"},"content":"                .withTitle(\"NEW TITLE\").build());","lastModifiedDate":"2023-11-07"},{"lineNumber":148,"author":{"gitId":"ong-wei-hong"},"content":"        assertCommandFailure(editLeaveCommand, model, Messages.MESSAGE_INVALID_LEAVE_DISPLAYED_INDEX);","lastModifiedDate":"2023-11-07"},{"lineNumber":149,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":150,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":151,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-07"},{"lineNumber":152,"author":{"gitId":"ong-wei-hong"},"content":"    public void execute_invalidLeaveDateRange_failure() {","lastModifiedDate":"2023-11-07"},{"lineNumber":153,"author":{"gitId":"ong-wei-hong"},"content":"        assertFalse(DEFAULT_END.getDate().isBefore(DEFAULT_START.getDate()));","lastModifiedDate":"2023-11-07"},{"lineNumber":154,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveDescriptor descriptor \u003d new EditLeaveDescriptorBuilder().withStart(DEFAULT_END).withEnd(DEFAULT_START)","lastModifiedDate":"2023-11-07"},{"lineNumber":155,"author":{"gitId":"ong-wei-hong"},"content":"            .build();","lastModifiedDate":"2023-11-07"},{"lineNumber":156,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveCommand editLeaveCommand \u003d new EditLeaveCommand(INDEX_FIRST_LEAVE, descriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":157,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":158,"author":{"gitId":"ong-wei-hong"},"content":"        assertCommandFailure(editLeaveCommand, model, Range.MESSAGE_INVALID_END_DATE);","lastModifiedDate":"2023-11-07"},{"lineNumber":159,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":160,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":161,"author":{"gitId":"ong-wei-hong"},"content":"}","lastModifiedDate":"2023-11-07"}],"authorContributionMap":{"ong-wei-hong":161}},{"path":"src/test/java/seedu/address/logic/commands/EditLeaveDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ong-wei-hong"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-10"},{"lineNumber":2,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":3,"author":{"gitId":"ong-wei-hong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-10"},{"lineNumber":4,"author":{"gitId":"ong-wei-hong"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-10"},{"lineNumber":5,"author":{"gitId":"ong-wei-hong"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-10"},{"lineNumber":6,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_DATE_END;","lastModifiedDate":"2023-11-10"},{"lineNumber":7,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_DATE_START;","lastModifiedDate":"2023-11-10"},{"lineNumber":8,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_DESCRIPTION;","lastModifiedDate":"2023-11-10"},{"lineNumber":9,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_STATUS_APPROVED;","lastModifiedDate":"2023-11-10"},{"lineNumber":10,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_STATUS_REJECTED;","lastModifiedDate":"2023-11-10"},{"lineNumber":11,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_TITLE;","lastModifiedDate":"2023-11-10"},{"lineNumber":12,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":13,"author":{"gitId":"ong-wei-hong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-10"},{"lineNumber":14,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":15,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.commands.EditLeaveCommand.EditLeaveDescriptor;","lastModifiedDate":"2023-11-10"},{"lineNumber":16,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Date;","lastModifiedDate":"2023-11-10"},{"lineNumber":17,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Status;","lastModifiedDate":"2023-11-10"},{"lineNumber":18,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.testutil.EditLeaveDescriptorBuilder;","lastModifiedDate":"2023-11-10"},{"lineNumber":19,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":20,"author":{"gitId":"ong-wei-hong"},"content":"public class EditLeaveDescriptorTest {","lastModifiedDate":"2023-11-10"},{"lineNumber":21,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":22,"author":{"gitId":"ong-wei-hong"},"content":"    private static EditLeaveDescriptor desc \u003d new EditLeaveDescriptorBuilder().withTitle(VALID_LEAVE_TITLE)","lastModifiedDate":"2023-11-10"},{"lineNumber":23,"author":{"gitId":"ong-wei-hong"},"content":"        .withDescription(VALID_LEAVE_DESCRIPTION).withStart(Date.of(VALID_LEAVE_DATE_START))","lastModifiedDate":"2023-11-10"},{"lineNumber":24,"author":{"gitId":"ong-wei-hong"},"content":"        .withEnd(Date.of(VALID_LEAVE_DATE_END)).withStatus(Status.of(VALID_LEAVE_STATUS_APPROVED)).build();","lastModifiedDate":"2023-11-10"},{"lineNumber":25,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":26,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-10"},{"lineNumber":27,"author":{"gitId":"ong-wei-hong"},"content":"    public void equals() {","lastModifiedDate":"2023-11-10"},{"lineNumber":28,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveDescriptor descriptorWithSameValues \u003d new EditLeaveDescriptor(desc);","lastModifiedDate":"2023-11-10"},{"lineNumber":29,"author":{"gitId":"ong-wei-hong"},"content":"        assertTrue(desc.equals(descriptorWithSameValues));","lastModifiedDate":"2023-11-10"},{"lineNumber":30,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":31,"author":{"gitId":"ong-wei-hong"},"content":"        assertTrue(desc.equals(desc));","lastModifiedDate":"2023-11-10"},{"lineNumber":32,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":33,"author":{"gitId":"ong-wei-hong"},"content":"        assertFalse(desc.equals(null));","lastModifiedDate":"2023-11-10"},{"lineNumber":34,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":35,"author":{"gitId":"ong-wei-hong"},"content":"        assertFalse(desc.equals(5));","lastModifiedDate":"2023-11-10"},{"lineNumber":36,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":37,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveDescriptor editDesc \u003d new EditLeaveDescriptorBuilder(desc).withTitle(\"Other title\").build();","lastModifiedDate":"2023-11-10"},{"lineNumber":38,"author":{"gitId":"ong-wei-hong"},"content":"        assertFalse(desc.equals(editDesc));","lastModifiedDate":"2023-11-10"},{"lineNumber":39,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":40,"author":{"gitId":"ong-wei-hong"},"content":"        editDesc \u003d new EditLeaveDescriptorBuilder(desc).withDescription(\"Other description\").build();","lastModifiedDate":"2023-11-10"},{"lineNumber":41,"author":{"gitId":"ong-wei-hong"},"content":"        assertFalse(desc.equals(editDesc));","lastModifiedDate":"2023-11-10"},{"lineNumber":42,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":43,"author":{"gitId":"ong-wei-hong"},"content":"        // check that start date and end date is not the same","lastModifiedDate":"2023-11-10"},{"lineNumber":44,"author":{"gitId":"ong-wei-hong"},"content":"        assertFalse(VALID_LEAVE_DATE_START.equals(VALID_LEAVE_DATE_END));","lastModifiedDate":"2023-11-10"},{"lineNumber":45,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":46,"author":{"gitId":"ong-wei-hong"},"content":"        editDesc \u003d new EditLeaveDescriptorBuilder(desc).withStart(Date.of(VALID_LEAVE_DATE_END)).build();","lastModifiedDate":"2023-11-10"},{"lineNumber":47,"author":{"gitId":"ong-wei-hong"},"content":"        assertFalse(desc.equals(editDesc));","lastModifiedDate":"2023-11-10"},{"lineNumber":48,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":49,"author":{"gitId":"ong-wei-hong"},"content":"        editDesc \u003d new EditLeaveDescriptorBuilder(desc).withEnd(Date.of(VALID_LEAVE_DATE_START)).build();","lastModifiedDate":"2023-11-10"},{"lineNumber":50,"author":{"gitId":"ong-wei-hong"},"content":"        assertFalse(desc.equals(editDesc));","lastModifiedDate":"2023-11-10"},{"lineNumber":51,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":52,"author":{"gitId":"ong-wei-hong"},"content":"        editDesc \u003d new EditLeaveDescriptorBuilder(desc).withStatus(Status.of(VALID_LEAVE_STATUS_REJECTED)).build();","lastModifiedDate":"2023-11-10"},{"lineNumber":53,"author":{"gitId":"ong-wei-hong"},"content":"        assertFalse(desc.equals(editDesc));","lastModifiedDate":"2023-11-10"},{"lineNumber":54,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-10"},{"lineNumber":55,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":56,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-10"},{"lineNumber":57,"author":{"gitId":"ong-wei-hong"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-11-10"},{"lineNumber":58,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveDescriptor editPersonDescriptor \u003d new EditLeaveDescriptor();","lastModifiedDate":"2023-11-10"},{"lineNumber":59,"author":{"gitId":"ong-wei-hong"},"content":"        String expected \u003d EditLeaveDescriptor.class.getCanonicalName() + \"{title\u003d\"","lastModifiedDate":"2023-11-10"},{"lineNumber":60,"author":{"gitId":"ong-wei-hong"},"content":"            + editPersonDescriptor.getTitle().orElse(null) + \", description\u003d\"","lastModifiedDate":"2023-11-10"},{"lineNumber":61,"author":{"gitId":"ong-wei-hong"},"content":"            + editPersonDescriptor.getDescription().orElse(null) + \", start\u003d\"","lastModifiedDate":"2023-11-10"},{"lineNumber":62,"author":{"gitId":"ong-wei-hong"},"content":"            + editPersonDescriptor.getStart().orElse(null) + \", end\u003d\"","lastModifiedDate":"2023-11-10"},{"lineNumber":63,"author":{"gitId":"ong-wei-hong"},"content":"            + editPersonDescriptor.getEnd().orElse(null) + \", status\u003d\"","lastModifiedDate":"2023-11-10"},{"lineNumber":64,"author":{"gitId":"ong-wei-hong"},"content":"            + editPersonDescriptor.getStatus().orElse(null) + \"}\";","lastModifiedDate":"2023-11-10"},{"lineNumber":65,"author":{"gitId":"ong-wei-hong"},"content":"        assertEquals(expected, editPersonDescriptor.toString());","lastModifiedDate":"2023-11-10"},{"lineNumber":66,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-10"},{"lineNumber":67,"author":{"gitId":"ong-wei-hong"},"content":"}","lastModifiedDate":"2023-11-10"}],"authorContributionMap":{"ong-wei-hong":67}},{"path":"src/test/java/seedu/address/logic/commands/ExportContactCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"import seedu.address.testutil.FileAndPathUtil;","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"public class ExportContactCommandTest {","lastModifiedDate":"2023-11-03"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(","lastModifiedDate":"2023-11-03"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"            \"src\", \"test\", \"data\", \"sandbox\", \"ExportContactCommandTest\");","lastModifiedDate":"2023-11-03"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"ong-wei-hong"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"    private Path addToTestDataPathIfNotNull(String filename) {","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"        return FileAndPathUtil.addToTestDataPathIfNotNull(TEST_DATA_FOLDER, filename);","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"    public void execute_missingModel_throwsException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"        Path testFilePath \u003d addToTestDataPathIfNotNull(\"testFile.csv\");","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"        ExportContactCommand command \u003d new ExportContactCommand(testFilePath);","lastModifiedDate":"2023-11-03"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e command.execute(null));","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"    public void execute_validFilePath_success() {","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"        Path testFilePath \u003d addToTestDataPathIfNotNull(\"testFile.csv\");","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"        ExportContactCommand command \u003d new ExportContactCommand(testFilePath);","lastModifiedDate":"2023-11-03"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d String.format(ExportCommand.MESSAGE_SUCCESS, \"Employee\", testFilePath);","lastModifiedDate":"2023-11-03"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"        assertCommandSuccess(command, model, expectedMessage, model);","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"        assertTrue(Files.exists(testFilePath));","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"    public void equals() {","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"        Path sameFilePath \u003d addToTestDataPathIfNotNull(\"sameFile.csv\");","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"        Path diffFilePath \u003d addToTestDataPathIfNotNull(\"diffFile.csv\");","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"        ExportContactCommand exportFirstCommand \u003d new ExportContactCommand(sameFilePath);","lastModifiedDate":"2023-11-03"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"        ExportContactCommand exportSecondCommand \u003d new ExportContactCommand(sameFilePath);","lastModifiedDate":"2023-11-03"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"        ExportContactCommand exportDiffCommand \u003d new ExportContactCommand(diffFilePath);","lastModifiedDate":"2023-11-03"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"        // An export command is equal to itself","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"        assertEquals(exportFirstCommand, exportFirstCommand);","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"        // Two export commands with the same file path are equal","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"        assertEquals(exportFirstCommand, exportSecondCommand);","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"        // An export command is not equal to a different type","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(exportFirstCommand, 1);","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"        // Two export commands with diff file paths are different","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(exportFirstCommand, exportDiffCommand);","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"ryanozx":63,"ong-wei-hong":3}},{"path":"src/test/java/seedu/address/logic/commands/ExportLeaveCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"import seedu.address.testutil.FileAndPathUtil;","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"public class ExportLeaveCommandTest {","lastModifiedDate":"2023-11-03"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(","lastModifiedDate":"2023-11-03"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"            \"src\", \"test\", \"data\", \"sandbox\", \"ExportLeaveCommandTest\");","lastModifiedDate":"2023-11-03"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"ong-wei-hong"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"    private Path addToTestDataPathIfNotNull(String filename) {","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"        return FileAndPathUtil.addToTestDataPathIfNotNull(TEST_DATA_FOLDER, filename);","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"    public void execute_missingModel_throwsException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"        Path testFilePath \u003d addToTestDataPathIfNotNull(\"testFile.csv\");","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"        ExportLeaveCommand command \u003d new ExportLeaveCommand(testFilePath);","lastModifiedDate":"2023-11-03"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e command.execute(null));","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"    public void execute_validFilePath_success() {","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"        Path testFilePath \u003d addToTestDataPathIfNotNull(\"testFile.csv\");","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"        ExportLeaveCommand command \u003d new ExportLeaveCommand(testFilePath);","lastModifiedDate":"2023-11-03"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d String.format(ExportLeaveCommand.MESSAGE_SUCCESS, \"Leaves\", testFilePath);","lastModifiedDate":"2023-11-03"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"        assertCommandSuccess(command, model, expectedMessage, model);","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"        assertTrue(Files.exists(testFilePath));","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"    public void equals() {","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"        Path sameFilePath \u003d addToTestDataPathIfNotNull(\"sameFile.csv\");","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"        Path diffFilePath \u003d addToTestDataPathIfNotNull(\"diffFile.csv\");","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"        ExportLeaveCommand exportFirstCommand \u003d new ExportLeaveCommand(sameFilePath);","lastModifiedDate":"2023-11-03"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"        ExportLeaveCommand exportSecondCommand \u003d new ExportLeaveCommand(sameFilePath);","lastModifiedDate":"2023-11-03"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"        ExportLeaveCommand exportDiffCommand \u003d new ExportLeaveCommand(diffFilePath);","lastModifiedDate":"2023-11-03"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"        // An export command is equal to itself","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"        assertEquals(exportFirstCommand, exportFirstCommand);","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"        // Two export commands with the same file path are equal","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"        assertEquals(exportFirstCommand, exportSecondCommand);","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"        // An export command is not equal to a different type","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(exportFirstCommand, 1);","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"        // Two export commands with diff file paths are different","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(exportFirstCommand, exportDiffCommand);","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"ryanozx":62,"ong-wei-hong":3}},{"path":"src/test/java/seedu/address/logic/commands/FindAllLeaveCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"InfiBeyond"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"InfiBeyond"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"InfiBeyond"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"InfiBeyond"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.LeavesBook;","lastModifiedDate":"2023-11-03"},{"lineNumber":12,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"InfiBeyond"},"content":"/**","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"InfiBeyond"},"content":" * Contains integration tests (interaction with the Model) and unit tests for FindAllLeaveCommand.","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"InfiBeyond"},"content":" */","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"InfiBeyond"},"content":"public class FindAllLeaveCommandTest {","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"InfiBeyond"},"content":"    private Model model;","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"InfiBeyond"},"content":"    private Model expectedModel;","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"InfiBeyond"},"content":"    @BeforeEach","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"InfiBeyond"},"content":"    public void setUp() {","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"InfiBeyond"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"InfiBeyond"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"InfiBeyond"},"content":"    public void execute_findAllLeave_success() {","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"InfiBeyond"},"content":"        FindAllLeaveCommand findAllLeaveCommand \u003d new FindAllLeaveCommand();","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(","lastModifiedDate":"2023-11-03"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"                String.format(FindAllLeaveCommand.MESSAGE_LEAVE_COUNT, model.getFilteredLeaveList().size()));","lastModifiedDate":"2023-11-03"},{"lineNumber":34,"author":{"gitId":"InfiBeyond"},"content":"        assertCommandSuccess(findAllLeaveCommand, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"        // test for empty leaves book","lastModifiedDate":"2023-11-03"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        Model emptyModel \u003d new ModelManager(getTypicalAddressBook(), new LeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-03"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"        Model expectedEmptyModel \u003d new ModelManager(","lastModifiedDate":"2023-11-03"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"                emptyModel.getAddressBook(), emptyModel.getLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-03"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"        CommandResult expectedEmptyCommandResult \u003d new CommandResult(FindAllLeaveCommand.MESSAGE_FIND_LEAVE_NONE);","lastModifiedDate":"2023-11-03"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"        assertCommandSuccess(findAllLeaveCommand, emptyModel, expectedEmptyCommandResult, expectedEmptyModel);","lastModifiedDate":"2023-11-03"},{"lineNumber":42,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":45,"author":{"gitId":"InfiBeyond"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"InfiBeyond"},"content":"        FindAllLeaveCommand findAllLeaveCommand \u003d new FindAllLeaveCommand();","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"InfiBeyond"},"content":"        String expected \u003d FindAllLeaveCommand.class.getCanonicalName() + \"{}\";","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"InfiBeyond"},"content":"        assertEquals(expected, findAllLeaveCommand.toString());","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"InfiBeyond"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"ryanozx":10,"InfiBeyond":40}},{"path":"src/test/java/seedu/address/logic/commands/FindAllTagCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-14"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.testutil.TypicalPersons.MICHAEL;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"import java.util.Collections;","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"import java.util.List;","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.person.TagsContainAllTagsPredicate;","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"/**","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":" * Contains integration tests (interaction with the Model) for {@code FindSomeTagCommand }.","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":" */","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":"public class FindAllTagCommandTest {","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"ong-wei-hong"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"ong-wei-hong"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":33,"author":{"gitId":"jean-cq"},"content":"    public void equals() {","lastModifiedDate":"2023-10-14"},{"lineNumber":34,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e tagList1 \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e tagList2 \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"jean-cq"},"content":"        tagList1.add(new Tag(\"full time\"));","lastModifiedDate":"2023-10-15"},{"lineNumber":37,"author":{"gitId":"jean-cq"},"content":"        tagList1.add(new Tag(\"remote\"));","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"        tagList2.add(new Tag(\"part time\"));","lastModifiedDate":"2023-10-15"},{"lineNumber":39,"author":{"gitId":"jean-cq"},"content":"        tagList2.add(new Tag(\"remote\"));","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"jean-cq"},"content":"        TagsContainAllTagsPredicate firstPredicate \u003d","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"jean-cq"},"content":"                new TagsContainAllTagsPredicate(tagList1);","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"jean-cq"},"content":"        TagsContainAllTagsPredicate secondPredicate \u003d","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"jean-cq"},"content":"                new TagsContainAllTagsPredicate(tagList2);","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"jean-cq"},"content":"        FindAllTagCommand findFirstCommand \u003d new FindAllTagCommand(firstPredicate);","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"jean-cq"},"content":"        FindAllTagCommand findSecondCommand \u003d new FindAllTagCommand(secondPredicate);","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":48,"author":{"gitId":"jean-cq"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"jean-cq"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2023-10-14"},{"lineNumber":50,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":51,"author":{"gitId":"jean-cq"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-14"},{"lineNumber":52,"author":{"gitId":"jean-cq"},"content":"        FindAllTagCommand findFirstCommandCopy \u003d new FindAllTagCommand(firstPredicate);","lastModifiedDate":"2023-10-14"},{"lineNumber":53,"author":{"gitId":"jean-cq"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2023-10-14"},{"lineNumber":54,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":55,"author":{"gitId":"jean-cq"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"jean-cq"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"jean-cq"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"jean-cq"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2023-10-14"},{"lineNumber":60,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":61,"author":{"gitId":"jean-cq"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":62,"author":{"gitId":"jean-cq"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2023-10-14"},{"lineNumber":63,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":64,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":65,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":66,"author":{"gitId":"jean-cq"},"content":"    public void execute_noTagsFound() {","lastModifiedDate":"2023-10-14"},{"lineNumber":67,"author":{"gitId":"jean-cq"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2023-10-14"},{"lineNumber":68,"author":{"gitId":"jean-cq"},"content":"        TagsContainAllTagsPredicate predicate \u003d preparePredicate(new String[]{\"test for tag\"});","lastModifiedDate":"2023-10-15"},{"lineNumber":69,"author":{"gitId":"jean-cq"},"content":"        FindAllTagCommand command \u003d new FindAllTagCommand(predicate);","lastModifiedDate":"2023-10-14"},{"lineNumber":70,"author":{"gitId":"jean-cq"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2023-10-14"},{"lineNumber":71,"author":{"gitId":"jean-cq"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-14"},{"lineNumber":72,"author":{"gitId":"jean-cq"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2023-10-14"},{"lineNumber":73,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":74,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":75,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":76,"author":{"gitId":"jean-cq"},"content":"    public void execute_twoKeywords_onePersonFound() {","lastModifiedDate":"2023-10-14"},{"lineNumber":77,"author":{"gitId":"jean-cq"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2023-10-14"},{"lineNumber":78,"author":{"gitId":"jean-cq"},"content":"        TagsContainAllTagsPredicate predicate \u003d preparePredicate(new String[]{\"remote\", \"full time\"});","lastModifiedDate":"2023-10-15"},{"lineNumber":79,"author":{"gitId":"jean-cq"},"content":"        FindAllTagCommand command \u003d new FindAllTagCommand(predicate);","lastModifiedDate":"2023-10-14"},{"lineNumber":80,"author":{"gitId":"jean-cq"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2023-10-14"},{"lineNumber":81,"author":{"gitId":"jean-cq"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-14"},{"lineNumber":82,"author":{"gitId":"jean-cq"},"content":"        assertEquals(Arrays.asList(MICHAEL), model.getFilteredPersonList());","lastModifiedDate":"2023-10-14"},{"lineNumber":83,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":84,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":85,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":86,"author":{"gitId":"jean-cq"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-14"},{"lineNumber":87,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-14"},{"lineNumber":88,"author":{"gitId":"jean-cq"},"content":"        tagList.add(new Tag(\"full time\"));","lastModifiedDate":"2023-10-15"},{"lineNumber":89,"author":{"gitId":"jean-cq"},"content":"        TagsContainAllTagsPredicate predicate \u003d new TagsContainAllTagsPredicate(tagList);","lastModifiedDate":"2023-10-14"},{"lineNumber":90,"author":{"gitId":"jean-cq"},"content":"        FindAllTagCommand findAllTagCommand \u003d new FindAllTagCommand(predicate);","lastModifiedDate":"2023-10-14"},{"lineNumber":91,"author":{"gitId":"jean-cq"},"content":"        String expected \u003d FindAllTagCommand.class.getCanonicalName() + \"{predicate\u003d\" + predicate + \"}\";","lastModifiedDate":"2023-10-14"},{"lineNumber":92,"author":{"gitId":"jean-cq"},"content":"        assertEquals(expected, findAllTagCommand.toString());","lastModifiedDate":"2023-10-14"},{"lineNumber":93,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":94,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":95,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":96,"author":{"gitId":"jean-cq"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2023-10-14"},{"lineNumber":97,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":98,"author":{"gitId":"jean-cq"},"content":"    private TagsContainAllTagsPredicate preparePredicate(String[] args) {","lastModifiedDate":"2023-10-15"},{"lineNumber":99,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-14"},{"lineNumber":100,"author":{"gitId":"jean-cq"},"content":"        for (String keyword : args) {","lastModifiedDate":"2023-10-15"},{"lineNumber":101,"author":{"gitId":"jean-cq"},"content":"            Tag tag \u003d new Tag(keyword);","lastModifiedDate":"2023-10-14"},{"lineNumber":102,"author":{"gitId":"jean-cq"},"content":"            tagList.add(tag);","lastModifiedDate":"2023-10-14"},{"lineNumber":103,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":104,"author":{"gitId":"jean-cq"},"content":"        return new TagsContainAllTagsPredicate(tagList);","lastModifiedDate":"2023-10-14"},{"lineNumber":105,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":106,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-10-14"}],"authorContributionMap":{"jean-cq":103,"ong-wei-hong":3}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2023-07-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;","lastModifiedDate":"2017-07-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"ong-wei-hong"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"ong-wei-hong"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"keyword\"));","lastModifiedDate":"2019-02-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        FindCommand findCommand \u003d new FindCommand(predicate);","lastModifiedDate":"2019-02-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String expected \u003d FindCommand.class.getCanonicalName() + \"{predicate\u003d\" + predicate + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertEquals(expected, findCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"-":89,"ong-wei-hong":3}},{"path":"src/test/java/seedu/address/logic/commands/FindLeaveByPeriodCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.Messages.MESSAGE_LEAVES_LISTED_OVERVIEW;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalLeaves.ALICE_LEAVE;","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalLeaves.BENSON_LEAVE;","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"import java.util.Collections;","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Date;","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.LeaveInPeriodPredicate;","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Range;","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"public class FindLeaveByPeriodCommandTest {","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"    public void equals() {","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"        Date firstDate \u003d Date.of(\"2023-10-30\");","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"        Date secondDate \u003d Date.of(\"2023-10-31\");","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate firstPredicate \u003d new LeaveInPeriodPredicate(","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"                Range.createNonNullRange(firstDate, firstDate));","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate secondPredicate \u003d new LeaveInPeriodPredicate(","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"                Range.createNonNullRange(secondDate, secondDate));","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"        FindLeaveByPeriodCommand firstCommand \u003d new FindLeaveByPeriodCommand(firstPredicate);","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"        FindLeaveByPeriodCommand secondCommand \u003d new FindLeaveByPeriodCommand(secondPredicate);","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"        // same command","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"        assertEquals(firstCommand, firstCommand);","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"        // diff types","lastModifiedDate":"2023-11-02"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"        assertFalse(firstCommand.equals(\"1\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"        // same predicate","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"        FindLeaveByPeriodCommand firstCommandCopy \u003d new FindLeaveByPeriodCommand(firstPredicate);","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"        assertEquals(firstCommand, firstCommandCopy);","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"        // diff predicate","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(firstCommand, secondCommand);","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"    public void execute_noLeavesFound() {","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d String.format(MESSAGE_LEAVES_LISTED_OVERVIEW, 0);","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate predicate \u003d new LeaveInPeriodPredicate(","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"                Range.createNullableRange(null, Date.of(\"2019-12-31\"))","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"        );","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"        FindLeaveByPeriodCommand command \u003d new FindLeaveByPeriodCommand(predicate);","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"        expectedModel.updateFilteredLeaveList(predicate);","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredLeaveList());","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"    public void execute_twoPeopleFound() {","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d String.format(MESSAGE_LEAVES_LISTED_OVERVIEW, 2);","lastModifiedDate":"2023-11-02"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate predicate \u003d new LeaveInPeriodPredicate(","lastModifiedDate":"2023-11-02"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"                Range.createNullableRange(Date.of(\"2020-01-01\"), Date.of(\"2020-01-02\"))","lastModifiedDate":"2023-11-02"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"        );","lastModifiedDate":"2023-11-02"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"        FindLeaveByPeriodCommand command \u003d new FindLeaveByPeriodCommand(predicate);","lastModifiedDate":"2023-11-02"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"        expectedModel.updateFilteredLeaveList(predicate);","lastModifiedDate":"2023-11-02"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-11-02"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"        assertEquals(Arrays.asList(ALICE_LEAVE, BENSON_LEAVE), model.getFilteredLeaveList());","lastModifiedDate":"2023-11-02"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":78,"author":{"gitId":"ryanozx"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-11-02"},{"lineNumber":79,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate predicate \u003d new LeaveInPeriodPredicate(","lastModifiedDate":"2023-11-02"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"                Range.createNullableRange(Date.of(\"2020-01-01\"), Date.of(\"2020-01-02\"))","lastModifiedDate":"2023-11-02"},{"lineNumber":81,"author":{"gitId":"ryanozx"},"content":"        );","lastModifiedDate":"2023-11-02"},{"lineNumber":82,"author":{"gitId":"ryanozx"},"content":"        FindLeaveByPeriodCommand command \u003d new FindLeaveByPeriodCommand(predicate);","lastModifiedDate":"2023-11-02"},{"lineNumber":83,"author":{"gitId":"ryanozx"},"content":"        String expected \u003d FindLeaveByPeriodCommand.class.getCanonicalName() + \"{predicate\u003d\" + predicate + \"}\";","lastModifiedDate":"2023-11-02"},{"lineNumber":84,"author":{"gitId":"ryanozx"},"content":"        assertEquals(expected, command.toString());","lastModifiedDate":"2023-11-02"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":86,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"ryanozx":86}},{"path":"src/test/java/seedu/address/logic/commands/FindLeaveByStatusCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.Messages.MESSAGE_LEAVES_LISTED_OVERVIEW;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalLeaves.ALICE_LEAVE;","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalLeaves.ALICE_LEAVE_2;","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalLeaves.BENSON_LEAVE;","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"import java.util.Collections;","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.LeaveHasStatusPredicate;","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Status;","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Status.StatusType;","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"public class FindLeaveByStatusCommandTest {","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"    public void equals() {","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"        Status approvedStatus \u003d Status.of(StatusType.APPROVED);","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"        Status pendingStatus \u003d Status.of(StatusType.PENDING);","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"        Status rejectedStatus \u003d Status.of(StatusType.REJECTED);","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"        LeaveHasStatusPredicate approvedPredicate \u003d new LeaveHasStatusPredicate(approvedStatus);","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        LeaveHasStatusPredicate pendingPredicate \u003d new LeaveHasStatusPredicate(pendingStatus);","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"        LeaveHasStatusPredicate rejectedPredicate \u003d new LeaveHasStatusPredicate(rejectedStatus);","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"        FindLeaveByStatusCommand approvedCommand \u003d new FindLeaveByStatusCommand(approvedPredicate);","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"        FindLeaveByStatusCommand pendingCommand \u003d new FindLeaveByStatusCommand(pendingPredicate);","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"        FindLeaveByStatusCommand rejectedCommand \u003d new FindLeaveByStatusCommand(rejectedPredicate);","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"        // same command","lastModifiedDate":"2023-11-02"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"        assertEquals(approvedCommand, approvedCommand);","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"        // diff types","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"        assertFalse(approvedCommand.equals(\"1\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"        // same predicate","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"        FindLeaveByStatusCommand approvedCommandCopy \u003d new FindLeaveByStatusCommand(","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"                approvedPredicate);","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"        assertEquals(approvedCommand, approvedCommandCopy);","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"        // diff predicate","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(approvedCommand, pendingCommand);","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(approvedCommand, rejectedCommand);","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(pendingCommand, rejectedCommand);","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"    public void execute_noLeavesFound() {","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d String.format(MESSAGE_LEAVES_LISTED_OVERVIEW, 0);","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"        LeaveHasStatusPredicate predicate \u003d new LeaveHasStatusPredicate(Status.of(StatusType.APPROVED));","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"        FindLeaveByStatusCommand command \u003d new FindLeaveByStatusCommand(predicate);","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"        expectedModel.updateFilteredLeaveList(predicate);","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-11-02"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredLeaveList());","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"    public void execute_threePeopleFound() {","lastModifiedDate":"2023-11-02"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d String.format(MESSAGE_LEAVES_LISTED_OVERVIEW, 3);","lastModifiedDate":"2023-11-02"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"        LeaveHasStatusPredicate predicate \u003d new LeaveHasStatusPredicate(Status.of(StatusType.PENDING));","lastModifiedDate":"2023-11-02"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"        FindLeaveByStatusCommand command \u003d new FindLeaveByStatusCommand(predicate);","lastModifiedDate":"2023-11-02"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"        expectedModel.updateFilteredLeaveList(predicate);","lastModifiedDate":"2023-11-02"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-11-02"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"        assertEquals(Arrays.asList(ALICE_LEAVE, BENSON_LEAVE, ALICE_LEAVE_2), model.getFilteredLeaveList());","lastModifiedDate":"2023-11-02"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":78,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":79,"author":{"gitId":"ryanozx"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-11-02"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"        LeaveHasStatusPredicate predicate \u003d new LeaveHasStatusPredicate(Status.of(StatusType.PENDING));","lastModifiedDate":"2023-11-02"},{"lineNumber":81,"author":{"gitId":"ryanozx"},"content":"        FindLeaveByStatusCommand command \u003d new FindLeaveByStatusCommand(predicate);","lastModifiedDate":"2023-11-02"},{"lineNumber":82,"author":{"gitId":"ryanozx"},"content":"        String expected \u003d FindLeaveByStatusCommand.class.getCanonicalName() + \"{predicate\u003d\" + predicate + \"}\";","lastModifiedDate":"2023-11-02"},{"lineNumber":83,"author":{"gitId":"ryanozx"},"content":"        assertEquals(expected, command.toString());","lastModifiedDate":"2023-11-02"},{"lineNumber":84,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"ryanozx":85}},{"path":"src/test/java/seedu/address/logic/commands/FindLeaveCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"InfiBeyond"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"InfiBeyond"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"InfiBeyond"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"InfiBeyond"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.logic.Messages.MESSAGE_LEAVES_LISTED_OVERVIEW;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"InfiBeyond"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.leave.LeaveContainsPersonPredicate;","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.testutil.TestUtil;","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"InfiBeyond"},"content":"public class FindLeaveCommandTest {","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"InfiBeyond"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"InfiBeyond"},"content":"    public void execute_findLeave_success() {","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"InfiBeyond"},"content":"        Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"InfiBeyond"},"content":"        FindLeaveCommand findLeaveCommand \u003d new FindLeaveCommand(index);","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"InfiBeyond"},"content":"        Person employee \u003d TestUtil.getPerson(model, index);","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"InfiBeyond"},"content":"        LeaveContainsPersonPredicate predicate \u003d new LeaveContainsPersonPredicate(employee);","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"InfiBeyond"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"InfiBeyond"},"content":"        expectedModel.updateFilteredLeaveList(predicate);","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"InfiBeyond"},"content":"        String expectedMessage \u003d String.format(MESSAGE_LEAVES_LISTED_OVERVIEW,","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"InfiBeyond"},"content":"                expectedModel.getFilteredLeaveList().size());","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"InfiBeyond"},"content":"        assertCommandSuccess(findLeaveCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"InfiBeyond"},"content":"    public void execute_findNoLeave_success() {","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"InfiBeyond"},"content":"        Index index \u003d Index.fromOneBased(3);","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"InfiBeyond"},"content":"        FindLeaveCommand findLeaveCommand \u003d new FindLeaveCommand(index);","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"InfiBeyond"},"content":"        Person employee \u003d TestUtil.getPerson(model, index);","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"InfiBeyond"},"content":"        LeaveContainsPersonPredicate predicate \u003d new LeaveContainsPersonPredicate(employee);","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"InfiBeyond"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"InfiBeyond"},"content":"        expectedModel.updateFilteredLeaveList(predicate);","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"InfiBeyond"},"content":"        String expectedMessage \u003d String.format(MESSAGE_LEAVES_LISTED_OVERVIEW,","lastModifiedDate":"2023-11-02"},{"lineNumber":45,"author":{"gitId":"InfiBeyond"},"content":"                expectedModel.getFilteredLeaveList().size());","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"InfiBeyond"},"content":"        assertCommandSuccess(findLeaveCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"InfiBeyond"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"InfiBeyond"},"content":"        Index index \u003d Index.fromOneBased(3);","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"InfiBeyond"},"content":"        FindLeaveCommand findLeaveCommand \u003d new FindLeaveCommand(index);","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"InfiBeyond"},"content":"        String expectedMessage \u003d FindLeaveCommand.class.getCanonicalName() + \"{index\u003d\" + index + \"}\";","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"InfiBeyond"},"content":"        assertEquals(expectedMessage, findLeaveCommand.toString());","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"InfiBeyond"},"content":"    public void equals() {","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"InfiBeyond"},"content":"        Index indexOne \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"InfiBeyond"},"content":"        Index indexTwo \u003d Index.fromOneBased(2);","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"InfiBeyond"},"content":"        FindLeaveCommand firstCommand \u003d new FindLeaveCommand(indexOne);","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"InfiBeyond"},"content":"        FindLeaveCommand secondCommand \u003d new FindLeaveCommand(indexTwo);","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":65,"author":{"gitId":"InfiBeyond"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"InfiBeyond"},"content":"        assertTrue(firstCommand.equals(firstCommand));","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":68,"author":{"gitId":"InfiBeyond"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-11-02"},{"lineNumber":69,"author":{"gitId":"InfiBeyond"},"content":"        FindLeaveCommand firstCommandCopy \u003d new FindLeaveCommand(indexOne);","lastModifiedDate":"2023-11-02"},{"lineNumber":70,"author":{"gitId":"InfiBeyond"},"content":"        assertTrue(firstCommand.equals(firstCommandCopy));","lastModifiedDate":"2023-11-02"},{"lineNumber":71,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":72,"author":{"gitId":"InfiBeyond"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-11-02"},{"lineNumber":73,"author":{"gitId":"InfiBeyond"},"content":"        assertFalse(firstCommand.equals(1));","lastModifiedDate":"2023-11-02"},{"lineNumber":74,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":75,"author":{"gitId":"InfiBeyond"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-11-02"},{"lineNumber":76,"author":{"gitId":"InfiBeyond"},"content":"        assertFalse(firstCommand.equals(null));","lastModifiedDate":"2023-11-02"},{"lineNumber":77,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":78,"author":{"gitId":"InfiBeyond"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2023-11-02"},{"lineNumber":79,"author":{"gitId":"InfiBeyond"},"content":"        assertFalse(firstCommand.equals(secondCommand));","lastModifiedDate":"2023-11-02"},{"lineNumber":80,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":81,"author":{"gitId":"InfiBeyond"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"InfiBeyond":81}},{"path":"src/test/java/seedu/address/logic/commands/FindSomeTagCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.testutil.TypicalPersons.DAVID;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.testutil.TypicalPersons.MICHAEL;","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"import java.util.Collections;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":"import java.util.List;","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.person.TagsContainSomeTagsPredicate;","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":" * Contains integration tests (interaction with the Model) for {@code FindSomeTagCommand }.","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"jean-cq"},"content":"public class FindSomeTagCommandTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"ong-wei-hong"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"ong-wei-hong"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"jean-cq"},"content":"    public void equals() {","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e tagList1 \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e tagList2 \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"jean-cq"},"content":"        tagList1.add(new Tag(\"full time\"));","lastModifiedDate":"2023-10-15"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"        tagList1.add(new Tag(\"remote\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"jean-cq"},"content":"        tagList2.add(new Tag(\"part time\"));","lastModifiedDate":"2023-10-15"},{"lineNumber":40,"author":{"gitId":"jean-cq"},"content":"        tagList2.add(new Tag(\"remote\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"jean-cq"},"content":"        TagsContainSomeTagsPredicate firstPredicate \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"jean-cq"},"content":"                new TagsContainSomeTagsPredicate(tagList1);","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"jean-cq"},"content":"        TagsContainSomeTagsPredicate secondPredicate \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"jean-cq"},"content":"                new TagsContainSomeTagsPredicate(tagList2);","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"jean-cq"},"content":"        FindSomeTagCommand findFirstCommand \u003d new FindSomeTagCommand(firstPredicate);","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"jean-cq"},"content":"        FindSomeTagCommand findSecondCommand \u003d new FindSomeTagCommand(secondPredicate);","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"jean-cq"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"jean-cq"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"jean-cq"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"jean-cq"},"content":"        FindSomeTagCommand findFirstCommandCopy \u003d new FindSomeTagCommand(firstPredicate);","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"jean-cq"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"jean-cq"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"jean-cq"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"jean-cq"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"jean-cq"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"jean-cq"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"jean-cq"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"jean-cq"},"content":"    public void execute_noTagsFound() {","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"jean-cq"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"jean-cq"},"content":"        TagsContainSomeTagsPredicate predicate \u003d preparePredicate(new String[]{\"tagForTest\"});","lastModifiedDate":"2023-10-15"},{"lineNumber":70,"author":{"gitId":"jean-cq"},"content":"        FindSomeTagCommand command \u003d new FindSomeTagCommand(predicate);","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"jean-cq"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"jean-cq"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"jean-cq"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"jean-cq"},"content":"    public void execute_oneKeywords_multiplePersonFound() {","lastModifiedDate":"2023-10-13"},{"lineNumber":78,"author":{"gitId":"jean-cq"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"jean-cq"},"content":"        TagsContainSomeTagsPredicate predicate \u003d preparePredicate(new String[]{\"remote\"});","lastModifiedDate":"2023-10-15"},{"lineNumber":80,"author":{"gitId":"jean-cq"},"content":"        FindSomeTagCommand command \u003d new FindSomeTagCommand(predicate);","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"jean-cq"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2023-10-13"},{"lineNumber":82,"author":{"gitId":"jean-cq"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-13"},{"lineNumber":83,"author":{"gitId":"jean-cq"},"content":"        assertEquals(Arrays.asList(MICHAEL, DAVID), model.getFilteredPersonList());","lastModifiedDate":"2023-10-13"},{"lineNumber":84,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":85,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":86,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":87,"author":{"gitId":"jean-cq"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-13"},{"lineNumber":88,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-13"},{"lineNumber":89,"author":{"gitId":"jean-cq"},"content":"        tagList.add(new Tag(\"full time\"));","lastModifiedDate":"2023-10-15"},{"lineNumber":90,"author":{"gitId":"jean-cq"},"content":"        TagsContainSomeTagsPredicate predicate \u003d new TagsContainSomeTagsPredicate(tagList);","lastModifiedDate":"2023-10-13"},{"lineNumber":91,"author":{"gitId":"jean-cq"},"content":"        FindSomeTagCommand findSomeTagCommand \u003d new FindSomeTagCommand(predicate);","lastModifiedDate":"2023-10-13"},{"lineNumber":92,"author":{"gitId":"jean-cq"},"content":"        String expected \u003d FindSomeTagCommand.class.getCanonicalName() + \"{predicate\u003d\" + predicate + \"}\";","lastModifiedDate":"2023-10-13"},{"lineNumber":93,"author":{"gitId":"jean-cq"},"content":"        assertEquals(expected, findSomeTagCommand.toString());","lastModifiedDate":"2023-10-13"},{"lineNumber":94,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":95,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":96,"author":{"gitId":"jean-cq"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":97,"author":{"gitId":"jean-cq"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2023-10-13"},{"lineNumber":98,"author":{"gitId":"jean-cq"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":99,"author":{"gitId":"jean-cq"},"content":"    private TagsContainSomeTagsPredicate preparePredicate(String[] args) {","lastModifiedDate":"2023-10-15"},{"lineNumber":100,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-13"},{"lineNumber":101,"author":{"gitId":"jean-cq"},"content":"        for (String keyword : args) {","lastModifiedDate":"2023-10-15"},{"lineNumber":102,"author":{"gitId":"jean-cq"},"content":"            Tag tag \u003d new Tag(keyword);","lastModifiedDate":"2023-10-13"},{"lineNumber":103,"author":{"gitId":"jean-cq"},"content":"            tagList.add(tag);","lastModifiedDate":"2023-10-13"},{"lineNumber":104,"author":{"gitId":"jean-cq"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":105,"author":{"gitId":"jean-cq"},"content":"        return new TagsContainSomeTagsPredicate(tagList);","lastModifiedDate":"2023-10-13"},{"lineNumber":106,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":107,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"jean-cq":104,"ong-wei-hong":3}},{"path":"src/test/java/seedu/address/logic/commands/ImportContactCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.FileAndPathUtil.MockSuccessfulFileDialogHandler;","lastModifiedDate":"2023-11-03"},{"lineNumber":6,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import java.io.File;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"import javafx.stage.FileChooser.ExtensionFilter;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.controllers.FileDialogHandler;","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.LeavesBook;","lastModifiedDate":"2023-11-12"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"import seedu.address.testutil.FileAndPathUtil;","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"public class ImportContactCommandTest {","lastModifiedDate":"2023-11-03"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"CsvFiles\");","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"    private static final Path INVALID_ADDRESS_BOOK_PATH \u003d Paths.get(\"src\", \"test\", \"data\",","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"            \"CsvAddressBookStorageTest\", \"validAndInvalidPersonAddressBook.csv\");","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new LeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-12"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"    private Path addToTestDataPathIfNotNull(String filename) {","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"        return FileAndPathUtil.addToTestDataPathIfNotNull(TEST_DATA_FOLDER, filename);","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"    public void execute_fileChosen_success() {","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"        Path filepath \u003d addToTestDataPathIfNotNull(\"typicalPersonsAddressBook.csv\");","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"        ImportContactCommand command \u003d new ImportContactCommand(","lastModifiedDate":"2023-11-03"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"                new MockSuccessfulFileDialogHandler(filepath.toString()));","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        Model actualModel \u003d new ModelManager();","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d String.format(ImportContactCommand.MESSAGE_SUCCESS, filepath.getFileName());","lastModifiedDate":"2023-11-03"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"        assertCommandSuccess(command, actualModel, expectedMessage, model);","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"    public void execute_fileNotChosen_failed() {","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"        ImportContactCommand command \u003d new ImportContactCommand(new MockUnsuccessfulFileDialogHandler());","lastModifiedDate":"2023-11-03"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d ImportContactCommand.MESSAGE_NO_FILE_SELECTED;","lastModifiedDate":"2023-11-03"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"        assertCommandSuccess(command, model, expectedMessage, model);","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"    private static class MockUnsuccessfulFileDialogHandler implements FileDialogHandler {","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"        public Optional\u003cFile\u003e openFile(String title, ExtensionFilter... extensions) {","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"            return Optional.empty();","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"    public void execute_invalidAddressBook_throwsException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"        ImportContactCommand command \u003d new ImportContactCommand(","lastModifiedDate":"2023-11-03"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"                new MockSuccessfulFileDialogHandler(INVALID_ADDRESS_BOOK_PATH.toString()));","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"        Model actualModel \u003d new ModelManager();","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d String.format(ImportContactCommand.MESSAGE_FAILED,","lastModifiedDate":"2023-11-03"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"                INVALID_ADDRESS_BOOK_PATH.getFileName());","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"        assertCommandFailure(command, actualModel, expectedMessage);","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"    public void execute_emptyAddressBook_throwsException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"        Path filePath \u003d addToTestDataPathIfNotNull(\"emptyAddressBook.csv\");","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"        ImportContactCommand command \u003d new ImportContactCommand(","lastModifiedDate":"2023-11-03"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"                new MockSuccessfulFileDialogHandler(filePath.toString()));","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"        Model actualModel \u003d new ModelManager();","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d String.format(ImportContactCommand.MESSAGE_EMPTY_ADDRESS_BOOK,","lastModifiedDate":"2023-11-03"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"                filePath.getFileName());","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"        assertCommandFailure(command, actualModel, expectedMessage);","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"ryanozx":75,"ong-wei-hong":1}},{"path":"src/test/java/seedu/address/logic/commands/ImportLeaveCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.FileAndPathUtil.MockSuccessfulFileDialogHandler;","lastModifiedDate":"2023-11-03"},{"lineNumber":6,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import java.io.File;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"import javafx.stage.FileChooser;","lastModifiedDate":"2023-11-03"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.controllers.FileDialogHandler;","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.LeavesBook;","lastModifiedDate":"2023-11-03"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"import seedu.address.testutil.FileAndPathUtil;","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"public class ImportLeaveCommandTest {","lastModifiedDate":"2023-11-03"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"CsvFiles\");","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"    private static final Path INVALID_ADDRESS_BOOK_PATH \u003d Paths.get(\"src\", \"test\", \"data\",","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"            \"CsvLeavesBookStorageTest\", \"validAndInvalidLeavesBook.csv\");","lastModifiedDate":"2023-11-03"},{"lineNumber":28,"author":{"gitId":"ong-wei-hong"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"    private Path addToTestDataPathIfNotNull(String filename) {","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"        return FileAndPathUtil.addToTestDataPathIfNotNull(TEST_DATA_FOLDER, filename);","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"    public void execute_fileChosen_success() {","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"        Path filepath \u003d addToTestDataPathIfNotNull(\"typicalLeavesBook.csv\");","lastModifiedDate":"2023-11-03"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"        ImportLeaveCommand command \u003d new ImportLeaveCommand(","lastModifiedDate":"2023-11-03"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"                new MockSuccessfulFileDialogHandler(filepath.toString()));","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"        Model actualModel \u003d new ModelManager(getTypicalAddressBook(), new LeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-03"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d String.format(ImportLeaveCommand.MESSAGE_SUCCESS, filepath.getFileName());","lastModifiedDate":"2023-11-03"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"        assertCommandSuccess(command, actualModel, expectedMessage, model);","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"    public void execute_fileNotChosen_failed() {","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"        ImportContactCommand command \u003d new ImportContactCommand(new MockUnsuccessfulFileDialogHandler());","lastModifiedDate":"2023-11-03"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d ImportContactCommand.MESSAGE_NO_FILE_SELECTED;","lastModifiedDate":"2023-11-03"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"        assertCommandSuccess(command, model, expectedMessage, model);","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"    private static class MockUnsuccessfulFileDialogHandler implements FileDialogHandler {","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"        public Optional\u003cFile\u003e openFile(String title, FileChooser.ExtensionFilter... extensions) {","lastModifiedDate":"2023-11-03"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"            return Optional.empty();","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"    public void execute_invalidLeavesBook_throwsException() {","lastModifiedDate":"2023-11-03"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"        ImportLeaveCommand command \u003d new ImportLeaveCommand(","lastModifiedDate":"2023-11-03"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"                new MockSuccessfulFileDialogHandler(INVALID_ADDRESS_BOOK_PATH.toString()));","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"        Model actualModel \u003d new ModelManager(getTypicalAddressBook(), new LeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-03"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d String.format(ImportLeaveCommand.MESSAGE_FAILED,","lastModifiedDate":"2023-11-03"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"                INVALID_ADDRESS_BOOK_PATH.getFileName());","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"        assertCommandFailure(command, actualModel, expectedMessage);","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"    public void execute_emptyAddressBook_throwsException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"        Path filePath \u003d addToTestDataPathIfNotNull(\"emptyLeavesBook.csv\");","lastModifiedDate":"2023-11-03"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"        ImportLeaveCommand command \u003d new ImportLeaveCommand(","lastModifiedDate":"2023-11-03"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"                new MockSuccessfulFileDialogHandler(filePath.toString()));","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"        Model actualModel \u003d new ModelManager(getTypicalAddressBook(), new LeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-03"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d String.format(ImportLeaveCommand.MESSAGE_EMPTY_LEAVES_BOOK,","lastModifiedDate":"2023-11-03"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"                filePath.getFileName());","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"        assertCommandFailure(command, actualModel, expectedMessage);","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"ryanozx":74,"ong-wei-hong":3}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2018-01-31"},{"lineNumber":6,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ListCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"ong-wei-hong"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"ong-wei-hong"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"-":37,"ong-wei-hong":3}},{"path":"src/test/java/seedu/address/logic/commands/RejectLeaveCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"InfiBeyond"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-31"},{"lineNumber":2,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":3,"author":{"gitId":"InfiBeyond"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-31"},{"lineNumber":4,"author":{"gitId":"InfiBeyond"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-31"},{"lineNumber":5,"author":{"gitId":"InfiBeyond"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-31"},{"lineNumber":6,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-31"},{"lineNumber":8,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-10-31"},{"lineNumber":9,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-10-31"},{"lineNumber":10,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":11,"author":{"gitId":"InfiBeyond"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-31"},{"lineNumber":12,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":13,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-31"},{"lineNumber":14,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-31"},{"lineNumber":15,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.LeavesBook;","lastModifiedDate":"2023-10-31"},{"lineNumber":16,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-31"},{"lineNumber":17,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-10-31"},{"lineNumber":18,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-31"},{"lineNumber":19,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-10-31"},{"lineNumber":20,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.leave.Status.StatusType;","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.testutil.LeaveBuilder;","lastModifiedDate":"2023-10-31"},{"lineNumber":22,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.testutil.TestUtil;","lastModifiedDate":"2023-10-31"},{"lineNumber":23,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":24,"author":{"gitId":"InfiBeyond"},"content":"public class RejectLeaveCommandTest {","lastModifiedDate":"2023-10-31"},{"lineNumber":25,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":26,"author":{"gitId":"InfiBeyond"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-10-31"},{"lineNumber":27,"author":{"gitId":"InfiBeyond"},"content":"    private final StatusType rejectedStatus \u003d StatusType.REJECTED;","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":29,"author":{"gitId":"InfiBeyond"},"content":"    public void execute_rejectLeave_success() {","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"InfiBeyond"},"content":"        Index indexLastLeave \u003d TestUtil.getLastLeaveIndex(model);","lastModifiedDate":"2023-10-31"},{"lineNumber":31,"author":{"gitId":"InfiBeyond"},"content":"        Leave originalLeave \u003d TestUtil.getLeave(model, indexLastLeave);","lastModifiedDate":"2023-10-31"},{"lineNumber":32,"author":{"gitId":"InfiBeyond"},"content":"        LeaveBuilder leaveInList \u003d new LeaveBuilder(originalLeave);","lastModifiedDate":"2023-10-31"},{"lineNumber":33,"author":{"gitId":"InfiBeyond"},"content":"        Leave rejectedLeave \u003d leaveInList.withStatus(rejectedStatus).build();","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"InfiBeyond"},"content":"        RejectLeaveCommand rejectLeaveCommand \u003d new RejectLeaveCommand(indexLastLeave);","lastModifiedDate":"2023-10-31"},{"lineNumber":35,"author":{"gitId":"InfiBeyond"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2023-10-31"},{"lineNumber":36,"author":{"gitId":"InfiBeyond"},"content":"                RejectLeaveCommand.MESSAGE_REJECT_LEAVE_SUCCESS,","lastModifiedDate":"2023-10-31"},{"lineNumber":37,"author":{"gitId":"InfiBeyond"},"content":"                Messages.format(rejectedLeave));","lastModifiedDate":"2023-10-31"},{"lineNumber":38,"author":{"gitId":"InfiBeyond"},"content":"        Model expectedModel \u003d new ModelManager(","lastModifiedDate":"2023-10-31"},{"lineNumber":39,"author":{"gitId":"InfiBeyond"},"content":"                getTypicalAddressBook(),","lastModifiedDate":"2023-10-31"},{"lineNumber":40,"author":{"gitId":"InfiBeyond"},"content":"                new LeavesBook(model.getLeavesBook()), new UserPrefs());","lastModifiedDate":"2023-10-31"},{"lineNumber":41,"author":{"gitId":"InfiBeyond"},"content":"        expectedModel.setLeave(originalLeave, rejectedLeave);","lastModifiedDate":"2023-10-31"},{"lineNumber":42,"author":{"gitId":"InfiBeyond"},"content":"        assertCommandSuccess(rejectLeaveCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-31"},{"lineNumber":43,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":44,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":45,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":46,"author":{"gitId":"InfiBeyond"},"content":"    public void execute_duplicateRejectLeave_failure() {","lastModifiedDate":"2023-10-31"},{"lineNumber":47,"author":{"gitId":"InfiBeyond"},"content":"        Index indexLastLeave \u003d TestUtil.getLastLeaveIndex(model);","lastModifiedDate":"2023-10-31"},{"lineNumber":48,"author":{"gitId":"InfiBeyond"},"content":"        Leave originalLeave \u003d TestUtil.getLeave(model, indexLastLeave);","lastModifiedDate":"2023-10-31"},{"lineNumber":49,"author":{"gitId":"InfiBeyond"},"content":"        LeaveBuilder leaveInList \u003d new LeaveBuilder(originalLeave);","lastModifiedDate":"2023-10-31"},{"lineNumber":50,"author":{"gitId":"InfiBeyond"},"content":"        Leave rejectedLeave \u003d leaveInList.withStatus(rejectedStatus).build();","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"InfiBeyond"},"content":"        model.setLeave(originalLeave, rejectedLeave);","lastModifiedDate":"2023-10-31"},{"lineNumber":52,"author":{"gitId":"InfiBeyond"},"content":"        RejectLeaveCommand rejectLeaveCommand \u003d new RejectLeaveCommand(indexLastLeave);","lastModifiedDate":"2023-10-31"},{"lineNumber":53,"author":{"gitId":"InfiBeyond"},"content":"        String expectedMessage \u003d String.format(","lastModifiedDate":"2023-10-31"},{"lineNumber":54,"author":{"gitId":"InfiBeyond"},"content":"                RejectLeaveCommand.MESSAGE_DUPLICATE_LEAVE_REJECT,","lastModifiedDate":"2023-10-31"},{"lineNumber":55,"author":{"gitId":"InfiBeyond"},"content":"                Messages.format(rejectedLeave));","lastModifiedDate":"2023-10-31"},{"lineNumber":56,"author":{"gitId":"InfiBeyond"},"content":"        assertCommandFailure(rejectLeaveCommand, model, expectedMessage);","lastModifiedDate":"2023-10-31"},{"lineNumber":57,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":58,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":59,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":60,"author":{"gitId":"InfiBeyond"},"content":"    public void execute_invalidIndex_failure() {","lastModifiedDate":"2023-10-31"},{"lineNumber":61,"author":{"gitId":"InfiBeyond"},"content":"        Index outOfBoundIndex \u003d TestUtil.getInvalidLeaveIndex(model);","lastModifiedDate":"2023-10-31"},{"lineNumber":62,"author":{"gitId":"InfiBeyond"},"content":"        RejectLeaveCommand rejectLeaveCommand \u003d new RejectLeaveCommand(outOfBoundIndex);","lastModifiedDate":"2023-10-31"},{"lineNumber":63,"author":{"gitId":"InfiBeyond"},"content":"        String expectedMessage \u003d Messages.MESSAGE_INVALID_LEAVE_INDEX;","lastModifiedDate":"2023-10-31"},{"lineNumber":64,"author":{"gitId":"InfiBeyond"},"content":"        assertCommandFailure(rejectLeaveCommand, model, expectedMessage);","lastModifiedDate":"2023-10-31"},{"lineNumber":65,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":66,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":67,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":68,"author":{"gitId":"InfiBeyond"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-31"},{"lineNumber":69,"author":{"gitId":"InfiBeyond"},"content":"        Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-10-31"},{"lineNumber":70,"author":{"gitId":"InfiBeyond"},"content":"        RejectLeaveCommand rejectLeaveCommand \u003d new RejectLeaveCommand(index);","lastModifiedDate":"2023-10-31"},{"lineNumber":71,"author":{"gitId":"InfiBeyond"},"content":"        String expected \u003d RejectLeaveCommand.class.getCanonicalName() + \"{index\u003d\" + index + \"}\";","lastModifiedDate":"2023-10-31"},{"lineNumber":72,"author":{"gitId":"InfiBeyond"},"content":"        assertEquals(expected, rejectLeaveCommand.toString());","lastModifiedDate":"2023-10-31"},{"lineNumber":73,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":74,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":75,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":76,"author":{"gitId":"InfiBeyond"},"content":"    public void equalsMethod() {","lastModifiedDate":"2023-10-31"},{"lineNumber":77,"author":{"gitId":"InfiBeyond"},"content":"        final Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-10-31"},{"lineNumber":78,"author":{"gitId":"InfiBeyond"},"content":"        final RejectLeaveCommand standardCommand \u003d new RejectLeaveCommand(index);","lastModifiedDate":"2023-10-31"},{"lineNumber":79,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":80,"author":{"gitId":"InfiBeyond"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-31"},{"lineNumber":81,"author":{"gitId":"InfiBeyond"},"content":"        RejectLeaveCommand commandWithSameValues \u003d new RejectLeaveCommand(index);","lastModifiedDate":"2023-10-31"},{"lineNumber":82,"author":{"gitId":"InfiBeyond"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2023-10-31"},{"lineNumber":83,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":84,"author":{"gitId":"InfiBeyond"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-31"},{"lineNumber":85,"author":{"gitId":"InfiBeyond"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2023-10-31"},{"lineNumber":86,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":87,"author":{"gitId":"InfiBeyond"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-31"},{"lineNumber":88,"author":{"gitId":"InfiBeyond"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2023-10-31"},{"lineNumber":89,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":90,"author":{"gitId":"InfiBeyond"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-31"},{"lineNumber":91,"author":{"gitId":"InfiBeyond"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2023-10-31"},{"lineNumber":92,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":93,"author":{"gitId":"InfiBeyond"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2023-10-31"},{"lineNumber":94,"author":{"gitId":"InfiBeyond"},"content":"        Index differentIndex \u003d Index.fromOneBased(2);","lastModifiedDate":"2023-10-31"},{"lineNumber":95,"author":{"gitId":"InfiBeyond"},"content":"        assertFalse(standardCommand.equals(new RejectLeaveCommand(differentIndex)));","lastModifiedDate":"2023-10-31"},{"lineNumber":96,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":97,"author":{"gitId":"InfiBeyond"},"content":"}","lastModifiedDate":"2023-10-31"}],"authorContributionMap":{"InfiBeyond":97}},{"path":"src/test/java/seedu/address/logic/commands/ViewTagCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"InfiBeyond"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":3,"author":{"gitId":"InfiBeyond"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.logic.commands.ViewTagCommand.MESSAGE_VIEW_TAG_NONE;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"InfiBeyond"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-17"},{"lineNumber":14,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":15,"author":{"gitId":"InfiBeyond"},"content":"public class ViewTagCommandTest {","lastModifiedDate":"2023-10-16"},{"lineNumber":16,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-10-16"},{"lineNumber":17,"author":{"gitId":"InfiBeyond"},"content":"    public void execute_viewTagNone_success() {","lastModifiedDate":"2023-10-17"},{"lineNumber":18,"author":{"gitId":"InfiBeyond"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2023-10-17"},{"lineNumber":19,"author":{"gitId":"InfiBeyond"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2023-10-17"},{"lineNumber":20,"author":{"gitId":"InfiBeyond"},"content":"        assertCommandSuccess(new ViewTagCommand(), model, MESSAGE_VIEW_TAG_NONE, expectedModel);","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":22,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":23,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-10-17"},{"lineNumber":24,"author":{"gitId":"InfiBeyond"},"content":"    public void execute_viewTag_success() {","lastModifiedDate":"2023-10-17"},{"lineNumber":25,"author":{"gitId":"ong-wei-hong"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"ong-wei-hong"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"InfiBeyond"},"content":"        ViewTagCommand viewTagCommand \u003d new ViewTagCommand();","lastModifiedDate":"2023-10-17"},{"lineNumber":28,"author":{"gitId":"InfiBeyond"},"content":"        CommandResult expectedCommandResult \u003d viewTagCommand.execute(model);","lastModifiedDate":"2023-10-17"},{"lineNumber":29,"author":{"gitId":"InfiBeyond"},"content":"        assertCommandSuccess(viewTagCommand, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2023-10-17"},{"lineNumber":30,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":31,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":32,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-10-16"},{"lineNumber":33,"author":{"gitId":"InfiBeyond"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-16"},{"lineNumber":34,"author":{"gitId":"InfiBeyond"},"content":"        ViewTagCommand viewTagCommand \u003d new ViewTagCommand();","lastModifiedDate":"2023-10-16"},{"lineNumber":35,"author":{"gitId":"InfiBeyond"},"content":"        String expected \u003d ViewTagCommand.class.getCanonicalName() + \"{}\";","lastModifiedDate":"2023-10-16"},{"lineNumber":36,"author":{"gitId":"InfiBeyond"},"content":"        assertEquals(expected, viewTagCommand.toString());","lastModifiedDate":"2023-10-16"},{"lineNumber":37,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":38,"author":{"gitId":"InfiBeyond"},"content":"}","lastModifiedDate":"2023-10-16"}],"authorContributionMap":{"InfiBeyond":34,"ong-wei-hong":4}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2017-12-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2017-12-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ADDRESS;","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_EMAIL;","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_NAME;","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_PHONE;","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-07-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-07-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-06-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-06-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2018-07-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2018-07-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-07-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2023-07-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2023-07-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPersonMultipleTags));","lastModifiedDate":"2023-07-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void parse_repeatedNonTagValue_failure() {","lastModifiedDate":"2023-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String validExpectedPersonString \u003d NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND;","lastModifiedDate":"2023-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // multiple names","lastModifiedDate":"2023-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":75,"author":{"gitId":"jean-cq"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PERSON_NAME));","lastModifiedDate":"2023-11-01"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // multiple phones","lastModifiedDate":"2023-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PHONE_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":79,"author":{"gitId":"jean-cq"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PERSON_PHONE));","lastModifiedDate":"2023-11-01"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // multiple emails","lastModifiedDate":"2023-07-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, EMAIL_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":83,"author":{"gitId":"jean-cq"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PERSON_EMAIL));","lastModifiedDate":"2023-11-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // multiple addresses","lastModifiedDate":"2023-07-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, ADDRESS_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":87,"author":{"gitId":"jean-cq"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PERSON_ADDRESS));","lastModifiedDate":"2023-11-01"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // multiple fields repeated","lastModifiedDate":"2023-07-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2023-07-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                validExpectedPersonString + PHONE_DESC_AMY + EMAIL_DESC_AMY + NAME_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2023-07-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                        + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":93,"author":{"gitId":"jean-cq"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PERSON_NAME, PREFIX_PERSON_ADDRESS,","lastModifiedDate":"2023-11-01"},{"lineNumber":94,"author":{"gitId":"jean-cq"},"content":"                        PREFIX_PERSON_EMAIL, PREFIX_PERSON_PHONE));","lastModifiedDate":"2023-11-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // invalid value followed by valid value","lastModifiedDate":"2023-07-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2023-07-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":100,"author":{"gitId":"jean-cq"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PERSON_NAME));","lastModifiedDate":"2023-11-01"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2023-07-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_EMAIL_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":104,"author":{"gitId":"jean-cq"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PERSON_EMAIL));","lastModifiedDate":"2023-11-01"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2023-07-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_PHONE_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":108,"author":{"gitId":"jean-cq"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PERSON_PHONE));","lastModifiedDate":"2023-11-01"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2023-07-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_ADDRESS_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":112,"author":{"gitId":"jean-cq"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PERSON_ADDRESS));","lastModifiedDate":"2023-11-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // valid value followed by invalid value","lastModifiedDate":"2023-07-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2023-07-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_NAME_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":118,"author":{"gitId":"jean-cq"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PERSON_NAME));","lastModifiedDate":"2023-11-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2023-07-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_EMAIL_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":122,"author":{"gitId":"jean-cq"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PERSON_EMAIL));","lastModifiedDate":"2023-11-01"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2023-07-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_PHONE_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":126,"author":{"gitId":"jean-cq"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PERSON_PHONE));","lastModifiedDate":"2023-11-01"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2023-07-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_ADDRESS_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":130,"author":{"gitId":"jean-cq"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PERSON_ADDRESS));","lastModifiedDate":"2023-11-01"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-07-25"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,","lastModifiedDate":"2017-12-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // missing address prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2017-06-15"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2017-12-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2017-06-15"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,","lastModifiedDate":"2017-12-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2017-12-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-12-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"jean-cq":18,"-":179}},{"path":"src/test/java/seedu/address/logic/parser/AddLeaveCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-11-09"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-11-09"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.Messages.MESSAGE_NO_STATUS_PREFIX;","lastModifiedDate":"2023-11-09"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LEAVE_DATE_END_DESC;","lastModifiedDate":"2023-11-09"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LEAVE_DATE_START_DESC;","lastModifiedDate":"2023-11-09"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LEAVE_DESCRIPTION_DESC;","lastModifiedDate":"2023-11-09"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LEAVE_EARLY_DATE_END_DESC;","lastModifiedDate":"2023-11-09"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LEAVE_LATE_DATE_START_DESC;","lastModifiedDate":"2023-11-09"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LEAVE_TITLE_DESC;","lastModifiedDate":"2023-11-09"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_DATE_END;","lastModifiedDate":"2023-11-09"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_DATE_START;","lastModifiedDate":"2023-11-09"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_DESCRIPTION;","lastModifiedDate":"2023-11-09"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_DESCRIPTION_DESC;","lastModifiedDate":"2023-11-09"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_END_DATE_DESC;","lastModifiedDate":"2023-11-09"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_START_DATE_DESC;","lastModifiedDate":"2023-11-09"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_TITLE;","lastModifiedDate":"2023-11-09"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_TITLE_DESC;","lastModifiedDate":"2023-11-09"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_DATE_END;","lastModifiedDate":"2023-11-09"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_DATE_START;","lastModifiedDate":"2023-11-09"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_DESCRIPTION;","lastModifiedDate":"2023-11-09"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_STATUS;","lastModifiedDate":"2023-11-09"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_TITLE;","lastModifiedDate":"2023-11-09"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-11-09"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-11-09"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_LEAVE;","lastModifiedDate":"2023-11-09"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_LEAVE;","lastModifiedDate":"2023-11-09"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":29,"author":{"gitId":"jean-cq"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-09"},{"lineNumber":30,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":31,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-11-09"},{"lineNumber":32,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.commands.AddLeaveCommand;","lastModifiedDate":"2023-11-09"},{"lineNumber":33,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.leave.Date;","lastModifiedDate":"2023-11-09"},{"lineNumber":34,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.leave.Description;","lastModifiedDate":"2023-11-09"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-11-09"},{"lineNumber":36,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.leave.Range;","lastModifiedDate":"2023-11-09"},{"lineNumber":37,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.leave.Title;","lastModifiedDate":"2023-11-09"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"import seedu.address.testutil.LeaveBuilder;","lastModifiedDate":"2023-11-09"},{"lineNumber":39,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":40,"author":{"gitId":"jean-cq"},"content":"public class AddLeaveCommandParserTest {","lastModifiedDate":"2023-11-09"},{"lineNumber":41,"author":{"gitId":"jean-cq"},"content":"    private AddLeaveCommandParser parser \u003d new AddLeaveCommandParser();","lastModifiedDate":"2023-11-09"},{"lineNumber":42,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":43,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-11-09"},{"lineNumber":44,"author":{"gitId":"jean-cq"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2023-11-09"},{"lineNumber":45,"author":{"gitId":"jean-cq"},"content":"        // without description","lastModifiedDate":"2023-11-09"},{"lineNumber":46,"author":{"gitId":"jean-cq"},"content":"        Leave expectedLeave \u003d new LeaveBuilder().withTitle(VALID_LEAVE_TITLE)","lastModifiedDate":"2023-11-09"},{"lineNumber":47,"author":{"gitId":"jean-cq"},"content":"                .withStart(Date.of(VALID_LEAVE_DATE_START)).withEnd(Date.of(VALID_LEAVE_DATE_END))","lastModifiedDate":"2023-11-09"},{"lineNumber":48,"author":{"gitId":"jean-cq"},"content":"                .withDescription(\"NONE\").build();","lastModifiedDate":"2023-11-09"},{"lineNumber":49,"author":{"gitId":"jean-cq"},"content":"        Range dateRange \u003d Range.createNonNullRange(expectedLeave.getStart(), expectedLeave.getEnd());","lastModifiedDate":"2023-11-09"},{"lineNumber":50,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":51,"author":{"gitId":"jean-cq"},"content":"        assertParseSuccess(parser, \" 1\" + VALID_LEAVE_TITLE_DESC + VALID_LEAVE_START_DATE_DESC","lastModifiedDate":"2023-11-09"},{"lineNumber":52,"author":{"gitId":"jean-cq"},"content":"                + VALID_LEAVE_END_DATE_DESC, new AddLeaveCommand(INDEX_FIRST_LEAVE, expectedLeave.getTitle(),","lastModifiedDate":"2023-11-09"},{"lineNumber":53,"author":{"gitId":"jean-cq"},"content":"                dateRange, expectedLeave.getDescription()));","lastModifiedDate":"2023-11-09"},{"lineNumber":54,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":55,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":56,"author":{"gitId":"jean-cq"},"content":"        // with description","lastModifiedDate":"2023-11-09"},{"lineNumber":57,"author":{"gitId":"jean-cq"},"content":"        Leave expectedLeaveWithDescription \u003d new LeaveBuilder().withTitle(VALID_LEAVE_TITLE)","lastModifiedDate":"2023-11-09"},{"lineNumber":58,"author":{"gitId":"jean-cq"},"content":"                .withStart(Date.of(VALID_LEAVE_DATE_START)).withEnd(Date.of(VALID_LEAVE_DATE_END))","lastModifiedDate":"2023-11-09"},{"lineNumber":59,"author":{"gitId":"jean-cq"},"content":"                .withDescription(VALID_LEAVE_DESCRIPTION).build();","lastModifiedDate":"2023-11-09"},{"lineNumber":60,"author":{"gitId":"jean-cq"},"content":"        Range dateRangeWithDescription \u003d Range.createNonNullRange(","lastModifiedDate":"2023-11-09"},{"lineNumber":61,"author":{"gitId":"jean-cq"},"content":"                expectedLeaveWithDescription.getStart(), expectedLeaveWithDescription.getEnd());","lastModifiedDate":"2023-11-09"},{"lineNumber":62,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":63,"author":{"gitId":"jean-cq"},"content":"        assertParseSuccess(parser, \" 2\" + VALID_LEAVE_TITLE_DESC + VALID_LEAVE_START_DATE_DESC","lastModifiedDate":"2023-11-09"},{"lineNumber":64,"author":{"gitId":"jean-cq"},"content":"                + VALID_LEAVE_END_DATE_DESC + VALID_LEAVE_DESCRIPTION_DESC,","lastModifiedDate":"2023-11-09"},{"lineNumber":65,"author":{"gitId":"jean-cq"},"content":"                new AddLeaveCommand(INDEX_SECOND_LEAVE, expectedLeaveWithDescription.getTitle(),","lastModifiedDate":"2023-11-09"},{"lineNumber":66,"author":{"gitId":"jean-cq"},"content":"                        dateRangeWithDescription , expectedLeaveWithDescription.getDescription()));","lastModifiedDate":"2023-11-09"},{"lineNumber":67,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-11-09"},{"lineNumber":68,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":69,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-11-09"},{"lineNumber":70,"author":{"gitId":"jean-cq"},"content":"    public void parse_extraStatusPrefix_failure() {","lastModifiedDate":"2023-11-09"},{"lineNumber":71,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":72,"author":{"gitId":"jean-cq"},"content":"        String expectedMessageWithoutDescription \u003d String.format(MESSAGE_NO_STATUS_PREFIX,","lastModifiedDate":"2023-11-09"},{"lineNumber":73,"author":{"gitId":"jean-cq"},"content":"                AddLeaveCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-11-09"},{"lineNumber":74,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, \" 3\" + VALID_LEAVE_TITLE_DESC + VALID_LEAVE_START_DATE_DESC","lastModifiedDate":"2023-11-09"},{"lineNumber":75,"author":{"gitId":"jean-cq"},"content":"                        + VALID_LEAVE_END_DATE_DESC + VALID_LEAVE_DESCRIPTION_DESC + \" \" + PREFIX_LEAVE_STATUS,","lastModifiedDate":"2023-11-09"},{"lineNumber":76,"author":{"gitId":"jean-cq"},"content":"                expectedMessageWithoutDescription);","lastModifiedDate":"2023-11-09"},{"lineNumber":77,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-11-09"},{"lineNumber":78,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":79,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-11-09"},{"lineNumber":80,"author":{"gitId":"jean-cq"},"content":"    public void parse_duplicatedFieldPrefix_failure() {","lastModifiedDate":"2023-11-09"},{"lineNumber":81,"author":{"gitId":"jean-cq"},"content":"        String validExpectedLeaveString \u003d \" 3\" + VALID_LEAVE_TITLE_DESC + VALID_LEAVE_START_DATE_DESC","lastModifiedDate":"2023-11-09"},{"lineNumber":82,"author":{"gitId":"jean-cq"},"content":"                + VALID_LEAVE_END_DATE_DESC + VALID_LEAVE_DESCRIPTION_DESC;","lastModifiedDate":"2023-11-09"},{"lineNumber":83,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":84,"author":{"gitId":"jean-cq"},"content":"        // multiple title","lastModifiedDate":"2023-11-09"},{"lineNumber":85,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, VALID_LEAVE_TITLE_DESC + validExpectedLeaveString,","lastModifiedDate":"2023-11-09"},{"lineNumber":86,"author":{"gitId":"jean-cq"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_LEAVE_TITLE));","lastModifiedDate":"2023-11-09"},{"lineNumber":87,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":88,"author":{"gitId":"jean-cq"},"content":"        // multiple startDate","lastModifiedDate":"2023-11-09"},{"lineNumber":89,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, VALID_LEAVE_START_DATE_DESC + validExpectedLeaveString,","lastModifiedDate":"2023-11-09"},{"lineNumber":90,"author":{"gitId":"jean-cq"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_LEAVE_DATE_START));","lastModifiedDate":"2023-11-09"},{"lineNumber":91,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":92,"author":{"gitId":"jean-cq"},"content":"        // multiple endDate","lastModifiedDate":"2023-11-09"},{"lineNumber":93,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, VALID_LEAVE_END_DATE_DESC + validExpectedLeaveString,","lastModifiedDate":"2023-11-09"},{"lineNumber":94,"author":{"gitId":"jean-cq"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_LEAVE_DATE_END));","lastModifiedDate":"2023-11-09"},{"lineNumber":95,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":96,"author":{"gitId":"jean-cq"},"content":"        // multiple description","lastModifiedDate":"2023-11-09"},{"lineNumber":97,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, VALID_LEAVE_DESCRIPTION_DESC + validExpectedLeaveString,","lastModifiedDate":"2023-11-09"},{"lineNumber":98,"author":{"gitId":"jean-cq"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_LEAVE_DESCRIPTION));","lastModifiedDate":"2023-11-09"},{"lineNumber":99,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":100,"author":{"gitId":"jean-cq"},"content":"        // multiple fields repeated","lastModifiedDate":"2023-11-09"},{"lineNumber":101,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, VALID_LEAVE_TITLE_DESC + VALID_LEAVE_START_DATE_DESC","lastModifiedDate":"2023-11-09"},{"lineNumber":102,"author":{"gitId":"jean-cq"},"content":"                        + VALID_LEAVE_END_DATE_DESC + VALID_LEAVE_DESCRIPTION_DESC + validExpectedLeaveString,","lastModifiedDate":"2023-11-09"},{"lineNumber":103,"author":{"gitId":"jean-cq"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_LEAVE_TITLE, PREFIX_LEAVE_DATE_START,","lastModifiedDate":"2023-11-09"},{"lineNumber":104,"author":{"gitId":"jean-cq"},"content":"                        PREFIX_LEAVE_DATE_END, PREFIX_LEAVE_DESCRIPTION));","lastModifiedDate":"2023-11-09"},{"lineNumber":105,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":106,"author":{"gitId":"jean-cq"},"content":"        // invalid value followed by valid value","lastModifiedDate":"2023-11-09"},{"lineNumber":107,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":108,"author":{"gitId":"jean-cq"},"content":"        // invalid title","lastModifiedDate":"2023-11-09"},{"lineNumber":109,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, validExpectedLeaveString + INVALID_LEAVE_TITLE_DESC,","lastModifiedDate":"2023-11-09"},{"lineNumber":110,"author":{"gitId":"jean-cq"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_LEAVE_TITLE));","lastModifiedDate":"2023-11-09"},{"lineNumber":111,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":112,"author":{"gitId":"jean-cq"},"content":"        // invalid startDate","lastModifiedDate":"2023-11-09"},{"lineNumber":113,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, validExpectedLeaveString + INVALID_LEAVE_DATE_START_DESC,","lastModifiedDate":"2023-11-09"},{"lineNumber":114,"author":{"gitId":"jean-cq"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_LEAVE_DATE_START));","lastModifiedDate":"2023-11-09"},{"lineNumber":115,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":116,"author":{"gitId":"jean-cq"},"content":"        // invalid endDate","lastModifiedDate":"2023-11-09"},{"lineNumber":117,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, validExpectedLeaveString + INVALID_LEAVE_DATE_END_DESC,","lastModifiedDate":"2023-11-09"},{"lineNumber":118,"author":{"gitId":"jean-cq"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_LEAVE_DATE_END));","lastModifiedDate":"2023-11-09"},{"lineNumber":119,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":120,"author":{"gitId":"jean-cq"},"content":"        // invalid description","lastModifiedDate":"2023-11-09"},{"lineNumber":121,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, validExpectedLeaveString + INVALID_LEAVE_DESCRIPTION_DESC,","lastModifiedDate":"2023-11-09"},{"lineNumber":122,"author":{"gitId":"jean-cq"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_LEAVE_DESCRIPTION));","lastModifiedDate":"2023-11-09"},{"lineNumber":123,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":124,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-11-09"},{"lineNumber":125,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":126,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-11-09"},{"lineNumber":127,"author":{"gitId":"jean-cq"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2023-11-09"},{"lineNumber":128,"author":{"gitId":"jean-cq"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLeaveCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-11-09"},{"lineNumber":129,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":130,"author":{"gitId":"jean-cq"},"content":"        // missing index","lastModifiedDate":"2023-11-09"},{"lineNumber":131,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, VALID_LEAVE_TITLE_DESC + VALID_LEAVE_START_DATE_DESC","lastModifiedDate":"2023-11-09"},{"lineNumber":132,"author":{"gitId":"jean-cq"},"content":"                        + VALID_LEAVE_END_DATE_DESC + VALID_LEAVE_DESCRIPTION_DESC, expectedMessage);","lastModifiedDate":"2023-11-09"},{"lineNumber":133,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":134,"author":{"gitId":"jean-cq"},"content":"        // missing title prefix","lastModifiedDate":"2023-11-09"},{"lineNumber":135,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, \" 3\" + VALID_LEAVE_START_DATE_DESC","lastModifiedDate":"2023-11-09"},{"lineNumber":136,"author":{"gitId":"jean-cq"},"content":"                        + VALID_LEAVE_END_DATE_DESC + VALID_LEAVE_DESCRIPTION_DESC, expectedMessage);","lastModifiedDate":"2023-11-09"},{"lineNumber":137,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":138,"author":{"gitId":"jean-cq"},"content":"        // missing startDate prefix","lastModifiedDate":"2023-11-09"},{"lineNumber":139,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, \" 3\" + VALID_LEAVE_TITLE_DESC","lastModifiedDate":"2023-11-09"},{"lineNumber":140,"author":{"gitId":"jean-cq"},"content":"                        + VALID_LEAVE_END_DATE_DESC + VALID_LEAVE_DESCRIPTION_DESC, expectedMessage);","lastModifiedDate":"2023-11-09"},{"lineNumber":141,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":142,"author":{"gitId":"jean-cq"},"content":"        // missing endDate prefix","lastModifiedDate":"2023-11-09"},{"lineNumber":143,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, \" 3\" + VALID_LEAVE_TITLE_DESC + VALID_LEAVE_START_DATE_DESC","lastModifiedDate":"2023-11-09"},{"lineNumber":144,"author":{"gitId":"jean-cq"},"content":"                        + VALID_LEAVE_DESCRIPTION_DESC, expectedMessage);","lastModifiedDate":"2023-11-09"},{"lineNumber":145,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":146,"author":{"gitId":"jean-cq"},"content":"        // all prefixes missing","lastModifiedDate":"2023-11-09"},{"lineNumber":147,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, \" 3\" + VALID_LEAVE_TITLE + VALID_LEAVE_DATE_START","lastModifiedDate":"2023-11-09"},{"lineNumber":148,"author":{"gitId":"jean-cq"},"content":"                                + VALID_LEAVE_DATE_END + VALID_LEAVE_DESCRIPTION, expectedMessage);","lastModifiedDate":"2023-11-09"},{"lineNumber":149,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-11-09"},{"lineNumber":150,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":151,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-11-09"},{"lineNumber":152,"author":{"gitId":"jean-cq"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2023-11-09"},{"lineNumber":153,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":154,"author":{"gitId":"jean-cq"},"content":"        // invalid title","lastModifiedDate":"2023-11-09"},{"lineNumber":155,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, \" 3\" + INVALID_LEAVE_TITLE_DESC + VALID_LEAVE_START_DATE_DESC","lastModifiedDate":"2023-11-09"},{"lineNumber":156,"author":{"gitId":"jean-cq"},"content":"                + VALID_LEAVE_END_DATE_DESC + VALID_LEAVE_DESCRIPTION_DESC, Title.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-09"},{"lineNumber":157,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":158,"author":{"gitId":"jean-cq"},"content":"        // invalid startDate","lastModifiedDate":"2023-11-09"},{"lineNumber":159,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, \" 3\" + VALID_LEAVE_TITLE_DESC + INVALID_LEAVE_DATE_START_DESC","lastModifiedDate":"2023-11-09"},{"lineNumber":160,"author":{"gitId":"jean-cq"},"content":"                + VALID_LEAVE_END_DATE_DESC + VALID_LEAVE_DESCRIPTION_DESC, Date.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-09"},{"lineNumber":161,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":162,"author":{"gitId":"jean-cq"},"content":"        // invalid endDate","lastModifiedDate":"2023-11-09"},{"lineNumber":163,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, \" 3\" + VALID_LEAVE_TITLE_DESC + VALID_LEAVE_START_DATE_DESC","lastModifiedDate":"2023-11-09"},{"lineNumber":164,"author":{"gitId":"jean-cq"},"content":"                + INVALID_LEAVE_DATE_END_DESC + VALID_LEAVE_DESCRIPTION_DESC, Date.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-09"},{"lineNumber":165,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":166,"author":{"gitId":"jean-cq"},"content":"        // invalid endDate which is earlier than the startDate","lastModifiedDate":"2023-11-09"},{"lineNumber":167,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, \" 3\" + VALID_LEAVE_TITLE_DESC + INVALID_LEAVE_LATE_DATE_START_DESC","lastModifiedDate":"2023-11-09"},{"lineNumber":168,"author":{"gitId":"jean-cq"},"content":"                + INVALID_LEAVE_EARLY_DATE_END_DESC + VALID_LEAVE_DESCRIPTION_DESC, Range.MESSAGE_INVALID_END_DATE);","lastModifiedDate":"2023-11-09"},{"lineNumber":169,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":170,"author":{"gitId":"jean-cq"},"content":"        // invalid description","lastModifiedDate":"2023-11-09"},{"lineNumber":171,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, \" 3\" + VALID_LEAVE_TITLE_DESC + VALID_LEAVE_START_DATE_DESC","lastModifiedDate":"2023-11-09"},{"lineNumber":172,"author":{"gitId":"jean-cq"},"content":"                + VALID_LEAVE_END_DATE_DESC + INVALID_LEAVE_DESCRIPTION_DESC, Description.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-09"},{"lineNumber":173,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":174,"author":{"gitId":"jean-cq"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2023-11-09"},{"lineNumber":175,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, \" 3\" + INVALID_LEAVE_TITLE_DESC + VALID_LEAVE_START_DATE_DESC","lastModifiedDate":"2023-11-09"},{"lineNumber":176,"author":{"gitId":"jean-cq"},"content":"                        + VALID_LEAVE_END_DATE_DESC + INVALID_LEAVE_DESCRIPTION_DESC,","lastModifiedDate":"2023-11-09"},{"lineNumber":177,"author":{"gitId":"jean-cq"},"content":"                Title.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-09"},{"lineNumber":178,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-11-09"},{"lineNumber":179,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-11-09"},{"lineNumber":180,"author":{"gitId":"jean-cq"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2023-11-09"},{"lineNumber":181,"author":{"gitId":"jean-cq"},"content":"        String validExpectedLeaveString \u003d VALID_LEAVE_TITLE_DESC + VALID_LEAVE_START_DATE_DESC","lastModifiedDate":"2023-11-09"},{"lineNumber":182,"author":{"gitId":"jean-cq"},"content":"                + VALID_LEAVE_END_DATE_DESC + VALID_LEAVE_DESCRIPTION_DESC;","lastModifiedDate":"2023-11-09"},{"lineNumber":183,"author":{"gitId":"jean-cq"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLeaveCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-11-09"},{"lineNumber":184,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":185,"author":{"gitId":"jean-cq"},"content":"        // negative index","lastModifiedDate":"2023-11-09"},{"lineNumber":186,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, \"-5\" + validExpectedLeaveString, expectedMessage);","lastModifiedDate":"2023-11-09"},{"lineNumber":187,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":188,"author":{"gitId":"jean-cq"},"content":"        // zero index","lastModifiedDate":"2023-11-09"},{"lineNumber":189,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, \"0\" + validExpectedLeaveString, expectedMessage);","lastModifiedDate":"2023-11-09"},{"lineNumber":190,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":191,"author":{"gitId":"jean-cq"},"content":"        // duplicated index","lastModifiedDate":"2023-11-09"},{"lineNumber":192,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, \"1 1\" + validExpectedLeaveString, expectedMessage);","lastModifiedDate":"2023-11-09"},{"lineNumber":193,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":194,"author":{"gitId":"jean-cq"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2023-11-09"},{"lineNumber":195,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, \"1 some random string\", expectedMessage);","lastModifiedDate":"2023-11-09"},{"lineNumber":196,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":197,"author":{"gitId":"jean-cq"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2023-11-09"},{"lineNumber":198,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, \"1 i/ string\", expectedMessage);","lastModifiedDate":"2023-11-09"},{"lineNumber":199,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-11-09"},{"lineNumber":200,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":201,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-11-09"}],"authorContributionMap":{"jean-cq":201}},{"path":"src/test/java/seedu/address/logic/parser/AddTagCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ong-wei-hong"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-11"},{"lineNumber":2,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":3,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-11"},{"lineNumber":4,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2023-10-11"},{"lineNumber":5,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2023-10-11"},{"lineNumber":6,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2023-10-11"},{"lineNumber":7,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_EMPTY;","lastModifiedDate":"2023-10-11"},{"lineNumber":8,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2023-10-11"},{"lineNumber":9,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-10-11"},{"lineNumber":10,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-11"},{"lineNumber":11,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-11"},{"lineNumber":12,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-11"},{"lineNumber":13,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2023-10-11"},{"lineNumber":14,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":15,"author":{"gitId":"ong-wei-hong"},"content":"import java.util.List;","lastModifiedDate":"2023-10-11"},{"lineNumber":16,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":17,"author":{"gitId":"ong-wei-hong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-11"},{"lineNumber":18,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":19,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-11"},{"lineNumber":20,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.commands.AddTagCommand;","lastModifiedDate":"2023-10-11"},{"lineNumber":21,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-11"},{"lineNumber":22,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":23,"author":{"gitId":"ong-wei-hong"},"content":"public class AddTagCommandParserTest {","lastModifiedDate":"2023-10-11"},{"lineNumber":24,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":25,"author":{"gitId":"ong-wei-hong"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2023-10-11"},{"lineNumber":26,"author":{"gitId":"ong-wei-hong"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-11"},{"lineNumber":27,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":28,"author":{"gitId":"ong-wei-hong"},"content":"    private AddTagCommandParser parser \u003d new AddTagCommandParser();","lastModifiedDate":"2023-10-11"},{"lineNumber":29,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":30,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":31,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-10-11"},{"lineNumber":32,"author":{"gitId":"ong-wei-hong"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2023-10-11"},{"lineNumber":33,"author":{"gitId":"ong-wei-hong"},"content":"        // no field specified","lastModifiedDate":"2023-10-11"},{"lineNumber":34,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-11"},{"lineNumber":35,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":36,"author":{"gitId":"ong-wei-hong"},"content":"        // no index specificed","lastModifiedDate":"2023-10-11"},{"lineNumber":37,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, VALID_TAG_FRIEND, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-11"},{"lineNumber":38,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":39,"author":{"gitId":"ong-wei-hong"},"content":"        // no field specified","lastModifiedDate":"2023-10-11"},{"lineNumber":40,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, \"1\", AddTagCommand.MESSAGE_NO_TAGS_ADDED);","lastModifiedDate":"2023-10-11"},{"lineNumber":41,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":42,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":43,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-10-11"},{"lineNumber":44,"author":{"gitId":"ong-wei-hong"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2023-10-11"},{"lineNumber":45,"author":{"gitId":"ong-wei-hong"},"content":"        // negative index","lastModifiedDate":"2023-10-11"},{"lineNumber":46,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, \"-5\" + VALID_TAG_FRIEND, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-11"},{"lineNumber":47,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":48,"author":{"gitId":"ong-wei-hong"},"content":"        // zero index","lastModifiedDate":"2023-10-11"},{"lineNumber":49,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, \"0\" + VALID_TAG_FRIEND, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-11"},{"lineNumber":50,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":51,"author":{"gitId":"ong-wei-hong"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2023-10-11"},{"lineNumber":52,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-11"},{"lineNumber":53,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":54,"author":{"gitId":"ong-wei-hong"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2023-10-11"},{"lineNumber":55,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-11"},{"lineNumber":56,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":57,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":58,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-10-11"},{"lineNumber":59,"author":{"gitId":"ong-wei-hong"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2023-10-11"},{"lineNumber":60,"author":{"gitId":"ong-wei-hong"},"content":"        // invalid tag","lastModifiedDate":"2023-10-11"},{"lineNumber":61,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-11"},{"lineNumber":62,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":63,"author":{"gitId":"ong-wei-hong"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2023-10-11"},{"lineNumber":64,"author":{"gitId":"ong-wei-hong"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2023-10-11"},{"lineNumber":65,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-11"},{"lineNumber":66,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-11"},{"lineNumber":67,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-11"},{"lineNumber":68,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":69,"author":{"gitId":"ong-wei-hong"},"content":"        // empty tag","lastModifiedDate":"2023-10-11"},{"lineNumber":70,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-10"},{"lineNumber":71,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":72,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":73,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-10-11"},{"lineNumber":74,"author":{"gitId":"ong-wei-hong"},"content":"    public void parse_oneTag_success() {","lastModifiedDate":"2023-10-11"},{"lineNumber":75,"author":{"gitId":"ong-wei-hong"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-11"},{"lineNumber":76,"author":{"gitId":"ong-wei-hong"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2023-10-11"},{"lineNumber":77,"author":{"gitId":"ong-wei-hong"},"content":"        AddTagCommand expectedCommand \u003d new AddTagCommand(targetIndex, List.of(new Tag(VALID_TAG_FRIEND)));","lastModifiedDate":"2023-10-11"},{"lineNumber":78,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":79,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-10-11"},{"lineNumber":80,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":81,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":82,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-10-11"},{"lineNumber":83,"author":{"gitId":"ong-wei-hong"},"content":"    public void parse_multipleTags_success() {","lastModifiedDate":"2023-10-11"},{"lineNumber":84,"author":{"gitId":"ong-wei-hong"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2023-10-11"},{"lineNumber":85,"author":{"gitId":"ong-wei-hong"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;","lastModifiedDate":"2023-10-11"},{"lineNumber":86,"author":{"gitId":"ong-wei-hong"},"content":"        AddTagCommand expectedCommand \u003d new AddTagCommand(","lastModifiedDate":"2023-10-11"},{"lineNumber":87,"author":{"gitId":"ong-wei-hong"},"content":"                targetIndex, List.of(new Tag(VALID_TAG_FRIEND), new Tag(VALID_TAG_HUSBAND)));","lastModifiedDate":"2023-10-11"},{"lineNumber":88,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":89,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-10-11"},{"lineNumber":90,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":91,"author":{"gitId":"ong-wei-hong"},"content":"}","lastModifiedDate":"2023-10-11"}],"authorContributionMap":{"ong-wei-hong":91}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":7,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2023-10-11"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FULL_TIME;","lastModifiedDate":"2023-11-11"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_REMOTE;","lastModifiedDate":"2023-11-11"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_DATE_END;","lastModifiedDate":"2023-11-09"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_DATE_START;","lastModifiedDate":"2023-11-09"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_DESCRIPTION;","lastModifiedDate":"2023-11-09"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_DESCRIPTION_DESC;","lastModifiedDate":"2023-11-09"},{"lineNumber":14,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_END_DATE_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":15,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_START_DATE_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":16,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_TITLE;","lastModifiedDate":"2023-11-07"},{"lineNumber":17,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_TITLE_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":18,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2023-10-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":20,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_LEAVE;","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.commands.AddLeaveCommand;","lastModifiedDate":"2023-11-09"},{"lineNumber":33,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.commands.AddTagCommand;","lastModifiedDate":"2023-10-11"},{"lineNumber":34,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.commands.ApproveLeaveCommand;","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.commands.DeleteLeaveCommand;","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.logic.commands.DeleteTagCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.commands.EditLeaveCommand;","lastModifiedDate":"2023-11-07"},{"lineNumber":42,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.commands.EditLeaveCommand.EditLeaveDescriptor;","lastModifiedDate":"2023-11-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.ExportContactCommand;","lastModifiedDate":"2023-11-03"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.ExportLeaveCommand;","lastModifiedDate":"2023-11-03"},{"lineNumber":46,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.commands.FindAllLeaveCommand;","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.commands.FindAllTagCommand;","lastModifiedDate":"2023-11-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.FindLeaveByPeriodCommand;","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.FindLeaveByStatusCommand;","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.commands.FindLeaveCommand;","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.commands.FindSomeTagCommand;","lastModifiedDate":"2023-11-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.ImportContactCommand;","lastModifiedDate":"2023-11-03"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.ImportLeaveCommand;","lastModifiedDate":"2023-11-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.commands.RejectLeaveCommand;","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.commands.ViewTagCommand;","lastModifiedDate":"2023-10-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Date;","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-11-09"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.LeaveHasStatusPredicate;","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.LeaveInPeriodPredicate;","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Range;","lastModifiedDate":"2023-11-02"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Status;","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Status.StatusType;","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.person.TagsContainAllTagsPredicate;","lastModifiedDate":"2023-11-11"},{"lineNumber":70,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.person.TagsContainSomeTagsPredicate;","lastModifiedDate":"2023-11-11"},{"lineNumber":71,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-11"},{"lineNumber":72,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.testutil.EditLeaveDescriptorBuilder;","lastModifiedDate":"2023-11-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"jean-cq"},"content":"import seedu.address.testutil.LeaveBuilder;","lastModifiedDate":"2023-11-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-11-09"},{"lineNumber":90,"author":{"gitId":"jean-cq"},"content":"    public void parseCommand_addLeave() throws Exception {","lastModifiedDate":"2023-11-09"},{"lineNumber":91,"author":{"gitId":"jean-cq"},"content":"        Leave leave \u003d new LeaveBuilder().withTitle(VALID_LEAVE_TITLE)","lastModifiedDate":"2023-11-09"},{"lineNumber":92,"author":{"gitId":"jean-cq"},"content":"                .withStart(Date.of(VALID_LEAVE_DATE_START)).withEnd(Date.of(VALID_LEAVE_DATE_END))","lastModifiedDate":"2023-11-09"},{"lineNumber":93,"author":{"gitId":"jean-cq"},"content":"                .withDescription(VALID_LEAVE_DESCRIPTION).build();","lastModifiedDate":"2023-11-09"},{"lineNumber":94,"author":{"gitId":"jean-cq"},"content":"        AddLeaveCommand command \u003d (AddLeaveCommand) parser.parseCommand(AddLeaveCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2023-11-09"},{"lineNumber":95,"author":{"gitId":"jean-cq"},"content":"                + INDEX_FIRST_LEAVE.getOneBased() + VALID_LEAVE_TITLE_DESC + VALID_LEAVE_START_DATE_DESC","lastModifiedDate":"2023-11-09"},{"lineNumber":96,"author":{"gitId":"jean-cq"},"content":"                + VALID_LEAVE_END_DATE_DESC + VALID_LEAVE_DESCRIPTION_DESC);","lastModifiedDate":"2023-11-09"},{"lineNumber":97,"author":{"gitId":"jean-cq"},"content":"        Range dateRange \u003d Range.createNonNullRange(leave.getStart(), leave.getEnd());","lastModifiedDate":"2023-11-09"},{"lineNumber":98,"author":{"gitId":"jean-cq"},"content":"        assertEquals(new AddLeaveCommand(INDEX_FIRST_LEAVE, leave.getTitle(),","lastModifiedDate":"2023-11-09"},{"lineNumber":99,"author":{"gitId":"jean-cq"},"content":"                dateRange, leave.getDescription()), command);","lastModifiedDate":"2023-11-09"},{"lineNumber":100,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-11-09"},{"lineNumber":101,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":124,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-07"},{"lineNumber":125,"author":{"gitId":"ong-wei-hong"},"content":"    public void parseCommand_editLeave() throws Exception {","lastModifiedDate":"2023-11-07"},{"lineNumber":126,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveDescriptor descriptor \u003d new EditLeaveDescriptorBuilder().withTitle(VALID_LEAVE_TITLE).build();","lastModifiedDate":"2023-11-07"},{"lineNumber":127,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveCommand command \u003d (EditLeaveCommand) parser.parseCommand(EditLeaveCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2023-11-07"},{"lineNumber":128,"author":{"gitId":"ong-wei-hong"},"content":"                + INDEX_FIRST_LEAVE.getOneBased() + VALID_LEAVE_TITLE_DESC);","lastModifiedDate":"2023-11-07"},{"lineNumber":129,"author":{"gitId":"ong-wei-hong"},"content":"        assertEquals(new EditLeaveCommand(INDEX_FIRST_LEAVE, descriptor), command);","lastModifiedDate":"2023-11-07"},{"lineNumber":130,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":131,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":138,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":139,"author":{"gitId":"ryanozx"},"content":"    public void parseCommand_exportContact() throws Exception {","lastModifiedDate":"2023-11-03"},{"lineNumber":140,"author":{"gitId":"ryanozx"},"content":"        String testFileName \u003d \"testExportFile\";","lastModifiedDate":"2023-10-13"},{"lineNumber":141,"author":{"gitId":"ryanozx"},"content":"        Path testFilePath \u003d Paths.get(ExportContactCommand.EXPORT_DEST, \"testExportFile.csv\");","lastModifiedDate":"2023-11-03"},{"lineNumber":142,"author":{"gitId":"ryanozx"},"content":"        ExportContactCommand command \u003d (ExportContactCommand) parser.parseCommand(","lastModifiedDate":"2023-11-03"},{"lineNumber":143,"author":{"gitId":"ryanozx"},"content":"                ExportContactCommand.COMMAND_WORD + \" \" + testFileName);","lastModifiedDate":"2023-11-03"},{"lineNumber":144,"author":{"gitId":"ryanozx"},"content":"        assertEquals(new ExportContactCommand(testFilePath), command);","lastModifiedDate":"2023-11-03"},{"lineNumber":145,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-03"},{"lineNumber":146,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":147,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-03"},{"lineNumber":148,"author":{"gitId":"ryanozx"},"content":"    public void parseCommand_exportLeave() throws Exception {","lastModifiedDate":"2023-11-03"},{"lineNumber":149,"author":{"gitId":"ryanozx"},"content":"        String testFileName \u003d \"testExportFile\";","lastModifiedDate":"2023-11-03"},{"lineNumber":150,"author":{"gitId":"ryanozx"},"content":"        Path testFilePath \u003d Paths.get(ExportLeaveCommand.EXPORT_DEST, \"testExportFile.csv\");","lastModifiedDate":"2023-11-03"},{"lineNumber":151,"author":{"gitId":"ryanozx"},"content":"        ExportLeaveCommand command \u003d (ExportLeaveCommand) parser.parseCommand(","lastModifiedDate":"2023-11-03"},{"lineNumber":152,"author":{"gitId":"ryanozx"},"content":"                ExportLeaveCommand.COMMAND_WORD + \" \" + testFileName);","lastModifiedDate":"2023-11-03"},{"lineNumber":153,"author":{"gitId":"ryanozx"},"content":"        assertEquals(new ExportLeaveCommand(testFilePath), command);","lastModifiedDate":"2023-11-03"},{"lineNumber":154,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":155,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-06-12"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":164,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-11-11"},{"lineNumber":165,"author":{"gitId":"jean-cq"},"content":"    public void parseCommand_findAllTag() throws Exception {","lastModifiedDate":"2023-11-11"},{"lineNumber":166,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e keywords \u003d Arrays.asList(new Tag(\"remote\"), new Tag(\"full time\"));","lastModifiedDate":"2023-11-11"},{"lineNumber":167,"author":{"gitId":"jean-cq"},"content":"        FindAllTagCommand command \u003d (FindAllTagCommand) parser.parseCommand(","lastModifiedDate":"2023-11-11"},{"lineNumber":168,"author":{"gitId":"jean-cq"},"content":"                FindAllTagCommand.COMMAND_WORD + \" \" + TAG_DESC_REMOTE + TAG_DESC_FULL_TIME);","lastModifiedDate":"2023-11-11"},{"lineNumber":169,"author":{"gitId":"jean-cq"},"content":"        assertEquals(new FindAllTagCommand(new TagsContainAllTagsPredicate(keywords)), command);","lastModifiedDate":"2023-11-11"},{"lineNumber":170,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-11-11"},{"lineNumber":171,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-11-11"},{"lineNumber":172,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-11-11"},{"lineNumber":173,"author":{"gitId":"jean-cq"},"content":"    public void parseCommand_findSomeTag() throws Exception {","lastModifiedDate":"2023-11-11"},{"lineNumber":174,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e keywords \u003d Arrays.asList(new Tag(\"remote\"), new Tag(\"full time\"));","lastModifiedDate":"2023-11-11"},{"lineNumber":175,"author":{"gitId":"jean-cq"},"content":"        FindSomeTagCommand command \u003d (FindSomeTagCommand) parser.parseCommand(","lastModifiedDate":"2023-11-11"},{"lineNumber":176,"author":{"gitId":"jean-cq"},"content":"                FindSomeTagCommand.COMMAND_WORD + \" \" + TAG_DESC_REMOTE + TAG_DESC_FULL_TIME);","lastModifiedDate":"2023-11-11"},{"lineNumber":177,"author":{"gitId":"jean-cq"},"content":"        assertEquals(new FindSomeTagCommand(new TagsContainSomeTagsPredicate(keywords)), command);","lastModifiedDate":"2023-11-11"},{"lineNumber":178,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-11-11"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":185,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":186,"author":{"gitId":"ryanozx"},"content":"    public void parseCommand_import() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":187,"author":{"gitId":"ryanozx"},"content":"        assertTrue(parser.parseCommand(ImportContactCommand.COMMAND_WORD) instanceof ImportContactCommand);","lastModifiedDate":"2023-11-03"},{"lineNumber":188,"author":{"gitId":"ryanozx"},"content":"        assertTrue(parser.parseCommand(ImportContactCommand.COMMAND_WORD + \" 3\") instanceof ImportContactCommand);","lastModifiedDate":"2023-11-03"},{"lineNumber":189,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-03"},{"lineNumber":190,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":191,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-03"},{"lineNumber":192,"author":{"gitId":"ryanozx"},"content":"    public void parseCommand_importLeave() throws Exception {","lastModifiedDate":"2023-11-03"},{"lineNumber":193,"author":{"gitId":"ryanozx"},"content":"        assertTrue(parser.parseCommand(ImportLeaveCommand.COMMAND_WORD) instanceof ImportLeaveCommand);","lastModifiedDate":"2023-11-03"},{"lineNumber":194,"author":{"gitId":"ryanozx"},"content":"        assertTrue(parser.parseCommand(ImportLeaveCommand.COMMAND_WORD + \" 3\") instanceof ImportLeaveCommand);","lastModifiedDate":"2023-11-03"},{"lineNumber":195,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":196,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":203,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-10-11"},{"lineNumber":204,"author":{"gitId":"ong-wei-hong"},"content":"    public void parseCommand_addTag() throws Exception {","lastModifiedDate":"2023-10-11"},{"lineNumber":205,"author":{"gitId":"ong-wei-hong"},"content":"        AddTagCommand command \u003d (AddTagCommand) parser.parseCommand(","lastModifiedDate":"2023-10-11"},{"lineNumber":206,"author":{"gitId":"ong-wei-hong"},"content":"                AddTagCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" \" + TAG_DESC_FRIEND);","lastModifiedDate":"2023-10-11"},{"lineNumber":207,"author":{"gitId":"ong-wei-hong"},"content":"        assertEquals(new AddTagCommand(INDEX_FIRST_PERSON, List.of(new Tag(VALID_TAG_FRIEND))), command);","lastModifiedDate":"2023-10-11"},{"lineNumber":208,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":209,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"                -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":220,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":221,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":222,"author":{"gitId":"ivyy-poison"},"content":"    public void parseCommand_deleteTag() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":223,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(parser.parseCommand(DeleteTagCommand.COMMAND_WORD + \" 1 t/friends\") instanceof DeleteTagCommand);","lastModifiedDate":"2023-10-13"},{"lineNumber":224,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(parser.parseCommand(DeleteTagCommand.COMMAND_WORD + \" 1 t/friends t/colleagues\")","lastModifiedDate":"2023-10-13"},{"lineNumber":225,"author":{"gitId":"ivyy-poison"},"content":"                instanceof DeleteTagCommand);","lastModifiedDate":"2023-10-13"},{"lineNumber":226,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(parser.parseCommand(DeleteTagCommand.COMMAND_WORD + \" 1 t/friends t/colleagues t/family\")","lastModifiedDate":"2023-10-13"},{"lineNumber":227,"author":{"gitId":"ivyy-poison"},"content":"                instanceof DeleteTagCommand);","lastModifiedDate":"2023-10-13"},{"lineNumber":228,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":229,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":230,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":231,"author":{"gitId":"InfiBeyond"},"content":"    public void parseCommand_viewTag() throws Exception {","lastModifiedDate":"2023-10-19"},{"lineNumber":232,"author":{"gitId":"InfiBeyond"},"content":"        assertTrue(parser.parseCommand(ViewTagCommand.COMMAND_WORD) instanceof ViewTagCommand);","lastModifiedDate":"2023-10-19"},{"lineNumber":233,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":234,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":235,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":236,"author":{"gitId":"InfiBeyond"},"content":"    public void parseCommand_approveLeave() throws Exception {","lastModifiedDate":"2023-11-02"},{"lineNumber":237,"author":{"gitId":"InfiBeyond"},"content":"        assertTrue(parser.parseCommand(ApproveLeaveCommand.COMMAND_WORD + \" 1\") instanceof ApproveLeaveCommand);","lastModifiedDate":"2023-11-02"},{"lineNumber":238,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":239,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":240,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":241,"author":{"gitId":"InfiBeyond"},"content":"    public void parseCommand_deleteLeave() throws Exception {","lastModifiedDate":"2023-11-02"},{"lineNumber":242,"author":{"gitId":"InfiBeyond"},"content":"        DeleteLeaveCommand deleteLeaveCommand \u003d (DeleteLeaveCommand) parser.parseCommand(","lastModifiedDate":"2023-11-02"},{"lineNumber":243,"author":{"gitId":"InfiBeyond"},"content":"                DeleteLeaveCommand.COMMAND_WORD + \" 1\");","lastModifiedDate":"2023-11-02"},{"lineNumber":244,"author":{"gitId":"InfiBeyond"},"content":"        assertEquals(deleteLeaveCommand, new DeleteLeaveCommand(INDEX_FIRST_LEAVE));","lastModifiedDate":"2023-11-02"},{"lineNumber":245,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":246,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":247,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":248,"author":{"gitId":"InfiBeyond"},"content":"    public void parseCommand_findAllLeaveCommand() throws Exception {","lastModifiedDate":"2023-11-02"},{"lineNumber":249,"author":{"gitId":"InfiBeyond"},"content":"        assertTrue(parser.parseCommand(FindAllLeaveCommand.COMMAND_WORD) instanceof FindAllLeaveCommand);","lastModifiedDate":"2023-11-02"},{"lineNumber":250,"author":{"gitId":"InfiBeyond"},"content":"        assertTrue(parser.parseCommand(FindAllLeaveCommand.COMMAND_WORD + \" 3\") instanceof FindAllLeaveCommand);","lastModifiedDate":"2023-11-02"},{"lineNumber":251,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":252,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":253,"author":{"gitId":"InfiBeyond"},"content":"    public void parseCommand_findLeave() throws Exception {","lastModifiedDate":"2023-11-02"},{"lineNumber":254,"author":{"gitId":"InfiBeyond"},"content":"        assertTrue(parser.parseCommand(FindLeaveCommand.COMMAND_WORD + \" 1\") instanceof FindLeaveCommand);","lastModifiedDate":"2023-11-02"},{"lineNumber":255,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":256,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":257,"author":{"gitId":"ryanozx"},"content":"    public void parseCommand_findLeaveByPeriod() throws Exception {","lastModifiedDate":"2023-11-02"},{"lineNumber":258,"author":{"gitId":"ryanozx"},"content":"        String startDate \u003d \"2023-10-30\";","lastModifiedDate":"2023-11-02"},{"lineNumber":259,"author":{"gitId":"ryanozx"},"content":"        String endDate \u003d \"2023-10-31\";","lastModifiedDate":"2023-11-02"},{"lineNumber":260,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":261,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate expectedPredicate \u003d new LeaveInPeriodPredicate(","lastModifiedDate":"2023-11-02"},{"lineNumber":262,"author":{"gitId":"ryanozx"},"content":"                Range.createNonNullRange(Date.of(startDate), Date.of(endDate)));","lastModifiedDate":"2023-11-02"},{"lineNumber":263,"author":{"gitId":"ong-wei-hong"},"content":"        String userInput \u003d FindLeaveByPeriodCommand.COMMAND_WORD + VALID_LEAVE_START_DATE_DESC","lastModifiedDate":"2023-11-07"},{"lineNumber":264,"author":{"gitId":"ong-wei-hong"},"content":"            + VALID_LEAVE_END_DATE_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":265,"author":{"gitId":"ryanozx"},"content":"        assertTrue(parser.parseCommand(userInput) instanceof FindLeaveByPeriodCommand);","lastModifiedDate":"2023-11-02"},{"lineNumber":266,"author":{"gitId":"ryanozx"},"content":"        assertEquals(parser.parseCommand(userInput), new FindLeaveByPeriodCommand(expectedPredicate));","lastModifiedDate":"2023-11-02"},{"lineNumber":267,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":268,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":269,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":270,"author":{"gitId":"ryanozx"},"content":"    public void parseCommand_findLeaveByStatus() throws Exception {","lastModifiedDate":"2023-11-02"},{"lineNumber":271,"author":{"gitId":"ryanozx"},"content":"        LeaveHasStatusPredicate expectedPredicate \u003d new LeaveHasStatusPredicate(","lastModifiedDate":"2023-11-02"},{"lineNumber":272,"author":{"gitId":"ryanozx"},"content":"                Status.of(StatusType.APPROVED));","lastModifiedDate":"2023-11-02"},{"lineNumber":273,"author":{"gitId":"ryanozx"},"content":"        String userInput \u003d FindLeaveByStatusCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2023-11-02"},{"lineNumber":274,"author":{"gitId":"ryanozx"},"content":"                + StatusType.APPROVED;","lastModifiedDate":"2023-11-02"},{"lineNumber":275,"author":{"gitId":"ryanozx"},"content":"        assertTrue(parser.parseCommand(userInput) instanceof FindLeaveByStatusCommand);","lastModifiedDate":"2023-11-02"},{"lineNumber":276,"author":{"gitId":"ryanozx"},"content":"        assertEquals(parser.parseCommand(userInput), new FindLeaveByStatusCommand(expectedPredicate));","lastModifiedDate":"2023-11-02"},{"lineNumber":277,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":278,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":279,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":280,"author":{"gitId":"InfiBeyond"},"content":"    public void parseCommand_rejectLeave() throws Exception {","lastModifiedDate":"2023-11-02"},{"lineNumber":281,"author":{"gitId":"InfiBeyond"},"content":"        assertTrue(parser.parseCommand(RejectLeaveCommand.COMMAND_WORD + \" 1\") instanceof RejectLeaveCommand);","lastModifiedDate":"2023-11-02"},{"lineNumber":282,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":283,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"ryanozx":67,"jean-cq":41,"InfiBeyond":33,"ivyy-poison":10,"-":101,"ong-wei-hong":31}},{"path":"src/test/java/seedu/address/logic/parser/ApproveLeaveCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"InfiBeyond"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-29"},{"lineNumber":2,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":3,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-29"},{"lineNumber":4,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-29"},{"lineNumber":5,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":6,"author":{"gitId":"InfiBeyond"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-29"},{"lineNumber":7,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":8,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.commands.ApproveLeaveCommand;","lastModifiedDate":"2023-10-29"},{"lineNumber":9,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":10,"author":{"gitId":"InfiBeyond"},"content":"public class ApproveLeaveCommandParserTest {","lastModifiedDate":"2023-10-29"},{"lineNumber":11,"author":{"gitId":"InfiBeyond"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2023-10-29"},{"lineNumber":12,"author":{"gitId":"InfiBeyond"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ApproveLeaveCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-29"},{"lineNumber":13,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":14,"author":{"gitId":"InfiBeyond"},"content":"    private ApproveLeaveCommandParser parser \u003d new ApproveLeaveCommandParser();","lastModifiedDate":"2023-10-29"},{"lineNumber":15,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":16,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":17,"author":{"gitId":"InfiBeyond"},"content":"    public void parse_missingIndex_failure() {","lastModifiedDate":"2023-10-29"},{"lineNumber":18,"author":{"gitId":"InfiBeyond"},"content":"        // no index and no field specified","lastModifiedDate":"2023-10-29"},{"lineNumber":19,"author":{"gitId":"InfiBeyond"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-29"},{"lineNumber":20,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":21,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":22,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":23,"author":{"gitId":"InfiBeyond"},"content":"    public void parse_invalidIndex_failure() {","lastModifiedDate":"2023-10-29"},{"lineNumber":24,"author":{"gitId":"InfiBeyond"},"content":"        // negative index","lastModifiedDate":"2023-10-29"},{"lineNumber":25,"author":{"gitId":"InfiBeyond"},"content":"        assertParseFailure(parser, \"-5\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-29"},{"lineNumber":26,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":27,"author":{"gitId":"InfiBeyond"},"content":"        // zero index","lastModifiedDate":"2023-10-29"},{"lineNumber":28,"author":{"gitId":"InfiBeyond"},"content":"        assertParseFailure(parser, \"0\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-29"},{"lineNumber":29,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":30,"author":{"gitId":"InfiBeyond"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2023-10-29"},{"lineNumber":31,"author":{"gitId":"InfiBeyond"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-29"},{"lineNumber":32,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":33,"author":{"gitId":"InfiBeyond"},"content":"}","lastModifiedDate":"2023-10-29"}],"authorContributionMap":{"InfiBeyond":33}},{"path":"src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-07-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-07-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Contains helper methods for testing command parsers.","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class CommandParserTestUtil {","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * equals to {@code expectedCommand}.","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void assertParseSuccess(Parser\u003c? extends Command\u003e parser, String userInput,","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            Command expectedCommand) {","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            Command command \u003d parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommand, command);","lastModifiedDate":"2017-07-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2017-08-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * equals to {@code expectedMessage}.","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static void assertParseFailure(Parser\u003c? extends Command\u003e parser, String userInput, String expectedMessage) {","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-07-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());","lastModifiedDate":"2017-07-06"},{"lineNumber":37,"author":{"gitId":"jean-cq"},"content":"        } catch (IllegalArgumentException ie) {","lastModifiedDate":"2023-11-09"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"            assertEquals(expectedMessage, ie.getMessage());","lastModifiedDate":"2023-11-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"jean-cq":2,"-":39}},{"path":"src/test/java/seedu/address/logic/parser/DeleteLeaveCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ong-wei-hong"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_LEAVE;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"ong-wei-hong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.commands.DeleteLeaveCommand;","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"ong-wei-hong"},"content":"public class DeleteLeaveCommandParserTest {","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"ong-wei-hong"},"content":"    private DeleteLeaveCommandParser parser \u003d new DeleteLeaveCommandParser();","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"ong-wei-hong"},"content":"    public void parse_validArgs_returnsDeleteLeaveCommand() {","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseSuccess(parser, \"1\", new DeleteLeaveCommand(INDEX_FIRST_LEAVE));","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"ong-wei-hong"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"ong-wei-hong"},"content":"                    DeleteLeaveCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"ong-wei-hong"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"ong-wei-hong":26}},{"path":"src/test/java/seedu/address/logic/parser/DeleteTagCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_EMPTY;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"import java.util.List;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.logic.commands.DeleteTagCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"ivyy-poison"},"content":"public class DeleteTagCommandParserTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"ivyy-poison"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTagCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"    private DeleteTagCommandParser parser \u003d new DeleteTagCommandParser();","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"        // no field specified","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"        // no index specificed","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"        assertParseFailure(parser, VALID_TAG_FRIEND, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"        // no field specified","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"        assertParseFailure(parser, \"1\", DeleteTagCommand.MESSAGE_NO_TAGS_REMOVED);","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"ivyy-poison"},"content":"        // negative index","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"ivyy-poison"},"content":"        assertParseFailure(parser, \"-5\" + VALID_TAG_FRIEND, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"ivyy-poison"},"content":"        // zero index","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"ivyy-poison"},"content":"        assertParseFailure(parser, \"0\" + VALID_TAG_FRIEND, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"ivyy-poison"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"ivyy-poison"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"ivyy-poison"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"ivyy-poison"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"ivyy-poison"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"ivyy-poison"},"content":"        // invalid tag","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"ivyy-poison"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"ivyy-poison"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"ivyy-poison"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"ivyy-poison"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"ivyy-poison"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"ivyy-poison"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"ivyy-poison"},"content":"        // empty tag","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"ivyy-poison"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY, DeleteTagCommand.MESSAGE_NO_TAGS_REMOVED);","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"ivyy-poison"},"content":"    public void parse_oneTag_success() {","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"ivyy-poison"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"ivyy-poison"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2023-10-13"},{"lineNumber":78,"author":{"gitId":"ivyy-poison"},"content":"        DeleteTagCommand expectedCommand \u003d new DeleteTagCommand(targetIndex, List.of(new Tag(VALID_TAG_FRIEND)));","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"ivyy-poison"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":82,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":83,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":84,"author":{"gitId":"ivyy-poison"},"content":"    public void parse_multipleTags_success() {","lastModifiedDate":"2023-10-13"},{"lineNumber":85,"author":{"gitId":"ivyy-poison"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2023-10-13"},{"lineNumber":86,"author":{"gitId":"ivyy-poison"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;","lastModifiedDate":"2023-10-13"},{"lineNumber":87,"author":{"gitId":"ivyy-poison"},"content":"        DeleteTagCommand expectedCommand \u003d new DeleteTagCommand(","lastModifiedDate":"2023-10-13"},{"lineNumber":88,"author":{"gitId":"ivyy-poison"},"content":"                targetIndex, List.of(new Tag(VALID_TAG_FRIEND), new Tag(VALID_TAG_HUSBAND)));","lastModifiedDate":"2023-10-13"},{"lineNumber":89,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":90,"author":{"gitId":"ivyy-poison"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-10-13"},{"lineNumber":91,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":92,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"ivyy-poison":92}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":18,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_EMPTY;","lastModifiedDate":"2023-10-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ADDRESS;","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_EMAIL;","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_PHONE;","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-05-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-07-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":70,"author":{"gitId":"ivyy-poison"},"content":"        // assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-11-08"},{"lineNumber":71,"author":{"gitId":"ivyy-poison"},"content":"        assertParseFailure(parser, \"-5\", Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-11-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":74,"author":{"gitId":"ivyy-poison"},"content":"        // assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-11-08"},{"lineNumber":75,"author":{"gitId":"ivyy-poison"},"content":"        assertParseFailure(parser, \"0\", Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-11-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2018-09-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2018-09-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2017-05-04"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":97,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,","lastModifiedDate":"2023-11-01"},{"lineNumber":98,"author":{"gitId":"jean-cq"},"content":"                Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-01"},{"lineNumber":99,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,","lastModifiedDate":"2023-11-01"},{"lineNumber":100,"author":{"gitId":"jean-cq"},"content":"                Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-01"},{"lineNumber":101,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,","lastModifiedDate":"2023-11-01"},{"lineNumber":102,"author":{"gitId":"jean-cq"},"content":"                Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-01"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":105,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY","lastModifiedDate":"2023-11-01"},{"lineNumber":106,"author":{"gitId":"jean-cq"},"content":"                        + VALID_PHONE_AMY,","lastModifiedDate":"2023-11-01"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2017-06-06"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2017-06-06"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2017-05-04"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2017-05-25"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_failure() {","lastModifiedDate":"2023-07-14"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        // More extensive testing of duplicate parameter detections is done in","lastModifiedDate":"2023-07-14"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        // AddCommandParserTest#parse_repeatedNonTagValue_failure()","lastModifiedDate":"2023-07-14"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // valid followed by invalid","lastModifiedDate":"2023-07-14"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2023-07-14"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":179,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, userInput, Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PERSON_PHONE));","lastModifiedDate":"2023-11-01"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        // invalid followed by valid","lastModifiedDate":"2023-07-14"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + INVALID_PHONE_DESC;","lastModifiedDate":"2023-07-14"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":184,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, userInput, Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PERSON_PHONE));","lastModifiedDate":"2023-11-01"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        // mulltiple valid fields repeated","lastModifiedDate":"2023-07-14"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2023-07-14"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2017-05-25"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;","lastModifiedDate":"2017-05-25"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput,","lastModifiedDate":"2023-07-14"},{"lineNumber":192,"author":{"gitId":"jean-cq"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PERSON_PHONE,","lastModifiedDate":"2023-11-01"},{"lineNumber":193,"author":{"gitId":"jean-cq"},"content":"                        PREFIX_PERSON_EMAIL, PREFIX_PERSON_ADDRESS));","lastModifiedDate":"2023-11-01"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        // multiple invalid values","lastModifiedDate":"2023-07-14"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + INVALID_ADDRESS_DESC + INVALID_EMAIL_DESC","lastModifiedDate":"2023-07-14"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                + INVALID_PHONE_DESC + INVALID_ADDRESS_DESC + INVALID_EMAIL_DESC;","lastModifiedDate":"2023-07-14"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput,","lastModifiedDate":"2023-07-14"},{"lineNumber":200,"author":{"gitId":"jean-cq"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PERSON_PHONE,","lastModifiedDate":"2023-11-01"},{"lineNumber":201,"author":{"gitId":"jean-cq"},"content":"                        PREFIX_PERSON_EMAIL, PREFIX_PERSON_ADDRESS));","lastModifiedDate":"2023-11-01"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2017-05-25"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();","lastModifiedDate":"2017-05-04"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"jean-cq":17,"ivyy-poison":4,"-":192,"ong-wei-hong":1}},{"path":"src/test/java/seedu/address/logic/parser/EditLeaveCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ong-wei-hong"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-11-07"},{"lineNumber":2,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":3,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-11-07"},{"lineNumber":4,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_EMPTY;","lastModifiedDate":"2023-11-10"},{"lineNumber":5,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LEAVE_DATE_END_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":6,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LEAVE_DATE_START_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":7,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LEAVE_DESCRIPTION_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":8,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LEAVE_STATUS_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":9,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LEAVE_TITLE_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":10,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_DATE_END;","lastModifiedDate":"2023-11-07"},{"lineNumber":11,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_DATE_START;","lastModifiedDate":"2023-11-07"},{"lineNumber":12,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_DESCRIPTION;","lastModifiedDate":"2023-11-07"},{"lineNumber":13,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_DESCRIPTION_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":14,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_END_DATE_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":15,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_START_DATE_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":16,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_STATUS_APPROVED;","lastModifiedDate":"2023-11-07"},{"lineNumber":17,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_STATUS_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":18,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_TITLE;","lastModifiedDate":"2023-11-07"},{"lineNumber":19,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEAVE_TITLE_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":20,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_DATE_START;","lastModifiedDate":"2023-11-07"},{"lineNumber":21,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_STATUS;","lastModifiedDate":"2023-11-07"},{"lineNumber":22,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_TITLE;","lastModifiedDate":"2023-11-07"},{"lineNumber":23,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-11-07"},{"lineNumber":24,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-11-07"},{"lineNumber":25,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_LEAVE;","lastModifiedDate":"2023-11-07"},{"lineNumber":26,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_LEAVE;","lastModifiedDate":"2023-11-07"},{"lineNumber":27,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_LEAVE;","lastModifiedDate":"2023-11-07"},{"lineNumber":28,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":29,"author":{"gitId":"ong-wei-hong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-07"},{"lineNumber":30,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":31,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-07"},{"lineNumber":32,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-11-07"},{"lineNumber":33,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.commands.EditLeaveCommand;","lastModifiedDate":"2023-11-07"},{"lineNumber":34,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.commands.EditLeaveCommand.EditLeaveDescriptor;","lastModifiedDate":"2023-11-07"},{"lineNumber":35,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Date;","lastModifiedDate":"2023-11-07"},{"lineNumber":36,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Description;","lastModifiedDate":"2023-11-07"},{"lineNumber":37,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Status;","lastModifiedDate":"2023-11-07"},{"lineNumber":38,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Title;","lastModifiedDate":"2023-11-07"},{"lineNumber":39,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.testutil.EditLeaveDescriptorBuilder;","lastModifiedDate":"2023-11-07"},{"lineNumber":40,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":41,"author":{"gitId":"ong-wei-hong"},"content":"public class EditLeaveCommandParserTest {","lastModifiedDate":"2023-11-07"},{"lineNumber":42,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":43,"author":{"gitId":"ong-wei-hong"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-11-07"},{"lineNumber":44,"author":{"gitId":"ong-wei-hong"},"content":"            EditLeaveCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-11-07"},{"lineNumber":45,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":46,"author":{"gitId":"ong-wei-hong"},"content":"    private EditLeaveCommandParser parser \u003d new EditLeaveCommandParser();","lastModifiedDate":"2023-11-07"},{"lineNumber":47,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":48,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-07"},{"lineNumber":49,"author":{"gitId":"ong-wei-hong"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2023-11-07"},{"lineNumber":50,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, VALID_LEAVE_STATUS_DESC, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-11-07"},{"lineNumber":51,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":52,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, \"1\", EditLeaveCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2023-11-07"},{"lineNumber":53,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":54,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-11-07"},{"lineNumber":55,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":56,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":57,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":58,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-07"},{"lineNumber":59,"author":{"gitId":"ong-wei-hong"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2023-11-07"},{"lineNumber":60,"author":{"gitId":"ong-wei-hong"},"content":"        // negative index","lastModifiedDate":"2023-11-07"},{"lineNumber":61,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, \"-5\" + VALID_LEAVE_STATUS_DESC, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-11-07"},{"lineNumber":62,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":63,"author":{"gitId":"ong-wei-hong"},"content":"        // zero index","lastModifiedDate":"2023-11-07"},{"lineNumber":64,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, \"0\" + VALID_LEAVE_STATUS_DESC, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-11-07"},{"lineNumber":65,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":66,"author":{"gitId":"ong-wei-hong"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2023-11-07"},{"lineNumber":67,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-11-07"},{"lineNumber":68,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":69,"author":{"gitId":"ong-wei-hong"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2023-11-07"},{"lineNumber":70,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-11-07"},{"lineNumber":71,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":72,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":73,"author":{"gitId":"ong-wei-hong"},"content":"    @Test public void parse_invalidValue_failure() {","lastModifiedDate":"2023-11-07"},{"lineNumber":74,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, \"1\" + INVALID_LEAVE_DESCRIPTION_DESC, Description.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-07"},{"lineNumber":75,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, \"1\" + INVALID_LEAVE_STATUS_DESC, Status.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-07"},{"lineNumber":76,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, \"1\" + INVALID_LEAVE_DATE_START_DESC, Date.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-07"},{"lineNumber":77,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, \"1\" + INVALID_LEAVE_DATE_END_DESC, Date.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-07"},{"lineNumber":78,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, \"1\" + INVALID_LEAVE_TITLE_DESC, Title.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-07"},{"lineNumber":79,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":80,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, \"1\" + INVALID_LEAVE_TITLE_DESC + VALID_LEAVE_STATUS_DESC, Title.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-07"},{"lineNumber":81,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":82,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":83,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":84,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-07"},{"lineNumber":85,"author":{"gitId":"ong-wei-hong"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2023-11-07"},{"lineNumber":86,"author":{"gitId":"ong-wei-hong"},"content":"        Index targetIndex \u003d INDEX_SECOND_LEAVE;","lastModifiedDate":"2023-11-07"},{"lineNumber":87,"author":{"gitId":"ong-wei-hong"},"content":"        String userInput \u003d targetIndex.getOneBased() + VALID_LEAVE_TITLE_DESC + VALID_LEAVE_DESCRIPTION_DESC","lastModifiedDate":"2023-11-07"},{"lineNumber":88,"author":{"gitId":"ong-wei-hong"},"content":"            + VALID_LEAVE_START_DATE_DESC + VALID_LEAVE_END_DATE_DESC + VALID_LEAVE_STATUS_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":89,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveDescriptor descriptor \u003d new EditLeaveDescriptorBuilder().withTitle(VALID_LEAVE_TITLE)","lastModifiedDate":"2023-11-07"},{"lineNumber":90,"author":{"gitId":"ong-wei-hong"},"content":"            .withDescription(VALID_LEAVE_DESCRIPTION).withStart(Date.of(VALID_LEAVE_DATE_START))","lastModifiedDate":"2023-11-07"},{"lineNumber":91,"author":{"gitId":"ong-wei-hong"},"content":"            .withEnd(Date.of(VALID_LEAVE_DATE_END)).withStatus(Status.of(VALID_LEAVE_STATUS_APPROVED)).build();","lastModifiedDate":"2023-11-07"},{"lineNumber":92,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveCommand expectedCommand \u003d new EditLeaveCommand(targetIndex, descriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":93,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":94,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-11-07"},{"lineNumber":95,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":96,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":97,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-07"},{"lineNumber":98,"author":{"gitId":"ong-wei-hong"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2023-11-07"},{"lineNumber":99,"author":{"gitId":"ong-wei-hong"},"content":"        Index targetIndex \u003d INDEX_FIRST_LEAVE;","lastModifiedDate":"2023-11-07"},{"lineNumber":100,"author":{"gitId":"ong-wei-hong"},"content":"        String userInput \u003d targetIndex.getOneBased() + VALID_LEAVE_DESCRIPTION_DESC + VALID_LEAVE_TITLE_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":101,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveDescriptor descriptor \u003d new EditLeaveDescriptorBuilder().withTitle(VALID_LEAVE_TITLE)","lastModifiedDate":"2023-11-07"},{"lineNumber":102,"author":{"gitId":"ong-wei-hong"},"content":"            .withDescription(VALID_LEAVE_DESCRIPTION).build();","lastModifiedDate":"2023-11-07"},{"lineNumber":103,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveCommand expectedCommand \u003d new EditLeaveCommand(targetIndex, descriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":104,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":105,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-11-07"},{"lineNumber":106,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":107,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":108,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-07"},{"lineNumber":109,"author":{"gitId":"ong-wei-hong"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2023-11-07"},{"lineNumber":110,"author":{"gitId":"ong-wei-hong"},"content":"        Index targetIndex \u003d INDEX_THIRD_LEAVE;","lastModifiedDate":"2023-11-07"},{"lineNumber":111,"author":{"gitId":"ong-wei-hong"},"content":"        String userInput \u003d targetIndex.getOneBased() + VALID_LEAVE_TITLE_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":112,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveDescriptor descriptor \u003d new EditLeaveDescriptorBuilder().withTitle(VALID_LEAVE_TITLE).build();","lastModifiedDate":"2023-11-07"},{"lineNumber":113,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveCommand expectedCommand \u003d new EditLeaveCommand(targetIndex, descriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":114,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-11-07"},{"lineNumber":115,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":116,"author":{"gitId":"ong-wei-hong"},"content":"        userInput \u003d targetIndex.getOneBased() + VALID_LEAVE_DESCRIPTION_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":117,"author":{"gitId":"ong-wei-hong"},"content":"        descriptor \u003d new EditLeaveDescriptorBuilder().withDescription(VALID_LEAVE_DESCRIPTION).build();","lastModifiedDate":"2023-11-07"},{"lineNumber":118,"author":{"gitId":"ong-wei-hong"},"content":"        expectedCommand \u003d new EditLeaveCommand(targetIndex, descriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":119,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-11-07"},{"lineNumber":120,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":121,"author":{"gitId":"ong-wei-hong"},"content":"        userInput \u003d targetIndex.getOneBased() + VALID_LEAVE_START_DATE_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":122,"author":{"gitId":"ong-wei-hong"},"content":"        descriptor \u003d new EditLeaveDescriptorBuilder().withStart(Date.of(VALID_LEAVE_DATE_START)).build();","lastModifiedDate":"2023-11-07"},{"lineNumber":123,"author":{"gitId":"ong-wei-hong"},"content":"        expectedCommand \u003d new EditLeaveCommand(targetIndex, descriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":124,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-11-07"},{"lineNumber":125,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":126,"author":{"gitId":"ong-wei-hong"},"content":"        userInput \u003d targetIndex.getOneBased() + VALID_LEAVE_END_DATE_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":127,"author":{"gitId":"ong-wei-hong"},"content":"        descriptor \u003d new EditLeaveDescriptorBuilder().withEnd(Date.of(VALID_LEAVE_DATE_END)).build();","lastModifiedDate":"2023-11-07"},{"lineNumber":128,"author":{"gitId":"ong-wei-hong"},"content":"        expectedCommand \u003d new EditLeaveCommand(targetIndex, descriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":129,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-11-07"},{"lineNumber":130,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":131,"author":{"gitId":"ong-wei-hong"},"content":"        userInput \u003d targetIndex.getOneBased() + VALID_LEAVE_STATUS_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":132,"author":{"gitId":"ong-wei-hong"},"content":"        descriptor \u003d new EditLeaveDescriptorBuilder().withStatus(Status.of(VALID_LEAVE_STATUS_APPROVED)).build();","lastModifiedDate":"2023-11-07"},{"lineNumber":133,"author":{"gitId":"ong-wei-hong"},"content":"        expectedCommand \u003d new EditLeaveCommand(targetIndex, descriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":134,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-11-07"},{"lineNumber":135,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":136,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":137,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":138,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-07"},{"lineNumber":139,"author":{"gitId":"ong-wei-hong"},"content":"    public void parse_multipleRepeatedFields_failure() {","lastModifiedDate":"2023-11-07"},{"lineNumber":140,"author":{"gitId":"ong-wei-hong"},"content":"        Index targetIndex \u003d INDEX_FIRST_LEAVE;","lastModifiedDate":"2023-11-07"},{"lineNumber":141,"author":{"gitId":"ong-wei-hong"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_LEAVE_TITLE_DESC + VALID_LEAVE_TITLE_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":142,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":143,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, userInput, Messages.getErrorMessageForDuplicatePrefixes(PREFIX_LEAVE_TITLE));","lastModifiedDate":"2023-11-07"},{"lineNumber":144,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":145,"author":{"gitId":"ong-wei-hong"},"content":"        // invalid followed by valid","lastModifiedDate":"2023-11-07"},{"lineNumber":146,"author":{"gitId":"ong-wei-hong"},"content":"        userInput \u003d targetIndex.getOneBased() + VALID_LEAVE_TITLE_DESC + INVALID_LEAVE_TITLE_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":147,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":148,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, userInput, Messages.getErrorMessageForDuplicatePrefixes(PREFIX_LEAVE_TITLE));","lastModifiedDate":"2023-11-07"},{"lineNumber":149,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":150,"author":{"gitId":"ong-wei-hong"},"content":"        // mulltiple valid fields repeated","lastModifiedDate":"2023-11-07"},{"lineNumber":151,"author":{"gitId":"ong-wei-hong"},"content":"        userInput \u003d targetIndex.getOneBased() + VALID_LEAVE_TITLE_DESC + VALID_LEAVE_STATUS_DESC","lastModifiedDate":"2023-11-07"},{"lineNumber":152,"author":{"gitId":"ong-wei-hong"},"content":"            + VALID_LEAVE_START_DATE_DESC + VALID_LEAVE_TITLE_DESC + VALID_LEAVE_STATUS_DESC","lastModifiedDate":"2023-11-07"},{"lineNumber":153,"author":{"gitId":"ong-wei-hong"},"content":"            + VALID_LEAVE_START_DATE_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":154,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":155,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, userInput, Messages.getErrorMessageForDuplicatePrefixes(PREFIX_LEAVE_TITLE,","lastModifiedDate":"2023-11-07"},{"lineNumber":156,"author":{"gitId":"ong-wei-hong"},"content":"                    PREFIX_LEAVE_STATUS, PREFIX_LEAVE_DATE_START));","lastModifiedDate":"2023-11-07"},{"lineNumber":157,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":158,"author":{"gitId":"ong-wei-hong"},"content":"        // multiple invalid values","lastModifiedDate":"2023-11-07"},{"lineNumber":159,"author":{"gitId":"ong-wei-hong"},"content":"        userInput \u003d targetIndex.getOneBased() + INVALID_LEAVE_TITLE_DESC + INVALID_LEAVE_STATUS_DESC","lastModifiedDate":"2023-11-07"},{"lineNumber":160,"author":{"gitId":"ong-wei-hong"},"content":"            + INVALID_LEAVE_DATE_START_DESC + INVALID_LEAVE_TITLE_DESC + INVALID_LEAVE_STATUS_DESC","lastModifiedDate":"2023-11-07"},{"lineNumber":161,"author":{"gitId":"ong-wei-hong"},"content":"            + INVALID_LEAVE_DATE_START_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":162,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":163,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseFailure(parser, userInput, Messages.getErrorMessageForDuplicatePrefixes(PREFIX_LEAVE_TITLE,","lastModifiedDate":"2023-11-07"},{"lineNumber":164,"author":{"gitId":"ong-wei-hong"},"content":"                    PREFIX_LEAVE_STATUS, PREFIX_LEAVE_DATE_START));","lastModifiedDate":"2023-11-07"},{"lineNumber":165,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":166,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":167,"author":{"gitId":"ong-wei-hong"},"content":"    @Test","lastModifiedDate":"2023-11-10"},{"lineNumber":168,"author":{"gitId":"ong-wei-hong"},"content":"    public void parse_emptyDescription_success() {","lastModifiedDate":"2023-11-10"},{"lineNumber":169,"author":{"gitId":"ong-wei-hong"},"content":"        Index targetIndex \u003d INDEX_FIRST_LEAVE;","lastModifiedDate":"2023-11-10"},{"lineNumber":170,"author":{"gitId":"ong-wei-hong"},"content":"        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_EMPTY;","lastModifiedDate":"2023-11-10"},{"lineNumber":171,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveDescriptor descriptor \u003d new EditLeaveDescriptorBuilder()","lastModifiedDate":"2023-11-10"},{"lineNumber":172,"author":{"gitId":"ong-wei-hong"},"content":"            .withDescription(Description.DESCRIPTION_PLACEHOLDER).build();","lastModifiedDate":"2023-11-10"},{"lineNumber":173,"author":{"gitId":"ong-wei-hong"},"content":"        EditLeaveCommand expectedCommand \u003d new EditLeaveCommand(targetIndex, descriptor);","lastModifiedDate":"2023-11-10"},{"lineNumber":174,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":175,"author":{"gitId":"ong-wei-hong"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-11-10"},{"lineNumber":176,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-10"},{"lineNumber":177,"author":{"gitId":"ong-wei-hong"},"content":"}","lastModifiedDate":"2023-11-07"},{"lineNumber":178,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":179,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"}],"authorContributionMap":{"ong-wei-hong":179}},{"path":"src/test/java/seedu/address/logic/parser/ExportCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.ExportContactCommand;","lastModifiedDate":"2023-11-03"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-11-03"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":" * ExportContactCommandParser implementation is used to test ExportCommandParser","lastModifiedDate":"2023-11-03"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-11-03"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"public class ExportCommandParserTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"    private final ExportContactCommandParser parser \u003d new ExportContactCommandParser();","lastModifiedDate":"2023-11-03"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"    public void parse_validFilePaths_success() {","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"        Path targetFilePath \u003d Paths.get(ExportContactCommand.EXPORT_DEST, \"TestFile.csv\");","lastModifiedDate":"2023-11-03"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"        assertParseSuccess(parser, \"TestFile\", new ExportContactCommand(targetFilePath));","lastModifiedDate":"2023-11-03"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"        // parser should not append csv more than once","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"        assertParseSuccess(parser, \"TestFile.csv\", new ExportContactCommand(targetFilePath));","lastModifiedDate":"2023-11-03"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"        // parser should replace invalid file extension provided by user with valid file extension","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"        assertParseSuccess(parser, \"TestFile.txt\", new ExportContactCommand(targetFilePath));","lastModifiedDate":"2023-11-03"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"        // parser should recognise the supplied extension to be the suffix that follows the last period","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"        assertParseSuccess(parser, \"TestFile.tar.gz.txt\", new ExportContactCommand(","lastModifiedDate":"2023-11-03"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"                Paths.get(ExportContactCommand.EXPORT_DEST, \"TestFile.tar.gz.csv\")","lastModifiedDate":"2023-11-03"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"        ));","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"        // parser should extract file name from user input if user provides a path","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"        assertParseSuccess(parser, ExportContactCommand.EXPORT_DEST + \"/\" + \"TestFile\",","lastModifiedDate":"2023-11-03"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"                new ExportContactCommand(targetFilePath));","lastModifiedDate":"2023-11-03"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"        // parser should ignore parent directories","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        assertParseSuccess(parser, \"../TestFile\", new ExportContactCommand(targetFilePath));","lastModifiedDate":"2023-11-03"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"        assertParseSuccess(parser, \"fakeParentDir/TestFile\", new ExportContactCommand(targetFilePath));","lastModifiedDate":"2023-11-03"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"        assertParseSuccess(parser, \"fakeGrandparentDir/fakeParentDir/TestFile.txt\",","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"                new ExportContactCommand(targetFilePath));","lastModifiedDate":"2023-11-03"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"    public void parse_invalidFilePaths_failure() {","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"        String usageErrorMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportContactCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-11-03"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"        // parser should reject empty inputs, or inputs with only spaces","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"        assertParseFailure(parser, \"\", usageErrorMessage);","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"        assertParseFailure(parser, \"    \", usageErrorMessage);","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"        // parser should reject directories","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"        assertParseFailure(parser, \"parentDir/\", usageErrorMessage);","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"ryanozx":53}},{"path":"src/test/java/seedu/address/logic/parser/FindAllTagCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-14"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"import java.util.List;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.commands.FindAllTagCommand;","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.person.TagsContainAllTagsPredicate;","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"public class FindAllTagCommandParserTest {","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"    private FindAllTagCommandParser parser \u003d new FindAllTagCommandParser();","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, \"     \",","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindAllTagCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"jean-cq"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"jean-cq"},"content":"        tagList.add(new Tag(\"full time\"));","lastModifiedDate":"2023-10-15"},{"lineNumber":32,"author":{"gitId":"jean-cq"},"content":"        tagList.add(new Tag(\"remote\"));","lastModifiedDate":"2023-10-14"},{"lineNumber":33,"author":{"gitId":"jean-cq"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2023-10-14"},{"lineNumber":34,"author":{"gitId":"jean-cq"},"content":"        FindAllTagCommand expectedFindCommand \u003d","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"                new FindAllTagCommand(new TagsContainAllTagsPredicate(tagList));","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"jean-cq"},"content":"        assertParseSuccess(parser, \" t/full time t/remote \", expectedFindCommand);","lastModifiedDate":"2023-10-15"},{"lineNumber":37,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"jean-cq"},"content":"        assertParseSuccess(parser, \" \\n t/full time \\n \\t t/remote  \\t\", expectedFindCommand);","lastModifiedDate":"2023-10-15"},{"lineNumber":40,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"jean-cq"},"content":"    public void parse_invalidTags_throwsParseException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"jean-cq"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(\"full time\"));","lastModifiedDate":"2023-10-15"},{"lineNumber":45,"author":{"gitId":"jean-cq"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(\"t/full time a/remote\"));","lastModifiedDate":"2023-10-15"},{"lineNumber":46,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":48,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-10-14"}],"authorContributionMap":{"jean-cq":49}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {","lastModifiedDate":"2017-06-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"    private final FindCommandParser parser \u003d new FindCommandParser();","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"ryanozx":1,"-":33}},{"path":"src/test/java/seedu/address/logic/parser/FindLeaveByPeriodCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_DATE_END;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEAVE_DATE_START;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.model.leave.LeaveInPeriodPredicateTest.generatePredicate;","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.FindLeaveByPeriodCommand;","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Date;","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"public class FindLeaveByPeriodCommandParserTest {","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"    private static final String START_DATE_INPUT \u003d \"2023-10-30\";","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"    private static final String END_DATE_INPUT \u003d \"2023-10-31\";","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"    private static final Date START_DATE \u003d Date.of(START_DATE_INPUT);","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"    private static final Date END_DATE \u003d Date.of(END_DATE_INPUT);","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"    private final FindLeaveByPeriodCommandParser parser \u003d new FindLeaveByPeriodCommandParser();","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    public void parse_validArgs_returnsFindLeaveByPeriodCommand() {","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"        // both start and end dates supplied","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"        String startAndEndInput \u003d generateUserInput(true, true);","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"        FindLeaveByPeriodCommand expectedStartAndEndCommand \u003d new FindLeaveByPeriodCommand(","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"                generatePredicate(START_DATE, END_DATE));","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"        assertParseSuccess(parser, startAndEndInput, expectedStartAndEndCommand);","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"        // only start date supplied","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"        String startInput \u003d generateUserInput(true, false);","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"        FindLeaveByPeriodCommand expectedStartCommand \u003d new FindLeaveByPeriodCommand(","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"                generatePredicate(START_DATE, null));","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"        assertParseSuccess(parser, startInput, expectedStartCommand);","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"        // only end date supplied","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"        String endInput \u003d generateUserInput(false, true);","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"        FindLeaveByPeriodCommand expectedEndCommand \u003d new FindLeaveByPeriodCommand(","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"                generatePredicate(null, END_DATE));","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"        assertParseSuccess(parser, endInput, expectedEndCommand);","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"        // no dates supplied","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"        String noDateInput \u003d generateUserInput(false, false);","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"        FindLeaveByPeriodCommand expectedNoDateCommand \u003d new FindLeaveByPeriodCommand(","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"                generatePredicate(null, null));","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"        assertParseSuccess(parser, noDateInput, expectedNoDateCommand);","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"        // multiple whitespaces between characters","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"        String whitespaceInput \u003d \" \\n \" + PREFIX_LEAVE_DATE_START + START_DATE_INPUT + \" \\n \"","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"                + \" \\t \" + PREFIX_LEAVE_DATE_END + END_DATE_INPUT + \" \\t \";","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"        FindLeaveByPeriodCommand expectedWhitespaceCommand \u003d new FindLeaveByPeriodCommand(","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"                generatePredicate(START_DATE, END_DATE));","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"        assertParseSuccess(parser, whitespaceInput, expectedWhitespaceCommand);","lastModifiedDate":"2023-11-01"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"    private String generateUserInput(boolean hasStartDate, boolean hasEndDate) {","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"        String startDateStr \u003d hasStartDate ? \" \" + PREFIX_LEAVE_DATE_START + START_DATE_INPUT","lastModifiedDate":"2023-11-01"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"                : \"\";","lastModifiedDate":"2023-11-01"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"        String endDateStr \u003d hasEndDate ? \" \" + PREFIX_LEAVE_DATE_END + END_DATE_INPUT","lastModifiedDate":"2023-11-01"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"                : \"\";","lastModifiedDate":"2023-11-01"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"        return startDateStr + endDateStr;","lastModifiedDate":"2023-11-01"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"    public void parse_duplicateArgs_throwsParseException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"        String startDateStr \u003d \" \" + PREFIX_LEAVE_DATE_START + START_DATE_INPUT;","lastModifiedDate":"2023-11-01"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"        String duplicateStartInput \u003d startDateStr + startDateStr;","lastModifiedDate":"2023-11-01"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"        assertParseFailure(parser, duplicateStartInput,","lastModifiedDate":"2023-11-01"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_LEAVE_DATE_START));","lastModifiedDate":"2023-11-01"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"        String endDateStr \u003d \" \" + PREFIX_LEAVE_DATE_END + END_DATE_INPUT;","lastModifiedDate":"2023-11-01"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"        String duplicateEndInput \u003d endDateStr + endDateStr;","lastModifiedDate":"2023-11-01"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"        assertParseFailure(parser, duplicateEndInput,","lastModifiedDate":"2023-11-01"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_LEAVE_DATE_END));","lastModifiedDate":"2023-11-01"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":78,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"ryanozx":78}},{"path":"src/test/java/seedu/address/logic/parser/FindLeaveByStatusCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import seedu.address.logic.commands.FindLeaveByStatusCommand;","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.LeaveHasStatusPredicate;","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Status;","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Status.StatusType;","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"public class FindLeaveByStatusCommandParserTest {","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"    private final FindLeaveByStatusCommandParser parser \u003d new FindLeaveByStatusCommandParser();","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"    public void parse_validArgs_returnsFindLeaveByStatusCommand() {","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"        // approved","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"        String approvedInput \u003d \"APPROVED\";","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"        FindLeaveByStatusCommand expectedApprovedCommand \u003d new FindLeaveByStatusCommand(","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"                generatePredicate(StatusType.APPROVED));","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"        assertParseSuccess(parser, approvedInput, expectedApprovedCommand);","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"        // approved in lowercase","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"        String approvedLowercaseInput \u003d \"approved\";","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"        assertParseSuccess(parser, approvedLowercaseInput, expectedApprovedCommand);","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"        // approved with whitespace","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"        String approvedWhitespaceInput \u003d \"\\tAPPROVED\\t\";","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"        assertParseSuccess(parser, approvedWhitespaceInput, expectedApprovedCommand);","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"        // pending","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"        String pendingInput \u003d \"PENDING\";","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"        FindLeaveByStatusCommand expectedPendingCommand \u003d new FindLeaveByStatusCommand(","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"                generatePredicate(StatusType.PENDING));","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"        assertParseSuccess(parser, pendingInput, expectedPendingCommand);","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"        // approved in lowercase","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"        String pendingLowercaseInput \u003d \"pending\";","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        assertParseSuccess(parser, pendingLowercaseInput, expectedPendingCommand);","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"        // approved with whitespace","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"        String pendingWhitespaceInput \u003d \"\\tPENDING\\t\";","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"        assertParseSuccess(parser, pendingWhitespaceInput, expectedPendingCommand);","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"        // rejected","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"        String rejectedInput \u003d \"REJECTED\";","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"        FindLeaveByStatusCommand expectedRejectedCommand \u003d new FindLeaveByStatusCommand(","lastModifiedDate":"2023-11-02"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"                generatePredicate(StatusType.REJECTED));","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"        assertParseSuccess(parser, rejectedInput, expectedRejectedCommand);","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"        // approved in lowercase","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"        String rejectedLowercaseInput \u003d \"rejected\";","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"        assertParseSuccess(parser, rejectedLowercaseInput, expectedRejectedCommand);","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"        // approved with whitespace","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"        String rejectedWhitespaceInput \u003d \"\\tREJECTED\\t\";","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"        assertParseSuccess(parser, rejectedWhitespaceInput, expectedRejectedCommand);","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"    private LeaveHasStatusPredicate generatePredicate(StatusType status) {","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"        return new LeaveHasStatusPredicate(Status.of(status));","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"    public void parse_invalidArgs_throwsException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"        // empty string","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"        assertParseFailure(parser, \"\", FindLeaveByStatusCommand.MESSAGE_FAILED);","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"        // non-status word","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"        assertParseFailure(parser, \"badStatus\", FindLeaveByStatusCommand.MESSAGE_FAILED);","lastModifiedDate":"2023-11-02"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"        // multiple statuses","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"        assertParseFailure(parser, \"APPROVED APPROVED\", FindLeaveByStatusCommand.MESSAGE_FAILED);","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"ryanozx":68}},{"path":"src/test/java/seedu/address/logic/parser/FindLeaveCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"InfiBeyond"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"InfiBeyond"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.commands.FindLeaveCommand;","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"InfiBeyond"},"content":"public class FindLeaveCommandParserTest {","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"InfiBeyond"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"InfiBeyond"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindLeaveCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"InfiBeyond"},"content":"    private FindLeaveCommandParser parser \u003d new FindLeaveCommandParser();","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"InfiBeyond"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"InfiBeyond"},"content":"        assertParseFailure(parser, \"     \",","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"InfiBeyond"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindLeaveCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"InfiBeyond"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"InfiBeyond"},"content":"        Index validIndex \u003d Index.fromOneBased(10);","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"InfiBeyond"},"content":"        FindLeaveCommand expectedCommand \u003d new FindLeaveCommand(validIndex);","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"InfiBeyond"},"content":"        assertParseSuccess(parser, \"10\", expectedCommand);","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"InfiBeyond"},"content":"    public void parse_invalidTags_throwsParseException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"InfiBeyond"},"content":"        // negative index","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"InfiBeyond"},"content":"        assertParseFailure(parser, \"-5\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"InfiBeyond"},"content":"        // zero index","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"InfiBeyond"},"content":"        assertParseFailure(parser, \"0\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"InfiBeyond"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"InfiBeyond"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"InfiBeyond"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"InfiBeyond":42}},{"path":"src/test/java/seedu/address/logic/parser/FindSomeTagCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"import java.util.List;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.commands.FindSomeTagCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.person.TagsContainSomeTagsPredicate;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"public class FindSomeTagCommandParserTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"    private FindSomeTagCommandParser parser \u003d new FindSomeTagCommandParser();","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"        assertParseFailure(parser, \"     \",","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindSomeTagCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"jean-cq"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"jean-cq"},"content":"        tagList.add(new Tag(\"full time\"));","lastModifiedDate":"2023-10-15"},{"lineNumber":32,"author":{"gitId":"jean-cq"},"content":"        tagList.add(new Tag(\"remote\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"jean-cq"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"jean-cq"},"content":"        FindSomeTagCommand expectedFindCommand \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"                new FindSomeTagCommand(new TagsContainSomeTagsPredicate(tagList));","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"jean-cq"},"content":"        assertParseSuccess(parser, \" t/full time t/remote\", expectedFindCommand);","lastModifiedDate":"2023-10-15"},{"lineNumber":37,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"jean-cq"},"content":"        assertParseSuccess(parser, \" \\n t/full time \\n \\t t/remote  \\t\", expectedFindCommand);","lastModifiedDate":"2023-10-15"},{"lineNumber":40,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"jean-cq"},"content":"    public void parse_invalidTags_throwsParseException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"jean-cq"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(\"full time\"));","lastModifiedDate":"2023-10-15"},{"lineNumber":45,"author":{"gitId":"jean-cq"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(\"t/full time a/remote\"));","lastModifiedDate":"2023-10-15"},{"lineNumber":46,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"jean-cq":49}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-11-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Date;","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Description;","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Range;","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Title;","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_TITLE \u003d \"Leave Title\";","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_DESCRIPTION \u003d \"Leave Description\";","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_START_DATE \u003d \"2020-01-01\";","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_END_DATE \u003d \"2020-01-02\";","lastModifiedDate":"2023-11-02"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"    private static final String INVALID_START_DATE \u003d \"2020/01/01\";","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"    private static final String INVALID_END_DATE \u003d \"2020/01/02\";","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":58,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(ParseException.class, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX, ()","lastModifiedDate":"2023-11-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":142,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail(null));","lastModifiedDate":"2023-11-02"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":204,"author":{"gitId":"ryanozx"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003c\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2023-11-02"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":208,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":209,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":210,"author":{"gitId":"ryanozx"},"content":"    public void parseTitle_null_throwsNullPointerException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":211,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTitle(null));","lastModifiedDate":"2023-11-02"},{"lineNumber":212,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":213,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":214,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":215,"author":{"gitId":"ryanozx"},"content":"    public void parseTitle_validTitle_returnsTitle() {","lastModifiedDate":"2023-11-02"},{"lineNumber":216,"author":{"gitId":"ryanozx"},"content":"        Title expectedTitle \u003d new Title(VALID_TITLE);","lastModifiedDate":"2023-11-02"},{"lineNumber":217,"author":{"gitId":"ryanozx"},"content":"        assertEquals(expectedTitle, ParserUtil.parseTitle(VALID_TITLE));","lastModifiedDate":"2023-11-02"},{"lineNumber":218,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":219,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":220,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":221,"author":{"gitId":"ryanozx"},"content":"    public void parseNonNullRange_nullDate_throwsNullPointerException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":222,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNonNullRange(null, \"2020-01-01\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":223,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNonNullRange(\"2020-01-01\", null));","lastModifiedDate":"2023-11-02"},{"lineNumber":224,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":225,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":226,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":227,"author":{"gitId":"ryanozx"},"content":"    public void parseNonNullRange_invalidDate_throwsException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":228,"author":{"gitId":"ryanozx"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNonNullRange(\"2020/01/01\", \"2020-01-02\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":229,"author":{"gitId":"ryanozx"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNonNullRange(\"2020-01-01\", \"2020/01/02\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":230,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":231,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":232,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":233,"author":{"gitId":"ryanozx"},"content":"    public void parseNonNullRange_endBeforeStart_throwsException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":234,"author":{"gitId":"ryanozx"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNonNullRange(\"2020-01-02\", \"2020-01-01\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":235,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":236,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":237,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":238,"author":{"gitId":"ryanozx"},"content":"    public void parseNonNullRange_validDates_returnRange() throws Exception {","lastModifiedDate":"2023-11-02"},{"lineNumber":239,"author":{"gitId":"ryanozx"},"content":"        String startDate \u003d \"2020-01-01\";","lastModifiedDate":"2023-11-02"},{"lineNumber":240,"author":{"gitId":"ryanozx"},"content":"        String endDate \u003d \"2020-01-02\";","lastModifiedDate":"2023-11-02"},{"lineNumber":241,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":242,"author":{"gitId":"ryanozx"},"content":"        Range expected \u003d Range.createNonNullRange(Date.of(startDate), Date.of(endDate));","lastModifiedDate":"2023-11-02"},{"lineNumber":243,"author":{"gitId":"ryanozx"},"content":"        assertEquals(ParserUtil.parseNonNullRange(startDate, endDate), expected);","lastModifiedDate":"2023-11-02"},{"lineNumber":244,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":245,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":246,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":247,"author":{"gitId":"ryanozx"},"content":"    public void parseNullableRange_invalidDate_throwsException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":248,"author":{"gitId":"ryanozx"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNullableRange(\"2020/01/01\", \"2020-01-02\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":249,"author":{"gitId":"ryanozx"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNullableRange(\"2020-01-01\", \"2020/01/02\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":250,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":251,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":252,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":253,"author":{"gitId":"ryanozx"},"content":"    public void parseNullableRange_endBeforeStart_throwsException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":254,"author":{"gitId":"ryanozx"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNullableRange(\"2020-01-02\", \"2020-01-01\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":255,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":256,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":257,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":258,"author":{"gitId":"ryanozx"},"content":"    public void parseNullableRange_validDates_returnRange() throws Exception {","lastModifiedDate":"2023-11-02"},{"lineNumber":259,"author":{"gitId":"ryanozx"},"content":"        String startDate \u003d \"2020-01-01\";","lastModifiedDate":"2023-11-02"},{"lineNumber":260,"author":{"gitId":"ryanozx"},"content":"        String endDate \u003d \"2020-01-02\";","lastModifiedDate":"2023-11-02"},{"lineNumber":261,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":262,"author":{"gitId":"ryanozx"},"content":"        Range expected;","lastModifiedDate":"2023-11-02"},{"lineNumber":263,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":264,"author":{"gitId":"ryanozx"},"content":"        // start and end date present","lastModifiedDate":"2023-11-02"},{"lineNumber":265,"author":{"gitId":"ryanozx"},"content":"        expected \u003d Range.createNullableRange(Date.of(startDate), Date.of(endDate));","lastModifiedDate":"2023-11-02"},{"lineNumber":266,"author":{"gitId":"ryanozx"},"content":"        assertEquals(ParserUtil.parseNullableRange(startDate, endDate), expected);","lastModifiedDate":"2023-11-02"},{"lineNumber":267,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":268,"author":{"gitId":"ryanozx"},"content":"        // start date present","lastModifiedDate":"2023-11-02"},{"lineNumber":269,"author":{"gitId":"ryanozx"},"content":"        expected \u003d Range.createNullableRange(Date.of(startDate), null);","lastModifiedDate":"2023-11-02"},{"lineNumber":270,"author":{"gitId":"ryanozx"},"content":"        assertEquals(ParserUtil.parseNullableRange(startDate, null), expected);","lastModifiedDate":"2023-11-02"},{"lineNumber":271,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":272,"author":{"gitId":"ryanozx"},"content":"        // end date present","lastModifiedDate":"2023-11-02"},{"lineNumber":273,"author":{"gitId":"ryanozx"},"content":"        expected \u003d Range.createNullableRange(null, Date.of(endDate));","lastModifiedDate":"2023-11-02"},{"lineNumber":274,"author":{"gitId":"ryanozx"},"content":"        assertEquals(ParserUtil.parseNullableRange(null, endDate), expected);","lastModifiedDate":"2023-11-02"},{"lineNumber":275,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":276,"author":{"gitId":"ryanozx"},"content":"        // start and end date not present","lastModifiedDate":"2023-11-02"},{"lineNumber":277,"author":{"gitId":"ryanozx"},"content":"        expected \u003d Range.createNullableRange(null, null);","lastModifiedDate":"2023-11-02"},{"lineNumber":278,"author":{"gitId":"ryanozx"},"content":"        assertEquals(ParserUtil.parseNullableRange(null, null), expected);","lastModifiedDate":"2023-11-02"},{"lineNumber":279,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":280,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":281,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":282,"author":{"gitId":"ryanozx"},"content":"    public void parseDescription_nullDescription_throwsException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":283,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription(null));","lastModifiedDate":"2023-11-02"},{"lineNumber":284,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":285,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":286,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":287,"author":{"gitId":"ryanozx"},"content":"    public void parseDescription_validDescription() {","lastModifiedDate":"2023-11-02"},{"lineNumber":288,"author":{"gitId":"ryanozx"},"content":"        String descText \u003d \"test description\";","lastModifiedDate":"2023-11-02"},{"lineNumber":289,"author":{"gitId":"ryanozx"},"content":"        Description expected \u003d new Description(descText);","lastModifiedDate":"2023-11-02"},{"lineNumber":290,"author":{"gitId":"ryanozx"},"content":"        assertEquals(ParserUtil.parseDescription(descText), expected);","lastModifiedDate":"2023-11-02"},{"lineNumber":291,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":292,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"ryanozx":98,"ivyy-poison":2,"-":192}},{"path":"src/test/java/seedu/address/logic/parser/RejectLeaveCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"InfiBeyond"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"InfiBeyond"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"InfiBeyond"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.logic.commands.RejectLeaveCommand;","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"InfiBeyond"},"content":"public class RejectLeaveCommandParserTest {","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"InfiBeyond"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"InfiBeyond"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, RejectLeaveCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"InfiBeyond"},"content":"    private RejectLeaveCommandParser parser \u003d new RejectLeaveCommandParser();","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"InfiBeyond"},"content":"    public void parse_emptyIndex_failure() {","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"InfiBeyond"},"content":"        // no index and no field specified","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"InfiBeyond"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"InfiBeyond"},"content":"        assertParseFailure(parser, \"    \", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"InfiBeyond"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"InfiBeyond"},"content":"        Index validIndex \u003d Index.fromOneBased(10);","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"InfiBeyond"},"content":"        RejectLeaveCommand expectedCommand \u003d new RejectLeaveCommand(validIndex);","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"InfiBeyond"},"content":"        assertParseSuccess(parser, \"10\", expectedCommand);","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"InfiBeyond"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"InfiBeyond"},"content":"    public void parse_invalidIndex_failure() {","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"InfiBeyond"},"content":"        // negative index","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"InfiBeyond"},"content":"        assertParseFailure(parser, \"-5\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"InfiBeyond"},"content":"        // zero index","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"InfiBeyond"},"content":"        assertParseFailure(parser, \"0\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"InfiBeyond"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"InfiBeyond"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"InfiBeyond"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"InfiBeyond":43}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-07"},{"lineNumber":23,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2023-11-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);","lastModifiedDate":"2018-03-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":75,"author":{"gitId":"ivyy-poison"},"content":"    public void getPerson_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2023-11-08"},{"lineNumber":76,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e addressBook.getPerson(ALICE));","lastModifiedDate":"2023-11-08"},{"lineNumber":77,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":78,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":79,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":80,"author":{"gitId":"ivyy-poison"},"content":"    public void getPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2023-11-08"},{"lineNumber":81,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.getPerson(null));","lastModifiedDate":"2023-11-08"},{"lineNumber":82,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":83,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":84,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":85,"author":{"gitId":"ivyy-poison"},"content":"    public void getPerson_validPerson_success() {","lastModifiedDate":"2023-11-08"},{"lineNumber":86,"author":{"gitId":"ivyy-poison"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2023-11-08"},{"lineNumber":87,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(ALICE, addressBook.getPerson(ALICE));","lastModifiedDate":"2023-11-08"},{"lineNumber":88,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":89,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        String expected \u003d AddressBook.class.getCanonicalName() + \"{persons\u003d\" + addressBook.getPersonList() + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertEquals(expected, addressBook.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":109,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":110,"author":{"gitId":"ivyy-poison"},"content":"    public void equalsMethod() {","lastModifiedDate":"2023-11-08"},{"lineNumber":111,"author":{"gitId":"ivyy-poison"},"content":"        // same object","lastModifiedDate":"2023-11-08"},{"lineNumber":112,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(addressBook.equals(addressBook));","lastModifiedDate":"2023-11-08"},{"lineNumber":113,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":114,"author":{"gitId":"ivyy-poison"},"content":"        // different class","lastModifiedDate":"2023-11-08"},{"lineNumber":115,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(addressBook.equals(new Object()));","lastModifiedDate":"2023-11-08"},{"lineNumber":116,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":117,"author":{"gitId":"ivyy-poison"},"content":"        // same class, different person list","lastModifiedDate":"2023-11-08"},{"lineNumber":118,"author":{"gitId":"ivyy-poison"},"content":"        AddressBook addressBook2 \u003d new AddressBook();","lastModifiedDate":"2023-11-08"},{"lineNumber":119,"author":{"gitId":"ivyy-poison"},"content":"        addressBook2.addPerson(ALICE);","lastModifiedDate":"2023-11-08"},{"lineNumber":120,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(addressBook.equals(addressBook2));","lastModifiedDate":"2023-11-08"},{"lineNumber":121,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":122,"author":{"gitId":"ivyy-poison"},"content":"        // same class, same person list","lastModifiedDate":"2023-11-08"},{"lineNumber":123,"author":{"gitId":"ivyy-poison"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2023-11-08"},{"lineNumber":124,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(addressBook.equals(addressBook2));","lastModifiedDate":"2023-11-08"},{"lineNumber":125,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":126,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":127,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":128,"author":{"gitId":"ivyy-poison"},"content":"    public void hashcodeMethod() {","lastModifiedDate":"2023-11-08"},{"lineNumber":129,"author":{"gitId":"ivyy-poison"},"content":"        // same object","lastModifiedDate":"2023-11-08"},{"lineNumber":130,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(addressBook.hashCode() \u003d\u003d addressBook.hashCode());","lastModifiedDate":"2023-11-08"},{"lineNumber":131,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":132,"author":{"gitId":"ivyy-poison"},"content":"        // different class","lastModifiedDate":"2023-11-08"},{"lineNumber":133,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(addressBook.hashCode() \u003d\u003d new Object().hashCode());","lastModifiedDate":"2023-11-08"},{"lineNumber":134,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":135,"author":{"gitId":"ivyy-poison"},"content":"        // same class, different person list","lastModifiedDate":"2023-11-08"},{"lineNumber":136,"author":{"gitId":"ivyy-poison"},"content":"        AddressBook addressBook2 \u003d new AddressBook();","lastModifiedDate":"2023-11-08"},{"lineNumber":137,"author":{"gitId":"ivyy-poison"},"content":"        addressBook2.addPerson(ALICE);","lastModifiedDate":"2023-11-08"},{"lineNumber":138,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(addressBook.hashCode() \u003d\u003d addressBook2.hashCode());","lastModifiedDate":"2023-11-08"},{"lineNumber":139,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":140,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2018-03-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"ivyy-poison":49,"-":107}},{"path":"src/test/java/seedu/address/model/LeavesBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.model;","lastModifiedDate":"2023-10-23"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-23"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-23"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-23"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-23"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalLeaves.ALICE_LEAVE;","lastModifiedDate":"2023-10-23"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalLeaves.BOB_LEAVE;","lastModifiedDate":"2023-10-23"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-10-23"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-23"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"import java.util.Collection;","lastModifiedDate":"2023-10-23"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":"import java.util.Collections;","lastModifiedDate":"2023-10-23"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":"import java.util.List;","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-23"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-10-23"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-23"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.leave.Date;","lastModifiedDate":"2023-11-08"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-10-23"},{"lineNumber":22,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.leave.exceptions.DuplicateLeaveException;","lastModifiedDate":"2023-10-23"},{"lineNumber":23,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.leave.exceptions.LeaveNotFoundException;","lastModifiedDate":"2023-10-23"},{"lineNumber":24,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.testutil.LeaveBuilder;","lastModifiedDate":"2023-10-23"},{"lineNumber":25,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":"public class LeavesBookTest {","lastModifiedDate":"2023-10-23"},{"lineNumber":27,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"    private final LeavesBook leavesBook \u003d new LeavesBook();","lastModifiedDate":"2023-10-23"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"    public void constructor() {","lastModifiedDate":"2023-10-23"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(Collections.emptyList(), leavesBook.getLeaveList());","lastModifiedDate":"2023-10-23"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e leavesBook.resetData(null));","lastModifiedDate":"2023-10-23"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"    public void resetData_withValidReadOnlyLeavesBook_replacesData() {","lastModifiedDate":"2023-10-23"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"        LeavesBook newData \u003d getTypicalLeavesBook();","lastModifiedDate":"2023-10-23"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"        leavesBook.resetData(newData);","lastModifiedDate":"2023-10-23"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(newData, leavesBook);","lastModifiedDate":"2023-10-23"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":46,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":47,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":48,"author":{"gitId":"ivyy-poison"},"content":"    public void resetData_withDuplicateLeaves_throwsDuplicateLeaveException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":49,"author":{"gitId":"ivyy-poison"},"content":"        // Two leaves with the same identity fields","lastModifiedDate":"2023-10-23"},{"lineNumber":50,"author":{"gitId":"ivyy-poison"},"content":"        Leave editedAlice \u003d new LeaveBuilder(ALICE_LEAVE).withDescription(","lastModifiedDate":"2023-10-23"},{"lineNumber":51,"author":{"gitId":"ivyy-poison"},"content":"                \"Alice\u0027s Maternity Leave Description\").build();","lastModifiedDate":"2023-10-23"},{"lineNumber":52,"author":{"gitId":"ivyy-poison"},"content":"        List\u003cLeave\u003e newLeaves \u003d Arrays.asList(ALICE_LEAVE, editedAlice);","lastModifiedDate":"2023-10-23"},{"lineNumber":53,"author":{"gitId":"ivyy-poison"},"content":"        LeavesBookStub newData \u003d new LeavesBookStub(newLeaves);","lastModifiedDate":"2023-10-23"},{"lineNumber":54,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":55,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(DuplicateLeaveException.class, () -\u003e leavesBook.resetData(newData));","lastModifiedDate":"2023-10-23"},{"lineNumber":56,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":57,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":58,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":59,"author":{"gitId":"ivyy-poison"},"content":"    public void hasLeave_nullLeave_throwsNullPointerException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":60,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e leavesBook.hasLeave(null));","lastModifiedDate":"2023-10-23"},{"lineNumber":61,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":62,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":63,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":64,"author":{"gitId":"ivyy-poison"},"content":"    public void hasLeave_leaveNotInLeavesBook_returnsFalse() {","lastModifiedDate":"2023-10-23"},{"lineNumber":65,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(leavesBook.hasLeave(ALICE_LEAVE));","lastModifiedDate":"2023-10-23"},{"lineNumber":66,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":67,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":68,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":69,"author":{"gitId":"ivyy-poison"},"content":"    public void hasLeave_leaveInLeavesBook_returnsTrue() {","lastModifiedDate":"2023-10-23"},{"lineNumber":70,"author":{"gitId":"ivyy-poison"},"content":"        leavesBook.addLeave(ALICE_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":71,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(leavesBook.hasLeave(ALICE_LEAVE));","lastModifiedDate":"2023-10-23"},{"lineNumber":72,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":73,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":74,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":75,"author":{"gitId":"ivyy-poison"},"content":"    public void hasConcurrentLeave_leaveInLeavesBook_returnsTrue() {","lastModifiedDate":"2023-11-08"},{"lineNumber":76,"author":{"gitId":"ivyy-poison"},"content":"        leavesBook.addLeave(ALICE_LEAVE);","lastModifiedDate":"2023-11-08"},{"lineNumber":77,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(leavesBook.hasConcurrentLeave(ALICE_LEAVE));","lastModifiedDate":"2023-11-08"},{"lineNumber":78,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":79,"author":{"gitId":"ivyy-poison"},"content":"        // Leave with same name, different start date, same end date","lastModifiedDate":"2023-11-08"},{"lineNumber":80,"author":{"gitId":"ivyy-poison"},"content":"        Leave editedAlice \u003d new LeaveBuilder(ALICE_LEAVE).withTitle(\"Alice\u0027s Maternity Leave 2\")","lastModifiedDate":"2023-11-08"},{"lineNumber":81,"author":{"gitId":"ivyy-poison"},"content":"                .withDescription(\"Alice\u0027s Maternity Leave 2 Description\")","lastModifiedDate":"2023-11-08"},{"lineNumber":82,"author":{"gitId":"ivyy-poison"},"content":"                .withStart(Date.of(ALICE_LEAVE.getStart().getDate().plusDays(1))).build();","lastModifiedDate":"2023-11-08"},{"lineNumber":83,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(leavesBook.hasConcurrentLeave(editedAlice));","lastModifiedDate":"2023-11-08"},{"lineNumber":84,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":85,"author":{"gitId":"ivyy-poison"},"content":"        // Leave with same name, same start date, different end date","lastModifiedDate":"2023-11-08"},{"lineNumber":86,"author":{"gitId":"ivyy-poison"},"content":"        Leave editedAlice2 \u003d new LeaveBuilder(ALICE_LEAVE).withTitle(\"Alice\u0027s Maternity Leave 3\")","lastModifiedDate":"2023-11-08"},{"lineNumber":87,"author":{"gitId":"ivyy-poison"},"content":"                .withDescription(\"Alice\u0027s Maternity Leave 3 Description\")","lastModifiedDate":"2023-11-08"},{"lineNumber":88,"author":{"gitId":"ivyy-poison"},"content":"                .withEnd(Date.of(ALICE_LEAVE.getEnd().getDate().plusDays(1))).build();","lastModifiedDate":"2023-11-08"},{"lineNumber":89,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(leavesBook.hasConcurrentLeave(editedAlice2));","lastModifiedDate":"2023-11-08"},{"lineNumber":90,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":91,"author":{"gitId":"ivyy-poison"},"content":"        // Leave with same name, different start date, different end date","lastModifiedDate":"2023-11-08"},{"lineNumber":92,"author":{"gitId":"ivyy-poison"},"content":"        Leave editedAlice3 \u003d new LeaveBuilder(ALICE_LEAVE).withTitle(\"Alice\u0027s Maternity Leave 4\")","lastModifiedDate":"2023-11-08"},{"lineNumber":93,"author":{"gitId":"ivyy-poison"},"content":"                .withDescription(\"Alice\u0027s Maternity Leave 4 Description\")","lastModifiedDate":"2023-11-08"},{"lineNumber":94,"author":{"gitId":"ivyy-poison"},"content":"                .withStart(Date.of(ALICE_LEAVE.getStart().getDate().plusDays(1)))","lastModifiedDate":"2023-11-08"},{"lineNumber":95,"author":{"gitId":"ivyy-poison"},"content":"                .withEnd(Date.of(ALICE_LEAVE.getEnd().getDate().plusDays(1))).build();","lastModifiedDate":"2023-11-08"},{"lineNumber":96,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(leavesBook.hasConcurrentLeave(editedAlice3));","lastModifiedDate":"2023-11-08"},{"lineNumber":97,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":98,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":99,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":100,"author":{"gitId":"ivyy-poison"},"content":"    public void hasLeave_leaveWithSameIdentityFieldsInLeavesBook_returnsTrue() {","lastModifiedDate":"2023-10-23"},{"lineNumber":101,"author":{"gitId":"ivyy-poison"},"content":"        leavesBook.addLeave(ALICE_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":102,"author":{"gitId":"ivyy-poison"},"content":"        Leave editedAlice \u003d new LeaveBuilder(ALICE_LEAVE).withDescription(","lastModifiedDate":"2023-10-23"},{"lineNumber":103,"author":{"gitId":"ivyy-poison"},"content":"                \"Alice\u0027s Maternity Leave Description\").build();","lastModifiedDate":"2023-10-23"},{"lineNumber":104,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(leavesBook.hasLeave(editedAlice));","lastModifiedDate":"2023-10-23"},{"lineNumber":105,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":106,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":107,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":108,"author":{"gitId":"ivyy-poison"},"content":"    public void addLeave_nullLeave_throwsNullPointerException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":109,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e leavesBook.addLeave(null));","lastModifiedDate":"2023-10-23"},{"lineNumber":110,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":111,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":112,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":113,"author":{"gitId":"ivyy-poison"},"content":"    public void addLeave_duplicateLeave_throwsDuplicateLeaveException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":114,"author":{"gitId":"ivyy-poison"},"content":"        leavesBook.addLeave(ALICE_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":115,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(DuplicateLeaveException.class, () -\u003e leavesBook.addLeave(ALICE_LEAVE));","lastModifiedDate":"2023-10-23"},{"lineNumber":116,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":117,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":118,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":119,"author":{"gitId":"ivyy-poison"},"content":"    public void setLeave_nullTargetLeave_throwsNullPointerException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":120,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e leavesBook.setLeave(null, ALICE_LEAVE));","lastModifiedDate":"2023-10-23"},{"lineNumber":121,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":122,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":123,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":124,"author":{"gitId":"ivyy-poison"},"content":"    public void setLeave_targetNotInBook_throwsLeaveNotFoundException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":125,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(LeaveNotFoundException.class, () -\u003e leavesBook.setLeave(ALICE_LEAVE, ALICE_LEAVE));","lastModifiedDate":"2023-10-23"},{"lineNumber":126,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":127,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":128,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":129,"author":{"gitId":"ivyy-poison"},"content":"    public void setLeave_targetAlreadyExistInBook_throwsDuplicateLeaveException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":130,"author":{"gitId":"ivyy-poison"},"content":"        leavesBook.addLeave(ALICE_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":131,"author":{"gitId":"ivyy-poison"},"content":"        leavesBook.addLeave(BOB_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":132,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(DuplicateLeaveException.class, () -\u003e leavesBook.setLeave(ALICE_LEAVE, BOB_LEAVE));","lastModifiedDate":"2023-10-23"},{"lineNumber":133,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":134,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":135,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":136,"author":{"gitId":"ivyy-poison"},"content":"    public void setLeave_editedLeaveIsSameLeave_success() {","lastModifiedDate":"2023-10-23"},{"lineNumber":137,"author":{"gitId":"ivyy-poison"},"content":"        leavesBook.addLeave(ALICE_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":138,"author":{"gitId":"ivyy-poison"},"content":"        leavesBook.setLeave(ALICE_LEAVE, ALICE_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":139,"author":{"gitId":"ivyy-poison"},"content":"        LeavesBook expectedLeavesBook \u003d new LeavesBook();","lastModifiedDate":"2023-10-23"},{"lineNumber":140,"author":{"gitId":"ivyy-poison"},"content":"        expectedLeavesBook.addLeave(ALICE_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":141,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(expectedLeavesBook, leavesBook);","lastModifiedDate":"2023-10-23"},{"lineNumber":142,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":143,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":144,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":145,"author":{"gitId":"ivyy-poison"},"content":"    public void removeLeave_nullLeave_throwsNullPointerException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":146,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e leavesBook.removeLeave(null));","lastModifiedDate":"2023-10-23"},{"lineNumber":147,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":148,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":149,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":150,"author":{"gitId":"ivyy-poison"},"content":"    public void removeLeave_leaveDoesNotExist_throwsLeaveNotFoundException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":151,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(LeaveNotFoundException.class, () -\u003e leavesBook.removeLeave(ALICE_LEAVE));","lastModifiedDate":"2023-10-23"},{"lineNumber":152,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":153,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":154,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":155,"author":{"gitId":"ivyy-poison"},"content":"    public void removeLeave_existingLeave_removesLeave() {","lastModifiedDate":"2023-10-23"},{"lineNumber":156,"author":{"gitId":"ivyy-poison"},"content":"        leavesBook.addLeave(ALICE_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":157,"author":{"gitId":"ivyy-poison"},"content":"        leavesBook.removeLeave(ALICE_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":158,"author":{"gitId":"ivyy-poison"},"content":"        LeavesBook expectedLeavesBook \u003d new LeavesBook();","lastModifiedDate":"2023-10-23"},{"lineNumber":159,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(expectedLeavesBook, leavesBook);","lastModifiedDate":"2023-10-23"},{"lineNumber":160,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":161,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":162,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":163,"author":{"gitId":"ivyy-poison"},"content":"    public void getLeaveList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":164,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e leavesBook.getLeaveList().remove(0));","lastModifiedDate":"2023-10-23"},{"lineNumber":165,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":166,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":167,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":168,"author":{"gitId":"ivyy-poison"},"content":"    public void equalsMethod() {","lastModifiedDate":"2023-10-23"},{"lineNumber":169,"author":{"gitId":"ivyy-poison"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-23"},{"lineNumber":170,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(leavesBook.equals(leavesBook));","lastModifiedDate":"2023-10-23"},{"lineNumber":171,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":172,"author":{"gitId":"ivyy-poison"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-23"},{"lineNumber":173,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(leavesBook.equals(null));","lastModifiedDate":"2023-10-23"},{"lineNumber":174,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":175,"author":{"gitId":"ivyy-poison"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-23"},{"lineNumber":176,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(leavesBook.equals(5));","lastModifiedDate":"2023-10-23"},{"lineNumber":177,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":178,"author":{"gitId":"ivyy-poison"},"content":"        // different leaves book -\u003e returns false","lastModifiedDate":"2023-10-23"},{"lineNumber":179,"author":{"gitId":"ivyy-poison"},"content":"        LeavesBook differentLeavesBook \u003d new LeavesBook();","lastModifiedDate":"2023-10-23"},{"lineNumber":180,"author":{"gitId":"ivyy-poison"},"content":"        differentLeavesBook.addLeave(ALICE_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":181,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(leavesBook.equals(differentLeavesBook));","lastModifiedDate":"2023-10-23"},{"lineNumber":182,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":183,"author":{"gitId":"ivyy-poison"},"content":"        // same unique leave list -\u003e return true","lastModifiedDate":"2023-10-23"},{"lineNumber":184,"author":{"gitId":"ivyy-poison"},"content":"        LeavesBook differentLeavesBook2 \u003d new LeavesBook();","lastModifiedDate":"2023-10-23"},{"lineNumber":185,"author":{"gitId":"ivyy-poison"},"content":"        differentLeavesBook2.addLeave(ALICE_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":186,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(differentLeavesBook.equals(differentLeavesBook2));","lastModifiedDate":"2023-10-23"},{"lineNumber":187,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":188,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":189,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":190,"author":{"gitId":"ivyy-poison"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-23"},{"lineNumber":191,"author":{"gitId":"ivyy-poison"},"content":"        String expected \u003d LeavesBook.class.getCanonicalName() + \"{leaves\u003d\" + leavesBook.getLeaveList() + \"}\";","lastModifiedDate":"2023-10-23"},{"lineNumber":192,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(expected, leavesBook.toString());","lastModifiedDate":"2023-10-23"},{"lineNumber":193,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":194,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":195,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":196,"author":{"gitId":"ivyy-poison"},"content":"     * A stub ReadOnlyLeavesBook whose leaves list can violate interface constraints.","lastModifiedDate":"2023-10-23"},{"lineNumber":197,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":198,"author":{"gitId":"ivyy-poison"},"content":"    private static class LeavesBookStub implements ReadOnlyLeavesBook {","lastModifiedDate":"2023-10-23"},{"lineNumber":199,"author":{"gitId":"ivyy-poison"},"content":"        private final ObservableList\u003cLeave\u003e leaves \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-10-23"},{"lineNumber":200,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":201,"author":{"gitId":"ivyy-poison"},"content":"        LeavesBookStub(Collection\u003cLeave\u003e leaves) {","lastModifiedDate":"2023-10-23"},{"lineNumber":202,"author":{"gitId":"ivyy-poison"},"content":"            this.leaves.setAll(leaves);","lastModifiedDate":"2023-10-23"},{"lineNumber":203,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-23"},{"lineNumber":204,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":205,"author":{"gitId":"ivyy-poison"},"content":"        @Override","lastModifiedDate":"2023-10-23"},{"lineNumber":206,"author":{"gitId":"ivyy-poison"},"content":"        public ObservableList\u003cLeave\u003e getLeaveList() {","lastModifiedDate":"2023-10-23"},{"lineNumber":207,"author":{"gitId":"ivyy-poison"},"content":"            return leaves;","lastModifiedDate":"2023-10-23"},{"lineNumber":208,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-23"},{"lineNumber":209,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":210,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":211,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-23"}],"authorContributionMap":{"ivyy-poison":211}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2017-05-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_LEAVES;","lastModifiedDate":"2023-11-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalLeaves.ALICE_LEAVE;","lastModifiedDate":"2023-11-12"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalLeaves.BENSON_LEAVE;","lastModifiedDate":"2023-11-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2017-07-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.LeaveContainsPersonPredicate;","lastModifiedDate":"2023-11-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;","lastModifiedDate":"2017-05-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(new LeavesBook(), new LeavesBook(modelManager.getLeavesBook()));","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2017-07-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":105,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":106,"author":{"gitId":"ryanozx"},"content":"        LeavesBook leavesBook \u003d new LeavesBook();","lastModifiedDate":"2023-11-12"},{"lineNumber":107,"author":{"gitId":"ryanozx"},"content":"        leavesBook.addLeave(ALICE_LEAVE);","lastModifiedDate":"2023-11-12"},{"lineNumber":108,"author":{"gitId":"ryanozx"},"content":"        leavesBook.addLeave(BENSON_LEAVE);","lastModifiedDate":"2023-11-12"},{"lineNumber":109,"author":{"gitId":"ryanozx"},"content":"        LeavesBook differentLeavesBook \u003d new LeavesBook();","lastModifiedDate":"2023-11-12"},{"lineNumber":110,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"ryanozx"},"content":"        modelManager \u003d new ModelManager(addressBook, leavesBook, userPrefs);","lastModifiedDate":"2023-11-12"},{"lineNumber":115,"author":{"gitId":"ryanozx"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, leavesBook, userPrefs);","lastModifiedDate":"2023-11-12"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":128,"author":{"gitId":"ryanozx"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, leavesBook, userPrefs)));","lastModifiedDate":"2023-11-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":131,"author":{"gitId":"ryanozx"},"content":"        String[] keywords \u003d ALICE.getName().toString().split(\"\\\\s+\");","lastModifiedDate":"2023-11-02"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":133,"author":{"gitId":"ryanozx"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, leavesBook, userPrefs)));","lastModifiedDate":"2023-11-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":138,"author":{"gitId":"ryanozx"},"content":"        // different leavesBook -\u003e returns false","lastModifiedDate":"2023-11-12"},{"lineNumber":139,"author":{"gitId":"ryanozx"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentLeavesBook, userPrefs)));","lastModifiedDate":"2023-11-12"},{"lineNumber":140,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":141,"author":{"gitId":"ryanozx"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2023-11-12"},{"lineNumber":142,"author":{"gitId":"ryanozx"},"content":"        modelManager.updateFilteredLeaveList(new LeaveContainsPersonPredicate(BENSON));","lastModifiedDate":"2023-11-12"},{"lineNumber":143,"author":{"gitId":"ryanozx"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, leavesBook, userPrefs)));","lastModifiedDate":"2023-11-12"},{"lineNumber":144,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":145,"author":{"gitId":"ryanozx"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2023-11-12"},{"lineNumber":146,"author":{"gitId":"ryanozx"},"content":"        modelManager.updateFilteredLeaveList(PREDICATE_SHOW_ALL_LEAVES);","lastModifiedDate":"2023-11-12"},{"lineNumber":147,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":151,"author":{"gitId":"ryanozx"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, leavesBook, differentUserPrefs)));","lastModifiedDate":"2023-11-12"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":153,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"ryanozx":26,"ivyy-poison":1,"-":126}},{"path":"src/test/java/seedu/address/model/ReadOnlyFilteredAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.model;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"ong-wei-hong"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import java.util.List;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"public class ReadOnlyFilteredAddressBookTest {","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"    public void getPersonList() {","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"ong-wei-hong"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLeavesBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"        ReadOnlyFilteredAddressBook addressBook \u003d new ReadOnlyFilteredAddressBook(model);","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"        List\u003cPerson\u003e persons \u003d addressBook.getPersonList();","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"        assertEquals(persons, getTypicalPersons());","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"ryanozx":20,"ong-wei-hong":3}},{"path":"src/test/java/seedu/address/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2018-11-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-08"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class UserPrefsTest {","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":24,"author":{"gitId":"ivyy-poison"},"content":"    public void equalMethod() {","lastModifiedDate":"2023-11-08"},{"lineNumber":25,"author":{"gitId":"ivyy-poison"},"content":"        // same object","lastModifiedDate":"2023-11-08"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2023-11-08"},{"lineNumber":27,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(userPrefs.equals(userPrefs));","lastModifiedDate":"2023-11-08"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"        // different class","lastModifiedDate":"2023-11-08"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(userPrefs.equals(new Object()));","lastModifiedDate":"2023-11-08"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"ivyy-poison":11,"-":21}},{"path":"src/test/java/seedu/address/model/leave/DateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.model.leave;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2023-10-25"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-10-25"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":"public class DateTest {","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e Date.of((String) null));","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e Date.of((LocalDate) null));","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":"    public void constructor_incorrectStringFormat_throwsIllegalArgumentException() {","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e Date.of(\"2020-01-01-01\"));","lastModifiedDate":"2023-10-25"},{"lineNumber":23,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e Date.of(\"2020/01/01\"));","lastModifiedDate":"2023-10-25"},{"lineNumber":24,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":25,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-25"},{"lineNumber":27,"author":{"gitId":"ivyy-poison"},"content":"    public void constructor_leapYear_throwsDateTimeException() {","lastModifiedDate":"2023-10-25"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(DateTimeException.class, () -\u003e Date.of(\"2020-02-30\"));","lastModifiedDate":"2023-10-25"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-25"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"    public void constructor_invalidDate_throwsDateTimeException() {","lastModifiedDate":"2023-10-25"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(DateTimeException.class, () -\u003e Date.of(\"2020-02-31\"));","lastModifiedDate":"2023-10-25"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(DateTimeException.class, () -\u003e Date.of(\"2020-04-31\"));","lastModifiedDate":"2023-10-25"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(DateTimeException.class, () -\u003e Date.of(\"2020-06-31\"));","lastModifiedDate":"2023-10-25"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(DateTimeException.class, () -\u003e Date.of(\"2020-09-31\"));","lastModifiedDate":"2023-10-25"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(DateTimeException.class, () -\u003e Date.of(\"2020-11-31\"));","lastModifiedDate":"2023-10-25"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"    public void constructor_validDate() {","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(Date.of(\"2020-01-01\").getDate().toString().equals(\"2020-01-01\"));","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(Date.of(LocalDate.of(2020, 1, 1)).getDate().toString().equals(\"2020-01-01\"));","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"ivyy-poison"},"content":"    public void isBeforeMethod() {","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(Date.of(\"2020-01-01\").isBefore(Date.of(\"2020-01-02\")));","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(Date.of(\"2020-01-01\").isBefore(Date.of(\"2020-01-01\")));","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(Date.of(\"2020-01-02\").isBefore(Date.of(\"2020-01-01\")));","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"    public void isAfterMethod() {","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"        assertTrue(Date.of(\"2020-01-02\").isAfter(Date.of(\"2020-01-01\")));","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"        assertFalse(Date.of(\"2020-01-01\").isAfter(Date.of(\"2020-01-02\")));","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"        assertFalse(Date.of(\"2020-01-01\").isAfter(Date.of(\"2020-01-01\")));","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":61,"author":{"gitId":"ivyy-poison"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-24"},{"lineNumber":62,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(Date.of(\"2020-01-01\").toString().equals(\"2020-01-01\"));","lastModifiedDate":"2023-10-24"},{"lineNumber":63,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":64,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":65,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":66,"author":{"gitId":"ivyy-poison"},"content":"    public void equalsMethod() {","lastModifiedDate":"2023-10-24"},{"lineNumber":67,"author":{"gitId":"ivyy-poison"},"content":"        Date date \u003d Date.of(\"2020-01-01\");","lastModifiedDate":"2023-10-24"},{"lineNumber":68,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":69,"author":{"gitId":"ivyy-poison"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-24"},{"lineNumber":70,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(date.equals(Date.of(\"2020-01-01\")));","lastModifiedDate":"2023-10-24"},{"lineNumber":71,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":72,"author":{"gitId":"ivyy-poison"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-24"},{"lineNumber":73,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(date.equals(date));","lastModifiedDate":"2023-10-24"},{"lineNumber":74,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":75,"author":{"gitId":"ivyy-poison"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-24"},{"lineNumber":76,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(date.equals(null));","lastModifiedDate":"2023-10-24"},{"lineNumber":77,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":78,"author":{"gitId":"ivyy-poison"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-24"},{"lineNumber":79,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(date.equals(5.0f));","lastModifiedDate":"2023-10-24"},{"lineNumber":80,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":81,"author":{"gitId":"ivyy-poison"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2023-10-24"},{"lineNumber":82,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(date.equals(Date.of(\"2020-01-02\")));","lastModifiedDate":"2023-10-24"},{"lineNumber":83,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":84,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":85,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":86,"author":{"gitId":"ivyy-poison"},"content":"    public void hashcodeMethod() {","lastModifiedDate":"2023-10-24"},{"lineNumber":87,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(Date.of(\"2020-01-01\").hashCode() \u003d\u003d Date.of(\"2020-01-01\").hashCode());","lastModifiedDate":"2023-10-24"},{"lineNumber":88,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(Date.of(\"2020-01-01\").hashCode() \u003d\u003d Date.of(\"2020-01-02\").hashCode());","lastModifiedDate":"2023-10-24"},{"lineNumber":89,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":90,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ryanozx":7,"ivyy-poison":83}},{"path":"src/test/java/seedu/address/model/leave/DescriptionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.model.leave;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"public class DescriptionTest {","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Description(null));","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"    public void constructor_invalidDescription_throwsIllegalArgumentException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"        String invalidDescription \u003d \"testing#*\";","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(IllegalArgumentException.class, Description.MESSAGE_CONSTRAINTS, ()","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":"                -\u003e new Description(invalidDescription));","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"ivyy-poison"},"content":"    public void constructor_emptyDescription_valid() {","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"ivyy-poison"},"content":"        String emptyDescription \u003d \"\";","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(new Description(emptyDescription).toString(), emptyDescription);","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"    public void factoryConstructor_getDefault() {","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(Description.getDefault().toString(), \"\");","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"    public void constructor_validDescription_success() {","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"        String validDescription \u003d \"testing\";","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(new Description(validDescription).toString(), validDescription);","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"        validDescription \u003d \"Alice\u0027s maternity leave. Please, refer to attachment or something\";","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(new Description(validDescription).toString(), validDescription);","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"    public void equalsMethod() {","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"        Description description \u003d new Description(\"testing\");","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"ivyy-poison"},"content":"        Description descriptionCopy \u003d new Description(\"testing\");","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(description.equals(descriptionCopy));","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"ivyy-poison"},"content":"        // different description","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"ivyy-poison"},"content":"        Description differentDescription \u003d new Description(\"testing123\");","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(description.equals(differentDescription));","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"ivyy-poison"},"content":"        // different object","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(description.equals(new Object()));","lastModifiedDate":"2023-11-01"},{"lineNumber":55,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":56,"author":{"gitId":"ivyy-poison"},"content":"        // null","lastModifiedDate":"2023-11-01"},{"lineNumber":57,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(description.equals(null));","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"ivyy-poison"},"content":"        // same object","lastModifiedDate":"2023-11-01"},{"lineNumber":60,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(description.equals(description));","lastModifiedDate":"2023-11-01"},{"lineNumber":61,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":62,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"ivyy-poison":62}},{"path":"src/test/java/seedu/address/model/leave/LeaveHasStatusPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.model.leave;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.model.leave.Status.StatusType.APPROVED;","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.model.leave.Status.StatusType.PENDING;","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.model.leave.Status.StatusType.REJECTED;","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"import seedu.address.testutil.LeaveBuilder;","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"public class LeaveHasStatusPredicateTest {","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"    private static final LeaveHasStatusPredicate PENDING_PRED \u003d new LeaveHasStatusPredicate(Status.of(PENDING));","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"    private static final LeaveHasStatusPredicate APPROVED_PRED \u003d new LeaveHasStatusPredicate(Status.of(APPROVED));","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"    private static final LeaveHasStatusPredicate REJECTED_PRED \u003d new LeaveHasStatusPredicate(Status.of(REJECTED));","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    public void constructor_nullRange_throwsNullPointerException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e new LeaveHasStatusPredicate(null));","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"    public void equals() {","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"        // same predicate","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"        assertEquals(PENDING_PRED, PENDING_PRED);","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"        // diff type","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"        assertFalse(PENDING_PRED.equals(\"1\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"        // same status","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"        LeaveHasStatusPredicate pendingPredCopy \u003d new LeaveHasStatusPredicate(Status.of(PENDING));","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"        assertEquals(PENDING_PRED, pendingPredCopy);","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        // diff status","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(PENDING_PRED, APPROVED_PRED);","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(PENDING_PRED, REJECTED_PRED);","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(APPROVED_PRED, REJECTED_PRED);","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"    public void test() {","lastModifiedDate":"2023-11-02"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"        Leave approvedLeave \u003d new LeaveBuilder().withStatus(APPROVED).build();","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"        Leave pendingLeave \u003d new LeaveBuilder().withStatus(PENDING).build();","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"        Leave rejectedLeave \u003d new LeaveBuilder().withStatus(REJECTED).build();","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"        assertTrue(APPROVED_PRED.test(approvedLeave));","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"        assertFalse(APPROVED_PRED.test(pendingLeave));","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"        assertFalse(APPROVED_PRED.test(rejectedLeave));","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"        assertTrue(PENDING_PRED.test(pendingLeave));","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"        assertFalse(PENDING_PRED.test(approvedLeave));","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"        assertFalse(PENDING_PRED.test(rejectedLeave));","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"        assertTrue(REJECTED_PRED.test(rejectedLeave));","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"        assertFalse(REJECTED_PRED.test(approvedLeave));","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"        assertFalse(REJECTED_PRED.test(pendingLeave));","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"ryanozx":61}},{"path":"src/test/java/seedu/address/model/leave/LeaveInPeriodPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.model.leave;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.exceptions.EndBeforeStartException;","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"import seedu.address.testutil.LeaveBuilder;","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"public class LeaveInPeriodPredicateTest {","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"    private static final Date FIRST_DATE \u003d Date.of(\"2023-10-20\");","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"    private static final Date SECOND_DATE \u003d Date.of(\"2023-10-27\");","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"    private static final Date THIRD_DATE \u003d Date.of(\"2023-11-03\");","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"    private static final Date FOURTH_DATE \u003d Date.of(\"2023-11-10\");","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    private static final Date FIFTH_DATE \u003d Date.of(\"2023-11-17\");","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"    private static final Date SIXTH_DATE \u003d Date.of(\"2023-11-24\");","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"    public void constructor_nullRange_throwsNullPointerException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e new LeaveInPeriodPredicate(null));","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"    public void equals_startAndEndDateNonNull() {","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate firstPredicate \u003d generatePredicate(FIRST_DATE, SECOND_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate secondPredicate \u003d generatePredicate(FIRST_DATE, THIRD_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate thirdPredicate \u003d generatePredicate(SECOND_DATE, THIRD_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"        assertEquals(firstPredicate, firstPredicate);","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"        assertFalse(firstPredicate.equals(\"1\"));","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"        // same start and end date -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate firstPredicateCopy \u003d generatePredicate(FIRST_DATE, SECOND_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"        assertEquals(firstPredicate, firstPredicateCopy);","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"        // same start, different end -\u003e returns false","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(secondPredicate, firstPredicate);","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"        // different start, same end -\u003e returns false","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(thirdPredicate, secondPredicate);","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"     * Generates a LeaveInPeriodPredicate that can take in null start and end dates","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"     * @param startDate Start date of period / null","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"     * @param endDate End date of period / null","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"     * @return LeaveInPeriodPredicate containing specified date range","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"    public static LeaveInPeriodPredicate generatePredicate(Date startDate, Date endDate) {","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"        Range dateRange \u003d Range.createNullableRange(startDate, endDate);","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"        return new LeaveInPeriodPredicate(dateRange);","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"    public void equals_startNull() {","lastModifiedDate":"2023-11-01"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate defaultPredicate \u003d generatePredicate(null, SECOND_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate nonNullStartPredicate \u003d generatePredicate(FIRST_DATE, SECOND_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate diffEndPredicate \u003d generatePredicate(null, FIRST_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"        // same end date -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate defaultPredicateCopy \u003d generatePredicate(null, SECOND_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"        assertEquals(defaultPredicate, defaultPredicateCopy);","lastModifiedDate":"2023-11-01"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"        // compare with non-null start date -\u003e returns false","lastModifiedDate":"2023-11-01"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(nonNullStartPredicate, defaultPredicate);","lastModifiedDate":"2023-11-01"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"        // diff end date -\u003e returns false","lastModifiedDate":"2023-11-01"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(diffEndPredicate, defaultPredicate);","lastModifiedDate":"2023-11-01"},{"lineNumber":78,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":79,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":81,"author":{"gitId":"ryanozx"},"content":"    public void equals_endNull() {","lastModifiedDate":"2023-11-01"},{"lineNumber":82,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate defaultPredicate \u003d generatePredicate(FIRST_DATE, null);","lastModifiedDate":"2023-11-02"},{"lineNumber":83,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate nonNullEndPredicate \u003d generatePredicate(FIRST_DATE, SECOND_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":84,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate diffStartPredicate \u003d generatePredicate(SECOND_DATE, null);","lastModifiedDate":"2023-11-02"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":86,"author":{"gitId":"ryanozx"},"content":"        // same start date -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":87,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate defaultPredicateCopy \u003d generatePredicate(FIRST_DATE, null);","lastModifiedDate":"2023-11-02"},{"lineNumber":88,"author":{"gitId":"ryanozx"},"content":"        assertEquals(defaultPredicate, defaultPredicateCopy);","lastModifiedDate":"2023-11-01"},{"lineNumber":89,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":90,"author":{"gitId":"ryanozx"},"content":"        // compare with non-null end date -\u003e returns false","lastModifiedDate":"2023-11-01"},{"lineNumber":91,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(nonNullEndPredicate, defaultPredicate);","lastModifiedDate":"2023-11-01"},{"lineNumber":92,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":93,"author":{"gitId":"ryanozx"},"content":"        // diff start date -\u003e returns false","lastModifiedDate":"2023-11-01"},{"lineNumber":94,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(diffStartPredicate, defaultPredicate);","lastModifiedDate":"2023-11-01"},{"lineNumber":95,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":96,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":97,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":98,"author":{"gitId":"ryanozx"},"content":"    public void equals_startAndEndNull() {","lastModifiedDate":"2023-11-01"},{"lineNumber":99,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate defaultPredicate \u003d generatePredicate(null, null);","lastModifiedDate":"2023-11-02"},{"lineNumber":100,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate nonNullStartPredicate \u003d generatePredicate(FIRST_DATE, null);","lastModifiedDate":"2023-11-02"},{"lineNumber":101,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate nonNullEndPredicate \u003d generatePredicate(null, SECOND_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":102,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":103,"author":{"gitId":"ryanozx"},"content":"        // start and end both null -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":104,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate defaultPredicateCopy \u003d generatePredicate(null, null);","lastModifiedDate":"2023-11-02"},{"lineNumber":105,"author":{"gitId":"ryanozx"},"content":"        assertEquals(defaultPredicate, defaultPredicateCopy);","lastModifiedDate":"2023-11-01"},{"lineNumber":106,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":107,"author":{"gitId":"ryanozx"},"content":"        // compare with non-null start date -\u003e returns false","lastModifiedDate":"2023-11-01"},{"lineNumber":108,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(nonNullStartPredicate, defaultPredicate);","lastModifiedDate":"2023-11-01"},{"lineNumber":109,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":110,"author":{"gitId":"ryanozx"},"content":"        // compare with non-null end date -\u003e returns false","lastModifiedDate":"2023-11-01"},{"lineNumber":111,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(nonNullEndPredicate, defaultPredicate);","lastModifiedDate":"2023-11-01"},{"lineNumber":112,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":113,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":114,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":115,"author":{"gitId":"ryanozx"},"content":"    public void constructor_validInputs_doesNotThrow() {","lastModifiedDate":"2023-11-01"},{"lineNumber":116,"author":{"gitId":"ryanozx"},"content":"        // no dates supplied","lastModifiedDate":"2023-11-01"},{"lineNumber":117,"author":{"gitId":"ryanozx"},"content":"        assertDoesNotThrow(() -\u003e generatePredicate(null, null));","lastModifiedDate":"2023-11-02"},{"lineNumber":118,"author":{"gitId":"ryanozx"},"content":"        // only start date supplied","lastModifiedDate":"2023-11-01"},{"lineNumber":119,"author":{"gitId":"ryanozx"},"content":"        assertDoesNotThrow(() -\u003e generatePredicate(FIRST_DATE, null));","lastModifiedDate":"2023-11-02"},{"lineNumber":120,"author":{"gitId":"ryanozx"},"content":"        // only end date supplied","lastModifiedDate":"2023-11-01"},{"lineNumber":121,"author":{"gitId":"ryanozx"},"content":"        assertDoesNotThrow(() -\u003e generatePredicate(null, SIXTH_DATE));","lastModifiedDate":"2023-11-02"},{"lineNumber":122,"author":{"gitId":"ryanozx"},"content":"        // start and end date supplied, start before end","lastModifiedDate":"2023-11-01"},{"lineNumber":123,"author":{"gitId":"ryanozx"},"content":"        assertDoesNotThrow(() -\u003e generatePredicate(FIRST_DATE, SIXTH_DATE));","lastModifiedDate":"2023-11-02"},{"lineNumber":124,"author":{"gitId":"ryanozx"},"content":"        // start and end date supplied, start equals end","lastModifiedDate":"2023-11-01"},{"lineNumber":125,"author":{"gitId":"ryanozx"},"content":"        assertDoesNotThrow(() -\u003e generatePredicate(FIRST_DATE, FIRST_DATE));","lastModifiedDate":"2023-11-02"},{"lineNumber":126,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":127,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":128,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":129,"author":{"gitId":"ryanozx"},"content":"    public void constructor_endBeforeStart_throwsException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":130,"author":{"gitId":"ryanozx"},"content":"        assertThrows(EndBeforeStartException.class, () -\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":131,"author":{"gitId":"ryanozx"},"content":"                generatePredicate(SECOND_DATE, FIRST_DATE));","lastModifiedDate":"2023-11-02"},{"lineNumber":132,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":133,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":134,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":135,"author":{"gitId":"ryanozx"},"content":"    public void test_noStartAndEndDate_returnsTrue() {","lastModifiedDate":"2023-11-01"},{"lineNumber":136,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate predicate \u003d generatePredicate(null, null);","lastModifiedDate":"2023-11-02"},{"lineNumber":137,"author":{"gitId":"ryanozx"},"content":"        assertTrue(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":138,"author":{"gitId":"ryanozx"},"content":"                .withStart(FIRST_DATE).withEnd(SECOND_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":139,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":140,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":141,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":142,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":143,"author":{"gitId":"ryanozx"},"content":"    public void test_hasStartAndEndDate_returnsTrue() {","lastModifiedDate":"2023-11-01"},{"lineNumber":144,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate predicate \u003d generatePredicate(","lastModifiedDate":"2023-11-02"},{"lineNumber":145,"author":{"gitId":"ryanozx"},"content":"                SECOND_DATE, FIFTH_DATE);","lastModifiedDate":"2023-11-01"},{"lineNumber":146,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":147,"author":{"gitId":"ryanozx"},"content":"        // start before period, end within period -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":148,"author":{"gitId":"ryanozx"},"content":"        assertTrue(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":149,"author":{"gitId":"ryanozx"},"content":"                .withStart(FIRST_DATE).withEnd(FOURTH_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":150,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":151,"author":{"gitId":"ryanozx"},"content":"        // start before period, end date is same -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":152,"author":{"gitId":"ryanozx"},"content":"        assertTrue(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":153,"author":{"gitId":"ryanozx"},"content":"                .withStart(FIRST_DATE).withEnd(FIFTH_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":154,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":155,"author":{"gitId":"ryanozx"},"content":"        // start before period, end after period -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":156,"author":{"gitId":"ryanozx"},"content":"        assertTrue(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":157,"author":{"gitId":"ryanozx"},"content":"                .withStart(FIRST_DATE).withEnd(SIXTH_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":158,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":159,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":160,"author":{"gitId":"ryanozx"},"content":"        // start date is same, end date within range -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":161,"author":{"gitId":"ryanozx"},"content":"        assertTrue(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":162,"author":{"gitId":"ryanozx"},"content":"                .withStart(SECOND_DATE).withEnd(FOURTH_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":163,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":164,"author":{"gitId":"ryanozx"},"content":"        // start date is same, end date is same -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":165,"author":{"gitId":"ryanozx"},"content":"        assertTrue(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":166,"author":{"gitId":"ryanozx"},"content":"                .withStart(SECOND_DATE).withEnd(FIFTH_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":167,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":168,"author":{"gitId":"ryanozx"},"content":"        // start date is same, end after period -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":169,"author":{"gitId":"ryanozx"},"content":"        assertTrue(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":170,"author":{"gitId":"ryanozx"},"content":"                .withStart(SECOND_DATE).withEnd(SIXTH_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":171,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":172,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":173,"author":{"gitId":"ryanozx"},"content":"        // start within range, end within range -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":174,"author":{"gitId":"ryanozx"},"content":"        assertTrue(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":175,"author":{"gitId":"ryanozx"},"content":"                .withStart(THIRD_DATE).withEnd(FOURTH_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":176,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":177,"author":{"gitId":"ryanozx"},"content":"        // start date within range, end date is same -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":178,"author":{"gitId":"ryanozx"},"content":"        assertTrue(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":179,"author":{"gitId":"ryanozx"},"content":"                .withStart(THIRD_DATE).withEnd(FIFTH_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":180,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":181,"author":{"gitId":"ryanozx"},"content":"        // start within period, end after period -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":182,"author":{"gitId":"ryanozx"},"content":"        assertTrue(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":183,"author":{"gitId":"ryanozx"},"content":"                .withStart(THIRD_DATE).withEnd(SIXTH_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":184,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":185,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":186,"author":{"gitId":"ryanozx"},"content":"        // Boundary tests - we only require an intersection of at least one day","lastModifiedDate":"2023-11-01"},{"lineNumber":187,"author":{"gitId":"ryanozx"},"content":"        // start before period, end date same as query start date -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":188,"author":{"gitId":"ryanozx"},"content":"        assertTrue(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":189,"author":{"gitId":"ryanozx"},"content":"                .withStart(FIRST_DATE).withEnd(SECOND_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":190,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":191,"author":{"gitId":"ryanozx"},"content":"        // start and end date and query start date are the same -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":192,"author":{"gitId":"ryanozx"},"content":"        assertTrue(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":193,"author":{"gitId":"ryanozx"},"content":"                .withStart(SECOND_DATE).withEnd(SECOND_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":194,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":195,"author":{"gitId":"ryanozx"},"content":"        // start date same as query end date, end after period -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":196,"author":{"gitId":"ryanozx"},"content":"        assertTrue(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":197,"author":{"gitId":"ryanozx"},"content":"                .withStart(FIFTH_DATE).withEnd(SIXTH_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":198,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":199,"author":{"gitId":"ryanozx"},"content":"        // start and end and query end date are the same -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":200,"author":{"gitId":"ryanozx"},"content":"        assertTrue(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":201,"author":{"gitId":"ryanozx"},"content":"                .withStart(FIFTH_DATE).withEnd(FIFTH_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":202,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":203,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":204,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":205,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":206,"author":{"gitId":"ryanozx"},"content":"    public void test_hasStartAndEndDate_returnsFalse() {","lastModifiedDate":"2023-11-01"},{"lineNumber":207,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate latePredicate \u003d generatePredicate(THIRD_DATE, SIXTH_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":208,"author":{"gitId":"ryanozx"},"content":"        // end date before query start date -\u003e return false","lastModifiedDate":"2023-11-01"},{"lineNumber":209,"author":{"gitId":"ryanozx"},"content":"        assertFalse(latePredicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":210,"author":{"gitId":"ryanozx"},"content":"                .withStart(FIRST_DATE).withEnd(SECOND_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":211,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":212,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":213,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate earlyPredicate \u003d generatePredicate(FIRST_DATE, FOURTH_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":214,"author":{"gitId":"ryanozx"},"content":"        // start date after query end date -\u003e returns false","lastModifiedDate":"2023-11-01"},{"lineNumber":215,"author":{"gitId":"ryanozx"},"content":"        assertFalse(earlyPredicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":216,"author":{"gitId":"ryanozx"},"content":"                .withStart(FIFTH_DATE).withEnd(SIXTH_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":217,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":218,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":219,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":220,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":221,"author":{"gitId":"ryanozx"},"content":"    public void test_hasStartDate_returnsTrue() {","lastModifiedDate":"2023-11-01"},{"lineNumber":222,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate predicate \u003d generatePredicate(THIRD_DATE, null);","lastModifiedDate":"2023-11-02"},{"lineNumber":223,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":224,"author":{"gitId":"ryanozx"},"content":"        // start date before query start, end date on query start -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":225,"author":{"gitId":"ryanozx"},"content":"        assertTrue(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":226,"author":{"gitId":"ryanozx"},"content":"                .withStart(FIRST_DATE).withEnd(THIRD_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":227,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":228,"author":{"gitId":"ryanozx"},"content":"        // start date before query start, end date after query start -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":229,"author":{"gitId":"ryanozx"},"content":"        assertTrue(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":230,"author":{"gitId":"ryanozx"},"content":"                .withStart(FIRST_DATE).withEnd(FOURTH_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":231,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":232,"author":{"gitId":"ryanozx"},"content":"        // start date on query start, end date after query start -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":233,"author":{"gitId":"ryanozx"},"content":"        assertTrue(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":234,"author":{"gitId":"ryanozx"},"content":"                .withStart(THIRD_DATE).withEnd(SIXTH_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":235,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":236,"author":{"gitId":"ryanozx"},"content":"        // start date after query start -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":237,"author":{"gitId":"ryanozx"},"content":"        assertTrue(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":238,"author":{"gitId":"ryanozx"},"content":"                .withStart(FOURTH_DATE).withEnd(SIXTH_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":239,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":240,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":241,"author":{"gitId":"ryanozx"},"content":"        // Boundary test","lastModifiedDate":"2023-11-01"},{"lineNumber":242,"author":{"gitId":"ryanozx"},"content":"        // start date and end date same as query start date -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":243,"author":{"gitId":"ryanozx"},"content":"        assertTrue(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":244,"author":{"gitId":"ryanozx"},"content":"                .withStart(THIRD_DATE).withEnd(THIRD_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":245,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":246,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":247,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":248,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":249,"author":{"gitId":"ryanozx"},"content":"    public void test_hasStartDate_returnsFalse() {","lastModifiedDate":"2023-11-01"},{"lineNumber":250,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate predicate \u003d generatePredicate(THIRD_DATE, null);","lastModifiedDate":"2023-11-02"},{"lineNumber":251,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":252,"author":{"gitId":"ryanozx"},"content":"        // end date is before query start -\u003e returns false","lastModifiedDate":"2023-11-01"},{"lineNumber":253,"author":{"gitId":"ryanozx"},"content":"        assertFalse(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":254,"author":{"gitId":"ryanozx"},"content":"                .withStart(FIRST_DATE).withEnd(SECOND_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":255,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":256,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":257,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":258,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":259,"author":{"gitId":"ryanozx"},"content":"    public void test_hasEndDate_returnsTrue() {","lastModifiedDate":"2023-11-01"},{"lineNumber":260,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate predicate \u003d generatePredicate(null, FOURTH_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":261,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":262,"author":{"gitId":"ryanozx"},"content":"        // end date before query end -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":263,"author":{"gitId":"ryanozx"},"content":"        assertTrue(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":264,"author":{"gitId":"ryanozx"},"content":"                .withStart(FIRST_DATE).withEnd(THIRD_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":265,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":266,"author":{"gitId":"ryanozx"},"content":"        // start date before query end, end date same as query end -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":267,"author":{"gitId":"ryanozx"},"content":"        assertTrue(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":268,"author":{"gitId":"ryanozx"},"content":"                .withStart(FIRST_DATE).withEnd(FOURTH_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":269,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":270,"author":{"gitId":"ryanozx"},"content":"        // start date before query end, end date after query end -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":271,"author":{"gitId":"ryanozx"},"content":"        assertTrue(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":272,"author":{"gitId":"ryanozx"},"content":"                .withStart(FIRST_DATE).withEnd(FIFTH_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":273,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":274,"author":{"gitId":"ryanozx"},"content":"        // start date on query end, end date after query end -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":275,"author":{"gitId":"ryanozx"},"content":"        assertTrue(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":276,"author":{"gitId":"ryanozx"},"content":"                .withStart(FOURTH_DATE).withEnd(SIXTH_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":277,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":278,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":279,"author":{"gitId":"ryanozx"},"content":"        // Boundary test","lastModifiedDate":"2023-11-01"},{"lineNumber":280,"author":{"gitId":"ryanozx"},"content":"        // start date and end date and query end are the same -\u003e returns true","lastModifiedDate":"2023-11-01"},{"lineNumber":281,"author":{"gitId":"ryanozx"},"content":"        assertTrue(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":282,"author":{"gitId":"ryanozx"},"content":"                .withStart(FOURTH_DATE).withEnd(FOURTH_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":283,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":284,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":285,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":286,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":287,"author":{"gitId":"ryanozx"},"content":"    public void test_hasEndDate_returnsFalse() {","lastModifiedDate":"2023-11-01"},{"lineNumber":288,"author":{"gitId":"ryanozx"},"content":"        LeaveInPeriodPredicate predicate \u003d generatePredicate(null, FOURTH_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":289,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":290,"author":{"gitId":"ryanozx"},"content":"        // start date after query end -\u003e returns false","lastModifiedDate":"2023-11-01"},{"lineNumber":291,"author":{"gitId":"ryanozx"},"content":"        assertFalse(predicate.test(new LeaveBuilder()","lastModifiedDate":"2023-11-01"},{"lineNumber":292,"author":{"gitId":"ryanozx"},"content":"                .withStart(FIFTH_DATE).withEnd(SIXTH_DATE)","lastModifiedDate":"2023-11-01"},{"lineNumber":293,"author":{"gitId":"ryanozx"},"content":"                .build()));","lastModifiedDate":"2023-11-01"},{"lineNumber":294,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":295,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"ryanozx":295}},{"path":"src/test/java/seedu/address/model/leave/LeaveTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.model.leave;","lastModifiedDate":"2023-10-23"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-23"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-23"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-23"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-23"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalLeaves.ALICE_LEAVE;","lastModifiedDate":"2023-10-23"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalLeaves.BOB_LEAVE;","lastModifiedDate":"2023-10-23"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2023-10-23"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2023-10-23"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-23"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.person.ComparablePerson;","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-11-12"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.testutil.LeaveBuilder;","lastModifiedDate":"2023-10-23"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-11-12"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":"public class LeaveTest {","lastModifiedDate":"2023-10-23"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":22,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":23,"author":{"gitId":"ivyy-poison"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":24,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Leave(null, ALICE_LEAVE.getTitle(),","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"                constructRange(ALICE_LEAVE.getStart(), ALICE_LEAVE.getEnd())));","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Leave(new MockPersonWithNullName(), ALICE_LEAVE.getTitle(),","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"                constructRange(ALICE_LEAVE.getStart(), ALICE_LEAVE.getEnd())));","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Leave(ALICE, null,","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"                constructRange(ALICE_LEAVE.getStart(), ALICE_LEAVE.getEnd())));","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Leave(ALICE, ALICE_LEAVE.getTitle(),","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"                null));","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Leave(ALICE, ALICE_LEAVE.getTitle(),","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"                constructRange(ALICE_LEAVE.getStart(), null)));","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Leave(ALICE, ALICE_LEAVE.getTitle(),","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"                constructRange(null, ALICE_LEAVE.getEnd())));","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Leave(null, ALICE_LEAVE.getTitle(),","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"                constructRange(ALICE_LEAVE.getStart(), ALICE_LEAVE.getEnd()), ALICE_LEAVE.getDescription()));","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Leave(new MockPersonWithNullName(), ALICE_LEAVE.getTitle(),","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"                constructRange(ALICE_LEAVE.getStart(), ALICE_LEAVE.getEnd()), ALICE_LEAVE.getDescription()));","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Leave(ALICE, null,","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"                constructRange(ALICE_LEAVE.getStart(), ALICE_LEAVE.getEnd()), ALICE_LEAVE.getDescription()));","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Leave(ALICE, ALICE_LEAVE.getTitle(),","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"                null, ALICE_LEAVE.getDescription()));","lastModifiedDate":"2023-11-02"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Leave(ALICE, ALICE_LEAVE.getTitle(),","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"                constructRange(ALICE_LEAVE.getStart(), null), ALICE_LEAVE.getDescription()));","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Leave(ALICE, ALICE_LEAVE.getTitle(),","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"                constructRange(null, ALICE_LEAVE.getEnd()), ALICE_LEAVE.getDescription()));","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Leave(ALICE, ALICE_LEAVE.getTitle(),","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"                constructRange(ALICE_LEAVE.getStart(), ALICE_LEAVE.getEnd()), null));","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":52,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"     * A class implementing ComparablePerson but with null as its name field","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"    private class MockPersonWithNullName implements ComparablePerson {","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"        public boolean isSamePerson(ComparablePerson otherPerson) {","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"            return false;","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"        public Name getName() {","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"            return null;","lastModifiedDate":"2023-11-02"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"    private Range constructRange(Date start, Date end) {","lastModifiedDate":"2023-11-02"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"        return Range.createNonNullRange(start, end);","lastModifiedDate":"2023-11-02"},{"lineNumber":70,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":71,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":72,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":73,"author":{"gitId":"ivyy-poison"},"content":"    public void constructor_startSameAsEnd_success() {","lastModifiedDate":"2023-10-24"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"        Leave leave \u003d new Leave(ALICE, ALICE_LEAVE.getTitle(),","lastModifiedDate":"2023-11-02"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"                constructRange(ALICE_LEAVE.getStart(), ALICE_LEAVE.getStart()), ALICE_LEAVE.getDescription());","lastModifiedDate":"2023-11-02"},{"lineNumber":76,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(leave.getStart(), leave.getEnd());","lastModifiedDate":"2023-10-24"},{"lineNumber":77,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":78,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":79,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-12"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"    public void copyWithNewPerson_nullPerson_throwsNullExceptionPointer() {","lastModifiedDate":"2023-11-12"},{"lineNumber":81,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e new LeaveBuilder().build().copyWithNewPerson(null));","lastModifiedDate":"2023-11-12"},{"lineNumber":82,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-12"},{"lineNumber":83,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":84,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-12"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"    public void copyWithNewPerson_success() {","lastModifiedDate":"2023-11-12"},{"lineNumber":86,"author":{"gitId":"ryanozx"},"content":"        Leave existingLeave \u003d new LeaveBuilder().withEmployee(ALICE).build();","lastModifiedDate":"2023-11-12"},{"lineNumber":87,"author":{"gitId":"ryanozx"},"content":"        Leave newLeave \u003d existingLeave.copyWithNewPerson(BOB);","lastModifiedDate":"2023-11-12"},{"lineNumber":88,"author":{"gitId":"ryanozx"},"content":"        assertEquals(newLeave.getEmployee(), BOB);","lastModifiedDate":"2023-11-12"},{"lineNumber":89,"author":{"gitId":"ryanozx"},"content":"        assertEquals(newLeave.getDescription(), existingLeave.getDescription());","lastModifiedDate":"2023-11-12"},{"lineNumber":90,"author":{"gitId":"ryanozx"},"content":"        assertEquals(newLeave.getStart(), existingLeave.getStart());","lastModifiedDate":"2023-11-12"},{"lineNumber":91,"author":{"gitId":"ryanozx"},"content":"        assertEquals(newLeave.getEnd(), existingLeave.getEnd());","lastModifiedDate":"2023-11-12"},{"lineNumber":92,"author":{"gitId":"ryanozx"},"content":"        assertEquals(newLeave.getTitle(), existingLeave.getTitle());","lastModifiedDate":"2023-11-12"},{"lineNumber":93,"author":{"gitId":"ryanozx"},"content":"        assertEquals(newLeave.getStatus(), existingLeave.getStatus());","lastModifiedDate":"2023-11-12"},{"lineNumber":94,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-12"},{"lineNumber":95,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":96,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":97,"author":{"gitId":"ivyy-poison"},"content":"    public void equalsMethod() {","lastModifiedDate":"2023-10-23"},{"lineNumber":98,"author":{"gitId":"ivyy-poison"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-23"},{"lineNumber":99,"author":{"gitId":"ivyy-poison"},"content":"        Leave aliceCopy \u003d new LeaveBuilder(ALICE_LEAVE).build();","lastModifiedDate":"2023-10-23"},{"lineNumber":100,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(ALICE_LEAVE.equals(aliceCopy));","lastModifiedDate":"2023-10-23"},{"lineNumber":101,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":102,"author":{"gitId":"ivyy-poison"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-23"},{"lineNumber":103,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(ALICE_LEAVE.equals(ALICE_LEAVE));","lastModifiedDate":"2023-10-23"},{"lineNumber":104,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":105,"author":{"gitId":"ivyy-poison"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-23"},{"lineNumber":106,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE_LEAVE.equals(null));","lastModifiedDate":"2023-10-23"},{"lineNumber":107,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":108,"author":{"gitId":"ivyy-poison"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2023-10-23"},{"lineNumber":109,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE_LEAVE.equals(5));","lastModifiedDate":"2023-10-23"},{"lineNumber":110,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":111,"author":{"gitId":"ivyy-poison"},"content":"        // different leave -\u003e returns false","lastModifiedDate":"2023-10-23"},{"lineNumber":112,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE_LEAVE.equals(BOB_LEAVE));","lastModifiedDate":"2023-10-23"},{"lineNumber":113,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":114,"author":{"gitId":"ivyy-poison"},"content":"        // different employee -\u003e returns false","lastModifiedDate":"2023-10-23"},{"lineNumber":115,"author":{"gitId":"ivyy-poison"},"content":"        Leave editedAliceLeave \u003d new LeaveBuilder(ALICE_LEAVE).withEmployee(BOB).build();","lastModifiedDate":"2023-10-23"},{"lineNumber":116,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE_LEAVE.equals(editedAliceLeave));","lastModifiedDate":"2023-10-23"},{"lineNumber":117,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":118,"author":{"gitId":"ivyy-poison"},"content":"        // different title -\u003e returns false","lastModifiedDate":"2023-10-23"},{"lineNumber":119,"author":{"gitId":"ivyy-poison"},"content":"        editedAliceLeave \u003d new LeaveBuilder(ALICE_LEAVE).withTitle(\"Bob\u0027s Paternity Leave\").build();","lastModifiedDate":"2023-10-23"},{"lineNumber":120,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE_LEAVE.equals(editedAliceLeave));","lastModifiedDate":"2023-10-23"},{"lineNumber":121,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":122,"author":{"gitId":"ivyy-poison"},"content":"        // different description -\u003e returns false","lastModifiedDate":"2023-10-23"},{"lineNumber":123,"author":{"gitId":"ivyy-poison"},"content":"        editedAliceLeave \u003d new LeaveBuilder(ALICE_LEAVE).withDescription(\"Bob\u0027s Paternity Leave Description\").build();","lastModifiedDate":"2023-10-23"},{"lineNumber":124,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE_LEAVE.equals(editedAliceLeave));","lastModifiedDate":"2023-10-23"},{"lineNumber":125,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":126,"author":{"gitId":"ivyy-poison"},"content":"        // different start date -\u003e returns false","lastModifiedDate":"2023-10-23"},{"lineNumber":127,"author":{"gitId":"ivyy-poison"},"content":"        editedAliceLeave \u003d new LeaveBuilder(ALICE_LEAVE).withStart(","lastModifiedDate":"2023-10-24"},{"lineNumber":128,"author":{"gitId":"ivyy-poison"},"content":"            Date.of(ALICE_LEAVE.getStart().getDate().plusDays(1))).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":129,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE_LEAVE.equals(editedAliceLeave));","lastModifiedDate":"2023-10-23"},{"lineNumber":130,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":131,"author":{"gitId":"ivyy-poison"},"content":"        // different end date -\u003e returns false","lastModifiedDate":"2023-10-23"},{"lineNumber":132,"author":{"gitId":"ivyy-poison"},"content":"        editedAliceLeave \u003d new LeaveBuilder(ALICE_LEAVE).withEnd(","lastModifiedDate":"2023-10-24"},{"lineNumber":133,"author":{"gitId":"ivyy-poison"},"content":"            Date.of(ALICE_LEAVE.getEnd().getDate().plusDays(1))).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":134,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE_LEAVE.equals(editedAliceLeave));","lastModifiedDate":"2023-10-23"},{"lineNumber":135,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":136,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":137,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":138,"author":{"gitId":"ivyy-poison"},"content":"    public void isSameLeaveMethod() {","lastModifiedDate":"2023-10-23"},{"lineNumber":139,"author":{"gitId":"ivyy-poison"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-23"},{"lineNumber":140,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(ALICE_LEAVE.isSameLeave(ALICE_LEAVE));","lastModifiedDate":"2023-10-23"},{"lineNumber":141,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":142,"author":{"gitId":"ivyy-poison"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-23"},{"lineNumber":143,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE_LEAVE.isSameLeave(null));","lastModifiedDate":"2023-10-23"},{"lineNumber":144,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":145,"author":{"gitId":"ivyy-poison"},"content":"        // different leave -\u003e returns false","lastModifiedDate":"2023-10-23"},{"lineNumber":146,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE_LEAVE.isSameLeave(BOB_LEAVE));","lastModifiedDate":"2023-10-23"},{"lineNumber":147,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":148,"author":{"gitId":"ivyy-poison"},"content":"        // different employee -\u003e returns false","lastModifiedDate":"2023-10-23"},{"lineNumber":149,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE_LEAVE.isSameLeave(new LeaveBuilder(ALICE_LEAVE).withEmployee(BOB).build()));","lastModifiedDate":"2023-10-23"},{"lineNumber":150,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":151,"author":{"gitId":"ivyy-poison"},"content":"        // different start date -\u003e returns false","lastModifiedDate":"2023-10-23"},{"lineNumber":152,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE_LEAVE.isSameLeave(new LeaveBuilder(ALICE_LEAVE).withStart(","lastModifiedDate":"2023-10-24"},{"lineNumber":153,"author":{"gitId":"ivyy-poison"},"content":"                Date.of(ALICE_LEAVE.getStart().getDate().plusDays(1))).build()));","lastModifiedDate":"2023-10-24"},{"lineNumber":154,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":155,"author":{"gitId":"ivyy-poison"},"content":"        // different end date -\u003e returns false","lastModifiedDate":"2023-10-23"},{"lineNumber":156,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE_LEAVE.isSameLeave(new LeaveBuilder(ALICE_LEAVE).withEnd(","lastModifiedDate":"2023-10-24"},{"lineNumber":157,"author":{"gitId":"ivyy-poison"},"content":"                Date.of(ALICE_LEAVE.getEnd().getDate().plusDays(1))).build()));","lastModifiedDate":"2023-10-24"},{"lineNumber":158,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":159,"author":{"gitId":"ivyy-poison"},"content":"        // same employee, same start date, same end date -\u003e returns true","lastModifiedDate":"2023-10-23"},{"lineNumber":160,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(ALICE_LEAVE.isSameLeave(new LeaveBuilder(ALICE_LEAVE).withTitle(\"Alice\u0027s Maternity Leave 2\")","lastModifiedDate":"2023-10-23"},{"lineNumber":161,"author":{"gitId":"ivyy-poison"},"content":"                .withDescription(\"Alice\u0027s Maternity Leave 2 Description\").build()));","lastModifiedDate":"2023-10-23"},{"lineNumber":162,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":163,"author":{"gitId":"ivyy-poison"},"content":"        // different status -\u003e return true","lastModifiedDate":"2023-10-23"},{"lineNumber":164,"author":{"gitId":"ryanozx"},"content":"        assertTrue(ALICE_LEAVE.isSameLeave(new LeaveBuilder(ALICE_LEAVE)","lastModifiedDate":"2023-11-02"},{"lineNumber":165,"author":{"gitId":"ryanozx"},"content":"                .withStatus(Status.StatusType.APPROVED).build()));","lastModifiedDate":"2023-11-02"},{"lineNumber":166,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":167,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":168,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":169,"author":{"gitId":"ivyy-poison"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-23"},{"lineNumber":170,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(ALICE_LEAVE.toString(), \"Employee: \" + ALICE.getName()","lastModifiedDate":"2023-10-23"},{"lineNumber":171,"author":{"gitId":"ivyy-poison"},"content":"                + \" Title: \" + ALICE_LEAVE.getTitle()","lastModifiedDate":"2023-10-23"},{"lineNumber":172,"author":{"gitId":"ivyy-poison"},"content":"                + \" Start: \" + ALICE_LEAVE.getStart()","lastModifiedDate":"2023-10-23"},{"lineNumber":173,"author":{"gitId":"ivyy-poison"},"content":"                + \" End: \" + ALICE_LEAVE.getEnd()","lastModifiedDate":"2023-10-23"},{"lineNumber":174,"author":{"gitId":"ivyy-poison"},"content":"                + \" Status: \" + ALICE_LEAVE.getStatus());","lastModifiedDate":"2023-10-23"},{"lineNumber":175,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":176,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":177,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":178,"author":{"gitId":"ivyy-poison"},"content":"    public void belongsToMethod() {","lastModifiedDate":"2023-10-23"},{"lineNumber":179,"author":{"gitId":"ivyy-poison"},"content":"        // same employee -\u003e returns true","lastModifiedDate":"2023-10-23"},{"lineNumber":180,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(ALICE_LEAVE.belongsTo(ALICE));","lastModifiedDate":"2023-10-23"},{"lineNumber":181,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":182,"author":{"gitId":"ivyy-poison"},"content":"        // different employee -\u003e returns false","lastModifiedDate":"2023-10-23"},{"lineNumber":183,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE_LEAVE.belongsTo(BOB));","lastModifiedDate":"2023-10-23"},{"lineNumber":184,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":185,"author":{"gitId":"ryanozx"},"content":"        // different employee instance but share the same name -\u003e returns true","lastModifiedDate":"2023-11-12"},{"lineNumber":186,"author":{"gitId":"ryanozx"},"content":"        // This test is needed as leaves loaded from storage will not share the same employee","lastModifiedDate":"2023-11-12"},{"lineNumber":187,"author":{"gitId":"ryanozx"},"content":"        // instance as an existing employee instance in the address book","lastModifiedDate":"2023-11-12"},{"lineNumber":188,"author":{"gitId":"ryanozx"},"content":"        Person aliceDuplicate \u003d new PersonBuilder().withName(ALICE.getName().toString()).build();","lastModifiedDate":"2023-11-12"},{"lineNumber":189,"author":{"gitId":"ryanozx"},"content":"        assertTrue(ALICE_LEAVE.belongsTo(aliceDuplicate));","lastModifiedDate":"2023-11-12"},{"lineNumber":190,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":191,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":192,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":193,"author":{"gitId":"ivyy-poison"},"content":"    public void hashCodeMethod() {","lastModifiedDate":"2023-10-23"},{"lineNumber":194,"author":{"gitId":"ivyy-poison"},"content":"        // same object -\u003e returns same hashcode","lastModifiedDate":"2023-10-23"},{"lineNumber":195,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(ALICE_LEAVE.hashCode(), ALICE_LEAVE.hashCode());","lastModifiedDate":"2023-10-23"},{"lineNumber":196,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":197,"author":{"gitId":"ivyy-poison"},"content":"        // different leave -\u003e returns different hashcode","lastModifiedDate":"2023-10-23"},{"lineNumber":198,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE_LEAVE.hashCode() \u003d\u003d BOB_LEAVE.hashCode());","lastModifiedDate":"2023-10-23"},{"lineNumber":199,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":200,"author":{"gitId":"ivyy-poison"},"content":"        // different employee -\u003e returns different hashcode","lastModifiedDate":"2023-10-24"},{"lineNumber":201,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE_LEAVE.hashCode() \u003d\u003d new LeaveBuilder(ALICE_LEAVE).withEmployee(BOB).build().hashCode());","lastModifiedDate":"2023-10-24"},{"lineNumber":202,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":203,"author":{"gitId":"ivyy-poison"},"content":"        // different title -\u003e returns different hashcode","lastModifiedDate":"2023-10-24"},{"lineNumber":204,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE_LEAVE.hashCode() \u003d\u003d new LeaveBuilder(ALICE_LEAVE).withTitle(\"Alice\u0027s Maternity Leave 2\")","lastModifiedDate":"2023-10-24"},{"lineNumber":205,"author":{"gitId":"ivyy-poison"},"content":"                .build().hashCode());","lastModifiedDate":"2023-10-24"},{"lineNumber":206,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":207,"author":{"gitId":"ivyy-poison"},"content":"        // different description -\u003e returns different hashcode","lastModifiedDate":"2023-10-24"},{"lineNumber":208,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE_LEAVE.hashCode() \u003d\u003d new LeaveBuilder(ALICE_LEAVE)","lastModifiedDate":"2023-10-24"},{"lineNumber":209,"author":{"gitId":"ivyy-poison"},"content":"                .withDescription(\"Alice\u0027s Maternity Leave 2 Description\").build().hashCode());","lastModifiedDate":"2023-10-24"},{"lineNumber":210,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":211,"author":{"gitId":"ivyy-poison"},"content":"        // different start date -\u003e returns different hashcode","lastModifiedDate":"2023-10-24"},{"lineNumber":212,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE_LEAVE.hashCode() \u003d\u003d new LeaveBuilder(ALICE_LEAVE).withStart(","lastModifiedDate":"2023-10-24"},{"lineNumber":213,"author":{"gitId":"ivyy-poison"},"content":"                Date.of(ALICE_LEAVE.getStart().getDate().plusDays(1))).build().hashCode());","lastModifiedDate":"2023-10-24"},{"lineNumber":214,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":215,"author":{"gitId":"ivyy-poison"},"content":"        // different end date -\u003e returns different hashcode","lastModifiedDate":"2023-10-24"},{"lineNumber":216,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE_LEAVE.hashCode() \u003d\u003d new LeaveBuilder(ALICE_LEAVE).withEnd(","lastModifiedDate":"2023-10-24"},{"lineNumber":217,"author":{"gitId":"ivyy-poison"},"content":"                Date.of(ALICE_LEAVE.getEnd().getDate().plusDays(1))).build().hashCode());","lastModifiedDate":"2023-10-24"},{"lineNumber":218,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":219,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":220,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":221,"author":{"gitId":"ivyy-poison"},"content":"    public void isConcurrentMethod() {","lastModifiedDate":"2023-11-08"},{"lineNumber":222,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE_LEAVE.isConcurrent(null));","lastModifiedDate":"2023-11-08"},{"lineNumber":223,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":224,"author":{"gitId":"ivyy-poison"},"content":"        // same employee, same start date, same end date -\u003e returns true","lastModifiedDate":"2023-11-08"},{"lineNumber":225,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(ALICE_LEAVE.isConcurrent(new LeaveBuilder(ALICE_LEAVE).withTitle(\"Alice\u0027s Maternity Leave 2\")","lastModifiedDate":"2023-11-08"},{"lineNumber":226,"author":{"gitId":"ivyy-poison"},"content":"                .withDescription(\"Alice\u0027s Maternity Leave 2 Description\").build()));","lastModifiedDate":"2023-11-08"},{"lineNumber":227,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":228,"author":{"gitId":"ivyy-poison"},"content":"        // same employee, same start date, different end date -\u003e returns true","lastModifiedDate":"2023-11-08"},{"lineNumber":229,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(ALICE_LEAVE.isConcurrent(new LeaveBuilder(ALICE_LEAVE).withTitle(\"Alice\u0027s Maternity Leave 2\")","lastModifiedDate":"2023-11-08"},{"lineNumber":230,"author":{"gitId":"ivyy-poison"},"content":"                .withDescription(\"Alice\u0027s Maternity Leave 2 Description\")","lastModifiedDate":"2023-11-08"},{"lineNumber":231,"author":{"gitId":"ivyy-poison"},"content":"                .withEnd(Date.of(ALICE_LEAVE.getEnd().getDate().plusDays(1))).build()));","lastModifiedDate":"2023-11-08"},{"lineNumber":232,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":233,"author":{"gitId":"ivyy-poison"},"content":"        // same employee, different start date, same end date -\u003e returns true","lastModifiedDate":"2023-11-08"},{"lineNumber":234,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(ALICE_LEAVE.isConcurrent(new LeaveBuilder(ALICE_LEAVE).withTitle(\"Alice\u0027s Maternity Leave 2\")","lastModifiedDate":"2023-11-08"},{"lineNumber":235,"author":{"gitId":"ivyy-poison"},"content":"                .withDescription(\"Alice\u0027s Maternity Leave 2 Description\")","lastModifiedDate":"2023-11-08"},{"lineNumber":236,"author":{"gitId":"ivyy-poison"},"content":"                .withStart(Date.of(ALICE_LEAVE.getStart().getDate().plusDays(1))).build()));","lastModifiedDate":"2023-11-08"},{"lineNumber":237,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":238,"author":{"gitId":"ivyy-poison"},"content":"        // same employee, different start date, different end date -\u003e returns true","lastModifiedDate":"2023-11-08"},{"lineNumber":239,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(ALICE_LEAVE.isConcurrent(new LeaveBuilder(ALICE_LEAVE).withTitle(\"Alice\u0027s Maternity Leave 2\")","lastModifiedDate":"2023-11-08"},{"lineNumber":240,"author":{"gitId":"ivyy-poison"},"content":"                .withDescription(\"Alice\u0027s Maternity Leave 2 Description\")","lastModifiedDate":"2023-11-08"},{"lineNumber":241,"author":{"gitId":"ivyy-poison"},"content":"                .withStart(Date.of(ALICE_LEAVE.getStart().getDate().plusDays(1)))","lastModifiedDate":"2023-11-08"},{"lineNumber":242,"author":{"gitId":"ivyy-poison"},"content":"                .withEnd(Date.of(ALICE_LEAVE.getEnd().getDate().plusDays(1))).build()));","lastModifiedDate":"2023-11-08"},{"lineNumber":243,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":244,"author":{"gitId":"ivyy-poison"},"content":"        // same employee, different start date, different end date, but non overlapping -\u003e return false","lastModifiedDate":"2023-11-08"},{"lineNumber":245,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE_LEAVE.isConcurrent(new LeaveBuilder(ALICE_LEAVE).withTitle(\"Alice\u0027s Maternity Leave 2\")","lastModifiedDate":"2023-11-08"},{"lineNumber":246,"author":{"gitId":"ivyy-poison"},"content":"                .withDescription(\"Alice\u0027s Maternity Leave 2 Description\")","lastModifiedDate":"2023-11-08"},{"lineNumber":247,"author":{"gitId":"ivyy-poison"},"content":"                .withStart(Date.of(ALICE_LEAVE.getStart().getDate().plusDays(10)))","lastModifiedDate":"2023-11-08"},{"lineNumber":248,"author":{"gitId":"ivyy-poison"},"content":"                .withEnd(Date.of(ALICE_LEAVE.getEnd().getDate().plusDays(10))).build()));","lastModifiedDate":"2023-11-08"},{"lineNumber":249,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":250,"author":{"gitId":"ivyy-poison"},"content":"        // different employee, same start date, same end date -\u003e returns false","lastModifiedDate":"2023-11-08"},{"lineNumber":251,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE_LEAVE.isConcurrent(new LeaveBuilder(ALICE_LEAVE).withEmployee(BOB).build()));","lastModifiedDate":"2023-11-08"},{"lineNumber":252,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":253,"author":{"gitId":"ivyy-poison"},"content":"        // different employee, same start date, different end date -\u003e returns false","lastModifiedDate":"2023-11-08"},{"lineNumber":254,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE_LEAVE.isConcurrent(new LeaveBuilder(ALICE_LEAVE).withEmployee(BOB)","lastModifiedDate":"2023-11-08"},{"lineNumber":255,"author":{"gitId":"ivyy-poison"},"content":"                .withEnd(Date.of(ALICE_LEAVE.getEnd().getDate().plusDays(1))).build()));","lastModifiedDate":"2023-11-08"},{"lineNumber":256,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":257,"author":{"gitId":"ivyy-poison"},"content":"        // different employee, different start date, same end date -\u003e returns false","lastModifiedDate":"2023-11-08"},{"lineNumber":258,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE_LEAVE.isConcurrent(new LeaveBuilder(ALICE_LEAVE).withEmployee(BOB)","lastModifiedDate":"2023-11-08"},{"lineNumber":259,"author":{"gitId":"ivyy-poison"},"content":"                .withStart(Date.of(ALICE_LEAVE.getStart().getDate().plusDays(1))).build()));","lastModifiedDate":"2023-11-08"},{"lineNumber":260,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":261,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-23"}],"authorContributionMap":{"ryanozx":65,"ivyy-poison":196}},{"path":"src/test/java/seedu/address/model/leave/PersonEntryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.model.leave;","lastModifiedDate":"2023-11-08"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-08"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-08"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-11-08"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-08"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"public class PersonEntryTest {","lastModifiedDate":"2023-11-08"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-11-08"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e new PersonEntry(null));","lastModifiedDate":"2023-11-08"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2023-11-08"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2023-11-08"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new PersonEntry(invalidName));","lastModifiedDate":"2023-11-08"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":22,"author":{"gitId":"ivyy-poison"},"content":"    public void constructor_success() {","lastModifiedDate":"2023-11-08"},{"lineNumber":23,"author":{"gitId":"ivyy-poison"},"content":"        String validName \u003d \"Valid Name\";","lastModifiedDate":"2023-11-08"},{"lineNumber":24,"author":{"gitId":"ivyy-poison"},"content":"        PersonEntry personEntry \u003d new PersonEntry(validName);","lastModifiedDate":"2023-11-08"},{"lineNumber":25,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(personEntry.getName().toString().equals(validName));","lastModifiedDate":"2023-11-08"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":27,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-11-08"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"        String validName \u003d \"Valid Name\";","lastModifiedDate":"2023-11-08"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"        PersonEntry personEntry \u003d new PersonEntry(validName);","lastModifiedDate":"2023-11-08"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(personEntry.toString().equals(validName));","lastModifiedDate":"2023-11-08"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"    public void isSamePersonMethod() {","lastModifiedDate":"2023-11-08"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"        // same person object","lastModifiedDate":"2023-11-08"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"        PersonEntry personEntry \u003d new PersonEntry(\"Valid Name\");","lastModifiedDate":"2023-11-08"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(personEntry.isSamePerson(personEntry));","lastModifiedDate":"2023-11-08"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"        // null person object","lastModifiedDate":"2023-11-08"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(personEntry.isSamePerson(null));","lastModifiedDate":"2023-11-08"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"        // different person object, same name","lastModifiedDate":"2023-11-08"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"        PersonEntry personEntry2 \u003d new PersonEntry(\"Valid Name\");","lastModifiedDate":"2023-11-08"},{"lineNumber":46,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(personEntry.isSamePerson(personEntry2));","lastModifiedDate":"2023-11-08"},{"lineNumber":47,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":48,"author":{"gitId":"ivyy-poison"},"content":"        // different person object, different name","lastModifiedDate":"2023-11-08"},{"lineNumber":49,"author":{"gitId":"ivyy-poison"},"content":"        PersonEntry personEntry3 \u003d new PersonEntry(\"Other Valid Name\");","lastModifiedDate":"2023-11-08"},{"lineNumber":50,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(personEntry.isSamePerson(personEntry3));","lastModifiedDate":"2023-11-08"},{"lineNumber":51,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":52,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":53,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-11-08"}],"authorContributionMap":{"ivyy-poison":53}},{"path":"src/test/java/seedu/address/model/leave/RangeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.model.leave;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.exceptions.EndBeforeStartException;","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"public class RangeTest {","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"    private static final Date FIRST_DATE \u003d Date.of(\"2020-10-30\");","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"    private static final Date SECOND_DATE \u003d Date.of(\"2020-10-31\");","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"    public void createNonNullRange_invalidLeave_throwsEndBeforeStartException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"        assertThrows(EndBeforeStartException.class, () -\u003e Range.createNonNullRange(","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"                SECOND_DATE, FIRST_DATE));","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    public void createNonNullRange_nullStartOrEnd_throwsNullPointerException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"        // null start date","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e Range.createNonNullRange(null, SECOND_DATE));","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"        // null end date","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e Range.createNonNullRange(FIRST_DATE, null));","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"    public void createNonNullRange_validLeave_returnsRange() {","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"        // start date before end date","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"        Range expectedDiffRange \u003d Range.createNonNullRange(FIRST_DATE, SECOND_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"        assertEquals(expectedDiffRange.getStartDate().get(), FIRST_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"        assertEquals(expectedDiffRange.getEndDate().get(), SECOND_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"        // start date same as end date","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        Range expectedSameRange \u003d Range.createNonNullRange(FIRST_DATE, FIRST_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"        assertEquals(expectedSameRange.getStartDate().get(), FIRST_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"        assertEquals(expectedSameRange.getEndDate().get(), FIRST_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"    public void createNullableRange_invalidLeave_throwsEndBeforeStartException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"        assertThrows(EndBeforeStartException.class, () -\u003e Range.createNullableRange(","lastModifiedDate":"2023-11-02"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"                SECOND_DATE, FIRST_DATE));","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"    public void createNullableRange_validLeave_returnsRange() {","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"        // start date before end date","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"        Range expectedDiffRange \u003d Range.createNullableRange(FIRST_DATE, SECOND_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"        assertEquals(expectedDiffRange.getStartDate().get(), FIRST_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"        assertEquals(expectedDiffRange.getEndDate().get(), SECOND_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"        // start date same as end date","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"        Range expectedSameRange \u003d Range.createNullableRange(FIRST_DATE, FIRST_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"        assertEquals(expectedSameRange.getStartDate().get(), FIRST_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"        assertEquals(expectedSameRange.getEndDate().get(), FIRST_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"        // start date provided, null end date","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"        Range expectedStartRange \u003d Range.createNullableRange(FIRST_DATE, null);","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"        assertEquals(expectedStartRange.getStartDate().get(), FIRST_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"        assertFalse(expectedStartRange.getEndDate().isPresent());","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"        // end date provided, start date null","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"        Range expectedEndRange \u003d Range.createNullableRange(null, SECOND_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"        assertFalse(expectedEndRange.getStartDate().isPresent());","lastModifiedDate":"2023-11-02"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"        assertEquals(expectedEndRange.getEndDate().get(), SECOND_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"        // no start and end date provided","lastModifiedDate":"2023-11-02"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"        Range expectedNullRange \u003d Range.createNullableRange(null, null);","lastModifiedDate":"2023-11-02"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"        assertFalse(expectedNullRange.getStartDate().isPresent());","lastModifiedDate":"2023-11-02"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"        assertFalse(expectedNullRange.getEndDate().isPresent());","lastModifiedDate":"2023-11-02"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"    public void equals() {","lastModifiedDate":"2023-11-02"},{"lineNumber":78,"author":{"gitId":"ryanozx"},"content":"        Range defaultRange \u003d Range.createNullableRange(FIRST_DATE, SECOND_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":79,"author":{"gitId":"ryanozx"},"content":"        Range diffStart \u003d Range.createNullableRange(SECOND_DATE, SECOND_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"        Range diffEnd \u003d Range.createNullableRange(FIRST_DATE, FIRST_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":81,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":82,"author":{"gitId":"ryanozx"},"content":"        // same object -\u003e return true","lastModifiedDate":"2023-11-02"},{"lineNumber":83,"author":{"gitId":"ryanozx"},"content":"        assertEquals(defaultRange, defaultRange);","lastModifiedDate":"2023-11-02"},{"lineNumber":84,"author":{"gitId":"ryanozx"},"content":"        // diff types -\u003e return false","lastModifiedDate":"2023-11-02"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"        assertFalse(defaultRange.equals(\"1\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":86,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":87,"author":{"gitId":"ryanozx"},"content":"        // same start and end -\u003e return true","lastModifiedDate":"2023-11-02"},{"lineNumber":88,"author":{"gitId":"ryanozx"},"content":"        Range defaultRangeCopy \u003d Range.createNullableRange(FIRST_DATE, SECOND_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":89,"author":{"gitId":"ryanozx"},"content":"        assertEquals(defaultRange, defaultRangeCopy);","lastModifiedDate":"2023-11-02"},{"lineNumber":90,"author":{"gitId":"ryanozx"},"content":"        // diff start -\u003e return false","lastModifiedDate":"2023-11-02"},{"lineNumber":91,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(defaultRange, diffStart);","lastModifiedDate":"2023-11-02"},{"lineNumber":92,"author":{"gitId":"ryanozx"},"content":"        // diff end -\u003e return false","lastModifiedDate":"2023-11-02"},{"lineNumber":93,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(defaultRange, diffEnd);","lastModifiedDate":"2023-11-02"},{"lineNumber":94,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":95,"author":{"gitId":"ryanozx"},"content":"        Range nullStart \u003d Range.createNullableRange(null, SECOND_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":96,"author":{"gitId":"ryanozx"},"content":"        Range nullStartDiffEnd \u003d Range.createNullableRange(null, FIRST_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":97,"author":{"gitId":"ryanozx"},"content":"        // null start vs non-null start -\u003e return false","lastModifiedDate":"2023-11-02"},{"lineNumber":98,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(defaultRange, nullStart);","lastModifiedDate":"2023-11-02"},{"lineNumber":99,"author":{"gitId":"ryanozx"},"content":"        // null start, same end -\u003e return true","lastModifiedDate":"2023-11-02"},{"lineNumber":100,"author":{"gitId":"ryanozx"},"content":"        Range nullStartCopy \u003d Range.createNullableRange(null, SECOND_DATE);","lastModifiedDate":"2023-11-02"},{"lineNumber":101,"author":{"gitId":"ryanozx"},"content":"        assertEquals(nullStart, nullStartCopy);","lastModifiedDate":"2023-11-02"},{"lineNumber":102,"author":{"gitId":"ryanozx"},"content":"        // null start, diff end -\u003e return false","lastModifiedDate":"2023-11-02"},{"lineNumber":103,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(nullStart, nullStartDiffEnd);","lastModifiedDate":"2023-11-02"},{"lineNumber":104,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":105,"author":{"gitId":"ryanozx"},"content":"        Range nullEnd \u003d Range.createNullableRange(FIRST_DATE, null);","lastModifiedDate":"2023-11-02"},{"lineNumber":106,"author":{"gitId":"ryanozx"},"content":"        Range nullEndDiffStart \u003d Range.createNullableRange(SECOND_DATE, null);","lastModifiedDate":"2023-11-02"},{"lineNumber":107,"author":{"gitId":"ryanozx"},"content":"        // null end vs non-null end -\u003e return false","lastModifiedDate":"2023-11-02"},{"lineNumber":108,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(defaultRange, nullEnd);","lastModifiedDate":"2023-11-02"},{"lineNumber":109,"author":{"gitId":"ryanozx"},"content":"        // null end, same start -\u003e return true","lastModifiedDate":"2023-11-02"},{"lineNumber":110,"author":{"gitId":"ryanozx"},"content":"        Range nullEndCopy \u003d Range.createNullableRange(FIRST_DATE, null);","lastModifiedDate":"2023-11-02"},{"lineNumber":111,"author":{"gitId":"ryanozx"},"content":"        assertEquals(nullEnd, nullEndCopy);","lastModifiedDate":"2023-11-02"},{"lineNumber":112,"author":{"gitId":"ryanozx"},"content":"        // null end, diff start -\u003e return false","lastModifiedDate":"2023-11-02"},{"lineNumber":113,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(nullEnd, nullEndDiffStart);","lastModifiedDate":"2023-11-02"},{"lineNumber":114,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":115,"author":{"gitId":"ryanozx"},"content":"        Range nullRange \u003d Range.createNullableRange(null, null);","lastModifiedDate":"2023-11-02"},{"lineNumber":116,"author":{"gitId":"ryanozx"},"content":"        // null end vs non-null end -\u003e return false","lastModifiedDate":"2023-11-02"},{"lineNumber":117,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(nullRange, nullStart);","lastModifiedDate":"2023-11-02"},{"lineNumber":118,"author":{"gitId":"ryanozx"},"content":"        // null start vs non-null start -\u003e return false","lastModifiedDate":"2023-11-02"},{"lineNumber":119,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(nullRange, nullEnd);","lastModifiedDate":"2023-11-02"},{"lineNumber":120,"author":{"gitId":"ryanozx"},"content":"        // null start and null end -\u003e return true","lastModifiedDate":"2023-11-02"},{"lineNumber":121,"author":{"gitId":"ryanozx"},"content":"        Range nullRangeCopy \u003d Range.createNullableRange(null, null);","lastModifiedDate":"2023-11-02"},{"lineNumber":122,"author":{"gitId":"ryanozx"},"content":"        assertEquals(nullRange, nullRangeCopy);","lastModifiedDate":"2023-11-02"},{"lineNumber":123,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":124,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"ryanozx":124}},{"path":"src/test/java/seedu/address/model/leave/StatusTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.model.leave;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.model.leave.Status.StatusType;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":"public class StatusTest {","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e Status.of((StatusType) null));","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"    public void constructor_validStatusType() {","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"        assertEquals(Status.of(\"PENDING\").getStatusType(), StatusType.PENDING);","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"        assertEquals(Status.getDefault().getStatusType(), StatusType.PENDING);","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"        assertEquals(Status.of(\"APPROVED\").getStatusType(), StatusType.APPROVED);","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"        assertEquals(Status.of(\"REJECTED\").getStatusType(), StatusType.REJECTED);","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"        assertEquals(Status.of(StatusType.APPROVED).getStatusType(), StatusType.APPROVED);","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"        assertEquals(Status.of(StatusType.PENDING).getStatusType(), StatusType.PENDING);","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"        assertEquals(Status.of(StatusType.REJECTED).getStatusType(), StatusType.REJECTED);","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"        assertEquals(\"PENDING\", Status.of(\"PENDING\").toString());","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"        assertEquals(\"APPROVED\", Status.of(\"APPROVED\").toString());","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"        assertEquals(\"REJECTED\", Status.of(\"REJECTED\").toString());","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"    public void equalsMethod() {","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"        // Status status \u003d new Status(StatusType.PENDING);","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"        Status status \u003d Status.getDefault();","lastModifiedDate":"2023-10-25"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(status.equals(Status.of(\"PENDING\")));","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(status.equals(Status.of(StatusType.PENDING)));","lastModifiedDate":"2023-11-08"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(status.equals(Status.of(\"pending\")));","lastModifiedDate":"2023-11-08"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(status.equals(status));","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"ivyy-poison"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(status.equals(null));","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"ivyy-poison"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(status.equals(5.0f));","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"ivyy-poison"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(status.equals(Status.of(\"APPROVED\")));","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(status.equals(Status.of(\"REJECTED\")));","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"    public void isValidStatus() {","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"        assertTrue(Status.isValidStatus(\"APPROVED\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"        assertTrue(Status.isValidStatus(\"PENDING\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"        assertTrue(Status.isValidStatus(\"REJECTED\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(Status.isValidStatus(\"approved\"));","lastModifiedDate":"2023-11-08"},{"lineNumber":65,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(Status.isValidStatus(\"pEnDiNG\"));","lastModifiedDate":"2023-11-08"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"        assertFalse(Status.isValidStatus(\"\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"        assertFalse(Status.isValidStatus(\" \"));","lastModifiedDate":"2023-11-02"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"        assertFalse(Status.isValidStatus(\"INVALID\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":70,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(Status.isValidStatus(\"invalid\"));","lastModifiedDate":"2023-11-08"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":73,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":74,"author":{"gitId":"ivyy-poison"},"content":"    public void hashcodeMethod() {","lastModifiedDate":"2023-10-24"},{"lineNumber":75,"author":{"gitId":"ivyy-poison"},"content":"        Status status \u003d Status.getDefault();","lastModifiedDate":"2023-10-25"},{"lineNumber":76,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":77,"author":{"gitId":"ivyy-poison"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-24"},{"lineNumber":78,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(status.hashCode() \u003d\u003d Status.of(\"PENDING\").hashCode());","lastModifiedDate":"2023-10-24"},{"lineNumber":79,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":80,"author":{"gitId":"ivyy-poison"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2023-10-24"},{"lineNumber":81,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(status.hashCode() \u003d\u003d Status.of(\"APPROVED\").hashCode());","lastModifiedDate":"2023-10-24"},{"lineNumber":82,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(status.hashCode() \u003d\u003d Status.of(\"REJECTED\").hashCode());","lastModifiedDate":"2023-10-24"},{"lineNumber":83,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":84,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ryanozx":23,"ivyy-poison":61}},{"path":"src/test/java/seedu/address/model/leave/TitleTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.model.leave;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"public class TitleTest {","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Title(null));","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"    public void constructor_emptyTitle_throwsIllegalArgumentException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"        String invalidTitle \u003d \"\";","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(IllegalArgumentException.class, Title.MESSAGE_CONSTRAINTS, () -\u003e new Title(invalidTitle));","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"ivyy-poison"},"content":"    public void constructor_blankTitle_throwsIllegalArgumentException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"ivyy-poison"},"content":"        String invalidTitle \u003d \"    \";","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(IllegalArgumentException.class, Title.MESSAGE_CONSTRAINTS, () -\u003e new Title(invalidTitle));","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"    public void constructor_invalidTitle_throwsIllegalArgumentException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"        String invalidTitle \u003d \"title*#\";","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(IllegalArgumentException.class, Title.MESSAGE_CONSTRAINTS, () -\u003e new Title(invalidTitle));","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"        String validTitle \u003d \"title\";","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(new Title(validTitle).toString(), validTitle);","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"    public void equalsMethod() {","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"        Title title \u003d new Title(\"title\");","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"        Title titleCopy \u003d new Title(\"title\");","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(title.equals(titleCopy));","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"ivyy-poison"},"content":"        // different title","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"ivyy-poison"},"content":"        Title differentTitle \u003d new Title(\"title123\");","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(title.equals(differentTitle));","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"ivyy-poison"},"content":"        // different object","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(title.equals(new Object()));","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"ivyy-poison"},"content":"        // null","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(title.equals(null));","lastModifiedDate":"2023-11-01"},{"lineNumber":55,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":56,"author":{"gitId":"ivyy-poison"},"content":"        // same object","lastModifiedDate":"2023-11-01"},{"lineNumber":57,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(title.equals(title));","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"ivyy-poison":59}},{"path":"src/test/java/seedu/address/model/leave/UniqueLeaveListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.model.leave;","lastModifiedDate":"2023-10-23"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-23"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-23"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-11-12"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-23"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-23"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalLeaves.ALICE_LEAVE;","lastModifiedDate":"2023-10-23"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalLeaves.BOB_LEAVE;","lastModifiedDate":"2023-10-23"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2023-11-12"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2023-11-12"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2023-11-12"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"import java.util.List;","lastModifiedDate":"2023-10-23"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-23"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.leave.exceptions.DuplicateLeaveException;","lastModifiedDate":"2023-10-23"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.leave.exceptions.LeaveNotFoundException;","lastModifiedDate":"2023-10-23"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.testutil.LeaveBuilder;","lastModifiedDate":"2023-10-23"},{"lineNumber":22,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":23,"author":{"gitId":"ivyy-poison"},"content":"public class UniqueLeaveListTest {","lastModifiedDate":"2023-11-08"},{"lineNumber":24,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":25,"author":{"gitId":"ivyy-poison"},"content":"    private final UniqueLeaveList uniqueLeaveList \u003d new UniqueLeaveList();","lastModifiedDate":"2023-10-23"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":27,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"    public void contains_nullLeave_throwsNullPointerException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueLeaveList.contains(null));","lastModifiedDate":"2023-10-23"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"    public void contains_leaveInList_returnsTrue() {","lastModifiedDate":"2023-10-23"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"        uniqueLeaveList.add(ALICE_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(uniqueLeaveList.contains(ALICE_LEAVE));","lastModifiedDate":"2023-10-23"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"    public void contains_leaveNotInList_returnsFalse() {","lastModifiedDate":"2023-10-23"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(uniqueLeaveList.contains(ALICE_LEAVE));","lastModifiedDate":"2023-10-23"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"    public void contains_leaveWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2023-10-23"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"        uniqueLeaveList.add(ALICE_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":46,"author":{"gitId":"ivyy-poison"},"content":"        Leave editedAliceLeave \u003d new LeaveBuilder(ALICE_LEAVE).build();","lastModifiedDate":"2023-10-23"},{"lineNumber":47,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(uniqueLeaveList.contains(editedAliceLeave));","lastModifiedDate":"2023-10-23"},{"lineNumber":48,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":49,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":50,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":51,"author":{"gitId":"ivyy-poison"},"content":"    public void hasConcurrentLeave_nullLeave_throwsNullPointerException() {","lastModifiedDate":"2023-11-08"},{"lineNumber":52,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueLeaveList.hasConcurrentLeave(null));","lastModifiedDate":"2023-11-08"},{"lineNumber":53,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":54,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":55,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":56,"author":{"gitId":"ivyy-poison"},"content":"    public void hasConcurrentLeave_leaveInList_returnsTrue() {","lastModifiedDate":"2023-11-08"},{"lineNumber":57,"author":{"gitId":"ivyy-poison"},"content":"        uniqueLeaveList.add(ALICE_LEAVE);","lastModifiedDate":"2023-11-08"},{"lineNumber":58,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(uniqueLeaveList.hasConcurrentLeave(ALICE_LEAVE));","lastModifiedDate":"2023-11-08"},{"lineNumber":59,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":60,"author":{"gitId":"ivyy-poison"},"content":"        // Same employee name, different start date, same end date","lastModifiedDate":"2023-11-08"},{"lineNumber":61,"author":{"gitId":"ivyy-poison"},"content":"        Leave editedAliceLeave \u003d new LeaveBuilder(ALICE_LEAVE).withTitle(\"Alice\u0027s Maternity Leave 2\")","lastModifiedDate":"2023-11-08"},{"lineNumber":62,"author":{"gitId":"ivyy-poison"},"content":"                .withDescription(\"Alice\u0027s Maternity Leave 2 Description\")","lastModifiedDate":"2023-11-08"},{"lineNumber":63,"author":{"gitId":"ivyy-poison"},"content":"                .withStart(Date.of(ALICE_LEAVE.getStart().getDate().plusDays(1))).build();","lastModifiedDate":"2023-11-08"},{"lineNumber":64,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(uniqueLeaveList.hasConcurrentLeave(editedAliceLeave));","lastModifiedDate":"2023-11-08"},{"lineNumber":65,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":66,"author":{"gitId":"ivyy-poison"},"content":"        // Same employee name, same start date, different end date","lastModifiedDate":"2023-11-08"},{"lineNumber":67,"author":{"gitId":"ivyy-poison"},"content":"        Leave editedAliceLeave2 \u003d new LeaveBuilder(ALICE_LEAVE).withTitle(\"Alice\u0027s Maternity Leave 3\")","lastModifiedDate":"2023-11-08"},{"lineNumber":68,"author":{"gitId":"ivyy-poison"},"content":"                .withDescription(\"Alice\u0027s Maternity Leave 3 Description\")","lastModifiedDate":"2023-11-08"},{"lineNumber":69,"author":{"gitId":"ivyy-poison"},"content":"                .withEnd(Date.of(ALICE_LEAVE.getEnd().getDate().plusDays(1))).build();","lastModifiedDate":"2023-11-08"},{"lineNumber":70,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(uniqueLeaveList.hasConcurrentLeave(editedAliceLeave2));","lastModifiedDate":"2023-11-08"},{"lineNumber":71,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":72,"author":{"gitId":"ivyy-poison"},"content":"        // Same employee name, different start date, different end date","lastModifiedDate":"2023-11-08"},{"lineNumber":73,"author":{"gitId":"ivyy-poison"},"content":"        Leave editedAliceLeave3 \u003d new LeaveBuilder(ALICE_LEAVE).withTitle(\"Alice\u0027s Maternity Leave 4\")","lastModifiedDate":"2023-11-08"},{"lineNumber":74,"author":{"gitId":"ivyy-poison"},"content":"                .withDescription(\"Alice\u0027s Maternity Leave 4 Description\")","lastModifiedDate":"2023-11-08"},{"lineNumber":75,"author":{"gitId":"ivyy-poison"},"content":"                .withStart(Date.of(ALICE_LEAVE.getStart().getDate().plusDays(1)))","lastModifiedDate":"2023-11-08"},{"lineNumber":76,"author":{"gitId":"ivyy-poison"},"content":"                .withEnd(Date.of(ALICE_LEAVE.getEnd().getDate().plusDays(1))).build();","lastModifiedDate":"2023-11-08"},{"lineNumber":77,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(uniqueLeaveList.hasConcurrentLeave(editedAliceLeave3));","lastModifiedDate":"2023-11-08"},{"lineNumber":78,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":79,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":80,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":81,"author":{"gitId":"ivyy-poison"},"content":"    public void hasConcurrentLeave_concurrentLeaveAbsent_returnsFalse() {","lastModifiedDate":"2023-11-08"},{"lineNumber":82,"author":{"gitId":"ivyy-poison"},"content":"        uniqueLeaveList.add(ALICE_LEAVE);","lastModifiedDate":"2023-11-08"},{"lineNumber":83,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":84,"author":{"gitId":"ivyy-poison"},"content":"        // different employee name","lastModifiedDate":"2023-11-08"},{"lineNumber":85,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(uniqueLeaveList.hasConcurrentLeave(BOB_LEAVE));","lastModifiedDate":"2023-11-08"},{"lineNumber":86,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":87,"author":{"gitId":"ivyy-poison"},"content":"        // different start date, different end date but not overlapping","lastModifiedDate":"2023-11-08"},{"lineNumber":88,"author":{"gitId":"ivyy-poison"},"content":"        Leave editedAliceLeave \u003d new LeaveBuilder(ALICE_LEAVE).withTitle(\"Alice\u0027s Maternity Leave 2\")","lastModifiedDate":"2023-11-08"},{"lineNumber":89,"author":{"gitId":"ivyy-poison"},"content":"                .withDescription(\"Alice\u0027s Maternity Leave 2 Description\")","lastModifiedDate":"2023-11-08"},{"lineNumber":90,"author":{"gitId":"ivyy-poison"},"content":"                .withStart(Date.of(ALICE_LEAVE.getStart().getDate().plusDays(10)))","lastModifiedDate":"2023-11-08"},{"lineNumber":91,"author":{"gitId":"ivyy-poison"},"content":"                .withEnd(Date.of(ALICE_LEAVE.getEnd().getDate().plusDays(10))).build();","lastModifiedDate":"2023-11-08"},{"lineNumber":92,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(uniqueLeaveList.hasConcurrentLeave(editedAliceLeave));","lastModifiedDate":"2023-11-08"},{"lineNumber":93,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":94,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":95,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":96,"author":{"gitId":"ivyy-poison"},"content":"    public void add_nullLeave_throwsNullPointerException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":97,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueLeaveList.add(null));","lastModifiedDate":"2023-10-23"},{"lineNumber":98,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":99,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":100,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":101,"author":{"gitId":"ivyy-poison"},"content":"    public void add_duplicateLeave_throwsDuplicateLeaveException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":102,"author":{"gitId":"ivyy-poison"},"content":"        uniqueLeaveList.add(ALICE_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":103,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(DuplicateLeaveException.class, () -\u003e uniqueLeaveList.add(ALICE_LEAVE));","lastModifiedDate":"2023-10-23"},{"lineNumber":104,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":105,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":106,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":107,"author":{"gitId":"ivyy-poison"},"content":"    public void setLeave_nullTargetLeave_throwsNullPointerException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":108,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueLeaveList.setLeave(null, ALICE_LEAVE));","lastModifiedDate":"2023-10-23"},{"lineNumber":109,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":110,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":111,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":112,"author":{"gitId":"ivyy-poison"},"content":"    public void setLeave_nullEditedLeave_throwsNullPointerException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":113,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueLeaveList.setLeave(ALICE_LEAVE, null));","lastModifiedDate":"2023-10-23"},{"lineNumber":114,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":115,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":116,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":117,"author":{"gitId":"ivyy-poison"},"content":"    public void setLeave_targetLeaveNotInList_throwsLeaveNotFoundException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":118,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(LeaveNotFoundException.class, () -\u003e uniqueLeaveList.setLeave(ALICE_LEAVE, ALICE_LEAVE));","lastModifiedDate":"2023-10-23"},{"lineNumber":119,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":120,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":121,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":122,"author":{"gitId":"ivyy-poison"},"content":"    public void setLeave_setDuplicateLeave_throwsDuplicateLeaveException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":123,"author":{"gitId":"ivyy-poison"},"content":"        uniqueLeaveList.add(ALICE_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":124,"author":{"gitId":"ivyy-poison"},"content":"        uniqueLeaveList.add(BOB_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":125,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(DuplicateLeaveException.class, () -\u003e uniqueLeaveList.setLeave(ALICE_LEAVE, BOB_LEAVE));","lastModifiedDate":"2023-10-23"},{"lineNumber":126,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":127,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":128,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":129,"author":{"gitId":"ivyy-poison"},"content":"    public void setLeave_setEditedLeave_success() {","lastModifiedDate":"2023-10-23"},{"lineNumber":130,"author":{"gitId":"ivyy-poison"},"content":"        uniqueLeaveList.add(ALICE_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":131,"author":{"gitId":"ivyy-poison"},"content":"        uniqueLeaveList.setLeave(ALICE_LEAVE, BOB_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":132,"author":{"gitId":"ivyy-poison"},"content":"        UniqueLeaveList expectedUniqueLeaveList \u003d new UniqueLeaveList();","lastModifiedDate":"2023-10-23"},{"lineNumber":133,"author":{"gitId":"ivyy-poison"},"content":"        expectedUniqueLeaveList.add(BOB_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":134,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(expectedUniqueLeaveList, uniqueLeaveList);","lastModifiedDate":"2023-10-23"},{"lineNumber":135,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":136,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":137,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":138,"author":{"gitId":"ivyy-poison"},"content":"    public void remove_nullLeave_throwsNullPointerException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":139,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueLeaveList.remove(null));","lastModifiedDate":"2023-10-23"},{"lineNumber":140,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":141,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":142,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":143,"author":{"gitId":"ivyy-poison"},"content":"    public void remove_leaveDoesNotExist_throwsLeaveNotFoundException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":144,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(LeaveNotFoundException.class, () -\u003e uniqueLeaveList.remove(ALICE_LEAVE));","lastModifiedDate":"2023-10-23"},{"lineNumber":145,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":146,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":147,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":148,"author":{"gitId":"ivyy-poison"},"content":"    public void remove_existingLeave_removesLeave() {","lastModifiedDate":"2023-10-23"},{"lineNumber":149,"author":{"gitId":"ivyy-poison"},"content":"        uniqueLeaveList.add(ALICE_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":150,"author":{"gitId":"ivyy-poison"},"content":"        uniqueLeaveList.remove(ALICE_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":151,"author":{"gitId":"ivyy-poison"},"content":"        UniqueLeaveList expectedUniqueLeaveList \u003d new UniqueLeaveList();","lastModifiedDate":"2023-10-23"},{"lineNumber":152,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(expectedUniqueLeaveList, uniqueLeaveList);","lastModifiedDate":"2023-10-23"},{"lineNumber":153,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":154,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":155,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":156,"author":{"gitId":"ivyy-poison"},"content":"    public void setLeaves_nullUniqueLeaveList_throwsNullPointerException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":157,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueLeaveList.setLeaves((UniqueLeaveList) null));","lastModifiedDate":"2023-10-23"},{"lineNumber":158,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":159,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":160,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":161,"author":{"gitId":"ivyy-poison"},"content":"    public void setLeaves_nullList_throwsNullPointerException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":162,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueLeaveList.setLeaves((List\u003cLeave\u003e) null));","lastModifiedDate":"2023-10-23"},{"lineNumber":163,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":164,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":165,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":166,"author":{"gitId":"ivyy-poison"},"content":"    public void setLeaves_leaveListNotUnique_throwsDuplicateLeaveException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":167,"author":{"gitId":"ivyy-poison"},"content":"        List\u003cLeave\u003e listWithDuplicateLeaves \u003d Arrays.asList(ALICE_LEAVE, ALICE_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":168,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(DuplicateLeaveException.class, () -\u003e uniqueLeaveList.setLeaves(listWithDuplicateLeaves));","lastModifiedDate":"2023-10-23"},{"lineNumber":169,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":170,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":171,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":172,"author":{"gitId":"ivyy-poison"},"content":"    public void setLeaves_uniqueLeaveList_replacesOwnListWithProvidedUniqueLeaveList() {","lastModifiedDate":"2023-10-23"},{"lineNumber":173,"author":{"gitId":"ivyy-poison"},"content":"        uniqueLeaveList.add(ALICE_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":174,"author":{"gitId":"ivyy-poison"},"content":"        UniqueLeaveList expectedUniqueLeaveList \u003d new UniqueLeaveList();","lastModifiedDate":"2023-10-23"},{"lineNumber":175,"author":{"gitId":"ivyy-poison"},"content":"        expectedUniqueLeaveList.add(BOB_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":176,"author":{"gitId":"ivyy-poison"},"content":"        uniqueLeaveList.setLeaves(expectedUniqueLeaveList);","lastModifiedDate":"2023-10-23"},{"lineNumber":177,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(expectedUniqueLeaveList, uniqueLeaveList);","lastModifiedDate":"2023-10-23"},{"lineNumber":178,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":179,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":180,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":181,"author":{"gitId":"ivyy-poison"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-23"},{"lineNumber":182,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2023-10-23"},{"lineNumber":183,"author":{"gitId":"ivyy-poison"},"content":"            -\u003e uniqueLeaveList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2023-10-23"},{"lineNumber":184,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":185,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":186,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":187,"author":{"gitId":"ivyy-poison"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-23"},{"lineNumber":188,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(uniqueLeaveList.toString(), uniqueLeaveList.asUnmodifiableObservableList().toString());","lastModifiedDate":"2023-10-23"},{"lineNumber":189,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":190,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":191,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":192,"author":{"gitId":"ivyy-poison"},"content":"    public void hashCodeMethod() {","lastModifiedDate":"2023-10-23"},{"lineNumber":193,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(uniqueLeaveList.hashCode(), uniqueLeaveList.asUnmodifiableObservableList().hashCode());","lastModifiedDate":"2023-10-23"},{"lineNumber":194,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":195,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":196,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-23"},{"lineNumber":197,"author":{"gitId":"ivyy-poison"},"content":"    public void equalsMethod() {","lastModifiedDate":"2023-10-23"},{"lineNumber":198,"author":{"gitId":"ivyy-poison"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-23"},{"lineNumber":199,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(uniqueLeaveList.equals(uniqueLeaveList));","lastModifiedDate":"2023-10-23"},{"lineNumber":200,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":201,"author":{"gitId":"ivyy-poison"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-23"},{"lineNumber":202,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(uniqueLeaveList.equals(null));","lastModifiedDate":"2023-10-23"},{"lineNumber":203,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":204,"author":{"gitId":"ivyy-poison"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2023-10-23"},{"lineNumber":205,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(uniqueLeaveList.equals(5));","lastModifiedDate":"2023-10-23"},{"lineNumber":206,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":207,"author":{"gitId":"ivyy-poison"},"content":"        // different internal list -\u003e returns false","lastModifiedDate":"2023-10-23"},{"lineNumber":208,"author":{"gitId":"ivyy-poison"},"content":"        UniqueLeaveList uniqueLeaveListCopy \u003d new UniqueLeaveList();","lastModifiedDate":"2023-10-23"},{"lineNumber":209,"author":{"gitId":"ivyy-poison"},"content":"        uniqueLeaveListCopy.add(ALICE_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":210,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(uniqueLeaveList.equals(uniqueLeaveListCopy));","lastModifiedDate":"2023-10-23"},{"lineNumber":211,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":212,"author":{"gitId":"ivyy-poison"},"content":"        // same internal list -\u003e returns true","lastModifiedDate":"2023-10-23"},{"lineNumber":213,"author":{"gitId":"ivyy-poison"},"content":"        uniqueLeaveList.add(ALICE_LEAVE);","lastModifiedDate":"2023-10-23"},{"lineNumber":214,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(uniqueLeaveList.equals(uniqueLeaveListCopy));","lastModifiedDate":"2023-10-23"},{"lineNumber":215,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":216,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":217,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-12"},{"lineNumber":218,"author":{"gitId":"ryanozx"},"content":"    public void removePerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2023-11-12"},{"lineNumber":219,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e new UniqueLeaveList().removePerson(null));","lastModifiedDate":"2023-11-12"},{"lineNumber":220,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-12"},{"lineNumber":221,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":222,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-12"},{"lineNumber":223,"author":{"gitId":"ryanozx"},"content":"    public void removePerson_personInList_success() {","lastModifiedDate":"2023-11-12"},{"lineNumber":224,"author":{"gitId":"ryanozx"},"content":"        Leave aliceLeave \u003d new LeaveBuilder().withEmployee(","lastModifiedDate":"2023-11-12"},{"lineNumber":225,"author":{"gitId":"ryanozx"},"content":"                new PersonEntry(ALICE.getName().toString())).build();","lastModifiedDate":"2023-11-12"},{"lineNumber":226,"author":{"gitId":"ryanozx"},"content":"        Leave bobLeave \u003d new LeaveBuilder().withEmployee(","lastModifiedDate":"2023-11-12"},{"lineNumber":227,"author":{"gitId":"ryanozx"},"content":"                new PersonEntry(BOB.getName().toString())).build();","lastModifiedDate":"2023-11-12"},{"lineNumber":228,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":229,"author":{"gitId":"ryanozx"},"content":"        // ensure we are not comparing based on same instance","lastModifiedDate":"2023-11-12"},{"lineNumber":230,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(aliceLeave.getEmployee(), ALICE);","lastModifiedDate":"2023-11-12"},{"lineNumber":231,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(bobLeave.getEmployee(), BOB);","lastModifiedDate":"2023-11-12"},{"lineNumber":232,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":233,"author":{"gitId":"ryanozx"},"content":"        UniqueLeaveList ull \u003d new UniqueLeaveList();","lastModifiedDate":"2023-11-12"},{"lineNumber":234,"author":{"gitId":"ryanozx"},"content":"        ull.add(aliceLeave);","lastModifiedDate":"2023-11-12"},{"lineNumber":235,"author":{"gitId":"ryanozx"},"content":"        ull.add(bobLeave);","lastModifiedDate":"2023-11-12"},{"lineNumber":236,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":237,"author":{"gitId":"ryanozx"},"content":"        ull.removePerson(ALICE);","lastModifiedDate":"2023-11-12"},{"lineNumber":238,"author":{"gitId":"ryanozx"},"content":"        assertTrue(ull.contains(bobLeave));","lastModifiedDate":"2023-11-12"},{"lineNumber":239,"author":{"gitId":"ryanozx"},"content":"        assertFalse(ull.contains(aliceLeave));","lastModifiedDate":"2023-11-12"},{"lineNumber":240,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-12"},{"lineNumber":241,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":242,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-12"},{"lineNumber":243,"author":{"gitId":"ryanozx"},"content":"    public void removePerson_personNotInList_noChange() {","lastModifiedDate":"2023-11-12"},{"lineNumber":244,"author":{"gitId":"ryanozx"},"content":"        Leave aliceLeave \u003d new LeaveBuilder().withEmployee(","lastModifiedDate":"2023-11-12"},{"lineNumber":245,"author":{"gitId":"ryanozx"},"content":"                new PersonEntry(ALICE.getName().toString())).build();","lastModifiedDate":"2023-11-12"},{"lineNumber":246,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":247,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(aliceLeave.getEmployee(), BOB);","lastModifiedDate":"2023-11-12"},{"lineNumber":248,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":249,"author":{"gitId":"ryanozx"},"content":"        UniqueLeaveList ull \u003d new UniqueLeaveList();","lastModifiedDate":"2023-11-12"},{"lineNumber":250,"author":{"gitId":"ryanozx"},"content":"        ull.add(aliceLeave);","lastModifiedDate":"2023-11-12"},{"lineNumber":251,"author":{"gitId":"ryanozx"},"content":"        ull.removePerson(BOB);","lastModifiedDate":"2023-11-12"},{"lineNumber":252,"author":{"gitId":"ryanozx"},"content":"        assertTrue(ull.contains(aliceLeave));","lastModifiedDate":"2023-11-12"},{"lineNumber":253,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-12"},{"lineNumber":254,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":255,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-12"},{"lineNumber":256,"author":{"gitId":"ryanozx"},"content":"    public void setPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2023-11-12"},{"lineNumber":257,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e new UniqueLeaveList().setPerson(null, BOB));","lastModifiedDate":"2023-11-12"},{"lineNumber":258,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e new UniqueLeaveList().setPerson(ALICE, null));","lastModifiedDate":"2023-11-12"},{"lineNumber":259,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-12"},{"lineNumber":260,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":261,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-12"},{"lineNumber":262,"author":{"gitId":"ryanozx"},"content":"    public void setPerson_personInList_success() {","lastModifiedDate":"2023-11-12"},{"lineNumber":263,"author":{"gitId":"ryanozx"},"content":"        Leave aliceLeave \u003d new LeaveBuilder().withEmployee(","lastModifiedDate":"2023-11-12"},{"lineNumber":264,"author":{"gitId":"ryanozx"},"content":"                new PersonEntry(ALICE.getName().toString())).build();","lastModifiedDate":"2023-11-12"},{"lineNumber":265,"author":{"gitId":"ryanozx"},"content":"        Leave bobLeave \u003d new LeaveBuilder().withEmployee(","lastModifiedDate":"2023-11-12"},{"lineNumber":266,"author":{"gitId":"ryanozx"},"content":"                new PersonEntry(BOB.getName().toString())).build();","lastModifiedDate":"2023-11-12"},{"lineNumber":267,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":268,"author":{"gitId":"ryanozx"},"content":"        // ensure we are not comparing based on same instance","lastModifiedDate":"2023-11-12"},{"lineNumber":269,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(aliceLeave.getEmployee(), ALICE);","lastModifiedDate":"2023-11-12"},{"lineNumber":270,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(bobLeave.getEmployee(), BOB);","lastModifiedDate":"2023-11-12"},{"lineNumber":271,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":272,"author":{"gitId":"ryanozx"},"content":"        UniqueLeaveList ull \u003d new UniqueLeaveList();","lastModifiedDate":"2023-11-12"},{"lineNumber":273,"author":{"gitId":"ryanozx"},"content":"        ull.add(aliceLeave);","lastModifiedDate":"2023-11-12"},{"lineNumber":274,"author":{"gitId":"ryanozx"},"content":"        ull.add(bobLeave);","lastModifiedDate":"2023-11-12"},{"lineNumber":275,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":276,"author":{"gitId":"ryanozx"},"content":"        Leave expectedChangedLeave \u003d new LeaveBuilder().withEmployee(","lastModifiedDate":"2023-11-12"},{"lineNumber":277,"author":{"gitId":"ryanozx"},"content":"                new PersonEntry(AMY.getName().toString())).build();","lastModifiedDate":"2023-11-12"},{"lineNumber":278,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":279,"author":{"gitId":"ryanozx"},"content":"        assertFalse(ull.contains(expectedChangedLeave));","lastModifiedDate":"2023-11-12"},{"lineNumber":280,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":281,"author":{"gitId":"ryanozx"},"content":"        ull.setPerson(ALICE, AMY);","lastModifiedDate":"2023-11-12"},{"lineNumber":282,"author":{"gitId":"ryanozx"},"content":"        assertTrue(ull.contains(bobLeave));","lastModifiedDate":"2023-11-12"},{"lineNumber":283,"author":{"gitId":"ryanozx"},"content":"        assertFalse(ull.contains(aliceLeave));","lastModifiedDate":"2023-11-12"},{"lineNumber":284,"author":{"gitId":"ryanozx"},"content":"        assertTrue(ull.contains(expectedChangedLeave));","lastModifiedDate":"2023-11-12"},{"lineNumber":285,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-12"},{"lineNumber":286,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":287,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-12"},{"lineNumber":288,"author":{"gitId":"ryanozx"},"content":"    public void setPerson_personNotInList_noChange() {","lastModifiedDate":"2023-11-12"},{"lineNumber":289,"author":{"gitId":"ryanozx"},"content":"        Leave aliceLeave \u003d new LeaveBuilder().withEmployee(","lastModifiedDate":"2023-11-12"},{"lineNumber":290,"author":{"gitId":"ryanozx"},"content":"                new PersonEntry(ALICE.getName().toString())).build();","lastModifiedDate":"2023-11-12"},{"lineNumber":291,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":292,"author":{"gitId":"ryanozx"},"content":"        // ensure we are not comparing based on same instance","lastModifiedDate":"2023-11-12"},{"lineNumber":293,"author":{"gitId":"ryanozx"},"content":"        assertNotEquals(aliceLeave.getEmployee(), ALICE);","lastModifiedDate":"2023-11-12"},{"lineNumber":294,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":295,"author":{"gitId":"ryanozx"},"content":"        UniqueLeaveList ull \u003d new UniqueLeaveList();","lastModifiedDate":"2023-11-12"},{"lineNumber":296,"author":{"gitId":"ryanozx"},"content":"        ull.add(aliceLeave);","lastModifiedDate":"2023-11-12"},{"lineNumber":297,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-12"},{"lineNumber":298,"author":{"gitId":"ryanozx"},"content":"        ull.setPerson(BOB, AMY);","lastModifiedDate":"2023-11-12"},{"lineNumber":299,"author":{"gitId":"ryanozx"},"content":"        assertTrue(ull.contains(aliceLeave));","lastModifiedDate":"2023-11-12"},{"lineNumber":300,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-12"},{"lineNumber":301,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-23"}],"authorContributionMap":{"ryanozx":89,"ivyy-poison":212}},{"path":"src/test/java/seedu/address/model/person/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-01-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(Name.isValidName(\"\\\\|*\u0026^%#\"));","lastModifiedDate":"2023-11-08"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(Name.isValidName(\"(()))()()())()\"));","lastModifiedDate":"2023-11-08"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(Name.isValidName(\"1234\")); // numbers only","lastModifiedDate":"2023-11-08"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(Name.isValidName(\"-some-name\")); // starts with non-alphabet characters","lastModifiedDate":"2023-11-08"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(Name.isValidName(\"2starts-with-number\")); // starts with number","lastModifiedDate":"2023-11-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(Name.isValidName(\"alice-boberton\")); // numbers only","lastModifiedDate":"2023-11-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2017-01-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2017-01-16"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(Name.isValidName(\"Alice s/o Bob\")); // with slash character","lastModifiedDate":"2023-11-08"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(Name.isValidName(\"Alice (Tembusu)\")); // with brackets","lastModifiedDate":"2023-11-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Name name \u003d new Name(\"Valid Name\");","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(name.equals(new Name(\"Valid Name\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(name.equals(name));","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertFalse(name.equals(null));","lastModifiedDate":"2019-02-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertFalse(name.equals(5.0f));","lastModifiedDate":"2019-02-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(name.equals(new Name(\"Other Valid Name\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"ivyy-poison":8,"-":59}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-04-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2018-03-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2020-12-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2018-04-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        String expected \u003d Person.class.getCanonicalName() + \"{name\u003d\" + ALICE.getName() + \", phone\u003d\" + ALICE.getPhone()","lastModifiedDate":"2019-02-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                + \", email\u003d\" + ALICE.getEmail() + \", address\u003d\" + ALICE.getAddress() + \", tags\u003d\" + ALICE.getTags() + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertEquals(expected, ALICE.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":100,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":101,"author":{"gitId":"ivyy-poison"},"content":"        // Test for person without tag","lastModifiedDate":"2023-11-08"},{"lineNumber":102,"author":{"gitId":"ivyy-poison"},"content":"        Person personWithoutTag \u003d new PersonBuilder(ALICE).withTags().build(); // No tags","lastModifiedDate":"2023-11-08"},{"lineNumber":103,"author":{"gitId":"ivyy-poison"},"content":"        String expectedWithoutTag \u003d Person.class.getCanonicalName() + \"{name\u003d\" + personWithoutTag.getName() + \", phone\u003d\"","lastModifiedDate":"2023-11-08"},{"lineNumber":104,"author":{"gitId":"ivyy-poison"},"content":"                + personWithoutTag.getPhone() + \", email\u003d\" + personWithoutTag.getEmail() + \", address\u003d\"","lastModifiedDate":"2023-11-08"},{"lineNumber":105,"author":{"gitId":"ivyy-poison"},"content":"                + personWithoutTag.getAddress() + \"}\";","lastModifiedDate":"2023-11-08"},{"lineNumber":106,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(expectedWithoutTag, personWithoutTag.toString());","lastModifiedDate":"2023-11-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":108,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":109,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":110,"author":{"gitId":"ivyy-poison"},"content":"    public void hasAllTags_allTagsPresent_returnsTrue() {","lastModifiedDate":"2023-10-13"},{"lineNumber":111,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(ALICE.hasAllTags(ALICE.getTags()));","lastModifiedDate":"2023-10-13"},{"lineNumber":112,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":113,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":114,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":115,"author":{"gitId":"ivyy-poison"},"content":"    public void hasAllTags_notAllTagsPresent_returnsFalse() {","lastModifiedDate":"2023-10-13"},{"lineNumber":116,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE.hasAllTags(BOB.getTags()));","lastModifiedDate":"2023-10-13"},{"lineNumber":117,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":118,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":119,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":120,"author":{"gitId":"ivyy-poison"},"content":"    public void hasAllTags_emptyCollection_throwsAssertionError() {","lastModifiedDate":"2023-10-13"},{"lineNumber":121,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(AssertionError.class, () -\u003e ALICE.hasAllTags(new HashSet\u003c\u003e()));","lastModifiedDate":"2023-10-13"},{"lineNumber":122,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":123,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":124,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":125,"author":{"gitId":"ivyy-poison"},"content":"    public void hasAllTags_null_throwsAssertionError() {","lastModifiedDate":"2023-10-13"},{"lineNumber":126,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(AssertionError.class, () -\u003e ALICE.hasAllTags(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":127,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":128,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":129,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":130,"author":{"gitId":"ivyy-poison"},"content":"    public void hasTag_tagPresent_returnsTrue() {","lastModifiedDate":"2023-10-13"},{"lineNumber":131,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(ALICE.hasTag(ALICE.getTags().iterator().next()));","lastModifiedDate":"2023-10-13"},{"lineNumber":132,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":133,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":134,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":135,"author":{"gitId":"ivyy-poison"},"content":"    public void hasTag_tagNotPresent_returnsFalse() {","lastModifiedDate":"2023-10-13"},{"lineNumber":136,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(ALICE.hasTag(BOB.getTags().iterator().next()));","lastModifiedDate":"2023-10-13"},{"lineNumber":137,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":138,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":139,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":140,"author":{"gitId":"ivyy-poison"},"content":"    public void hasTag_null_throwsAssertionError() {","lastModifiedDate":"2023-10-13"},{"lineNumber":141,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(AssertionError.class, () -\u003e ALICE.hasTag(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":143,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":144,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":145,"author":{"gitId":"ivyy-poison"},"content":"    public void removeTags_allTagsPresent_returnsTrue() {","lastModifiedDate":"2023-10-13"},{"lineNumber":146,"author":{"gitId":"ivyy-poison"},"content":"        Person person \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":147,"author":{"gitId":"ivyy-poison"},"content":"        person.removeTags(ALICE.getTags());","lastModifiedDate":"2023-10-13"},{"lineNumber":148,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(person.getTags().isEmpty());","lastModifiedDate":"2023-10-13"},{"lineNumber":149,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":150,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":151,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":152,"author":{"gitId":"ivyy-poison"},"content":"    public void removeTags_notAllTagsPresent_throwsAssertionError() {","lastModifiedDate":"2023-10-13"},{"lineNumber":153,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(AssertionError.class, () -\u003e ALICE.removeTags(BOB.getTags()));","lastModifiedDate":"2023-10-13"},{"lineNumber":154,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":155,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":156,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":157,"author":{"gitId":"ivyy-poison"},"content":"    public void removeTags_emptyCollection_throwsAssertionError() {","lastModifiedDate":"2023-10-13"},{"lineNumber":158,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(AssertionError.class, () -\u003e ALICE.removeTags(new HashSet\u003c\u003e()));","lastModifiedDate":"2023-10-13"},{"lineNumber":159,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":160,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":161,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":162,"author":{"gitId":"ivyy-poison"},"content":"    public void removeTags_null_throwsAssertionError() {","lastModifiedDate":"2023-10-13"},{"lineNumber":163,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(AssertionError.class, () -\u003e ALICE.removeTags(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":164,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":165,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":166,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":167,"author":{"gitId":"ivyy-poison"},"content":"    public void removeTag_tagPresent_returnsTrue() {","lastModifiedDate":"2023-10-13"},{"lineNumber":168,"author":{"gitId":"ivyy-poison"},"content":"        Person person \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":169,"author":{"gitId":"ivyy-poison"},"content":"        person.removeTag(ALICE.getTags().iterator().next());","lastModifiedDate":"2023-10-13"},{"lineNumber":170,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(person.getTags().isEmpty());","lastModifiedDate":"2023-10-13"},{"lineNumber":171,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":172,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":173,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":174,"author":{"gitId":"ivyy-poison"},"content":"    public void removeTag_tagNotPresent_throwsAssertionError() {","lastModifiedDate":"2023-10-13"},{"lineNumber":175,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(AssertionError.class, () -\u003e ALICE.removeTag(BOB.getTags().iterator().next()));","lastModifiedDate":"2023-10-13"},{"lineNumber":176,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":177,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":178,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":179,"author":{"gitId":"ivyy-poison"},"content":"    public void removeTag_null_throwsAssertionError() {","lastModifiedDate":"2023-10-13"},{"lineNumber":180,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(AssertionError.class, () -\u003e ALICE.removeTag(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":181,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":182,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"ivyy-poison":83,"-":100}},{"path":"src/test/java/seedu/address/model/person/TagsContainAllTagsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-14"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"import java.util.List;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"public class TagsContainAllTagsPredicateTest {","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"    public void equals() {","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e tagList1 \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e tagList2 \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"        tagList1.add(new Tag(\"full time\"));","lastModifiedDate":"2023-10-15"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":"        tagList2.add(new Tag(\"part time\"));","lastModifiedDate":"2023-10-15"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":"        tagList2.add(new Tag(\"remote\"));","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"        TagsContainAllTagsPredicate firstPredicate \u003d new TagsContainAllTagsPredicate(tagList1);","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":"        TagsContainAllTagsPredicate secondPredicate \u003d new TagsContainAllTagsPredicate(tagList2);","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"jean-cq"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"jean-cq"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"jean-cq"},"content":"        TagsContainAllTagsPredicate firstPredicateCopy \u003d new TagsContainAllTagsPredicate(tagList1);","lastModifiedDate":"2023-10-14"},{"lineNumber":33,"author":{"gitId":"jean-cq"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2023-10-14"},{"lineNumber":34,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"jean-cq"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2023-10-14"},{"lineNumber":37,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"jean-cq"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"jean-cq"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"jean-cq"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"jean-cq"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":48,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e tagList1 \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e tagList2 \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-14"},{"lineNumber":50,"author":{"gitId":"jean-cq"},"content":"        tagList1.add(new Tag(\"full time\"));","lastModifiedDate":"2023-10-15"},{"lineNumber":51,"author":{"gitId":"jean-cq"},"content":"        tagList2.add(new Tag(\"part time\"));","lastModifiedDate":"2023-10-15"},{"lineNumber":52,"author":{"gitId":"jean-cq"},"content":"        tagList2.add(new Tag(\"remote\"));","lastModifiedDate":"2023-10-14"},{"lineNumber":53,"author":{"gitId":"jean-cq"},"content":"        // One keyword","lastModifiedDate":"2023-10-14"},{"lineNumber":54,"author":{"gitId":"jean-cq"},"content":"        TagsContainAllTagsPredicate predicate \u003d","lastModifiedDate":"2023-10-14"},{"lineNumber":55,"author":{"gitId":"jean-cq"},"content":"                new TagsContainAllTagsPredicate(tagList1);","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"jean-cq"},"content":"        assertTrue(predicate.test(new PersonBuilder()","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"jean-cq"},"content":"                .withTags(\"full time\").build()));","lastModifiedDate":"2023-10-15"},{"lineNumber":58,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"jean-cq"},"content":"        // Multiple keywords","lastModifiedDate":"2023-10-14"},{"lineNumber":60,"author":{"gitId":"jean-cq"},"content":"        predicate \u003d new TagsContainAllTagsPredicate(tagList2);","lastModifiedDate":"2023-10-14"},{"lineNumber":61,"author":{"gitId":"jean-cq"},"content":"        assertTrue(predicate.test(new PersonBuilder()","lastModifiedDate":"2023-10-14"},{"lineNumber":62,"author":{"gitId":"jean-cq"},"content":"                .withTags(\"part time\", \"remote\").build()));","lastModifiedDate":"2023-10-15"},{"lineNumber":63,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":64,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":65,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":66,"author":{"gitId":"jean-cq"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2023-10-14"},{"lineNumber":67,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-14"},{"lineNumber":68,"author":{"gitId":"jean-cq"},"content":"        tagList.add(new Tag(\"full time\"));","lastModifiedDate":"2023-10-15"},{"lineNumber":69,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":70,"author":{"gitId":"jean-cq"},"content":"        // Only one matching keyword","lastModifiedDate":"2023-10-14"},{"lineNumber":71,"author":{"gitId":"InfiBeyond"},"content":"        TagsContainAllTagsPredicate predicate \u003d new TagsContainAllTagsPredicate(tagList);","lastModifiedDate":"2023-11-10"},{"lineNumber":72,"author":{"gitId":"InfiBeyond"},"content":"        assertTrue(predicate.test(new PersonBuilder()","lastModifiedDate":"2023-11-10"},{"lineNumber":73,"author":{"gitId":"jean-cq"},"content":"                .withTags(\"full time\", \"remote\").build()));","lastModifiedDate":"2023-10-15"},{"lineNumber":74,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":75,"author":{"gitId":"jean-cq"},"content":"        // Non-matching keyword","lastModifiedDate":"2023-10-14"},{"lineNumber":76,"author":{"gitId":"jean-cq"},"content":"        predicate \u003d new TagsContainAllTagsPredicate(tagList);","lastModifiedDate":"2023-10-14"},{"lineNumber":77,"author":{"gitId":"jean-cq"},"content":"        assertFalse(predicate.test(new PersonBuilder()","lastModifiedDate":"2023-10-14"},{"lineNumber":78,"author":{"gitId":"jean-cq"},"content":"                .withTags(\"part time\", \"remote\").build()));","lastModifiedDate":"2023-10-15"},{"lineNumber":79,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":80,"author":{"gitId":"jean-cq"},"content":"        // Mixed-case keywords","lastModifiedDate":"2023-10-14"},{"lineNumber":81,"author":{"gitId":"jean-cq"},"content":"        predicate \u003d new TagsContainAllTagsPredicate(tagList);","lastModifiedDate":"2023-10-14"},{"lineNumber":82,"author":{"gitId":"jean-cq"},"content":"        assertFalse(predicate.test(new PersonBuilder()","lastModifiedDate":"2023-10-14"},{"lineNumber":83,"author":{"gitId":"jean-cq"},"content":"                .withTags(\"Full Time\").build()));","lastModifiedDate":"2023-10-14"},{"lineNumber":84,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":85,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":86,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":87,"author":{"gitId":"jean-cq"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-14"},{"lineNumber":88,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-14"},{"lineNumber":89,"author":{"gitId":"jean-cq"},"content":"        tagList.add(new Tag(\"full time\"));","lastModifiedDate":"2023-10-15"},{"lineNumber":90,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":91,"author":{"gitId":"jean-cq"},"content":"        TagsContainAllTagsPredicate predicate \u003d new TagsContainAllTagsPredicate(tagList);","lastModifiedDate":"2023-10-14"},{"lineNumber":92,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":93,"author":{"gitId":"jean-cq"},"content":"        String expected \u003d TagsContainAllTagsPredicate.class.getCanonicalName() + \"{tags\u003d\" + \"[[full time]]\" + \"}\";","lastModifiedDate":"2023-10-15"},{"lineNumber":94,"author":{"gitId":"jean-cq"},"content":"        assertEquals(expected, predicate.toString());","lastModifiedDate":"2023-10-14"},{"lineNumber":95,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":96,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-10-14"}],"authorContributionMap":{"jean-cq":94,"InfiBeyond":2}},{"path":"src/test/java/seedu/address/model/person/TagsContainSomeTagsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jean-cq"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"jean-cq"},"content":"import java.util.Collections;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"jean-cq"},"content":"import java.util.List;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"jean-cq"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"jean-cq"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"jean-cq"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"jean-cq"},"content":"public class TagsContainSomeTagsPredicateTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"jean-cq"},"content":"    public void equals() {","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e tagList1 \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e tagList2 \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"jean-cq"},"content":"        tagList1.add(new Tag(\"fullTime\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"jean-cq"},"content":"        tagList2.add(new Tag(\"partTime\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"        tagList2.add(new Tag(\"remote\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"jean-cq"},"content":"        TagsContainSomeTagsPredicate firstPredicate \u003d new TagsContainSomeTagsPredicate(tagList1);","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"jean-cq"},"content":"        TagsContainSomeTagsPredicate secondPredicate \u003d new TagsContainSomeTagsPredicate(tagList2);","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"jean-cq"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"jean-cq"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"jean-cq"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"jean-cq"},"content":"        TagsContainSomeTagsPredicate firstPredicateCopy \u003d new TagsContainSomeTagsPredicate(tagList1);","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"jean-cq"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"jean-cq"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"jean-cq"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"jean-cq"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"jean-cq"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"jean-cq"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"jean-cq"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"jean-cq"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e tagList1 \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e tagList2 \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"jean-cq"},"content":"        tagList1.add(new Tag(\"full time\"));","lastModifiedDate":"2023-10-15"},{"lineNumber":52,"author":{"gitId":"jean-cq"},"content":"        tagList2.add(new Tag(\"part time\"));","lastModifiedDate":"2023-10-15"},{"lineNumber":53,"author":{"gitId":"jean-cq"},"content":"        tagList2.add(new Tag(\"remote\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"jean-cq"},"content":"        // One keyword","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"jean-cq"},"content":"        TagsContainSomeTagsPredicate predicate \u003d","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"jean-cq"},"content":"                new TagsContainSomeTagsPredicate(tagList1);","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"jean-cq"},"content":"        assertTrue(predicate.test(new PersonBuilder()","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"jean-cq"},"content":"                .withTags(\"full time\").build()));","lastModifiedDate":"2023-10-15"},{"lineNumber":59,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"jean-cq"},"content":"        // Multiple keywords","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"jean-cq"},"content":"        predicate \u003d new TagsContainSomeTagsPredicate(tagList2);","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"jean-cq"},"content":"        assertTrue(predicate.test(new PersonBuilder()","lastModifiedDate":"2023-10-14"},{"lineNumber":63,"author":{"gitId":"jean-cq"},"content":"                .withTags(\"part time\", \"remote\").build()));","lastModifiedDate":"2023-10-15"},{"lineNumber":64,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"jean-cq"},"content":"        // Only one matching keyword","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"jean-cq"},"content":"        predicate \u003d new TagsContainSomeTagsPredicate(tagList2);","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"jean-cq"},"content":"        assertTrue(predicate.test(new PersonBuilder()","lastModifiedDate":"2023-10-14"},{"lineNumber":68,"author":{"gitId":"jean-cq"},"content":"                .withTags(\"full time\", \"remote\").build()));","lastModifiedDate":"2023-10-15"},{"lineNumber":69,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"jean-cq"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"jean-cq"},"content":"        tagList.add(new Tag(\"full time\"));","lastModifiedDate":"2023-10-15"},{"lineNumber":75,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"jean-cq"},"content":"        // Zero keywords","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"jean-cq"},"content":"        TagsContainSomeTagsPredicate predicate \u003d","lastModifiedDate":"2023-10-14"},{"lineNumber":78,"author":{"gitId":"jean-cq"},"content":"                new TagsContainSomeTagsPredicate(Collections.emptyList());","lastModifiedDate":"2023-10-14"},{"lineNumber":79,"author":{"gitId":"jean-cq"},"content":"        assertFalse(predicate.test(new PersonBuilder()","lastModifiedDate":"2023-10-14"},{"lineNumber":80,"author":{"gitId":"jean-cq"},"content":"                .withTags(\"part time\").build()));","lastModifiedDate":"2023-10-14"},{"lineNumber":81,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":82,"author":{"gitId":"jean-cq"},"content":"        // Non-matching keyword","lastModifiedDate":"2023-10-13"},{"lineNumber":83,"author":{"gitId":"jean-cq"},"content":"        predicate \u003d new TagsContainSomeTagsPredicate(tagList);","lastModifiedDate":"2023-10-13"},{"lineNumber":84,"author":{"gitId":"jean-cq"},"content":"        assertFalse(predicate.test(new PersonBuilder()","lastModifiedDate":"2023-10-14"},{"lineNumber":85,"author":{"gitId":"jean-cq"},"content":"                .withTags(\"part time\", \"remote\").build()));","lastModifiedDate":"2023-10-14"},{"lineNumber":86,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":87,"author":{"gitId":"jean-cq"},"content":"        // Mixed-case keywords","lastModifiedDate":"2023-10-14"},{"lineNumber":88,"author":{"gitId":"jean-cq"},"content":"        predicate \u003d new TagsContainSomeTagsPredicate(tagList);","lastModifiedDate":"2023-10-14"},{"lineNumber":89,"author":{"gitId":"jean-cq"},"content":"        assertFalse(predicate.test(new PersonBuilder()","lastModifiedDate":"2023-10-14"},{"lineNumber":90,"author":{"gitId":"jean-cq"},"content":"                .withTags(\"Full Time\").build()));","lastModifiedDate":"2023-10-14"},{"lineNumber":91,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":92,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":93,"author":{"gitId":"jean-cq"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":94,"author":{"gitId":"jean-cq"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-13"},{"lineNumber":95,"author":{"gitId":"jean-cq"},"content":"        List\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-13"},{"lineNumber":96,"author":{"gitId":"jean-cq"},"content":"        tagList.add(new Tag(\"full time\"));","lastModifiedDate":"2023-10-15"},{"lineNumber":97,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":98,"author":{"gitId":"jean-cq"},"content":"        TagsContainSomeTagsPredicate predicate \u003d new TagsContainSomeTagsPredicate(tagList);","lastModifiedDate":"2023-10-13"},{"lineNumber":99,"author":{"gitId":"jean-cq"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":100,"author":{"gitId":"jean-cq"},"content":"        String expected \u003d TagsContainSomeTagsPredicate.class.getCanonicalName() + \"{tags\u003d\" + \"[[full time]]\" + \"}\";","lastModifiedDate":"2023-10-15"},{"lineNumber":101,"author":{"gitId":"jean-cq"},"content":"        assertEquals(expected, predicate.toString());","lastModifiedDate":"2023-10-13"},{"lineNumber":102,"author":{"gitId":"jean-cq"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":103,"author":{"gitId":"jean-cq"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"jean-cq":103}},{"path":"src/test/java/seedu/address/model/tag/TagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.tag;","lastModifiedDate":"2017-12-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-08"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class TagTest {","lastModifiedDate":"2017-12-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Tag(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidTagName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidTagName() {","lastModifiedDate":"2017-12-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null tag name","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"    public void equalsMethod() {","lastModifiedDate":"2023-11-08"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"        // same object","lastModifiedDate":"2023-11-08"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"        Tag tag \u003d new Tag(\"Valid Tag\");","lastModifiedDate":"2023-11-08"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(tag.equals(tag));","lastModifiedDate":"2023-11-08"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"        // different class","lastModifiedDate":"2023-11-08"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(tag.equals(new Object()));","lastModifiedDate":"2023-11-08"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"        // same class, different tag name","lastModifiedDate":"2023-11-08"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"        Tag tag2 \u003d new Tag(\"Other Valid Tag\");","lastModifiedDate":"2023-11-08"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(tag.equals(tag2));","lastModifiedDate":"2023-11-08"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"        // same class, same tag name","lastModifiedDate":"2023-11-08"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"        Tag tag3 \u003d new Tag(\"Valid Tag\");","lastModifiedDate":"2023-11-08"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(tag.equals(tag3));","lastModifiedDate":"2023-11-08"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-12-04"}],"authorContributionMap":{"ivyy-poison":20,"-":26}},{"path":"src/test/java/seedu/address/storage/AdaptedLeaveTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.storage.AdaptedLeave.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalLeaves.ALICE_LEAVE;","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Date;","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Description;","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Range;","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Status;","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Title;","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"public class AdaptedLeaveTest {","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_START \u003d ALICE_LEAVE.getStart().toString();","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_END \u003d ALICE_LEAVE.getEnd().toString();","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_TITLE \u003d ALICE_LEAVE.getTitle().toString();","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_DESCRIPTION \u003d ALICE_LEAVE.getDescription().toString();","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    private static final String EMPTY_DESCRIPTION \u003d \"\";","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_STATUS \u003d ALICE_LEAVE.getStatus().toString();","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_EMPLOYEE \u003d ALICE_LEAVE.getEmployee().getName().toString();","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"    private static final Leave VALID_LEAVE \u003d ALICE_LEAVE;","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"    private static final String INVALID_START \u003d \"2020/01/01\";","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"    private static final String INVALID_END \u003d \"2020/01/01\";","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"    private static final String EMPTY_TITLE \u003d \"\";","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"    private static final String INVALID_TITLE \u003d \"title*#\";","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"    private static final String INVALID_STATUS \u003d \"invalid\";","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"    private static final String INVALID_DESCRIPTION \u003d \"description*#\";","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"    private static final String INVALID_EMPLOYEE \u003d \"R@chel\";","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"    static class MockAdaptedLeave extends AdaptedLeave {","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"        public MockAdaptedLeave(String start, String end, String title, String description,","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"                                 String status, String employee) {","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"            super(start, end, title, description, status, employee);","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"        public MockAdaptedLeave(Leave source) {","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"            super(source);","lastModifiedDate":"2023-11-02"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"    public void constructor_nullLeave_throwsNullPointerException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e new MockAdaptedLeave(null));","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"    public void constructor_nullEmployee_throwsNullPointerException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e new MockAdaptedLeave(null));","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new MockAdaptedLeave(","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"                VALID_START, VALID_END, VALID_TITLE, VALID_DESCRIPTION, VALID_STATUS, INVALID_EMPLOYEE));","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_leaveParameterConstructor_returnsLeave() throws Exception {","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"        AdaptedLeave leave \u003d new MockAdaptedLeave(ALICE_LEAVE);","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"        assertEquals(VALID_LEAVE, leave.toModelType());","lastModifiedDate":"2023-11-02"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_stringParameterConstructor_returnsLeave() throws Exception {","lastModifiedDate":"2023-11-02"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"        AdaptedLeave leave \u003d new MockAdaptedLeave(VALID_START, VALID_END, VALID_TITLE,","lastModifiedDate":"2023-11-02"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"                VALID_DESCRIPTION, VALID_STATUS, VALID_EMPLOYEE);","lastModifiedDate":"2023-11-02"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"        assertEquals(ALICE_LEAVE, leave.toModelType());","lastModifiedDate":"2023-11-02"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":78,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_emptyDescription_returnsLeave() throws Exception {","lastModifiedDate":"2023-11-02"},{"lineNumber":79,"author":{"gitId":"ryanozx"},"content":"        AdaptedLeave leave \u003d new MockAdaptedLeave(VALID_START, VALID_END, VALID_TITLE,","lastModifiedDate":"2023-11-02"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"                EMPTY_DESCRIPTION, VALID_STATUS, VALID_EMPLOYEE);","lastModifiedDate":"2023-11-02"},{"lineNumber":81,"author":{"gitId":"ryanozx"},"content":"        assertTrue(VALID_LEAVE.isSameLeave(leave.toModelType()));","lastModifiedDate":"2023-11-02"},{"lineNumber":82,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":83,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":84,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_invalidStart_throwsIllegalValueException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":86,"author":{"gitId":"ryanozx"},"content":"        AdaptedLeave leave \u003d new MockAdaptedLeave(INVALID_START, VALID_END, VALID_TITLE,","lastModifiedDate":"2023-11-02"},{"lineNumber":87,"author":{"gitId":"ryanozx"},"content":"                        VALID_DESCRIPTION, VALID_STATUS, VALID_EMPLOYEE);","lastModifiedDate":"2023-11-02"},{"lineNumber":88,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-11-02"},{"lineNumber":89,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, leave::toModelType);","lastModifiedDate":"2023-11-02"},{"lineNumber":90,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":91,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":92,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":93,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_nullStart_throwsIllegalValueException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":94,"author":{"gitId":"ryanozx"},"content":"        AdaptedLeave leave \u003d new MockAdaptedLeave(null, VALID_END, VALID_TITLE,","lastModifiedDate":"2023-11-02"},{"lineNumber":95,"author":{"gitId":"ryanozx"},"content":"                VALID_DESCRIPTION, VALID_STATUS, VALID_EMPLOYEE);","lastModifiedDate":"2023-11-02"},{"lineNumber":96,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"start\");","lastModifiedDate":"2023-11-02"},{"lineNumber":97,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, leave::toModelType);","lastModifiedDate":"2023-11-02"},{"lineNumber":98,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":99,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":100,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":101,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_invalidEnd_throwsIllegalValueException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":102,"author":{"gitId":"ryanozx"},"content":"        AdaptedLeave leave \u003d new MockAdaptedLeave(VALID_START, INVALID_END, VALID_TITLE,","lastModifiedDate":"2023-11-02"},{"lineNumber":103,"author":{"gitId":"ryanozx"},"content":"                VALID_DESCRIPTION, VALID_STATUS, VALID_EMPLOYEE);","lastModifiedDate":"2023-11-02"},{"lineNumber":104,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-11-02"},{"lineNumber":105,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, leave::toModelType);","lastModifiedDate":"2023-11-02"},{"lineNumber":106,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":107,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":108,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":109,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_nullEnd_throwsIllegalValueException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":110,"author":{"gitId":"ryanozx"},"content":"        AdaptedLeave leave \u003d new MockAdaptedLeave(VALID_START, null, VALID_TITLE,","lastModifiedDate":"2023-11-02"},{"lineNumber":111,"author":{"gitId":"ryanozx"},"content":"                VALID_DESCRIPTION, VALID_STATUS, VALID_EMPLOYEE);","lastModifiedDate":"2023-11-02"},{"lineNumber":112,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"end\");","lastModifiedDate":"2023-11-02"},{"lineNumber":113,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, leave::toModelType);","lastModifiedDate":"2023-11-02"},{"lineNumber":114,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":115,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":116,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":117,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_endBeforeStart_throwsIllegalValueException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":118,"author":{"gitId":"ryanozx"},"content":"        AdaptedLeave leave \u003d new MockAdaptedLeave(VALID_END, VALID_START, VALID_TITLE,","lastModifiedDate":"2023-11-02"},{"lineNumber":119,"author":{"gitId":"ryanozx"},"content":"                VALID_DESCRIPTION, VALID_STATUS, VALID_EMPLOYEE);","lastModifiedDate":"2023-11-02"},{"lineNumber":120,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d Range.MESSAGE_INVALID_END_DATE;","lastModifiedDate":"2023-11-02"},{"lineNumber":121,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, leave::toModelType);","lastModifiedDate":"2023-11-02"},{"lineNumber":122,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":123,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":124,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":125,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_invalidTitle_throwsIllegalValueException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":126,"author":{"gitId":"ryanozx"},"content":"        AdaptedLeave leave \u003d new MockAdaptedLeave(VALID_START, VALID_END, INVALID_TITLE,","lastModifiedDate":"2023-11-02"},{"lineNumber":127,"author":{"gitId":"ryanozx"},"content":"                VALID_DESCRIPTION, VALID_STATUS, VALID_EMPLOYEE);","lastModifiedDate":"2023-11-02"},{"lineNumber":128,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d Title.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-11-02"},{"lineNumber":129,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, leave::toModelType);","lastModifiedDate":"2023-11-02"},{"lineNumber":130,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":131,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":132,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":133,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_emptyTitle_throwsIllegalValueException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":134,"author":{"gitId":"ryanozx"},"content":"        AdaptedLeave leave \u003d new MockAdaptedLeave(VALID_START, VALID_END, EMPTY_TITLE,","lastModifiedDate":"2023-11-02"},{"lineNumber":135,"author":{"gitId":"ryanozx"},"content":"                VALID_DESCRIPTION, VALID_STATUS, VALID_EMPLOYEE);","lastModifiedDate":"2023-11-02"},{"lineNumber":136,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d Title.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-11-02"},{"lineNumber":137,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, leave::toModelType);","lastModifiedDate":"2023-11-02"},{"lineNumber":138,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":139,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":140,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":141,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_nullTitle_throwsIllegalValueException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":142,"author":{"gitId":"ryanozx"},"content":"        AdaptedLeave leave \u003d new MockAdaptedLeave(VALID_START, VALID_END, null,","lastModifiedDate":"2023-11-02"},{"lineNumber":143,"author":{"gitId":"ryanozx"},"content":"                VALID_DESCRIPTION, VALID_STATUS, VALID_EMPLOYEE);","lastModifiedDate":"2023-11-02"},{"lineNumber":144,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"title\");","lastModifiedDate":"2023-11-02"},{"lineNumber":145,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, leave::toModelType);","lastModifiedDate":"2023-11-02"},{"lineNumber":146,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":147,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":148,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":149,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_invalidDescription_throwsIllegalValueException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":150,"author":{"gitId":"ryanozx"},"content":"        AdaptedLeave leave \u003d new MockAdaptedLeave(VALID_START, VALID_END, VALID_TITLE,","lastModifiedDate":"2023-11-02"},{"lineNumber":151,"author":{"gitId":"ryanozx"},"content":"                INVALID_DESCRIPTION, VALID_STATUS, VALID_EMPLOYEE);","lastModifiedDate":"2023-11-02"},{"lineNumber":152,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-11-02"},{"lineNumber":153,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, leave::toModelType);","lastModifiedDate":"2023-11-02"},{"lineNumber":154,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":155,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":156,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":157,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_nullDescription_throwsIllegalValueException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":158,"author":{"gitId":"ryanozx"},"content":"        AdaptedLeave leave \u003d new MockAdaptedLeave(VALID_START, VALID_END, VALID_TITLE,","lastModifiedDate":"2023-11-02"},{"lineNumber":159,"author":{"gitId":"ryanozx"},"content":"                null, VALID_STATUS, VALID_EMPLOYEE);","lastModifiedDate":"2023-11-02"},{"lineNumber":160,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"description\");","lastModifiedDate":"2023-11-02"},{"lineNumber":161,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, leave::toModelType);","lastModifiedDate":"2023-11-02"},{"lineNumber":162,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":163,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":164,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":165,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_invalidStatus_throwsIllegalValueException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":166,"author":{"gitId":"ryanozx"},"content":"        AdaptedLeave leave \u003d new MockAdaptedLeave(VALID_START, VALID_END, VALID_TITLE,","lastModifiedDate":"2023-11-02"},{"lineNumber":167,"author":{"gitId":"ryanozx"},"content":"                VALID_DESCRIPTION, INVALID_STATUS, VALID_EMPLOYEE);","lastModifiedDate":"2023-11-02"},{"lineNumber":168,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d Status.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-11-02"},{"lineNumber":169,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, leave::toModelType);","lastModifiedDate":"2023-11-02"},{"lineNumber":170,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":171,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":172,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":173,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_nullStatus_throwsIllegalValueException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":174,"author":{"gitId":"ryanozx"},"content":"        AdaptedLeave leave \u003d new MockAdaptedLeave(VALID_START, VALID_END, VALID_TITLE,","lastModifiedDate":"2023-11-02"},{"lineNumber":175,"author":{"gitId":"ryanozx"},"content":"                VALID_DESCRIPTION, null, VALID_EMPLOYEE);","lastModifiedDate":"2023-11-02"},{"lineNumber":176,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"status\");","lastModifiedDate":"2023-11-02"},{"lineNumber":177,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, leave::toModelType);","lastModifiedDate":"2023-11-02"},{"lineNumber":178,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":179,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"ryanozx":179}},{"path":"src/test/java/seedu/address/storage/AdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import java.util.List;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"public class AdaptedPersonTest {","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"    private static final List\u003cAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"            .map(AdaptedTag::new)","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"    static class MockAdaptedPerson extends AdaptedPerson {","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        public MockAdaptedPerson(String name, String phone, String email, String address, List\u003cAdaptedTag\u003e tags) {","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"            super(name, phone, email, address, tags);","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"        public MockAdaptedPerson(Person source) {","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"            super(source);","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_personParameterConstructor_returnsPerson() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"        AdaptedPerson person \u003d new MockAdaptedPerson(BENSON);","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2023-10-20"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_stringParameterConstructor_returnsPerson() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"        AdaptedPerson person \u003d new MockAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"                VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"        AdaptedPerson person \u003d","lastModifiedDate":"2023-10-20"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"                new MockAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"        AdaptedPerson person \u003d new MockAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"        AdaptedPerson person \u003d","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"                new MockAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2023-10-20"},{"lineNumber":78,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-20"},{"lineNumber":79,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-10-20"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":81,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":82,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":83,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":84,"author":{"gitId":"ryanozx"},"content":"        AdaptedPerson person \u003d new MockAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2023-10-20"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2023-10-20"},{"lineNumber":86,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-10-20"},{"lineNumber":87,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":88,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":89,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":90,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":91,"author":{"gitId":"ryanozx"},"content":"        AdaptedPerson person \u003d","lastModifiedDate":"2023-10-20"},{"lineNumber":92,"author":{"gitId":"ryanozx"},"content":"                new MockAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2023-10-20"},{"lineNumber":93,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-20"},{"lineNumber":94,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-10-20"},{"lineNumber":95,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":96,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":97,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":98,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":99,"author":{"gitId":"ryanozx"},"content":"        AdaptedPerson person \u003d new MockAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2023-10-20"},{"lineNumber":100,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2023-10-20"},{"lineNumber":101,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-10-20"},{"lineNumber":102,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":103,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":104,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":105,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":106,"author":{"gitId":"ryanozx"},"content":"        AdaptedPerson person \u003d","lastModifiedDate":"2023-10-20"},{"lineNumber":107,"author":{"gitId":"ryanozx"},"content":"                new MockAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2023-10-20"},{"lineNumber":108,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-20"},{"lineNumber":109,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-10-20"},{"lineNumber":110,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":111,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":112,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":113,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":114,"author":{"gitId":"ryanozx"},"content":"        AdaptedPerson person \u003d new MockAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);","lastModifiedDate":"2023-10-20"},{"lineNumber":115,"author":{"gitId":"ryanozx"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2023-10-20"},{"lineNumber":116,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-10-20"},{"lineNumber":117,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":118,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":119,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":120,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":121,"author":{"gitId":"ryanozx"},"content":"        List\u003cAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2023-10-20"},{"lineNumber":122,"author":{"gitId":"ryanozx"},"content":"        invalidTags.add(new AdaptedTag(INVALID_TAG));","lastModifiedDate":"2023-10-20"},{"lineNumber":123,"author":{"gitId":"ryanozx"},"content":"        AdaptedPerson person \u003d","lastModifiedDate":"2023-10-20"},{"lineNumber":124,"author":{"gitId":"ryanozx"},"content":"                new MockAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);","lastModifiedDate":"2023-10-20"},{"lineNumber":125,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2023-10-20"},{"lineNumber":126,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":127,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"ryanozx":127}},{"path":"src/test/java/seedu/address/storage/AdaptedTagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"public class AdaptedTagTest {","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_TAGNAME \u003d \"test\";","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_ALPHANUMERIC_TAGNAME \u003d \"testTag123\";","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_MULTIWORD_TAGNAME \u003d \"test tag\";","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"    private static final String ILLEGAL_CHAR_TAGNAME \u003d \"t@st3r!\";","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"    private static final String ILLEGAL_CHAR_MULTIWORD_TAGNAME \u003d \"test t@g\";","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    private static final Tag expectedSingleWordTag \u003d new Tag(VALID_TAGNAME);","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"    private static final Tag expectedMultiWordTag \u003d new Tag(VALID_MULTIWORD_TAGNAME);","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_validName_noExceptionsThrown() {","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"        AdaptedTag singleWordTag \u003d new AdaptedTag(VALID_TAGNAME);","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"            singleWordTag.toModelType();","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"        });","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"        AdaptedTag alphanumericTag \u003d new AdaptedTag(VALID_ALPHANUMERIC_TAGNAME);","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"            alphanumericTag.toModelType();","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"        });","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        AdaptedTag multiWordTag \u003d new AdaptedTag(VALID_MULTIWORD_TAGNAME);","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"            multiWordTag.toModelType();","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"        });","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_validName_stringConstructor() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"        AdaptedTag singleWordTag \u003d new AdaptedTag(VALID_TAGNAME);","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"        assertEquals(singleWordTag.toModelType(), expectedSingleWordTag);","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"        AdaptedTag multiWordTag \u003d new AdaptedTag(VALID_MULTIWORD_TAGNAME);","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"        assertEquals(multiWordTag.toModelType(), expectedMultiWordTag);","lastModifiedDate":"2023-10-20"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_validName_tagConstructor() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"        AdaptedTag singleWordTag \u003d new AdaptedTag(expectedSingleWordTag);","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"        assertEquals(singleWordTag.toModelType(), expectedSingleWordTag);","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"        AdaptedTag multiWordTag \u003d new AdaptedTag(expectedMultiWordTag);","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"        assertEquals(multiWordTag.toModelType(), expectedMultiWordTag);","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_invalidName_throwsException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"        AdaptedTag illegalCharTag \u003d new AdaptedTag(ILLEGAL_CHAR_TAGNAME);","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, Tag.MESSAGE_CONSTRAINTS,","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"                illegalCharTag::toModelType);","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"        AdaptedTag illegalCharMultiwordTag \u003d new AdaptedTag(ILLEGAL_CHAR_MULTIWORD_TAGNAME);","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, Tag.MESSAGE_CONSTRAINTS,","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"                illegalCharMultiwordTag::toModelType);","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"    public void getTagName() {","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"        AdaptedTag singleWordTag \u003d new AdaptedTag(VALID_TAGNAME);","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"        assertEquals(singleWordTag.getTagName(), VALID_TAGNAME);","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"        AdaptedTag multiWordTag \u003d new AdaptedTag(VALID_MULTIWORD_TAGNAME);","lastModifiedDate":"2023-10-20"},{"lineNumber":78,"author":{"gitId":"ryanozx"},"content":"        assertEquals(multiWordTag.getTagName(), VALID_MULTIWORD_TAGNAME);","lastModifiedDate":"2023-10-20"},{"lineNumber":79,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"ryanozx":80}},{"path":"src/test/java/seedu/address/storage/CsvAdaptedLeaveTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.storage.CsvAdaptedLeave.DESCRIPTION_HEADER;","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.storage.CsvAdaptedLeave.EMPLOYEE_HEADER;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.storage.CsvAdaptedLeave.END_HEADER;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.storage.CsvAdaptedLeave.START_HEADER;","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.storage.CsvAdaptedLeave.STATUS_HEADER;","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.storage.CsvAdaptedLeave.TITLE_HEADER;","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalLeaves.ALICE_LEAVE;","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.CsvMissingFieldException;","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.GetValuer;","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"public class CsvAdaptedLeaveTest {","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_TITLE \u003d ALICE_LEAVE.getTitle().toString();","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_EMPLOYEE \u003d ALICE_LEAVE.getEmployee().getName().toString();","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_START \u003d ALICE_LEAVE.getStart().toFormattedString();","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_END \u003d ALICE_LEAVE.getEnd().toFormattedString();","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_DESCRIPTION \u003d ALICE_LEAVE.getDescription().toString();","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_STATUS \u003d ALICE_LEAVE.getStatus().toString();","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"    public void getCsvValues_validFields() {","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"        String[] expectedValues \u003d {VALID_TITLE, VALID_EMPLOYEE, VALID_START,","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"            VALID_END, VALID_DESCRIPTION, VALID_STATUS};","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"        CsvAdaptedLeave leave \u003d new CsvAdaptedLeave(ALICE_LEAVE);","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"        assertEquals(leave.getCsvValues(), Arrays.asList(expectedValues));","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"    public void getHeader() {","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"        String[] expectedHeaders \u003d {TITLE_HEADER, EMPLOYEE_HEADER, START_HEADER,","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"            END_HEADER, DESCRIPTION_HEADER, STATUS_HEADER};","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"        assertEquals(CsvAdaptedLeave.getHeader(), Arrays.asList(expectedHeaders));","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"     * Mock CsvRow that returns ALICE_LEAVE\u0027s values when the corresponding headers are queried.","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"     * All headers\u0027 values are present.","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"    class MockCsvRow implements GetValuer {","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"        private final boolean hasTitle;","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"        private final boolean hasEmployee;","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"        private final boolean hasStart;","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"        private final boolean hasEnd;","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"        private final boolean hasDescription;","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"        private final boolean hasStatus;","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"        /**","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"         * Constructs a MockCsvRow object with all headers\u0027 values present.","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"         */","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"        public MockCsvRow() {","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"            this.hasTitle \u003d true;","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"            this.hasEmployee \u003d true;","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"            this.hasStart \u003d true;","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"            this.hasEnd \u003d true;","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"            this.hasDescription \u003d true;","lastModifiedDate":"2023-11-02"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"            this.hasStatus \u003d true;","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"        /**","lastModifiedDate":"2023-11-02"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"         * Constructs a MockCsvRow object. Boolean values are used to control whether the corresponding","lastModifiedDate":"2023-11-02"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"         * fields\u0027 values are present in the row","lastModifiedDate":"2023-11-02"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"         * @param hasTitle If the row contains the title","lastModifiedDate":"2023-11-02"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"         * @param hasEmployee If the row contains the employee name","lastModifiedDate":"2023-11-02"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"         * @param hasStart If the row contains the start date","lastModifiedDate":"2023-11-02"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"         * @param hasEnd If the row contains the end date","lastModifiedDate":"2023-11-02"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"         * @param hasDescription If the row contains the description","lastModifiedDate":"2023-11-02"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"         * @param hasStatus If the row contains the status","lastModifiedDate":"2023-11-02"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"         */","lastModifiedDate":"2023-11-02"},{"lineNumber":78,"author":{"gitId":"ryanozx"},"content":"        public MockCsvRow(boolean hasTitle, boolean hasEmployee, boolean hasStart,","lastModifiedDate":"2023-11-02"},{"lineNumber":79,"author":{"gitId":"ryanozx"},"content":"                          boolean hasEnd, boolean hasDescription, boolean hasStatus) {","lastModifiedDate":"2023-11-02"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"            this.hasTitle \u003d hasTitle;","lastModifiedDate":"2023-11-02"},{"lineNumber":81,"author":{"gitId":"ryanozx"},"content":"            this.hasEmployee \u003d hasEmployee;","lastModifiedDate":"2023-11-02"},{"lineNumber":82,"author":{"gitId":"ryanozx"},"content":"            this.hasStart \u003d hasStart;","lastModifiedDate":"2023-11-02"},{"lineNumber":83,"author":{"gitId":"ryanozx"},"content":"            this.hasEnd \u003d hasEnd;","lastModifiedDate":"2023-11-02"},{"lineNumber":84,"author":{"gitId":"ryanozx"},"content":"            this.hasDescription \u003d hasDescription;","lastModifiedDate":"2023-11-02"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"            this.hasStatus \u003d hasStatus;","lastModifiedDate":"2023-11-02"},{"lineNumber":86,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":87,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":88,"author":{"gitId":"ryanozx"},"content":"        /**","lastModifiedDate":"2023-11-02"},{"lineNumber":89,"author":{"gitId":"ryanozx"},"content":"         * Returns values associated with the corresponding column.","lastModifiedDate":"2023-11-02"},{"lineNumber":90,"author":{"gitId":"ryanozx"},"content":"         *","lastModifiedDate":"2023-11-02"},{"lineNumber":91,"author":{"gitId":"ryanozx"},"content":"         * @param field Name of column to query for","lastModifiedDate":"2023-11-02"},{"lineNumber":92,"author":{"gitId":"ryanozx"},"content":"         * @return String value associated with column","lastModifiedDate":"2023-11-02"},{"lineNumber":93,"author":{"gitId":"ryanozx"},"content":"         * @throws CsvMissingFieldException if queried field has no associated value","lastModifiedDate":"2023-11-02"},{"lineNumber":94,"author":{"gitId":"ryanozx"},"content":"         */","lastModifiedDate":"2023-11-02"},{"lineNumber":95,"author":{"gitId":"ryanozx"},"content":"        public String getValue(String field) throws CsvMissingFieldException {","lastModifiedDate":"2023-11-02"},{"lineNumber":96,"author":{"gitId":"ryanozx"},"content":"            if (hasTitle \u0026\u0026 field.equals(TITLE_HEADER)) {","lastModifiedDate":"2023-11-02"},{"lineNumber":97,"author":{"gitId":"ryanozx"},"content":"                return VALID_TITLE;","lastModifiedDate":"2023-11-02"},{"lineNumber":98,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-11-02"},{"lineNumber":99,"author":{"gitId":"ryanozx"},"content":"            if (hasEmployee \u0026\u0026 field.equals(EMPLOYEE_HEADER)) {","lastModifiedDate":"2023-11-02"},{"lineNumber":100,"author":{"gitId":"ryanozx"},"content":"                return VALID_EMPLOYEE;","lastModifiedDate":"2023-11-02"},{"lineNumber":101,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-11-02"},{"lineNumber":102,"author":{"gitId":"ryanozx"},"content":"            if (hasStart \u0026\u0026 field.equals(START_HEADER)) {","lastModifiedDate":"2023-11-02"},{"lineNumber":103,"author":{"gitId":"ryanozx"},"content":"                return VALID_START;","lastModifiedDate":"2023-11-02"},{"lineNumber":104,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-11-02"},{"lineNumber":105,"author":{"gitId":"ryanozx"},"content":"            if (hasEnd \u0026\u0026 field.equals(END_HEADER)) {","lastModifiedDate":"2023-11-02"},{"lineNumber":106,"author":{"gitId":"ryanozx"},"content":"                return VALID_END;","lastModifiedDate":"2023-11-02"},{"lineNumber":107,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-11-02"},{"lineNumber":108,"author":{"gitId":"ryanozx"},"content":"            if (hasDescription \u0026\u0026 field.equals(DESCRIPTION_HEADER)) {","lastModifiedDate":"2023-11-02"},{"lineNumber":109,"author":{"gitId":"ryanozx"},"content":"                return VALID_DESCRIPTION;","lastModifiedDate":"2023-11-02"},{"lineNumber":110,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-11-02"},{"lineNumber":111,"author":{"gitId":"ryanozx"},"content":"            if (hasStatus \u0026\u0026 field.equals(STATUS_HEADER)) {","lastModifiedDate":"2023-11-02"},{"lineNumber":112,"author":{"gitId":"ryanozx"},"content":"                return VALID_STATUS;","lastModifiedDate":"2023-11-02"},{"lineNumber":113,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-11-02"},{"lineNumber":114,"author":{"gitId":"ryanozx"},"content":"            throw new CsvMissingFieldException(field);","lastModifiedDate":"2023-11-02"},{"lineNumber":115,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":116,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":117,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":118,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":119,"author":{"gitId":"ryanozx"},"content":"    public void deserialiseLeave_allFieldsPresent_returnsCsvAdaptedLeave() throws Exception {","lastModifiedDate":"2023-11-02"},{"lineNumber":120,"author":{"gitId":"ryanozx"},"content":"        GetValuer mockCsvRow \u003d new CsvAdaptedLeaveTest.MockCsvRow();","lastModifiedDate":"2023-11-02"},{"lineNumber":121,"author":{"gitId":"ryanozx"},"content":"        CsvAdaptedLeave leave \u003d CsvAdaptedLeave.deserialiseLeave(mockCsvRow);","lastModifiedDate":"2023-11-02"},{"lineNumber":122,"author":{"gitId":"ryanozx"},"content":"        assertEquals(leave.toModelType(), ALICE_LEAVE);","lastModifiedDate":"2023-11-02"},{"lineNumber":123,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":124,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":125,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":126,"author":{"gitId":"ryanozx"},"content":"    public void deserialiseLeave_missingTitle_throwsException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":127,"author":{"gitId":"ryanozx"},"content":"        GetValuer mockCsvRow \u003d new CsvAdaptedLeaveTest.MockCsvRow(","lastModifiedDate":"2023-11-02"},{"lineNumber":128,"author":{"gitId":"ryanozx"},"content":"                false, true, true, true, true, true);","lastModifiedDate":"2023-11-02"},{"lineNumber":129,"author":{"gitId":"ryanozx"},"content":"        CsvMissingFieldException expectedError \u003d new CsvMissingFieldException(TITLE_HEADER);","lastModifiedDate":"2023-11-02"},{"lineNumber":130,"author":{"gitId":"ryanozx"},"content":"        assertThrows(CsvMissingFieldException.class, expectedError.getMessage(), () -\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":131,"author":{"gitId":"ryanozx"},"content":"                CsvAdaptedLeave.deserialiseLeave(mockCsvRow));","lastModifiedDate":"2023-11-02"},{"lineNumber":132,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":133,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":134,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":135,"author":{"gitId":"ryanozx"},"content":"    public void deserialiseLeave_missingEmployee_throwsException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":136,"author":{"gitId":"ryanozx"},"content":"        GetValuer mockCsvRow \u003d new CsvAdaptedLeaveTest.MockCsvRow(","lastModifiedDate":"2023-11-02"},{"lineNumber":137,"author":{"gitId":"ryanozx"},"content":"                true, false, true, true, true, true);","lastModifiedDate":"2023-11-02"},{"lineNumber":138,"author":{"gitId":"ryanozx"},"content":"        CsvMissingFieldException expectedError \u003d new CsvMissingFieldException(EMPLOYEE_HEADER);","lastModifiedDate":"2023-11-02"},{"lineNumber":139,"author":{"gitId":"ryanozx"},"content":"        assertThrows(CsvMissingFieldException.class, expectedError.getMessage(), () -\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":140,"author":{"gitId":"ryanozx"},"content":"                CsvAdaptedLeave.deserialiseLeave(mockCsvRow));","lastModifiedDate":"2023-11-02"},{"lineNumber":141,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":142,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":143,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":144,"author":{"gitId":"ryanozx"},"content":"    public void deserialiseLeave_missingStart_throwsException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":145,"author":{"gitId":"ryanozx"},"content":"        GetValuer mockCsvRow \u003d new CsvAdaptedLeaveTest.MockCsvRow(","lastModifiedDate":"2023-11-02"},{"lineNumber":146,"author":{"gitId":"ryanozx"},"content":"                true, true, false, true, true, true);","lastModifiedDate":"2023-11-02"},{"lineNumber":147,"author":{"gitId":"ryanozx"},"content":"        CsvMissingFieldException expectedError \u003d new CsvMissingFieldException(START_HEADER);","lastModifiedDate":"2023-11-02"},{"lineNumber":148,"author":{"gitId":"ryanozx"},"content":"        assertThrows(CsvMissingFieldException.class, expectedError.getMessage(), () -\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":149,"author":{"gitId":"ryanozx"},"content":"                CsvAdaptedLeave.deserialiseLeave(mockCsvRow));","lastModifiedDate":"2023-11-02"},{"lineNumber":150,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":151,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":152,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":153,"author":{"gitId":"ryanozx"},"content":"    public void deserialiseLeave_missingEnd_throwsException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":154,"author":{"gitId":"ryanozx"},"content":"        GetValuer mockCsvRow \u003d new CsvAdaptedLeaveTest.MockCsvRow(","lastModifiedDate":"2023-11-02"},{"lineNumber":155,"author":{"gitId":"ryanozx"},"content":"                true, true, true, false, true, true);","lastModifiedDate":"2023-11-02"},{"lineNumber":156,"author":{"gitId":"ryanozx"},"content":"        CsvMissingFieldException expectedError \u003d new CsvMissingFieldException(END_HEADER);","lastModifiedDate":"2023-11-02"},{"lineNumber":157,"author":{"gitId":"ryanozx"},"content":"        assertThrows(CsvMissingFieldException.class, expectedError.getMessage(), () -\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":158,"author":{"gitId":"ryanozx"},"content":"                CsvAdaptedLeave.deserialiseLeave(mockCsvRow));","lastModifiedDate":"2023-11-02"},{"lineNumber":159,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":160,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":161,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":162,"author":{"gitId":"ryanozx"},"content":"    public void deserialiseLeave_missingDescription_throwsException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":163,"author":{"gitId":"ryanozx"},"content":"        GetValuer mockCsvRow \u003d new CsvAdaptedLeaveTest.MockCsvRow(","lastModifiedDate":"2023-11-02"},{"lineNumber":164,"author":{"gitId":"ryanozx"},"content":"                true, true, true, true, false, true);","lastModifiedDate":"2023-11-02"},{"lineNumber":165,"author":{"gitId":"ryanozx"},"content":"        CsvMissingFieldException expectedError \u003d new CsvMissingFieldException(DESCRIPTION_HEADER);","lastModifiedDate":"2023-11-02"},{"lineNumber":166,"author":{"gitId":"ryanozx"},"content":"        assertThrows(CsvMissingFieldException.class, expectedError.getMessage(), () -\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":167,"author":{"gitId":"ryanozx"},"content":"                CsvAdaptedLeave.deserialiseLeave(mockCsvRow));","lastModifiedDate":"2023-11-02"},{"lineNumber":168,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":169,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":170,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":171,"author":{"gitId":"ryanozx"},"content":"    public void deserialiseLeave_missingStatus_throwsException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":172,"author":{"gitId":"ryanozx"},"content":"        GetValuer mockCsvRow \u003d new CsvAdaptedLeaveTest.MockCsvRow(","lastModifiedDate":"2023-11-02"},{"lineNumber":173,"author":{"gitId":"ryanozx"},"content":"                true, true, true, true, true, false);","lastModifiedDate":"2023-11-02"},{"lineNumber":174,"author":{"gitId":"ryanozx"},"content":"        CsvMissingFieldException expectedError \u003d new CsvMissingFieldException(STATUS_HEADER);","lastModifiedDate":"2023-11-02"},{"lineNumber":175,"author":{"gitId":"ryanozx"},"content":"        assertThrows(CsvMissingFieldException.class, expectedError.getMessage(), () -\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":176,"author":{"gitId":"ryanozx"},"content":"                CsvAdaptedLeave.deserialiseLeave(mockCsvRow));","lastModifiedDate":"2023-11-02"},{"lineNumber":177,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":178,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"ryanozx":178}},{"path":"src/test/java/seedu/address/storage/CsvAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.storage.CsvAdaptedPerson.ADDRESS_HEADER;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.storage.CsvAdaptedPerson.EMAIL_HEADER;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.storage.CsvAdaptedPerson.NAME_HEADER;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.storage.CsvAdaptedPerson.PHONE_HEADER;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.storage.CsvAdaptedPerson.TAGS_HEADER;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"import java.util.List;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.CsvMissingFieldException;","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.GetValuer;","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"public class CsvAdaptedPersonTest {","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"    private static final List\u003cAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"            .map(AdaptedTag::new)","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"    private static final List\u003cString\u003e VALID_TAG_NAMES \u003d VALID_TAGS.stream()","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"            .map(AdaptedTag::getTagName)","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_TAGS_CSV_STRING \u003d String.join(","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"            CsvAdaptedPerson.TAG_DELIMITER, VALID_TAG_NAMES);","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"    public void getCsvValues_validFields() {","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"        String tagRep \u003d String.join(CsvAdaptedPerson.TAG_DELIMITER, VALID_TAG_NAMES);","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"        String[] expectedValues \u003d {VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, tagRep};","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"        CsvAdaptedPerson person \u003d new CsvAdaptedPerson(BENSON);","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"        assertEquals(person.getCsvValues(), Arrays.asList(expectedValues));","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"    public void getHeader() {","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"        String[] expectedHeaders \u003d {NAME_HEADER, CsvAdaptedPerson.PHONE_HEADER,","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"            CsvAdaptedPerson.EMAIL_HEADER, CsvAdaptedPerson.ADDRESS_HEADER, CsvAdaptedPerson.TAGS_HEADER};","lastModifiedDate":"2023-10-20"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"        assertEquals(CsvAdaptedPerson.getHeader(), Arrays.asList(expectedHeaders));","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"     * Mock CsvRow that returns Benson\u0027s values when the corresponding headers are queried. All headers\u0027 values are","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"     * present.","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"    class MockCsvRow implements GetValuer {","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"        private final boolean hasName;","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"        private final boolean hasPhone;","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"        private final boolean hasEmail;","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"        private final boolean hasAddress;","lastModifiedDate":"2023-10-20"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"        private final boolean hasTags;","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"        /**","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"         * Constructs a MockCsvRow object with all headers\u0027 values present.","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"         */","lastModifiedDate":"2023-10-20"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"        public MockCsvRow() {","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"            this.hasName \u003d true;","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"            this.hasPhone \u003d true;","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"            this.hasEmail \u003d true;","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"            this.hasAddress \u003d true;","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"            this.hasTags \u003d true;","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"        /**","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"         * Constructs a MockCsvRow object. Boolean values are used to control whether the corresponding","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"         * fields\u0027 values are present in the row","lastModifiedDate":"2023-10-20"},{"lineNumber":78,"author":{"gitId":"ryanozx"},"content":"         * @param hasName If the row contains the name","lastModifiedDate":"2023-10-20"},{"lineNumber":79,"author":{"gitId":"ryanozx"},"content":"         * @param hasPhone If the row contains the phone number","lastModifiedDate":"2023-10-20"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"         * @param hasEmail If the row contains the email address","lastModifiedDate":"2023-10-20"},{"lineNumber":81,"author":{"gitId":"ryanozx"},"content":"         * @param hasAddress If the row contains the address","lastModifiedDate":"2023-10-20"},{"lineNumber":82,"author":{"gitId":"ryanozx"},"content":"         * @param hasTags If the row contains the tags","lastModifiedDate":"2023-10-20"},{"lineNumber":83,"author":{"gitId":"ryanozx"},"content":"         */","lastModifiedDate":"2023-10-20"},{"lineNumber":84,"author":{"gitId":"ryanozx"},"content":"        public MockCsvRow(boolean hasName, boolean hasPhone, boolean hasEmail, boolean hasAddress,","lastModifiedDate":"2023-10-20"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"                          boolean hasTags) {","lastModifiedDate":"2023-10-20"},{"lineNumber":86,"author":{"gitId":"ryanozx"},"content":"            this.hasName \u003d hasName;","lastModifiedDate":"2023-10-20"},{"lineNumber":87,"author":{"gitId":"ryanozx"},"content":"            this.hasPhone \u003d hasPhone;","lastModifiedDate":"2023-10-20"},{"lineNumber":88,"author":{"gitId":"ryanozx"},"content":"            this.hasEmail \u003d hasEmail;","lastModifiedDate":"2023-10-20"},{"lineNumber":89,"author":{"gitId":"ryanozx"},"content":"            this.hasAddress \u003d hasAddress;","lastModifiedDate":"2023-10-20"},{"lineNumber":90,"author":{"gitId":"ryanozx"},"content":"            this.hasTags \u003d hasTags;","lastModifiedDate":"2023-10-20"},{"lineNumber":91,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":92,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":93,"author":{"gitId":"ryanozx"},"content":"        /**","lastModifiedDate":"2023-10-20"},{"lineNumber":94,"author":{"gitId":"ryanozx"},"content":"         * Returns values associated with the corresponding column.","lastModifiedDate":"2023-10-20"},{"lineNumber":95,"author":{"gitId":"ryanozx"},"content":"         *","lastModifiedDate":"2023-10-20"},{"lineNumber":96,"author":{"gitId":"ryanozx"},"content":"         * @param field Name of column to query for","lastModifiedDate":"2023-10-20"},{"lineNumber":97,"author":{"gitId":"ryanozx"},"content":"         * @return String value associated with column","lastModifiedDate":"2023-10-20"},{"lineNumber":98,"author":{"gitId":"ryanozx"},"content":"         * @throws CsvMissingFieldException if queried field has no associated value","lastModifiedDate":"2023-10-20"},{"lineNumber":99,"author":{"gitId":"ryanozx"},"content":"         */","lastModifiedDate":"2023-10-20"},{"lineNumber":100,"author":{"gitId":"ryanozx"},"content":"        public String getValue(String field) throws CsvMissingFieldException {","lastModifiedDate":"2023-10-20"},{"lineNumber":101,"author":{"gitId":"ryanozx"},"content":"            if (hasName \u0026\u0026 field.equals(NAME_HEADER)) {","lastModifiedDate":"2023-10-20"},{"lineNumber":102,"author":{"gitId":"ryanozx"},"content":"                return VALID_NAME;","lastModifiedDate":"2023-10-20"},{"lineNumber":103,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-10-20"},{"lineNumber":104,"author":{"gitId":"ryanozx"},"content":"            if (hasPhone \u0026\u0026 field.equals(PHONE_HEADER)) {","lastModifiedDate":"2023-10-20"},{"lineNumber":105,"author":{"gitId":"ryanozx"},"content":"                return VALID_PHONE;","lastModifiedDate":"2023-10-20"},{"lineNumber":106,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-10-20"},{"lineNumber":107,"author":{"gitId":"ryanozx"},"content":"            if (hasEmail \u0026\u0026 field.equals(EMAIL_HEADER)) {","lastModifiedDate":"2023-10-20"},{"lineNumber":108,"author":{"gitId":"ryanozx"},"content":"                return VALID_EMAIL;","lastModifiedDate":"2023-10-20"},{"lineNumber":109,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-10-20"},{"lineNumber":110,"author":{"gitId":"ryanozx"},"content":"            if (hasAddress \u0026\u0026 field.equals(ADDRESS_HEADER)) {","lastModifiedDate":"2023-10-20"},{"lineNumber":111,"author":{"gitId":"ryanozx"},"content":"                return VALID_ADDRESS;","lastModifiedDate":"2023-10-20"},{"lineNumber":112,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-10-20"},{"lineNumber":113,"author":{"gitId":"ryanozx"},"content":"            if (hasTags \u0026\u0026 field.equals(TAGS_HEADER)) {","lastModifiedDate":"2023-10-20"},{"lineNumber":114,"author":{"gitId":"ryanozx"},"content":"                return VALID_TAGS_CSV_STRING;","lastModifiedDate":"2023-10-20"},{"lineNumber":115,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-10-20"},{"lineNumber":116,"author":{"gitId":"ryanozx"},"content":"            throw new CsvMissingFieldException(field);","lastModifiedDate":"2023-10-20"},{"lineNumber":117,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":118,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":119,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":120,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":121,"author":{"gitId":"ryanozx"},"content":"    public void deserialisePerson_allFieldsPresent_returnsCsvAdaptedPerson() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":122,"author":{"gitId":"ryanozx"},"content":"        GetValuer mockCsvRow \u003d new MockCsvRow();","lastModifiedDate":"2023-10-20"},{"lineNumber":123,"author":{"gitId":"ryanozx"},"content":"        CsvAdaptedPerson person \u003d CsvAdaptedPerson.deserialisePerson(mockCsvRow);","lastModifiedDate":"2023-10-20"},{"lineNumber":124,"author":{"gitId":"ryanozx"},"content":"        assertEquals(person.toModelType(), BENSON);","lastModifiedDate":"2023-10-20"},{"lineNumber":125,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":126,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":127,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":128,"author":{"gitId":"ryanozx"},"content":"    public void deserialisePerson_missingName_throwsException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":129,"author":{"gitId":"ryanozx"},"content":"        GetValuer mockCsvRow \u003d new MockCsvRow(false, true, true, true, true);","lastModifiedDate":"2023-10-20"},{"lineNumber":130,"author":{"gitId":"ryanozx"},"content":"        assertThrows(CsvMissingFieldException.class, () -\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":131,"author":{"gitId":"ryanozx"},"content":"                CsvAdaptedPerson.deserialisePerson(mockCsvRow));","lastModifiedDate":"2023-10-20"},{"lineNumber":132,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":133,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":134,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":135,"author":{"gitId":"ryanozx"},"content":"    public void deserialisePerson_missingPhone_throwsException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":136,"author":{"gitId":"ryanozx"},"content":"        GetValuer mockCsvRow \u003d new MockCsvRow(true, false, true, true, true);","lastModifiedDate":"2023-10-20"},{"lineNumber":137,"author":{"gitId":"ryanozx"},"content":"        CsvMissingFieldException expectedError \u003d new CsvMissingFieldException(PHONE_HEADER);","lastModifiedDate":"2023-10-20"},{"lineNumber":138,"author":{"gitId":"ryanozx"},"content":"        assertThrows(CsvMissingFieldException.class, expectedError.getMessage(), () -\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":139,"author":{"gitId":"ryanozx"},"content":"                CsvAdaptedPerson.deserialisePerson(mockCsvRow));","lastModifiedDate":"2023-10-20"},{"lineNumber":140,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":141,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":142,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":143,"author":{"gitId":"ryanozx"},"content":"    public void deserialisePerson_missingEmail_throwsException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":144,"author":{"gitId":"ryanozx"},"content":"        GetValuer mockCsvRow \u003d new MockCsvRow(true, true, false, true, true);","lastModifiedDate":"2023-10-20"},{"lineNumber":145,"author":{"gitId":"ryanozx"},"content":"        CsvMissingFieldException expectedError \u003d new CsvMissingFieldException(EMAIL_HEADER);","lastModifiedDate":"2023-10-20"},{"lineNumber":146,"author":{"gitId":"ryanozx"},"content":"        assertThrows(CsvMissingFieldException.class, expectedError.getMessage(), () -\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":147,"author":{"gitId":"ryanozx"},"content":"                CsvAdaptedPerson.deserialisePerson(mockCsvRow));","lastModifiedDate":"2023-10-20"},{"lineNumber":148,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":149,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":150,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":151,"author":{"gitId":"ryanozx"},"content":"    public void deserialisePerson_missingAddress_throwsException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":152,"author":{"gitId":"ryanozx"},"content":"        GetValuer mockCsvRow \u003d new MockCsvRow(true, true, true, false, true);","lastModifiedDate":"2023-10-20"},{"lineNumber":153,"author":{"gitId":"ryanozx"},"content":"        CsvMissingFieldException expectedError \u003d new CsvMissingFieldException(ADDRESS_HEADER);","lastModifiedDate":"2023-10-20"},{"lineNumber":154,"author":{"gitId":"ryanozx"},"content":"        assertThrows(CsvMissingFieldException.class, expectedError.getMessage(), () -\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":155,"author":{"gitId":"ryanozx"},"content":"                CsvAdaptedPerson.deserialisePerson(mockCsvRow));","lastModifiedDate":"2023-10-20"},{"lineNumber":156,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":157,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":158,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":159,"author":{"gitId":"ryanozx"},"content":"    public void deserialisePerson_missingTags_throwsException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":160,"author":{"gitId":"ryanozx"},"content":"        GetValuer mockCsvRow \u003d new MockCsvRow(true, true, true, true, false);","lastModifiedDate":"2023-10-20"},{"lineNumber":161,"author":{"gitId":"ryanozx"},"content":"        CsvMissingFieldException expectedError \u003d new CsvMissingFieldException(TAGS_HEADER);","lastModifiedDate":"2023-10-20"},{"lineNumber":162,"author":{"gitId":"ryanozx"},"content":"        assertThrows(CsvMissingFieldException.class, expectedError.getMessage(), () -\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":163,"author":{"gitId":"ryanozx"},"content":"                CsvAdaptedPerson.deserialisePerson(mockCsvRow));","lastModifiedDate":"2023-10-20"},{"lineNumber":164,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":165,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"ryanozx":165}},{"path":"src/test/java/seedu/address/storage/CsvAddressBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"import seedu.address.testutil.FileAndPathUtil;","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"public class CsvAddressBookStorageTest {","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"            \"src\", \"test\", \"data\", \"CsvAddressBookStorageTest\");","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    private Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"        return new CsvAddressBookStorage(addToTestDataPathIfNotNull(filePath))","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"                .readAddressBook();","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"    private Path addToTestDataPathIfNotNull(String filePath) {","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"        return FileAndPathUtil.addToTestDataPathIfNotNull(TEST_DATA_FOLDER, filePath);","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"    public void readAddressBook_invalidFilePath_emptyResult() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"        assertFalse(readAddressBook(\"nonExistentFile.csv\").isPresent());","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"    public void readAddressBook_notCsvFile_throwsException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readAddressBook(\"notCsvFile.txt\"));","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwsDataLoadingException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.csv\"));","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"    public void readAddressBook_validAndInvalidPersonAddressBook_throwsDataLoadingException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"        assertThrows(DataLoadingException.class, () -\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"                readAddressBook(\"validAndInvalidPersonAddressBook.csv\"));","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"    public void readAddressBook_missingField_emptyResult() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"        assertFalse(readAddressBook(\"missingFieldCsvFile.csv\").isPresent());","lastModifiedDate":"2023-10-20"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"    public void readAndSaveAddressBook_validPersonAddressBook_success() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"        Path savePath \u003d addToTestDataPathIfNotNull(\"testSaveFile.csv\");","lastModifiedDate":"2023-10-20"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"        CsvAddressBookStorage abStorage \u003d new CsvAddressBookStorage(savePath);","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"        // save in new data and read back","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"        abStorage.saveAddressBook(original, savePath);","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"        ReadOnlyAddressBook readBack \u003d abStorage.readAddressBook(savePath).get();","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"        assertEquals(readBack, original);","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"        FileAndPathUtil.cleanupCreatedFiles(savePath);","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"        // save and read again without specifying the file path","lastModifiedDate":"2023-10-20"},{"lineNumber":78,"author":{"gitId":"ryanozx"},"content":"        abStorage.saveAddressBook(original);","lastModifiedDate":"2023-10-20"},{"lineNumber":79,"author":{"gitId":"ryanozx"},"content":"        readBack \u003d abStorage.readAddressBook().get();","lastModifiedDate":"2023-10-20"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"        assertEquals(readBack, original);","lastModifiedDate":"2023-10-20"},{"lineNumber":81,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":82,"author":{"gitId":"ryanozx"},"content":"        FileAndPathUtil.cleanupCreatedFiles(savePath);","lastModifiedDate":"2023-10-20"},{"lineNumber":83,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":84,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":86,"author":{"gitId":"ryanozx"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":87,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"shouldNotExist.csv\"));","lastModifiedDate":"2023-10-20"},{"lineNumber":88,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":89,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":90,"author":{"gitId":"ryanozx"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {","lastModifiedDate":"2023-10-20"},{"lineNumber":91,"author":{"gitId":"ryanozx"},"content":"        new CsvAddressBookStorage(addToTestDataPathIfNotNull(filePath))","lastModifiedDate":"2023-10-20"},{"lineNumber":92,"author":{"gitId":"ryanozx"},"content":"                .saveAddressBook(addressBook);","lastModifiedDate":"2023-10-20"},{"lineNumber":93,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":94,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":95,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":96,"author":{"gitId":"ryanozx"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":97,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(getTypicalAddressBook(), null));","lastModifiedDate":"2023-10-20"},{"lineNumber":98,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":99,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":100,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":101,"author":{"gitId":"ryanozx"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2023-10-20"},{"lineNumber":102,"author":{"gitId":"ryanozx"},"content":"        Path testPath \u003d addToTestDataPathIfNotNull(\"mockFile.csv\");","lastModifiedDate":"2023-10-20"},{"lineNumber":103,"author":{"gitId":"ryanozx"},"content":"        CsvAddressBookStorage abStorage \u003d new CsvAddressBookStorage(testPath);","lastModifiedDate":"2023-10-20"},{"lineNumber":104,"author":{"gitId":"ryanozx"},"content":"        assertEquals(abStorage.getAddressBookFilePath(), testPath);","lastModifiedDate":"2023-10-20"},{"lineNumber":105,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":106,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"ryanozx":106}},{"path":"src/test/java/seedu/address/storage/CsvLeavesBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import java.io.IOException;","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import java.util.Optional;","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.LeavesBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.ReadOnlyLeavesBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"import seedu.address.testutil.FileAndPathUtil;","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"public class CsvLeavesBookStorageTest {","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"            \"src\", \"test\", \"data\", \"CsvLeavesBookStorageTest\");","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"    private Optional\u003cReadOnlyLeavesBook\u003e readLeavesBook(String filePath) throws Exception {","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"        AddressBook addressBook \u003d getTypicalAddressBook();","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"        return new CsvLeavesBookStorage(addToTestDataPathIfNotNull(filePath))","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"                .readLeavesBook(addressBook);","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"    private Path addToTestDataPathIfNotNull(String filePath) {","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"        return FileAndPathUtil.addToTestDataPathIfNotNull(TEST_DATA_FOLDER, filePath);","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"    public void readLeavesBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e readLeavesBook(null));","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"    public void readLeavesBook_invalidFilePath_emptyResult() throws Exception {","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"        assertFalse(readLeavesBook(\"nonExistentFile.csv\").isPresent());","lastModifiedDate":"2023-11-02"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"    public void readLeavesBook_notCsvFile_throwsException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readLeavesBook(\"notCsvFile.txt\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"    /*","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"    public void readLeavesBook_invalidLeavesAddressBook_throwsDataLoadingException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readLeavesBook(\"invalidPersonAddressBook.csv\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"    public void readAddressBook_validAndInvalidPersonAddressBook_throwsDataLoadingException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"        assertThrows(DataLoadingException.class, () -\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"                readLeavesBook(\"validAndInvalidPersonAddressBook.csv\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"    public void readAddressBook_missingField_emptyResult() throws Exception {","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"        assertFalse(readLeavesBook(\"missingFieldCsvFile.csv\").isPresent());","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":68,"author":{"gitId":"ryanozx"},"content":"    */","lastModifiedDate":"2023-11-02"},{"lineNumber":69,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"    public void readAndSaveLeavesBook_validLeavesBook_success() throws Exception {","lastModifiedDate":"2023-11-02"},{"lineNumber":72,"author":{"gitId":"ryanozx"},"content":"        Path savePath \u003d addToTestDataPathIfNotNull(\"testSaveFile.csv\");","lastModifiedDate":"2023-11-02"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"        LeavesBook original \u003d getTypicalLeavesBook();","lastModifiedDate":"2023-11-02"},{"lineNumber":74,"author":{"gitId":"ryanozx"},"content":"        CsvLeavesBookStorage lvStorage \u003d new CsvLeavesBookStorage(savePath);","lastModifiedDate":"2023-11-02"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":76,"author":{"gitId":"ryanozx"},"content":"        // save in new data and read back","lastModifiedDate":"2023-11-02"},{"lineNumber":77,"author":{"gitId":"ryanozx"},"content":"        lvStorage.saveLeavesBook(original, savePath);","lastModifiedDate":"2023-11-02"},{"lineNumber":78,"author":{"gitId":"ryanozx"},"content":"        ReadOnlyLeavesBook readBack \u003d lvStorage.readLeavesBook(savePath, getTypicalAddressBook()).get();","lastModifiedDate":"2023-11-02"},{"lineNumber":79,"author":{"gitId":"ryanozx"},"content":"        assertEquals(readBack, original);","lastModifiedDate":"2023-11-02"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":81,"author":{"gitId":"ryanozx"},"content":"        FileAndPathUtil.cleanupCreatedFiles(savePath);","lastModifiedDate":"2023-11-02"},{"lineNumber":82,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":83,"author":{"gitId":"ryanozx"},"content":"        // save and read again without specifying the file path","lastModifiedDate":"2023-11-02"},{"lineNumber":84,"author":{"gitId":"ryanozx"},"content":"        lvStorage.saveLeavesBook(original);","lastModifiedDate":"2023-11-02"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"        readBack \u003d lvStorage.readLeavesBook(getTypicalAddressBook()).get();","lastModifiedDate":"2023-11-02"},{"lineNumber":86,"author":{"gitId":"ryanozx"},"content":"        assertEquals(readBack, original);","lastModifiedDate":"2023-11-02"},{"lineNumber":87,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":88,"author":{"gitId":"ryanozx"},"content":"        FileAndPathUtil.cleanupCreatedFiles(savePath);","lastModifiedDate":"2023-11-02"},{"lineNumber":89,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":90,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":91,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":92,"author":{"gitId":"ryanozx"},"content":"    public void saveLeavesBook_nullLeavesBook_throwsNullPointerException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":93,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveLeavesBook(null, \"shouldNotExist.csv\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":94,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":95,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":96,"author":{"gitId":"ryanozx"},"content":"    private void saveLeavesBook(ReadOnlyLeavesBook leavesBook, String filePath) throws IOException {","lastModifiedDate":"2023-11-02"},{"lineNumber":97,"author":{"gitId":"ryanozx"},"content":"        new CsvLeavesBookStorage(addToTestDataPathIfNotNull(filePath))","lastModifiedDate":"2023-11-02"},{"lineNumber":98,"author":{"gitId":"ryanozx"},"content":"                .saveLeavesBook(leavesBook);","lastModifiedDate":"2023-11-02"},{"lineNumber":99,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":100,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":101,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":102,"author":{"gitId":"ryanozx"},"content":"    public void saveLeavesBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":103,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveLeavesBook(getTypicalLeavesBook(), null));","lastModifiedDate":"2023-11-02"},{"lineNumber":104,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":105,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":106,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":107,"author":{"gitId":"ryanozx"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2023-11-02"},{"lineNumber":108,"author":{"gitId":"ryanozx"},"content":"        Path testPath \u003d addToTestDataPathIfNotNull(\"mockFile.csv\");","lastModifiedDate":"2023-11-02"},{"lineNumber":109,"author":{"gitId":"ryanozx"},"content":"        CsvLeavesBookStorage lvStorage \u003d new CsvLeavesBookStorage(testPath);","lastModifiedDate":"2023-11-02"},{"lineNumber":110,"author":{"gitId":"ryanozx"},"content":"        assertEquals(lvStorage.getLeavesBookFilePath(), testPath);","lastModifiedDate":"2023-11-02"},{"lineNumber":111,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":112,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"ryanozx":112}},{"path":"src/test/java/seedu/address/storage/CsvSerializableAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import java.util.List;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.CsvFile;","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.CsvUtil;","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"public class CsvSerializableAddressBookTest {","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"    private static final CsvAdaptedPerson aliceAP \u003d new CsvAdaptedPerson(ALICE);","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"    private static final CsvAdaptedPerson bensonAP \u003d new CsvAdaptedPerson(BENSON);","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"    public void constructor_containsPersons() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"        List\u003cCsvAdaptedPerson\u003e persons \u003d generatePersonsList();","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"        CsvSerializableAddressBook csvBook \u003d new CsvSerializableAddressBook(persons);","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"        AddressBook addressBook \u003d csvBook.toModelType();","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"        assertTrue(addressBook.hasPerson(BENSON));","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"    private List\u003cCsvAdaptedPerson\u003e generatePersonsList() {","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"        List\u003cCsvAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"        persons.add(aliceAP);","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"        persons.add(bensonAP);","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        return persons;","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"    public void saveAddressBook_successfulCreateFile() {","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"        List\u003cCsvAdaptedPerson\u003e persons \u003d generatePersonsList();","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"        CsvSerializableAddressBook csvBook \u003d new CsvSerializableAddressBook(persons);","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"        CsvFile csvFile \u003d csvBook.saveAddressBook();","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"        List\u003cString\u003e rowStrings \u003d csvFile.getRows()","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"                .map(CsvFile.CsvRow::printRow)","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"        List\u003cString\u003e expectedStrings \u003d persons.stream().map(person -\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"                String.join(CsvUtil.DELIMITER, person.getCsvValues())).collect(Collectors.toList());","lastModifiedDate":"2023-10-26"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"        assertEquals(rowStrings, expectedStrings);","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"ryanozx":55}},{"path":"src/test/java/seedu/address/storage/CsvSerializableLeavesBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-11-02"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalLeaves.ALICE_LEAVE;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalLeaves.BENSON_LEAVE;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import java.util.List;","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.CsvFile;","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.CsvUtil;","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.LeavesBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"public class CsvSerializableLeavesBookTest {","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"    private static final CsvAdaptedLeave aliceAL \u003d new CsvAdaptedLeave(ALICE_LEAVE);","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"    private static final CsvAdaptedLeave bensonAL \u003d new CsvAdaptedLeave(BENSON_LEAVE);","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    public void constructor_containsLeaves() throws Exception {","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"        List\u003cCsvAdaptedLeave\u003e leaves \u003d generateLeavesList();","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"        CsvSerializableLeavesBook csvBook \u003d new CsvSerializableLeavesBook(leaves);","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"        LeavesBook leavesBook \u003d csvBook.toModelType(getTypicalAddressBook());","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"        assertTrue(leavesBook.hasLeave(ALICE_LEAVE));","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"        assertTrue(leavesBook.hasLeave(BENSON_LEAVE));","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"    private List\u003cCsvAdaptedLeave\u003e generateLeavesList() {","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"        List\u003cCsvAdaptedLeave\u003e leaves \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"        leaves.add(aliceAL);","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        leaves.add(bensonAL);","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"        return leaves;","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"    public void saveAddressBook_successfulCreateFile() {","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"        List\u003cCsvAdaptedLeave\u003e leaves \u003d generateLeavesList();","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"        CsvSerializableLeavesBook csvBook \u003d new CsvSerializableLeavesBook(leaves);","lastModifiedDate":"2023-11-02"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"        CsvFile csvFile \u003d csvBook.saveLeavesBook();","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"        List\u003cString\u003e rowStrings \u003d csvFile.getRows()","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"                .map(CsvFile.CsvRow::printRow)","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"        List\u003cString\u003e expectedStrings \u003d leaves.stream().map(leave -\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"                String.join(CsvUtil.DELIMITER, leave.getCsvValues())).collect(Collectors.toList());","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"        assertEquals(rowStrings, expectedStrings);","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"ryanozx":56}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedLeaveTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-27"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-31"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalLeaves.ALICE_LEAVE;","lastModifiedDate":"2023-10-27"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2023-10-31"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-27"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-31"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.leave.Description;","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.leave.Status;","lastModifiedDate":"2023-10-31"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.leave.Title;","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.storage.JsonAdaptedLeave.Employee;","lastModifiedDate":"2023-10-31"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.storage.JsonAdaptedLeave.Name;","lastModifiedDate":"2023-10-31"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"public class JsonAdaptedLeaveTest {","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":"    private static final String VALID_START \u003d ALICE_LEAVE.getStart().toString();","lastModifiedDate":"2023-10-31"},{"lineNumber":22,"author":{"gitId":"ivyy-poison"},"content":"    private static final String VALID_END \u003d ALICE_LEAVE.getEnd().toString();","lastModifiedDate":"2023-10-31"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_TITLE \u003d ALICE_LEAVE.getTitle().toString();","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_DESCRIPTION \u003d ALICE_LEAVE.getDescription().toString();","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ivyy-poison"},"content":"    private static final String EMPTY_DESCRIPTION \u003d \"\";","lastModifiedDate":"2023-10-31"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"    private static final String VALID_STATUS \u003d ALICE_LEAVE.getStatus().toString();","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"ivyy-poison"},"content":"    private static final Employee VALID_EMPLOYEE \u003d new Employee(new Name(ALICE.getName().toString()));","lastModifiedDate":"2023-10-31"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"    private static final Leave VALID_LEAVE \u003d ALICE_LEAVE;","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"    private static final String INVALID_START \u003d \"2020/01/01\";","lastModifiedDate":"2023-10-31"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"    private static final String INVALID_END \u003d \"2020/01/01\";","lastModifiedDate":"2023-10-31"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"    private static final String EMPTY_TITLE \u003d \"\";","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"    private static final String INVALID_TITLE \u003d \"title*#\";","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"    private static final String INVALID_STATUS \u003d \"invalid\";","lastModifiedDate":"2023-10-31"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"    private static final String INVALID_DESCRIPTION \u003d \"description*#\";","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"    public void toModelType_createsEqualLeaveObject_success() throws Exception {","lastModifiedDate":"2023-10-27"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"        JsonAdaptedLeave leave \u003d new JsonAdaptedLeave(VALID_LEAVE);","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(VALID_LEAVE, leave.toModelType());","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"        JsonAdaptedLeave leave2 \u003d JsonAdaptedLeave.of(VALID_START, VALID_END, VALID_TITLE, VALID_DESCRIPTION,","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"                VALID_STATUS, VALID_EMPLOYEE);","lastModifiedDate":"2023-10-31"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(VALID_LEAVE, leave2.toModelType());","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":47,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":48,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":49,"author":{"gitId":"ivyy-poison"},"content":"    public void toModelType_nullStart_throwsIllegalValueException() {","lastModifiedDate":"2023-10-31"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"        JsonAdaptedLeave leave \u003d JsonAdaptedLeave.of(null, VALID_END, VALID_TITLE, VALID_DESCRIPTION,","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"ivyy-poison"},"content":"                VALID_STATUS, VALID_EMPLOYEE);","lastModifiedDate":"2023-10-31"},{"lineNumber":52,"author":{"gitId":"ivyy-poison"},"content":"        String expectedMessage \u003d String.format(JsonAdaptedLeave.MISSING_FIELD_MESSAGE_FORMAT, \"start\");","lastModifiedDate":"2023-10-31"},{"lineNumber":53,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, leave::toModelType);","lastModifiedDate":"2023-10-31"},{"lineNumber":54,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":55,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":56,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":57,"author":{"gitId":"ivyy-poison"},"content":"    public void toModelType_invalidStart_throwsIllegalValueException() {","lastModifiedDate":"2023-10-31"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"        JsonAdaptedLeave leave \u003d JsonAdaptedLeave.of(INVALID_START, VALID_END, VALID_TITLE, VALID_DESCRIPTION,","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"ivyy-poison"},"content":"                VALID_STATUS, VALID_EMPLOYEE);","lastModifiedDate":"2023-10-31"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, leave::toModelType);","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":62,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":63,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":64,"author":{"gitId":"ivyy-poison"},"content":"    public void toModelType_nullEnd_throwsIllegalValueException() {","lastModifiedDate":"2023-10-31"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"        JsonAdaptedLeave leave \u003d JsonAdaptedLeave.of(VALID_START, null, VALID_TITLE, VALID_DESCRIPTION,","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"ivyy-poison"},"content":"                VALID_STATUS, VALID_EMPLOYEE);","lastModifiedDate":"2023-10-31"},{"lineNumber":67,"author":{"gitId":"ivyy-poison"},"content":"        String expectedMessage \u003d String.format(JsonAdaptedLeave.MISSING_FIELD_MESSAGE_FORMAT, \"end\");","lastModifiedDate":"2023-10-31"},{"lineNumber":68,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, leave::toModelType);","lastModifiedDate":"2023-10-31"},{"lineNumber":69,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":70,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":71,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":72,"author":{"gitId":"ivyy-poison"},"content":"    public void toModelType_invalidEnd_throwsIllegalValueException() {","lastModifiedDate":"2023-10-31"},{"lineNumber":73,"author":{"gitId":"ryanozx"},"content":"        JsonAdaptedLeave leave \u003d JsonAdaptedLeave.of(VALID_START, INVALID_END, VALID_TITLE, VALID_DESCRIPTION,","lastModifiedDate":"2023-11-02"},{"lineNumber":74,"author":{"gitId":"ivyy-poison"},"content":"                VALID_STATUS, VALID_EMPLOYEE);","lastModifiedDate":"2023-10-31"},{"lineNumber":75,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, leave::toModelType);","lastModifiedDate":"2023-11-02"},{"lineNumber":76,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":77,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":78,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":79,"author":{"gitId":"ivyy-poison"},"content":"    public void toModelType_nullTitle_throwsIllegalValueException() {","lastModifiedDate":"2023-10-31"},{"lineNumber":80,"author":{"gitId":"ryanozx"},"content":"        JsonAdaptedLeave leave \u003d JsonAdaptedLeave.of(VALID_START, VALID_END, null, VALID_DESCRIPTION,","lastModifiedDate":"2023-11-02"},{"lineNumber":81,"author":{"gitId":"ivyy-poison"},"content":"                VALID_STATUS, VALID_EMPLOYEE);","lastModifiedDate":"2023-10-31"},{"lineNumber":82,"author":{"gitId":"ivyy-poison"},"content":"        String expectedMessage \u003d String.format(JsonAdaptedLeave.MISSING_FIELD_MESSAGE_FORMAT, \"title\");","lastModifiedDate":"2023-10-31"},{"lineNumber":83,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, leave::toModelType);","lastModifiedDate":"2023-10-31"},{"lineNumber":84,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":85,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":86,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":87,"author":{"gitId":"ivyy-poison"},"content":"    public void toModelType_emptyTitle_throwsIllegalValueException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":88,"author":{"gitId":"ryanozx"},"content":"        JsonAdaptedLeave leave \u003d JsonAdaptedLeave.of(VALID_START, VALID_END, EMPTY_TITLE, VALID_DESCRIPTION,","lastModifiedDate":"2023-11-02"},{"lineNumber":89,"author":{"gitId":"ivyy-poison"},"content":"                VALID_STATUS, VALID_EMPLOYEE);","lastModifiedDate":"2023-11-01"},{"lineNumber":90,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(IllegalValueException.class, Title.MESSAGE_CONSTRAINTS, leave::toModelType);","lastModifiedDate":"2023-11-01"},{"lineNumber":91,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":92,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":93,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":94,"author":{"gitId":"ivyy-poison"},"content":"    public void toModelType_invalidTitle_throwsIllegalValueException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":95,"author":{"gitId":"ryanozx"},"content":"        JsonAdaptedLeave leave \u003d JsonAdaptedLeave.of(VALID_START, VALID_END, INVALID_TITLE, VALID_DESCRIPTION,","lastModifiedDate":"2023-11-02"},{"lineNumber":96,"author":{"gitId":"ivyy-poison"},"content":"                VALID_STATUS, VALID_EMPLOYEE);","lastModifiedDate":"2023-11-01"},{"lineNumber":97,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(IllegalValueException.class, Title.MESSAGE_CONSTRAINTS, leave::toModelType);","lastModifiedDate":"2023-11-01"},{"lineNumber":98,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":99,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":100,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":101,"author":{"gitId":"ivyy-poison"},"content":"    public void toModelType_nullDescription_throwsIllegalValueException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":102,"author":{"gitId":"ryanozx"},"content":"        JsonAdaptedLeave leave \u003d JsonAdaptedLeave.of(VALID_START, VALID_END, VALID_TITLE, null,","lastModifiedDate":"2023-11-02"},{"lineNumber":103,"author":{"gitId":"ivyy-poison"},"content":"                VALID_STATUS, VALID_EMPLOYEE);","lastModifiedDate":"2023-11-01"},{"lineNumber":104,"author":{"gitId":"ivyy-poison"},"content":"        String expectedMessage \u003d String.format(JsonAdaptedLeave.MISSING_FIELD_MESSAGE_FORMAT, \"description\");","lastModifiedDate":"2023-11-01"},{"lineNumber":105,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, leave::toModelType);","lastModifiedDate":"2023-11-01"},{"lineNumber":106,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":107,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":108,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":109,"author":{"gitId":"ivyy-poison"},"content":"    public void toModelType_emptyDescription_success() throws Exception {","lastModifiedDate":"2023-11-01"},{"lineNumber":110,"author":{"gitId":"ryanozx"},"content":"        JsonAdaptedLeave leave \u003d JsonAdaptedLeave.of(VALID_START, VALID_END, VALID_TITLE, EMPTY_DESCRIPTION,","lastModifiedDate":"2023-11-02"},{"lineNumber":111,"author":{"gitId":"ivyy-poison"},"content":"                VALID_STATUS, VALID_EMPLOYEE);","lastModifiedDate":"2023-11-01"},{"lineNumber":112,"author":{"gitId":"ivyy-poison"},"content":"        assertTrue(VALID_LEAVE.isSameLeave(leave.toModelType()));","lastModifiedDate":"2023-11-01"},{"lineNumber":113,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":114,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":115,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":116,"author":{"gitId":"ivyy-poison"},"content":"    public void toModelType_invalidDescription_throwsIllegalValueException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":117,"author":{"gitId":"ryanozx"},"content":"        JsonAdaptedLeave leave \u003d JsonAdaptedLeave.of(VALID_START, VALID_END, VALID_TITLE, INVALID_DESCRIPTION,","lastModifiedDate":"2023-11-02"},{"lineNumber":118,"author":{"gitId":"ivyy-poison"},"content":"                VALID_STATUS, VALID_EMPLOYEE);","lastModifiedDate":"2023-11-01"},{"lineNumber":119,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(IllegalValueException.class, Description.MESSAGE_CONSTRAINTS, leave::toModelType);","lastModifiedDate":"2023-11-01"},{"lineNumber":120,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":121,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":122,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":123,"author":{"gitId":"ivyy-poison"},"content":"    public void toModelType_nullEmployee_throwsIllegalValueException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":124,"author":{"gitId":"ryanozx"},"content":"        assertThrows(NullPointerException.class, () -\u003e JsonAdaptedLeave.of(VALID_START, VALID_END, VALID_TITLE,","lastModifiedDate":"2023-11-02"},{"lineNumber":125,"author":{"gitId":"ivyy-poison"},"content":"                VALID_DESCRIPTION, VALID_STATUS, null));","lastModifiedDate":"2023-11-01"},{"lineNumber":126,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":127,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":128,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":129,"author":{"gitId":"ivyy-poison"},"content":"    public void toModelType_nullStatus_throwsIllegalValueException() {","lastModifiedDate":"2023-10-31"},{"lineNumber":130,"author":{"gitId":"ryanozx"},"content":"        JsonAdaptedLeave leave \u003d JsonAdaptedLeave.of(VALID_START, VALID_END, VALID_TITLE, VALID_DESCRIPTION,","lastModifiedDate":"2023-11-02"},{"lineNumber":131,"author":{"gitId":"ivyy-poison"},"content":"                null, VALID_EMPLOYEE);","lastModifiedDate":"2023-10-31"},{"lineNumber":132,"author":{"gitId":"ivyy-poison"},"content":"        String expectedMessage \u003d String.format(JsonAdaptedLeave.MISSING_FIELD_MESSAGE_FORMAT, \"status\");","lastModifiedDate":"2023-10-31"},{"lineNumber":133,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, leave::toModelType);","lastModifiedDate":"2023-10-31"},{"lineNumber":134,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":135,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":136,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":137,"author":{"gitId":"ivyy-poison"},"content":"    public void toModelType_invalidStatus_throwsIllegalValueException() {","lastModifiedDate":"2023-10-31"},{"lineNumber":138,"author":{"gitId":"ryanozx"},"content":"        JsonAdaptedLeave leave \u003d JsonAdaptedLeave.of(VALID_START, VALID_END, VALID_TITLE, VALID_DESCRIPTION,","lastModifiedDate":"2023-11-02"},{"lineNumber":139,"author":{"gitId":"ivyy-poison"},"content":"                INVALID_STATUS, VALID_EMPLOYEE);","lastModifiedDate":"2023-10-31"},{"lineNumber":140,"author":{"gitId":"ivyy-poison"},"content":"        String expectedMessage \u003d Status.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-31"},{"lineNumber":141,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, leave::toModelType);","lastModifiedDate":"2023-11-02"},{"lineNumber":142,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":143,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"ryanozx":20,"ivyy-poison":123}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"    private static final List\u003cAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"            .map(AdaptedTag::new)","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_personParameterConstructor_returnsPerson() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"        AdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_stringParameterConstructor_returnsPerson() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"        AdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"                VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"ryanozx":8,"-":24}},{"path":"src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"import seedu.address.testutil.FileAndPathUtil;","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorageTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"            \"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String fileName) throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"        Path filePath \u003d addToTestDataPathIfNotNull(fileName);","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        return new JsonAddressBookStorage(filePath).readAddressBook();","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"    private Path addToTestDataPathIfNotNull(String fileName) {","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"        return FileAndPathUtil.addToTestDataPathIfNotNull(TEST_DATA_FOLDER, fileName);","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));","lastModifiedDate":"2023-06-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataLoadingException() {","lastModifiedDate":"2023-06-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));","lastModifiedDate":"2023-06-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataLoadingException() {","lastModifiedDate":"2023-06-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));","lastModifiedDate":"2023-06-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Save in new file and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        original.addPerson(HOON);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        original.removePerson(ALICE);","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        original.addPerson(IDA);","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}.","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"ryanozx"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String fileName) {","lastModifiedDate":"2023-10-20"},{"lineNumber":99,"author":{"gitId":"ryanozx"},"content":"        Path filePath \u003d addToTestDataPathIfNotNull(fileName);","lastModifiedDate":"2023-10-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"ryanozx"},"content":"            new JsonAddressBookStorage(filePath).saveAddressBook(addressBook);","lastModifiedDate":"2023-10-20"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":112,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":113,"author":{"gitId":"ryanozx"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2023-10-20"},{"lineNumber":114,"author":{"gitId":"ryanozx"},"content":"        Path filePath \u003d addToTestDataPathIfNotNull(\"tempFile.csv\");","lastModifiedDate":"2023-10-20"},{"lineNumber":115,"author":{"gitId":"ryanozx"},"content":"        JsonAddressBookStorage abStorage \u003d new JsonAddressBookStorage(filePath);","lastModifiedDate":"2023-10-20"},{"lineNumber":116,"author":{"gitId":"ryanozx"},"content":"        assertEquals(abStorage.getAddressBookFilePath(), filePath);","lastModifiedDate":"2023-10-20"},{"lineNumber":117,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":118,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"ryanozx":18,"-":100}},{"path":"src/test/java/seedu/address/storage/JsonLeavesBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-03"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalLeaves.ALICE_LEAVE;","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalLeaves.BENSON_LEAVE_2;","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.LeavesBook;","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.ReadOnlyLeavesBook;","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"ivyy-poison"},"content":"public class JsonLeavesBookStorageTest {","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"ivyy-poison"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonLeavesBookStorageTest\");","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"ivyy-poison"},"content":"    @TempDir","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"    public Path testFolder;","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"    public void readLeavesBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e readLeavesBook(null));","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"    private java.util.Optional\u003cReadOnlyLeavesBook\u003e readLeavesBook(String filePath) throws Exception {","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"        AddressBook addressBook \u003d getTypicalAddressBook();","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"        return new JsonLeavesBookStorage(Paths.get(filePath)).readLeavesBook(","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"                addToTestDataPathIfNotNull(filePath), addressBook);","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"                : null;","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"ivyy-poison"},"content":"    public void readLeavesBook_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"ivyy-poison"},"content":"        assertFalse(readLeavesBook(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2023-10-26"},{"lineNumber":50,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":51,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":52,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":53,"author":{"gitId":"ivyy-poison"},"content":"    public void readLeavesBook_success() {","lastModifiedDate":"2023-10-26"},{"lineNumber":54,"author":{"gitId":"ivyy-poison"},"content":"        Path filePath \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonLeavesBookStorageTest\", \"ValidLeaves.json\");","lastModifiedDate":"2023-10-27"},{"lineNumber":55,"author":{"gitId":"ivyy-poison"},"content":"        try {","lastModifiedDate":"2023-10-26"},{"lineNumber":56,"author":{"gitId":"ivyy-poison"},"content":"            AddressBook addressBook \u003d getTypicalAddressBook();","lastModifiedDate":"2023-10-26"},{"lineNumber":57,"author":{"gitId":"ivyy-poison"},"content":"            ReadOnlyLeavesBook leavesBook \u003d new JsonLeavesBookStorage(filePath).readLeavesBook(addressBook).get();","lastModifiedDate":"2023-10-26"},{"lineNumber":58,"author":{"gitId":"ivyy-poison"},"content":"            assertEquals(leavesBook, getTypicalLeavesBook());","lastModifiedDate":"2023-10-26"},{"lineNumber":59,"author":{"gitId":"ivyy-poison"},"content":"        } catch (DataLoadingException dle) {","lastModifiedDate":"2023-10-26"},{"lineNumber":60,"author":{"gitId":"ivyy-poison"},"content":"            throw new AssertionError(\"This should not happen.\", dle);","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":63,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":64,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":65,"author":{"gitId":"ryanozx"},"content":"    public void readLeavesBook_invalidPerson_skipsRow() throws Exception {","lastModifiedDate":"2023-11-03"},{"lineNumber":66,"author":{"gitId":"ryanozx"},"content":"        assertTrue(readLeavesBook(\"InvalidEmployeeName.json\").get().getLeaveList().isEmpty());","lastModifiedDate":"2023-11-03"},{"lineNumber":67,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":68,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":69,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":70,"author":{"gitId":"ryanozx"},"content":"    public void readLeavesBook_invalidDateFields_throwsDataLoadingException() {","lastModifiedDate":"2023-11-02"},{"lineNumber":71,"author":{"gitId":"ryanozx"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readLeavesBook(\"InvalidDateFields.json\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":72,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":73,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":74,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":75,"author":{"gitId":"ivyy-poison"},"content":"    public void readLeavesBook_notJsonFormat_throwsDataConversionException() {","lastModifiedDate":"2023-10-26"},{"lineNumber":76,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readLeavesBook(\"NotJsonFormat.json\"));","lastModifiedDate":"2023-10-26"},{"lineNumber":77,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":78,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":79,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":80,"author":{"gitId":"ivyy-poison"},"content":"    public void readAndSaveLeavesBook_allInOrder_success() throws Exception {","lastModifiedDate":"2023-10-26"},{"lineNumber":81,"author":{"gitId":"ivyy-poison"},"content":"        Path filePath \u003d testFolder.resolve(\"TempLeavesBook.json\");","lastModifiedDate":"2023-10-26"},{"lineNumber":82,"author":{"gitId":"ivyy-poison"},"content":"        LeavesBook original \u003d getTypicalLeavesBook();","lastModifiedDate":"2023-10-26"},{"lineNumber":83,"author":{"gitId":"ivyy-poison"},"content":"        AddressBook addressBook \u003d getTypicalAddressBook();","lastModifiedDate":"2023-10-26"},{"lineNumber":84,"author":{"gitId":"ivyy-poison"},"content":"        JsonLeavesBookStorage jsonLeavesBookStorage \u003d new JsonLeavesBookStorage(filePath);","lastModifiedDate":"2023-10-26"},{"lineNumber":85,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":86,"author":{"gitId":"ivyy-poison"},"content":"        // Save in new file and read back","lastModifiedDate":"2023-10-26"},{"lineNumber":87,"author":{"gitId":"ivyy-poison"},"content":"        jsonLeavesBookStorage.saveLeavesBook(original, filePath);","lastModifiedDate":"2023-10-26"},{"lineNumber":88,"author":{"gitId":"ivyy-poison"},"content":"        ReadOnlyLeavesBook readBack \u003d jsonLeavesBookStorage.readLeavesBook(addressBook).get();","lastModifiedDate":"2023-10-26"},{"lineNumber":89,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(original, new LeavesBook(readBack));","lastModifiedDate":"2023-10-26"},{"lineNumber":90,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":91,"author":{"gitId":"ivyy-poison"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2023-10-26"},{"lineNumber":92,"author":{"gitId":"ivyy-poison"},"content":"        original.addLeave(BENSON_LEAVE_2);","lastModifiedDate":"2023-10-26"},{"lineNumber":93,"author":{"gitId":"ivyy-poison"},"content":"        original.removeLeave(ALICE_LEAVE);","lastModifiedDate":"2023-10-26"},{"lineNumber":94,"author":{"gitId":"ivyy-poison"},"content":"        jsonLeavesBookStorage.saveLeavesBook(original, filePath);","lastModifiedDate":"2023-10-26"},{"lineNumber":95,"author":{"gitId":"ivyy-poison"},"content":"        readBack \u003d jsonLeavesBookStorage.readLeavesBook(addressBook).get();","lastModifiedDate":"2023-10-26"},{"lineNumber":96,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(original, new LeavesBook(readBack));","lastModifiedDate":"2023-10-26"},{"lineNumber":97,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":98,"author":{"gitId":"ivyy-poison"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2023-10-26"},{"lineNumber":99,"author":{"gitId":"ivyy-poison"},"content":"        original.addLeave(ALICE_LEAVE);","lastModifiedDate":"2023-10-26"},{"lineNumber":100,"author":{"gitId":"ivyy-poison"},"content":"        jsonLeavesBookStorage.saveLeavesBook(original); // file path not specified","lastModifiedDate":"2023-10-26"},{"lineNumber":101,"author":{"gitId":"ivyy-poison"},"content":"        readBack \u003d jsonLeavesBookStorage.readLeavesBook(addressBook).get();","lastModifiedDate":"2023-10-26"},{"lineNumber":102,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(original, new LeavesBook(readBack));","lastModifiedDate":"2023-10-26"},{"lineNumber":103,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":104,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":105,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":106,"author":{"gitId":"ivyy-poison"},"content":"    public void saveLeavesBook_nullLeavesBook_throwsNullPointerException() {","lastModifiedDate":"2023-10-26"},{"lineNumber":107,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveLeavesBook(null, \"SomeFile.json\"));","lastModifiedDate":"2023-10-26"},{"lineNumber":108,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":109,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":110,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":111,"author":{"gitId":"ivyy-poison"},"content":"    public void saveLeavesBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2023-10-26"},{"lineNumber":112,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveLeavesBook(new LeavesBook(), null));","lastModifiedDate":"2023-10-26"},{"lineNumber":113,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":114,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":115,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":116,"author":{"gitId":"ivyy-poison"},"content":"     * Saves {@code leavesBook} at the specified {@code filePath}.","lastModifiedDate":"2023-10-26"},{"lineNumber":117,"author":{"gitId":"ivyy-poison"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":118,"author":{"gitId":"ivyy-poison"},"content":"     * @param leavesBook","lastModifiedDate":"2023-10-26"},{"lineNumber":119,"author":{"gitId":"ivyy-poison"},"content":"     * @param filePath","lastModifiedDate":"2023-10-26"},{"lineNumber":120,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":121,"author":{"gitId":"ivyy-poison"},"content":"    private void saveLeavesBook(ReadOnlyLeavesBook leavesBook, String filePath) {","lastModifiedDate":"2023-10-26"},{"lineNumber":122,"author":{"gitId":"ivyy-poison"},"content":"        try {","lastModifiedDate":"2023-10-26"},{"lineNumber":123,"author":{"gitId":"ivyy-poison"},"content":"            new JsonLeavesBookStorage(Paths.get(filePath))","lastModifiedDate":"2023-10-26"},{"lineNumber":124,"author":{"gitId":"ivyy-poison"},"content":"                    .saveLeavesBook(leavesBook, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2023-10-26"},{"lineNumber":125,"author":{"gitId":"ivyy-poison"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2023-10-26"},{"lineNumber":126,"author":{"gitId":"ivyy-poison"},"content":"            throw new AssertionError(\"This should not happen.\", ioe);","lastModifiedDate":"2023-10-26"},{"lineNumber":127,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":128,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":129,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"ryanozx":5,"ivyy-poison":124}},{"path":"src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonSerializableAddressBookTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"    public void constructor_typicalPersonsFile_success() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"        AddressBook typicalPersonsAddressBook \u003d getTypicalAddressBook();","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"    public void constructor_addressBookParameter_success() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"        ReadOnlyAddressBook typicalAddressBook \u003d getTypicalAddressBook();","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"        JsonSerializableAddressBook jsonAddressBook \u003d","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"                new JsonSerializableAddressBook(typicalAddressBook);","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"        assertEquals(jsonAddressBook.toModelType(), typicalAddressBook);","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"ryanozx":9,"-":27}},{"path":"src/test/java/seedu/address/storage/JsonSerializableLeavesBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-03"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-31"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"ivyy-poison"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"ivyy-poison"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-31"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.ReadOnlyLeavesBook;","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"public class JsonSerializableLeavesBookTest {","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"ivyy-poison"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableLeavesBookTest\");","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"ivyy-poison"},"content":"    private static final Path VALID_DATA_FILE \u003d TEST_DATA_FOLDER.resolve(\"ValidLeaves.json\");","lastModifiedDate":"2023-10-31"},{"lineNumber":23,"author":{"gitId":"ivyy-poison"},"content":"    private static final Path INVALID_PERSON_DATA_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonLeaves.json\");","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"ivyy-poison"},"content":"    private static final Path DUPLICATE_DATA_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateLeaves.json\");","lastModifiedDate":"2023-10-31"},{"lineNumber":25,"author":{"gitId":"ivyy-poison"},"content":"    private static final Path INVALID_FIELD_DATA_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidFieldLeaves.json\");","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"ivyy-poison"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"        AddressBook addressBook \u003d getTypicalAddressBook();","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"        JsonSerializableLeavesBook dataFromFile \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2023-10-31"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"                VALID_DATA_FILE, JsonSerializableLeavesBook.class).get();","lastModifiedDate":"2023-10-31"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"        ReadOnlyLeavesBook addressBookFromFile \u003d dataFromFile.toModelType(addressBook);","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(addressBookFromFile, getTypicalLeavesBook());","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-10-31"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"        JsonSerializableLeavesBook dataFromFile \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2023-10-31"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"                INVALID_PERSON_DATA_FILE, JsonSerializableLeavesBook.class).get();","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"        assertTrue(dataFromFile.toModelType(getTypicalAddressBook()).getLeaveList().isEmpty());","lastModifiedDate":"2023-11-03"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-10-31"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"        JsonSerializableLeavesBook dataFromFile \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2023-10-31"},{"lineNumber":46,"author":{"gitId":"ivyy-poison"},"content":"                DUPLICATE_DATA_FILE, JsonSerializableLeavesBook.class).get();","lastModifiedDate":"2023-10-31"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, SerializableLeavesBook.MESSAGE_DUPLICATE_LEAVE, () -\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"ivyy-poison"},"content":"                dataFromFile.toModelType(getTypicalAddressBook()));","lastModifiedDate":"2023-10-31"},{"lineNumber":49,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":50,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":51,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"ivyy-poison"},"content":"    public void toModelType_invalidFieldFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"ivyy-poison"},"content":"        JsonSerializableLeavesBook dataFromFile \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"ivyy-poison"},"content":"                INVALID_FIELD_DATA_FILE, JsonSerializableLeavesBook.class).get();","lastModifiedDate":"2023-11-01"},{"lineNumber":55,"author":{"gitId":"ivyy-poison"},"content":"        assertThrows(IllegalValueException.class, () -\u003e dataFromFile.toModelType(getTypicalAddressBook()));","lastModifiedDate":"2023-11-01"},{"lineNumber":56,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":57,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"ryanozx":3,"ivyy-poison":55}},{"path":"src/test/java/seedu/address/storage/SerializableAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":"import seedu.address.testutil.TypicalPersons;","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"public class SerializableAddressBookTest {","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"    // JsonSerializableAddressBooks are used as they are a child class of SerializableAddressBook,","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"    // and helps us avoid having to create a child class of AdaptedPerson to be the type parameter","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"    // of AdaptedPerson","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"ryanozx":49}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalLeaves.getTypicalLeavesBook;","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.LeavesBook;","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.ReadOnlyLeavesBook;","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":32,"author":{"gitId":"ivyy-poison"},"content":"        JsonLeavesBookStorage leavesBookStorage \u003d new JsonLeavesBookStorage(getTempFilePath(\"lb\"));","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, leavesBookStorage);","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":68,"author":{"gitId":"ivyy-poison"},"content":"    public void leavesBookReadSave() throws Exception {","lastModifiedDate":"2023-10-26"},{"lineNumber":69,"author":{"gitId":"ivyy-poison"},"content":"        /*","lastModifiedDate":"2023-10-26"},{"lineNumber":70,"author":{"gitId":"ivyy-poison"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2023-10-26"},{"lineNumber":71,"author":{"gitId":"ivyy-poison"},"content":"         * {@link JsonLeavesBookStorage} class.","lastModifiedDate":"2023-10-26"},{"lineNumber":72,"author":{"gitId":"ivyy-poison"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonLeavesBookStorageTest} class.","lastModifiedDate":"2023-10-26"},{"lineNumber":73,"author":{"gitId":"ivyy-poison"},"content":"         */","lastModifiedDate":"2023-10-26"},{"lineNumber":74,"author":{"gitId":"ivyy-poison"},"content":"        LeavesBook original \u003d getTypicalLeavesBook();","lastModifiedDate":"2023-10-26"},{"lineNumber":75,"author":{"gitId":"ivyy-poison"},"content":"        AddressBook addressBook \u003d getTypicalAddressBook();","lastModifiedDate":"2023-10-26"},{"lineNumber":76,"author":{"gitId":"ivyy-poison"},"content":"        storageManager.saveLeavesBook(original);","lastModifiedDate":"2023-10-26"},{"lineNumber":77,"author":{"gitId":"ivyy-poison"},"content":"        ReadOnlyLeavesBook retrieved \u003d storageManager.readLeavesBook(addressBook).get();","lastModifiedDate":"2023-10-26"},{"lineNumber":78,"author":{"gitId":"ivyy-poison"},"content":"        assertEquals(original, new LeavesBook(retrieved));","lastModifiedDate":"2023-10-26"},{"lineNumber":79,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":80,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2016-10-01"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":86,"author":{"gitId":"ivyy-poison"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":87,"author":{"gitId":"ivyy-poison"},"content":"    public void getLeavesBookFilePath() {","lastModifiedDate":"2023-10-26"},{"lineNumber":88,"author":{"gitId":"ivyy-poison"},"content":"        assertNotNull(storageManager.getLeavesBookFilePath());","lastModifiedDate":"2023-10-26"},{"lineNumber":89,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":90,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"ivyy-poison":24,"-":67}},{"path":"src/test/java/seedu/address/testutil/EditLeaveDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ong-wei-hong"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-11-07"},{"lineNumber":2,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":3,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.logic.commands.EditLeaveCommand.EditLeaveDescriptor;","lastModifiedDate":"2023-11-07"},{"lineNumber":4,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Date;","lastModifiedDate":"2023-11-07"},{"lineNumber":5,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Description;","lastModifiedDate":"2023-11-07"},{"lineNumber":6,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-11-07"},{"lineNumber":7,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Status;","lastModifiedDate":"2023-11-07"},{"lineNumber":8,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Status.StatusType;","lastModifiedDate":"2023-11-07"},{"lineNumber":9,"author":{"gitId":"ong-wei-hong"},"content":"import seedu.address.model.leave.Title;","lastModifiedDate":"2023-11-07"},{"lineNumber":10,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":11,"author":{"gitId":"ong-wei-hong"},"content":"/**","lastModifiedDate":"2023-11-07"},{"lineNumber":12,"author":{"gitId":"ong-wei-hong"},"content":" * A utility class to help with building EditLeaveDescriptor objects.","lastModifiedDate":"2023-11-07"},{"lineNumber":13,"author":{"gitId":"ong-wei-hong"},"content":" */","lastModifiedDate":"2023-11-07"},{"lineNumber":14,"author":{"gitId":"ong-wei-hong"},"content":"public class EditLeaveDescriptorBuilder {","lastModifiedDate":"2023-11-07"},{"lineNumber":15,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":16,"author":{"gitId":"ong-wei-hong"},"content":"    private EditLeaveDescriptor descriptor;","lastModifiedDate":"2023-11-07"},{"lineNumber":17,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":18,"author":{"gitId":"ong-wei-hong"},"content":"    public EditLeaveDescriptorBuilder() {","lastModifiedDate":"2023-11-07"},{"lineNumber":19,"author":{"gitId":"ong-wei-hong"},"content":"        descriptor \u003d new EditLeaveDescriptor();","lastModifiedDate":"2023-11-07"},{"lineNumber":20,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":21,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":22,"author":{"gitId":"ong-wei-hong"},"content":"    public EditLeaveDescriptorBuilder(EditLeaveDescriptor descriptor) {","lastModifiedDate":"2023-11-07"},{"lineNumber":23,"author":{"gitId":"ong-wei-hong"},"content":"        this.descriptor \u003d new EditLeaveDescriptor(descriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":24,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":25,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":26,"author":{"gitId":"ong-wei-hong"},"content":"    /**","lastModifiedDate":"2023-11-07"},{"lineNumber":27,"author":{"gitId":"ong-wei-hong"},"content":"     * Returns an {@code EditLeaveDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2023-11-07"},{"lineNumber":28,"author":{"gitId":"ong-wei-hong"},"content":"     */","lastModifiedDate":"2023-11-07"},{"lineNumber":29,"author":{"gitId":"ong-wei-hong"},"content":"    public EditLeaveDescriptorBuilder(Leave leave) {","lastModifiedDate":"2023-11-07"},{"lineNumber":30,"author":{"gitId":"ong-wei-hong"},"content":"        descriptor \u003d new EditLeaveDescriptor();","lastModifiedDate":"2023-11-07"},{"lineNumber":31,"author":{"gitId":"ong-wei-hong"},"content":"        descriptor.setTitle(leave.getTitle());","lastModifiedDate":"2023-11-07"},{"lineNumber":32,"author":{"gitId":"ong-wei-hong"},"content":"        descriptor.setStart(leave.getStart());","lastModifiedDate":"2023-11-07"},{"lineNumber":33,"author":{"gitId":"ong-wei-hong"},"content":"        descriptor.setEnd(leave.getEnd());","lastModifiedDate":"2023-11-07"},{"lineNumber":34,"author":{"gitId":"ong-wei-hong"},"content":"        descriptor.setStatus(leave.getStatus());","lastModifiedDate":"2023-11-07"},{"lineNumber":35,"author":{"gitId":"ong-wei-hong"},"content":"        descriptor.setDescription(leave.getDescription());","lastModifiedDate":"2023-11-07"},{"lineNumber":36,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":37,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":38,"author":{"gitId":"ong-wei-hong"},"content":"    /**","lastModifiedDate":"2023-11-07"},{"lineNumber":39,"author":{"gitId":"ong-wei-hong"},"content":"     * Sets the {@code Title} of the {@code EditLeaveDescriptor} that we are building","lastModifiedDate":"2023-11-07"},{"lineNumber":40,"author":{"gitId":"ong-wei-hong"},"content":"     */","lastModifiedDate":"2023-11-07"},{"lineNumber":41,"author":{"gitId":"ong-wei-hong"},"content":"    public EditLeaveDescriptorBuilder withTitle(String title) {","lastModifiedDate":"2023-11-07"},{"lineNumber":42,"author":{"gitId":"ong-wei-hong"},"content":"        descriptor.setTitle(new Title(title));","lastModifiedDate":"2023-11-07"},{"lineNumber":43,"author":{"gitId":"ong-wei-hong"},"content":"        return this;","lastModifiedDate":"2023-11-07"},{"lineNumber":44,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":45,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":46,"author":{"gitId":"ong-wei-hong"},"content":"    /**","lastModifiedDate":"2023-11-07"},{"lineNumber":47,"author":{"gitId":"ong-wei-hong"},"content":"     * Sets the {@code Start} of the {@code EditLeaveDescriptor} that we are building","lastModifiedDate":"2023-11-07"},{"lineNumber":48,"author":{"gitId":"ong-wei-hong"},"content":"     */","lastModifiedDate":"2023-11-07"},{"lineNumber":49,"author":{"gitId":"ong-wei-hong"},"content":"    public EditLeaveDescriptorBuilder withStart(Date start) {","lastModifiedDate":"2023-11-07"},{"lineNumber":50,"author":{"gitId":"ong-wei-hong"},"content":"        descriptor.setStart(start);","lastModifiedDate":"2023-11-07"},{"lineNumber":51,"author":{"gitId":"ong-wei-hong"},"content":"        return this;","lastModifiedDate":"2023-11-07"},{"lineNumber":52,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":53,"author":{"gitId":"ong-wei-hong"},"content":"    /**","lastModifiedDate":"2023-11-07"},{"lineNumber":54,"author":{"gitId":"ong-wei-hong"},"content":"     * Sets the {@code End} of the {@code EditLeaveDescriptor} that we are building","lastModifiedDate":"2023-11-07"},{"lineNumber":55,"author":{"gitId":"ong-wei-hong"},"content":"     */","lastModifiedDate":"2023-11-07"},{"lineNumber":56,"author":{"gitId":"ong-wei-hong"},"content":"    public EditLeaveDescriptorBuilder withEnd(Date end) {","lastModifiedDate":"2023-11-07"},{"lineNumber":57,"author":{"gitId":"ong-wei-hong"},"content":"        descriptor.setEnd(end);","lastModifiedDate":"2023-11-07"},{"lineNumber":58,"author":{"gitId":"ong-wei-hong"},"content":"        return this;","lastModifiedDate":"2023-11-07"},{"lineNumber":59,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":60,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":61,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":62,"author":{"gitId":"ong-wei-hong"},"content":"    /**","lastModifiedDate":"2023-11-07"},{"lineNumber":63,"author":{"gitId":"ong-wei-hong"},"content":"     * Sets the {@code Status} of the {@code EditLeaveDescriptor} that we are building","lastModifiedDate":"2023-11-07"},{"lineNumber":64,"author":{"gitId":"ong-wei-hong"},"content":"     */","lastModifiedDate":"2023-11-07"},{"lineNumber":65,"author":{"gitId":"ong-wei-hong"},"content":"    public EditLeaveDescriptorBuilder withStatus(Status status) {","lastModifiedDate":"2023-11-07"},{"lineNumber":66,"author":{"gitId":"ong-wei-hong"},"content":"        descriptor.setStatus(status);","lastModifiedDate":"2023-11-07"},{"lineNumber":67,"author":{"gitId":"ong-wei-hong"},"content":"        return this;","lastModifiedDate":"2023-11-07"},{"lineNumber":68,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":69,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":70,"author":{"gitId":"ong-wei-hong"},"content":"    /**","lastModifiedDate":"2023-11-07"},{"lineNumber":71,"author":{"gitId":"ong-wei-hong"},"content":"     * Sets the {@code Status} of the {@code EditLeaveDescriptor} that we are building","lastModifiedDate":"2023-11-07"},{"lineNumber":72,"author":{"gitId":"ong-wei-hong"},"content":"     */","lastModifiedDate":"2023-11-07"},{"lineNumber":73,"author":{"gitId":"ong-wei-hong"},"content":"    public EditLeaveDescriptorBuilder withStatus(StatusType status) {","lastModifiedDate":"2023-11-07"},{"lineNumber":74,"author":{"gitId":"ong-wei-hong"},"content":"        descriptor.setStatus(Status.of(status));","lastModifiedDate":"2023-11-07"},{"lineNumber":75,"author":{"gitId":"ong-wei-hong"},"content":"        return this;","lastModifiedDate":"2023-11-07"},{"lineNumber":76,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":77,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":78,"author":{"gitId":"ong-wei-hong"},"content":"    /**","lastModifiedDate":"2023-11-07"},{"lineNumber":79,"author":{"gitId":"ong-wei-hong"},"content":"     * Sets the {@code Start} of the {@code EditLeaveDescriptor} that we are building","lastModifiedDate":"2023-11-07"},{"lineNumber":80,"author":{"gitId":"ong-wei-hong"},"content":"     */","lastModifiedDate":"2023-11-07"},{"lineNumber":81,"author":{"gitId":"ong-wei-hong"},"content":"    public EditLeaveDescriptorBuilder withDescription(String description) {","lastModifiedDate":"2023-11-07"},{"lineNumber":82,"author":{"gitId":"ong-wei-hong"},"content":"        descriptor.setDescription(new Description(description));","lastModifiedDate":"2023-11-07"},{"lineNumber":83,"author":{"gitId":"ong-wei-hong"},"content":"        return this;","lastModifiedDate":"2023-11-07"},{"lineNumber":84,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":85,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":86,"author":{"gitId":"ong-wei-hong"},"content":"    public EditLeaveDescriptor build() {","lastModifiedDate":"2023-11-07"},{"lineNumber":87,"author":{"gitId":"ong-wei-hong"},"content":"        return descriptor;","lastModifiedDate":"2023-11-07"},{"lineNumber":88,"author":{"gitId":"ong-wei-hong"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":89,"author":{"gitId":"ong-wei-hong"},"content":"}","lastModifiedDate":"2023-11-07"}],"authorContributionMap":{"ong-wei-hong":89}},{"path":"src/test/java/seedu/address/testutil/FileAndPathUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ryanozx"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"ryanozx"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"ryanozx"},"content":"import java.io.File;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"ryanozx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import java.util.Optional;","lastModifiedDate":"2023-11-03"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import javafx.stage.FileChooser;","lastModifiedDate":"2023-11-03"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import seedu.address.commons.controllers.FileDialogHandler;","lastModifiedDate":"2023-11-03"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"/**","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"ryanozx"},"content":" * Contains methods for handling data files in tests.","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"ryanozx"},"content":" */","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"ryanozx"},"content":"public class FileAndPathUtil {","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"ryanozx"},"content":"     * Returns the path of the file given the path of its enclosing folder","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"ryanozx"},"content":"     * @param testDataFolder Folder where file is located","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"     * @param testFileInTestDataFolder Name of file","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"     * @return Path to file","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"    public static Path addToTestDataPathIfNotNull(Path testDataFolder, String testFileInTestDataFolder) {","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"        return testFileInTestDataFolder !\u003d null","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"                ? testDataFolder.resolve(testFileInTestDataFolder)","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"                : null;","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"     * Deletes file specified by the file path, if the file exists. Used to clean up test files to ensure that","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"     * a new file is created every time the test is run.","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"     * @param filePath Path of file to delete","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"    public static void cleanupCreatedFiles(Path filePath) {","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"        if (Files.exists(filePath)) {","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"ryanozx"},"content":"            File fileToDelete \u003d new File(filePath.toString());","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"ryanozx"},"content":"            if (!fileToDelete.delete()) {","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"ryanozx"},"content":"                fail(String.format(\"Could not clean up test file: %s\", filePath));","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"ryanozx"},"content":"            }","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":43,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-03"},{"lineNumber":44,"author":{"gitId":"ryanozx"},"content":"     * Provides a mock implementation of a FileDialogHandler so that user input is not required","lastModifiedDate":"2023-11-03"},{"lineNumber":45,"author":{"gitId":"ryanozx"},"content":"     * during testing","lastModifiedDate":"2023-11-03"},{"lineNumber":46,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-03"},{"lineNumber":47,"author":{"gitId":"ryanozx"},"content":"    public static class MockSuccessfulFileDialogHandler implements FileDialogHandler {","lastModifiedDate":"2023-11-03"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":49,"author":{"gitId":"ryanozx"},"content":"        private final String pathname;","lastModifiedDate":"2023-11-03"},{"lineNumber":50,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":51,"author":{"gitId":"ryanozx"},"content":"        public MockSuccessfulFileDialogHandler(String filename) {","lastModifiedDate":"2023-11-03"},{"lineNumber":52,"author":{"gitId":"ryanozx"},"content":"            this.pathname \u003d filename;","lastModifiedDate":"2023-11-03"},{"lineNumber":53,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-03"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":55,"author":{"gitId":"ryanozx"},"content":"        @Override","lastModifiedDate":"2023-11-03"},{"lineNumber":56,"author":{"gitId":"ryanozx"},"content":"        public Optional\u003cFile\u003e openFile(String title, FileChooser.ExtensionFilter...extensions) {","lastModifiedDate":"2023-11-03"},{"lineNumber":57,"author":{"gitId":"ryanozx"},"content":"            File outputFile \u003d new File(pathname);","lastModifiedDate":"2023-11-03"},{"lineNumber":58,"author":{"gitId":"ryanozx"},"content":"            return Optional.of(outputFile);","lastModifiedDate":"2023-11-03"},{"lineNumber":59,"author":{"gitId":"ryanozx"},"content":"        }","lastModifiedDate":"2023-11-03"},{"lineNumber":60,"author":{"gitId":"ryanozx"},"content":"    }","lastModifiedDate":"2023-11-03"},{"lineNumber":61,"author":{"gitId":"ryanozx"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"ryanozx":61}},{"path":"src/test/java/seedu/address/testutil/LeaveBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-23"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2023-10-23"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.leave.Date;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Description;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-10-23"},{"lineNumber":8,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Range;","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.leave.Status;","lastModifiedDate":"2023-10-29"},{"lineNumber":10,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Status.StatusType;","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Title;","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.exceptions.EndBeforeStartException;","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.person.ComparablePerson;","lastModifiedDate":"2023-10-27"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":" * A utility class to help with building Leave objects.","lastModifiedDate":"2023-10-23"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":19,"author":{"gitId":"ivyy-poison"},"content":"public class LeaveBuilder {","lastModifiedDate":"2023-10-23"},{"lineNumber":20,"author":{"gitId":"ryanozx"},"content":"    public static final Title DEFAULT_TITLE \u003d new Title(\"Alice\u0027s Maternity Leave\");","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"ryanozx"},"content":"    public static final Description DEFAULT_DESCRIPTION \u003d new Description(\"Alice\u0027s Maternity Leave Description\");","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"ivyy-poison"},"content":"    public static final Person DEFAULT_PERSON \u003d ALICE;","lastModifiedDate":"2023-10-23"},{"lineNumber":23,"author":{"gitId":"InfiBeyond"},"content":"    public static final Status DEFAULT_STATUS \u003d Status.getDefault();","lastModifiedDate":"2023-10-29"},{"lineNumber":24,"author":{"gitId":"jean-cq"},"content":"    public static final Date DEFAULT_START \u003d Date.of(\"2020-02-01\");","lastModifiedDate":"2023-11-09"},{"lineNumber":25,"author":{"gitId":"jean-cq"},"content":"    public static final Date DEFAULT_END \u003d Date.of(\"2020-02-02\");","lastModifiedDate":"2023-11-09"},{"lineNumber":26,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"    private Title title;","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"    private Description description;","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ivyy-poison"},"content":"    private ComparablePerson employee;","lastModifiedDate":"2023-10-27"},{"lineNumber":30,"author":{"gitId":"ivyy-poison"},"content":"    private Date start;","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"ivyy-poison"},"content":"    private Date end;","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"InfiBeyond"},"content":"    private Status status;","lastModifiedDate":"2023-10-29"},{"lineNumber":33,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":34,"author":{"gitId":"ivyy-poison"},"content":"     * Creates a {@code LeaveBuilder} with the default details.","lastModifiedDate":"2023-10-23"},{"lineNumber":35,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"    public LeaveBuilder() {","lastModifiedDate":"2023-10-23"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"        title \u003d DEFAULT_TITLE;","lastModifiedDate":"2023-10-23"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"        description \u003d DEFAULT_DESCRIPTION;","lastModifiedDate":"2023-10-23"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"        employee \u003d DEFAULT_PERSON;","lastModifiedDate":"2023-10-23"},{"lineNumber":40,"author":{"gitId":"InfiBeyond"},"content":"        status \u003d DEFAULT_STATUS;","lastModifiedDate":"2023-10-29"},{"lineNumber":41,"author":{"gitId":"ryanozx"},"content":"        start \u003d DEFAULT_START;","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"ryanozx"},"content":"        end \u003d DEFAULT_END;","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":46,"author":{"gitId":"ivyy-poison"},"content":"     * Initializes the LeaveBuilder with the data of {@code leaveToCopy}.","lastModifiedDate":"2023-10-23"},{"lineNumber":47,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":48,"author":{"gitId":"ivyy-poison"},"content":"    public LeaveBuilder(Leave leaveToCopy) {","lastModifiedDate":"2023-10-23"},{"lineNumber":49,"author":{"gitId":"ivyy-poison"},"content":"        employee \u003d leaveToCopy.getEmployee();","lastModifiedDate":"2023-10-23"},{"lineNumber":50,"author":{"gitId":"ivyy-poison"},"content":"        title \u003d leaveToCopy.getTitle();","lastModifiedDate":"2023-10-23"},{"lineNumber":51,"author":{"gitId":"ivyy-poison"},"content":"        description \u003d leaveToCopy.getDescription();","lastModifiedDate":"2023-10-23"},{"lineNumber":52,"author":{"gitId":"ivyy-poison"},"content":"        start \u003d leaveToCopy.getStart();","lastModifiedDate":"2023-10-23"},{"lineNumber":53,"author":{"gitId":"ivyy-poison"},"content":"        end \u003d leaveToCopy.getEnd();","lastModifiedDate":"2023-10-23"},{"lineNumber":54,"author":{"gitId":"ryanozx"},"content":"        status \u003d leaveToCopy.getStatus();","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":56,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":57,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":58,"author":{"gitId":"ivyy-poison"},"content":"     * Sets the {@code start} of the {@code Leave} that we are building.","lastModifiedDate":"2023-10-23"},{"lineNumber":59,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":60,"author":{"gitId":"ivyy-poison"},"content":"    public LeaveBuilder withStart(Date start) {","lastModifiedDate":"2023-10-24"},{"lineNumber":61,"author":{"gitId":"ivyy-poison"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-10-23"},{"lineNumber":62,"author":{"gitId":"ivyy-poison"},"content":"        return this;","lastModifiedDate":"2023-10-23"},{"lineNumber":63,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":64,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":65,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":66,"author":{"gitId":"ivyy-poison"},"content":"     * Sets the {@code end} of the {@code Leave} that we are building.","lastModifiedDate":"2023-10-23"},{"lineNumber":67,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":68,"author":{"gitId":"ivyy-poison"},"content":"    public LeaveBuilder withEnd(Date end) {","lastModifiedDate":"2023-10-24"},{"lineNumber":69,"author":{"gitId":"ivyy-poison"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-10-23"},{"lineNumber":70,"author":{"gitId":"ivyy-poison"},"content":"        return this;","lastModifiedDate":"2023-10-23"},{"lineNumber":71,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":72,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":73,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":74,"author":{"gitId":"ivyy-poison"},"content":"     * Sets the {@code employee} of the {@code Leave} that we are building.","lastModifiedDate":"2023-10-23"},{"lineNumber":75,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":76,"author":{"gitId":"ivyy-poison"},"content":"    public LeaveBuilder withEmployee(ComparablePerson employee) {","lastModifiedDate":"2023-10-27"},{"lineNumber":77,"author":{"gitId":"ivyy-poison"},"content":"        this.employee \u003d employee;","lastModifiedDate":"2023-10-23"},{"lineNumber":78,"author":{"gitId":"ivyy-poison"},"content":"        return this;","lastModifiedDate":"2023-10-23"},{"lineNumber":79,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":80,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":81,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":82,"author":{"gitId":"ivyy-poison"},"content":"     * Sets the {@code title} of the {@code Leave} that we are building.","lastModifiedDate":"2023-10-23"},{"lineNumber":83,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":84,"author":{"gitId":"ivyy-poison"},"content":"    public LeaveBuilder withTitle(String title) {","lastModifiedDate":"2023-10-23"},{"lineNumber":85,"author":{"gitId":"ryanozx"},"content":"        this.title \u003d new Title(title);","lastModifiedDate":"2023-11-02"},{"lineNumber":86,"author":{"gitId":"ivyy-poison"},"content":"        return this;","lastModifiedDate":"2023-10-23"},{"lineNumber":87,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":88,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":89,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":90,"author":{"gitId":"ivyy-poison"},"content":"     * Sets the {@code description} of the {@code Leave} that we are building.","lastModifiedDate":"2023-10-23"},{"lineNumber":91,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":92,"author":{"gitId":"ivyy-poison"},"content":"    public LeaveBuilder withDescription(String description) {","lastModifiedDate":"2023-10-23"},{"lineNumber":93,"author":{"gitId":"ryanozx"},"content":"        this.description \u003d new Description(description);","lastModifiedDate":"2023-11-02"},{"lineNumber":94,"author":{"gitId":"ivyy-poison"},"content":"        return this;","lastModifiedDate":"2023-10-23"},{"lineNumber":95,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":96,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":97,"author":{"gitId":"ivyy-poison"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":98,"author":{"gitId":"ivyy-poison"},"content":"     * Sets the {@code status} of the {@code Leave} that we are building.","lastModifiedDate":"2023-10-23"},{"lineNumber":99,"author":{"gitId":"ivyy-poison"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":100,"author":{"gitId":"ryanozx"},"content":"    public LeaveBuilder withStatus(StatusType status) {","lastModifiedDate":"2023-11-02"},{"lineNumber":101,"author":{"gitId":"InfiBeyond"},"content":"        this.status \u003d Status.of(status);","lastModifiedDate":"2023-10-29"},{"lineNumber":102,"author":{"gitId":"ivyy-poison"},"content":"        return this;","lastModifiedDate":"2023-10-23"},{"lineNumber":103,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":104,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":105,"author":{"gitId":"ryanozx"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":106,"author":{"gitId":"ryanozx"},"content":"     * Builds Leave object based on attributes set previously","lastModifiedDate":"2023-11-02"},{"lineNumber":107,"author":{"gitId":"ryanozx"},"content":"     * @return Leave object with given attributes","lastModifiedDate":"2023-11-02"},{"lineNumber":108,"author":{"gitId":"ryanozx"},"content":"     * @throws EndBeforeStartException if end date is before start date","lastModifiedDate":"2023-11-02"},{"lineNumber":109,"author":{"gitId":"ryanozx"},"content":"     * @throws NullPointerException if start or end date is null","lastModifiedDate":"2023-11-02"},{"lineNumber":110,"author":{"gitId":"ryanozx"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":111,"author":{"gitId":"ryanozx"},"content":"    public Leave build() throws EndBeforeStartException, NullPointerException {","lastModifiedDate":"2023-11-02"},{"lineNumber":112,"author":{"gitId":"ryanozx"},"content":"        Range dateRange \u003d Range.createNonNullRange(start, end);","lastModifiedDate":"2023-11-02"},{"lineNumber":113,"author":{"gitId":"ryanozx"},"content":"        return new Leave(employee, title, dateRange, description, status);","lastModifiedDate":"2023-11-02"},{"lineNumber":114,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":115,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-23"}],"authorContributionMap":{"ryanozx":24,"jean-cq":2,"InfiBeyond":5,"ivyy-poison":84}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-04-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ADDRESS;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_EMAIL;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_NAME;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_PHONE;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"jean-cq"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_TAG;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-03-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2018-03-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-03-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2017-03-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"        sb.append(PREFIX_PERSON_NAME + person.getName().toString() + \" \");","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"jean-cq"},"content":"        sb.append(PREFIX_PERSON_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"jean-cq"},"content":"        sb.append(PREFIX_PERSON_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"jean-cq"},"content":"        sb.append(PREFIX_PERSON_ADDRESS + person.getAddress().value + \" \");","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach(","lastModifiedDate":"2017-05-09"},{"lineNumber":38,"author":{"gitId":"jean-cq"},"content":"            s -\u003e sb.append(PREFIX_PERSON_TAG + s.tagName + \" \")","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"ryanozx"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_PERSON_NAME).append(name.toString()).append(\" \"));","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"jean-cq"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PERSON_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"jean-cq"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_PERSON_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"jean-cq"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_PERSON_ADDRESS)","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"jean-cq"},"content":"                .append(address.value).append(\" \"));","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":56,"author":{"gitId":"jean-cq"},"content":"                sb.append(PREFIX_PERSON_TAG);","lastModifiedDate":"2023-11-01"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":58,"author":{"gitId":"jean-cq"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_PERSON_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"ryanozx":2,"jean-cq":15,"-":46}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-07-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-07-30"},{"lineNumber":10,"author":{"gitId":"InfiBeyond"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-10-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}.","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static Person getPerson(Model model, Index index) {","lastModifiedDate":"2018-01-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList().get(index.getZeroBased());","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":56,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":57,"author":{"gitId":"InfiBeyond"},"content":"    /**","lastModifiedDate":"2023-10-29"},{"lineNumber":58,"author":{"gitId":"InfiBeyond"},"content":"     * Returns the last index of the leave in the {@code model}\u0027s leave list.","lastModifiedDate":"2023-10-29"},{"lineNumber":59,"author":{"gitId":"InfiBeyond"},"content":"     */","lastModifiedDate":"2023-10-29"},{"lineNumber":60,"author":{"gitId":"InfiBeyond"},"content":"    public static Index getLastLeaveIndex(Model model) {","lastModifiedDate":"2023-10-29"},{"lineNumber":61,"author":{"gitId":"InfiBeyond"},"content":"        return Index.fromOneBased(model.getLeavesBook().getLeaveList().size());","lastModifiedDate":"2023-10-29"},{"lineNumber":62,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":63,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":64,"author":{"gitId":"InfiBeyond"},"content":"    /**","lastModifiedDate":"2023-10-29"},{"lineNumber":65,"author":{"gitId":"InfiBeyond"},"content":"     * Returns an out of bound index of the {@code model}\u0027s leave list.","lastModifiedDate":"2023-10-29"},{"lineNumber":66,"author":{"gitId":"InfiBeyond"},"content":"     */","lastModifiedDate":"2023-10-29"},{"lineNumber":67,"author":{"gitId":"InfiBeyond"},"content":"    public static Index getInvalidLeaveIndex(Model model) {","lastModifiedDate":"2023-10-29"},{"lineNumber":68,"author":{"gitId":"InfiBeyond"},"content":"        return Index.fromOneBased(model.getLeavesBook().getLeaveList().size() + 1);","lastModifiedDate":"2023-10-29"},{"lineNumber":69,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":70,"author":{"gitId":"InfiBeyond"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":71,"author":{"gitId":"InfiBeyond"},"content":"    /**","lastModifiedDate":"2023-10-29"},{"lineNumber":72,"author":{"gitId":"InfiBeyond"},"content":"     * Returns the leave in the {@code model}\u0027s leave list at {@code index}.","lastModifiedDate":"2023-10-29"},{"lineNumber":73,"author":{"gitId":"InfiBeyond"},"content":"     */","lastModifiedDate":"2023-10-29"},{"lineNumber":74,"author":{"gitId":"InfiBeyond"},"content":"    public static Leave getLeave(Model model, Index index) {","lastModifiedDate":"2023-10-29"},{"lineNumber":75,"author":{"gitId":"InfiBeyond"},"content":"        return model.getLeavesBook().getLeaveList().get(index.getZeroBased());","lastModifiedDate":"2023-10-29"},{"lineNumber":76,"author":{"gitId":"InfiBeyond"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"InfiBeyond":22,"-":55}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-08-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"ong-wei-hong"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"ong-wei-hong"},"content":"    public static final Index INDEX_FIRST_LEAVE \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"ong-wei-hong"},"content":"    public static final Index INDEX_SECOND_LEAVE \u003d Index.fromOneBased(2);","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"ong-wei-hong"},"content":"    public static final Index INDEX_THIRD_LEAVE \u003d Index.fromOneBased(3);","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"-":12,"ong-wei-hong":4}},{"path":"src/test/java/seedu/address/testutil/TypicalLeaves.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ivyy-poison"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-23"},{"lineNumber":2,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":3,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2023-10-23"},{"lineNumber":4,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"ivyy-poison"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":7,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.LeavesBook;","lastModifiedDate":"2023-10-23"},{"lineNumber":8,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.leave.Date;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Description;","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"ivyy-poison"},"content":"import seedu.address.model.leave.Leave;","lastModifiedDate":"2023-10-23"},{"lineNumber":11,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Range;","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"ryanozx"},"content":"import seedu.address.model.leave.Title;","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"ryanozx"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"ivyy-poison"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"ivyy-poison"},"content":" * A utility class containing a list of {@code Leave} objects to be used in tests.","lastModifiedDate":"2023-10-23"},{"lineNumber":16,"author":{"gitId":"ivyy-poison"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":17,"author":{"gitId":"ivyy-poison"},"content":"public class TypicalLeaves {","lastModifiedDate":"2023-10-23"},{"lineNumber":18,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":19,"author":{"gitId":"ong-wei-hong"},"content":"    public static final Date DEFAULT_START \u003d Date.of(\"2020-01-01\");","lastModifiedDate":"2023-11-07"},{"lineNumber":20,"author":{"gitId":"ivyy-poison"},"content":"    public static final Date DEFAULT_END \u003d Date.of(\"2020-01-05\");","lastModifiedDate":"2023-11-08"},{"lineNumber":21,"author":{"gitId":"ong-wei-hong"},"content":"    public static final Date DEFAULT_START_2 \u003d Date.of(\"2020-01-03\");","lastModifiedDate":"2023-11-07"},{"lineNumber":22,"author":{"gitId":"ong-wei-hong"},"content":"    public static final Date DEFAULT_END_2 \u003d Date.of(\"2020-01-04\");","lastModifiedDate":"2023-11-07"},{"lineNumber":23,"author":{"gitId":"ryanozx"},"content":"    public static final Leave ALICE_LEAVE \u003d new Leave(ALICE, new Title(\"Alice\u0027s Maternity Leave\"),","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"ryanozx"},"content":"            Range.createNonNullRange(DEFAULT_START, DEFAULT_END),","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"ryanozx"},"content":"            new Description(\"Alice\u0027s Maternity Leave Description\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"ryanozx"},"content":"    public static final Leave BOB_LEAVE \u003d new Leave(BOB, new Title(\"Bob\u0027s Paternity Leave\"),","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"ryanozx"},"content":"            Range.createNonNullRange(DEFAULT_START, DEFAULT_END),","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"ryanozx"},"content":"            new Description(\"Bob\u0027s Paternity Leave Description\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"ryanozx"},"content":"    public static final Leave ALICE_LEAVE_2 \u003d new Leave(ALICE, new Title(\"Alice\u0027s Maternity Leave 2\"),","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"ryanozx"},"content":"            Range.createNonNullRange(DEFAULT_START_2, DEFAULT_END_2));","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"ryanozx"},"content":"    public static final Leave BENSON_LEAVE \u003d new Leave(BENSON, new Title(\"Benson\u0027s Paternity Leave\"),","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"ryanozx"},"content":"            Range.createNonNullRange(DEFAULT_START, DEFAULT_END),","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"ryanozx"},"content":"            new Description(\"Benson\u0027s Paternity Leave Description\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"ryanozx"},"content":"    public static final Leave BENSON_LEAVE_2 \u003d new Leave(BENSON, new Title(\"Benson\u0027s Paternity Leave 2\"),","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"ryanozx"},"content":"            Range.createNonNullRange(DEFAULT_START_2, DEFAULT_END_2));","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":37,"author":{"gitId":"ivyy-poison"},"content":"    private TypicalLeaves() {} // prevents instantiation","lastModifiedDate":"2023-10-23"},{"lineNumber":38,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":39,"author":{"gitId":"ivyy-poison"},"content":"    public static Leave[] getTypicalLeaves() {","lastModifiedDate":"2023-10-23"},{"lineNumber":40,"author":{"gitId":"ivyy-poison"},"content":"        return new Leave[] {ALICE_LEAVE, BENSON_LEAVE, ALICE_LEAVE_2};","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":42,"author":{"gitId":"ivyy-poison"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":43,"author":{"gitId":"ivyy-poison"},"content":"    public static LeavesBook getTypicalLeavesBook() {","lastModifiedDate":"2023-10-23"},{"lineNumber":44,"author":{"gitId":"ivyy-poison"},"content":"        LeavesBook lb \u003d new LeavesBook();","lastModifiedDate":"2023-10-23"},{"lineNumber":45,"author":{"gitId":"ivyy-poison"},"content":"        for (Leave leave : getTypicalLeaves()) {","lastModifiedDate":"2023-10-23"},{"lineNumber":46,"author":{"gitId":"ivyy-poison"},"content":"            lb.addLeave(leave);","lastModifiedDate":"2023-10-23"},{"lineNumber":47,"author":{"gitId":"ivyy-poison"},"content":"        }","lastModifiedDate":"2023-10-23"},{"lineNumber":48,"author":{"gitId":"ivyy-poison"},"content":"        return lb;","lastModifiedDate":"2023-10-23"},{"lineNumber":49,"author":{"gitId":"ivyy-poison"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":50,"author":{"gitId":"ivyy-poison"},"content":"}","lastModifiedDate":"2023-10-23"}],"authorContributionMap":{"ryanozx":17,"ivyy-poison":30,"ong-wei-hong":3}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-08-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-08-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            .withTags(\"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2017-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();","lastModifiedDate":"2018-03-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2018-01-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2018-01-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2018-01-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":50,"author":{"gitId":"jean-cq"},"content":"    public static final Person GEORGIA \u003d new PersonBuilder().withName(\"Georgia Best\").withPhone(\"9484442\")","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"jean-cq"},"content":"            .withEmail(\"georgia@example.com\").withAddress(\"4th street\").withTags(\"full time\").build();","lastModifiedDate":"2023-10-15"},{"lineNumber":52,"author":{"gitId":"jean-cq"},"content":"    public static final Person MICHAEL \u003d new PersonBuilder().withName(\"Michael Miller\").withPhone(\"9482242\")","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"jean-cq"},"content":"            .withEmail(\"michael@example.com\").withAddress(\"2th street\").withTags(\"full time\", \"remote\").build();","lastModifiedDate":"2023-10-15"},{"lineNumber":54,"author":{"gitId":"jean-cq"},"content":"    public static final Person DAVID \u003d new PersonBuilder().withName(\"David Chan\").withPhone(\"9484342\")","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"jean-cq"},"content":"            .withEmail(\"david@example.com\").withAddress(\"7th street\").withTags(\"part time\", \"remote\").build();","lastModifiedDate":"2023-10-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2017-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2017-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":79,"author":{"gitId":"jean-cq"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL,","lastModifiedDate":"2023-10-14"},{"lineNumber":80,"author":{"gitId":"jean-cq"},"content":"                ELLE, FIONA, GEORGE, GEORGIA, MICHAEL, DAVID));","lastModifiedDate":"2023-10-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"jean-cq":8,"-":74}}]
